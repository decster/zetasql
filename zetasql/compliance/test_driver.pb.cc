// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/compliance/test_driver.proto

#include "zetasql/compliance/test_driver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TestTableOptionsProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TestTableProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TypeAndValue;
}  // namespace protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto
namespace protobuf_zetasql_2fpublic_2fannotation_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2fannotation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AnnotationMapProto;
}  // namespace protobuf_zetasql_2fpublic_2fannotation_2eproto
namespace protobuf_zetasql_2fpublic_2ftype_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2ftype_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ArrayTypeProto;
}  // namespace protobuf_zetasql_2fpublic_2ftype_2eproto
namespace protobuf_zetasql_2fpublic_2fvalue_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zetasql_2fpublic_2fvalue_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ValueProto;
}  // namespace protobuf_zetasql_2fpublic_2fvalue_2eproto
namespace zetasql {
class TestDatabaseProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestDatabaseProto>
      _instance;
} _TestDatabaseProto_default_instance_;
class TestTableOptionsProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestTableOptionsProto>
      _instance;
} _TestTableOptionsProto_default_instance_;
class TestTableProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TestTableProto>
      _instance;
} _TestTableProto_default_instance_;
class TypeAndValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TypeAndValue>
      _instance;
} _TypeAndValue_default_instance_;
}  // namespace zetasql
namespace protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto {
static void InitDefaultsTestDatabaseProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_TestDatabaseProto_default_instance_;
    new (ptr) ::zetasql::TestDatabaseProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::TestDatabaseProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TestDatabaseProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTestDatabaseProto}, {
      &protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::scc_info_TestTableProto.base,}};

static void InitDefaultsTestTableOptionsProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_TestTableOptionsProto_default_instance_;
    new (ptr) ::zetasql::TestTableOptionsProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::TestTableOptionsProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TestTableOptionsProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTestTableOptionsProto}, {
      &protobuf_zetasql_2fpublic_2fannotation_2eproto::scc_info_AnnotationMapProto.base,}};

static void InitDefaultsTestTableProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_TestTableProto_default_instance_;
    new (ptr) ::zetasql::TestTableProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::TestTableProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TestTableProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTestTableProto}, {
      &protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::scc_info_TypeAndValue.base,
      &protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::scc_info_TestTableOptionsProto.base,}};

static void InitDefaultsTypeAndValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasql::_TypeAndValue_default_instance_;
    new (ptr) ::zetasql::TypeAndValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasql::TypeAndValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TypeAndValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTypeAndValue}, {
      &protobuf_zetasql_2fpublic_2fvalue_2eproto::scc_info_ValueProto.base,
      &protobuf_zetasql_2fpublic_2ftype_2eproto::scc_info_ArrayTypeProto.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TestDatabaseProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestTableOptionsProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TestTableProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TypeAndValue.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestDatabaseProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestDatabaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestDatabaseProto, proto_files_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestDatabaseProto, runs_as_test_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestDatabaseProto, proto_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestDatabaseProto, enum_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestDatabaseProto, test_tables_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableOptionsProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableOptionsProto, expected_table_size_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableOptionsProto, expected_table_size_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableOptionsProto, is_value_table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableOptionsProto, nullable_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableOptionsProto, required_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableOptionsProto, userid_column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableOptionsProto, column_annotations_),
  1,
  2,
  4,
  3,
  ~0u,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableProto, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableProto, contents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TestTableProto, options_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeAndValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeAndValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeAndValue, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zetasql::TypeAndValue, type_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::zetasql::TestDatabaseProto)},
  { 15, 27, sizeof(::zetasql::TestTableOptionsProto)},
  { 34, 42, sizeof(::zetasql::TestTableProto)},
  { 45, 52, sizeof(::zetasql::TypeAndValue)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_TestDatabaseProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_TestTableOptionsProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_TestTableProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zetasql::_TypeAndValue_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "zetasql/compliance/test_driver.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$zetasql/compliance/test_driver.proto\022\007"
      "zetasql\032\037zetasql/public/annotation.proto"
      "\032\034zetasql/public/options.proto\032\031zetasql/"
      "public/type.proto\032\032zetasql/public/value."
      "proto\"\225\001\n\021TestDatabaseProto\022\023\n\013proto_fil"
      "es\030\001 \003(\t\022\024\n\014runs_as_test\030\002 \001(\010\022\023\n\013proto_"
      "names\030\003 \003(\t\022\022\n\nenum_names\030\004 \003(\t\022,\n\013test_"
      "tables\030\005 \003(\0132\027.zetasql.TestTableProto\"\224\002"
      "\n\025TestTableOptionsProto\022\037\n\027expected_tabl"
      "e_size_min\030\001 \001(\003\022\037\n\027expected_table_size_"
      "max\030\002 \001(\003\022\026\n\016is_value_table\030\003 \001(\010\022\034\n\024nul"
      "lable_probability\030\004 \001(\001\0223\n\021required_feat"
      "ures\030\005 \003(\0162\030.zetasql.LanguageFeature\022\025\n\r"
      "userid_column\030\006 \001(\t\0227\n\022column_annotation"
      "s\030\007 \003(\0132\033.zetasql.AnnotationMapProto\"x\n\016"
      "TestTableProto\022\014\n\004name\030\001 \001(\t\022\'\n\010contents"
      "\030\002 \001(\0132\025.zetasql.TypeAndValue\022/\n\007options"
      "\030\003 \001(\0132\036.zetasql.TestTableOptionsProto\"T"
      "\n\014TypeAndValue\022\"\n\005value\030\001 \001(\0132\023.zetasql."
      "ValueProto\022 \n\004type\030\002 \001(\0132\022.zetasql.TypeP"
      "rotoB\026\n\022com.google.zetasqlP\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 828);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zetasql/compliance/test_driver.proto", &protobuf_RegisterTypes);
  ::protobuf_zetasql_2fpublic_2fannotation_2eproto::AddDescriptors();
  ::protobuf_zetasql_2fpublic_2foptions_2eproto::AddDescriptors();
  ::protobuf_zetasql_2fpublic_2ftype_2eproto::AddDescriptors();
  ::protobuf_zetasql_2fpublic_2fvalue_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto
namespace zetasql {

// ===================================================================

void TestDatabaseProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestDatabaseProto::kProtoFilesFieldNumber;
const int TestDatabaseProto::kRunsAsTestFieldNumber;
const int TestDatabaseProto::kProtoNamesFieldNumber;
const int TestDatabaseProto::kEnumNamesFieldNumber;
const int TestDatabaseProto::kTestTablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestDatabaseProto::TestDatabaseProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::scc_info_TestDatabaseProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.TestDatabaseProto)
}
TestDatabaseProto::TestDatabaseProto(const TestDatabaseProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      proto_files_(from.proto_files_),
      proto_names_(from.proto_names_),
      enum_names_(from.enum_names_),
      test_tables_(from.test_tables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  runs_as_test_ = from.runs_as_test_;
  // @@protoc_insertion_point(copy_constructor:zetasql.TestDatabaseProto)
}

void TestDatabaseProto::SharedCtor() {
  runs_as_test_ = false;
}

TestDatabaseProto::~TestDatabaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.TestDatabaseProto)
  SharedDtor();
}

void TestDatabaseProto::SharedDtor() {
}

void TestDatabaseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestDatabaseProto::descriptor() {
  ::protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestDatabaseProto& TestDatabaseProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::scc_info_TestDatabaseProto.base);
  return *internal_default_instance();
}


void TestDatabaseProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TestDatabaseProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proto_files_.Clear();
  proto_names_.Clear();
  enum_names_.Clear();
  test_tables_.Clear();
  runs_as_test_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestDatabaseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.TestDatabaseProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string proto_files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_proto_files()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto_files(this->proto_files_size() - 1).data(),
            static_cast<int>(this->proto_files(this->proto_files_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.TestDatabaseProto.proto_files");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool runs_as_test = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_runs_as_test();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &runs_as_test_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string proto_names = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_proto_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto_names(this->proto_names_size() - 1).data(),
            static_cast<int>(this->proto_names(this->proto_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.TestDatabaseProto.proto_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string enum_names = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_enum_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enum_names(this->enum_names_size() - 1).data(),
            static_cast<int>(this->enum_names(this->enum_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.TestDatabaseProto.enum_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zetasql.TestTableProto test_tables = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_test_tables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.TestDatabaseProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.TestDatabaseProto)
  return false;
#undef DO_
}

void TestDatabaseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.TestDatabaseProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string proto_files = 1;
  for (int i = 0, n = this->proto_files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_files(i).data(), static_cast<int>(this->proto_files(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.TestDatabaseProto.proto_files");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->proto_files(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool runs_as_test = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->runs_as_test(), output);
  }

  // repeated string proto_names = 3;
  for (int i = 0, n = this->proto_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_names(i).data(), static_cast<int>(this->proto_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.TestDatabaseProto.proto_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->proto_names(i), output);
  }

  // repeated string enum_names = 4;
  for (int i = 0, n = this->enum_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enum_names(i).data(), static_cast<int>(this->enum_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.TestDatabaseProto.enum_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->enum_names(i), output);
  }

  // repeated .zetasql.TestTableProto test_tables = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->test_tables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->test_tables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.TestDatabaseProto)
}

::google::protobuf::uint8* TestDatabaseProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TestDatabaseProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string proto_files = 1;
  for (int i = 0, n = this->proto_files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_files(i).data(), static_cast<int>(this->proto_files(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.TestDatabaseProto.proto_files");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->proto_files(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool runs_as_test = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->runs_as_test(), target);
  }

  // repeated string proto_names = 3;
  for (int i = 0, n = this->proto_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto_names(i).data(), static_cast<int>(this->proto_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.TestDatabaseProto.proto_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->proto_names(i), target);
  }

  // repeated string enum_names = 4;
  for (int i = 0, n = this->enum_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enum_names(i).data(), static_cast<int>(this->enum_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.TestDatabaseProto.enum_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->enum_names(i), target);
  }

  // repeated .zetasql.TestTableProto test_tables = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->test_tables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->test_tables(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TestDatabaseProto)
  return target;
}

size_t TestDatabaseProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TestDatabaseProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string proto_files = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->proto_files_size());
  for (int i = 0, n = this->proto_files_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->proto_files(i));
  }

  // repeated string proto_names = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->proto_names_size());
  for (int i = 0, n = this->proto_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->proto_names(i));
  }

  // repeated string enum_names = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->enum_names_size());
  for (int i = 0, n = this->enum_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->enum_names(i));
  }

  // repeated .zetasql.TestTableProto test_tables = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->test_tables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->test_tables(static_cast<int>(i)));
    }
  }

  // optional bool runs_as_test = 2;
  if (has_runs_as_test()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestDatabaseProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.TestDatabaseProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TestDatabaseProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestDatabaseProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.TestDatabaseProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.TestDatabaseProto)
    MergeFrom(*source);
  }
}

void TestDatabaseProto::MergeFrom(const TestDatabaseProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TestDatabaseProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proto_files_.MergeFrom(from.proto_files_);
  proto_names_.MergeFrom(from.proto_names_);
  enum_names_.MergeFrom(from.enum_names_);
  test_tables_.MergeFrom(from.test_tables_);
  if (from.has_runs_as_test()) {
    set_runs_as_test(from.runs_as_test());
  }
}

void TestDatabaseProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.TestDatabaseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestDatabaseProto::CopyFrom(const TestDatabaseProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TestDatabaseProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDatabaseProto::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->test_tables())) return false;
  return true;
}

void TestDatabaseProto::Swap(TestDatabaseProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestDatabaseProto::InternalSwap(TestDatabaseProto* other) {
  using std::swap;
  proto_files_.InternalSwap(CastToBase(&other->proto_files_));
  proto_names_.InternalSwap(CastToBase(&other->proto_names_));
  enum_names_.InternalSwap(CastToBase(&other->enum_names_));
  CastToBase(&test_tables_)->InternalSwap(CastToBase(&other->test_tables_));
  swap(runs_as_test_, other->runs_as_test_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestDatabaseProto::GetMetadata() const {
  protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestTableOptionsProto::InitAsDefaultInstance() {
}
void TestTableOptionsProto::clear_column_annotations() {
  column_annotations_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestTableOptionsProto::kExpectedTableSizeMinFieldNumber;
const int TestTableOptionsProto::kExpectedTableSizeMaxFieldNumber;
const int TestTableOptionsProto::kIsValueTableFieldNumber;
const int TestTableOptionsProto::kNullableProbabilityFieldNumber;
const int TestTableOptionsProto::kRequiredFeaturesFieldNumber;
const int TestTableOptionsProto::kUseridColumnFieldNumber;
const int TestTableOptionsProto::kColumnAnnotationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestTableOptionsProto::TestTableOptionsProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::scc_info_TestTableOptionsProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.TestTableOptionsProto)
}
TestTableOptionsProto::TestTableOptionsProto(const TestTableOptionsProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      required_features_(from.required_features_),
      column_annotations_(from.column_annotations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_column_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid_column()) {
    userid_column_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_column_);
  }
  ::memcpy(&expected_table_size_min_, &from.expected_table_size_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_value_table_) -
    reinterpret_cast<char*>(&expected_table_size_min_)) + sizeof(is_value_table_));
  // @@protoc_insertion_point(copy_constructor:zetasql.TestTableOptionsProto)
}

void TestTableOptionsProto::SharedCtor() {
  userid_column_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expected_table_size_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_value_table_) -
      reinterpret_cast<char*>(&expected_table_size_min_)) + sizeof(is_value_table_));
}

TestTableOptionsProto::~TestTableOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.TestTableOptionsProto)
  SharedDtor();
}

void TestTableOptionsProto::SharedDtor() {
  userid_column_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TestTableOptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestTableOptionsProto::descriptor() {
  ::protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestTableOptionsProto& TestTableOptionsProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::scc_info_TestTableOptionsProto.base);
  return *internal_default_instance();
}


void TestTableOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TestTableOptionsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_features_.Clear();
  column_annotations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    userid_column_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&expected_table_size_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_value_table_) -
        reinterpret_cast<char*>(&expected_table_size_min_)) + sizeof(is_value_table_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestTableOptionsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.TestTableOptionsProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 expected_table_size_min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_expected_table_size_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expected_table_size_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expected_table_size_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_expected_table_size_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expected_table_size_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_value_table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_value_table();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_value_table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double nullable_probability = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_nullable_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nullable_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zetasql.LanguageFeature required_features = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zetasql::LanguageFeature_IsValid(value)) {
            add_required_features(static_cast< ::zetasql::LanguageFeature >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 5,
                 ::zetasql::LanguageFeature_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_required_features())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string userid_column = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid_column()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid_column().data(), static_cast<int>(this->userid_column().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.TestTableOptionsProto.userid_column");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zetasql.AnnotationMapProto column_annotations = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_column_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.TestTableOptionsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.TestTableOptionsProto)
  return false;
#undef DO_
}

void TestTableOptionsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.TestTableOptionsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 expected_table_size_min = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->expected_table_size_min(), output);
  }

  // optional int64 expected_table_size_max = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->expected_table_size_max(), output);
  }

  // optional bool is_value_table = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_value_table(), output);
  }

  // optional double nullable_probability = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->nullable_probability(), output);
  }

  // repeated .zetasql.LanguageFeature required_features = 5;
  for (int i = 0, n = this->required_features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->required_features(i), output);
  }

  // optional string userid_column = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid_column().data(), static_cast<int>(this->userid_column().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.TestTableOptionsProto.userid_column");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->userid_column(), output);
  }

  // repeated .zetasql.AnnotationMapProto column_annotations = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->column_annotations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->column_annotations(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.TestTableOptionsProto)
}

::google::protobuf::uint8* TestTableOptionsProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TestTableOptionsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 expected_table_size_min = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->expected_table_size_min(), target);
  }

  // optional int64 expected_table_size_max = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->expected_table_size_max(), target);
  }

  // optional bool is_value_table = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_value_table(), target);
  }

  // optional double nullable_probability = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->nullable_probability(), target);
  }

  // repeated .zetasql.LanguageFeature required_features = 5;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    5, this->required_features_, target);

  // optional string userid_column = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid_column().data(), static_cast<int>(this->userid_column().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.TestTableOptionsProto.userid_column");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userid_column(), target);
  }

  // repeated .zetasql.AnnotationMapProto column_annotations = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->column_annotations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->column_annotations(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TestTableOptionsProto)
  return target;
}

size_t TestTableOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TestTableOptionsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .zetasql.LanguageFeature required_features = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->required_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->required_features(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .zetasql.AnnotationMapProto column_annotations = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->column_annotations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->column_annotations(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string userid_column = 6;
    if (has_userid_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid_column());
    }

    // optional int64 expected_table_size_min = 1;
    if (has_expected_table_size_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expected_table_size_min());
    }

    // optional int64 expected_table_size_max = 2;
    if (has_expected_table_size_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expected_table_size_max());
    }

    // optional double nullable_probability = 4;
    if (has_nullable_probability()) {
      total_size += 1 + 8;
    }

    // optional bool is_value_table = 3;
    if (has_is_value_table()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestTableOptionsProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.TestTableOptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TestTableOptionsProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestTableOptionsProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.TestTableOptionsProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.TestTableOptionsProto)
    MergeFrom(*source);
  }
}

void TestTableOptionsProto::MergeFrom(const TestTableOptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TestTableOptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  required_features_.MergeFrom(from.required_features_);
  column_annotations_.MergeFrom(from.column_annotations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_userid_column();
      userid_column_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_column_);
    }
    if (cached_has_bits & 0x00000002u) {
      expected_table_size_min_ = from.expected_table_size_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      expected_table_size_max_ = from.expected_table_size_max_;
    }
    if (cached_has_bits & 0x00000008u) {
      nullable_probability_ = from.nullable_probability_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_value_table_ = from.is_value_table_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestTableOptionsProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.TestTableOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestTableOptionsProto::CopyFrom(const TestTableOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TestTableOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestTableOptionsProto::IsInitialized() const {
  return true;
}

void TestTableOptionsProto::Swap(TestTableOptionsProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestTableOptionsProto::InternalSwap(TestTableOptionsProto* other) {
  using std::swap;
  required_features_.InternalSwap(&other->required_features_);
  CastToBase(&column_annotations_)->InternalSwap(CastToBase(&other->column_annotations_));
  userid_column_.Swap(&other->userid_column_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expected_table_size_min_, other->expected_table_size_min_);
  swap(expected_table_size_max_, other->expected_table_size_max_);
  swap(nullable_probability_, other->nullable_probability_);
  swap(is_value_table_, other->is_value_table_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestTableOptionsProto::GetMetadata() const {
  protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TestTableProto::InitAsDefaultInstance() {
  ::zetasql::_TestTableProto_default_instance_._instance.get_mutable()->contents_ = const_cast< ::zetasql::TypeAndValue*>(
      ::zetasql::TypeAndValue::internal_default_instance());
  ::zetasql::_TestTableProto_default_instance_._instance.get_mutable()->options_ = const_cast< ::zetasql::TestTableOptionsProto*>(
      ::zetasql::TestTableOptionsProto::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestTableProto::kNameFieldNumber;
const int TestTableProto::kContentsFieldNumber;
const int TestTableProto::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestTableProto::TestTableProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::scc_info_TestTableProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.TestTableProto)
}
TestTableProto::TestTableProto(const TestTableProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_contents()) {
    contents_ = new ::zetasql::TypeAndValue(*from.contents_);
  } else {
    contents_ = NULL;
  }
  if (from.has_options()) {
    options_ = new ::zetasql::TestTableOptionsProto(*from.options_);
  } else {
    options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.TestTableProto)
}

void TestTableProto::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&contents_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&contents_)) + sizeof(options_));
}

TestTableProto::~TestTableProto() {
  // @@protoc_insertion_point(destructor:zetasql.TestTableProto)
  SharedDtor();
}

void TestTableProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete contents_;
  if (this != internal_default_instance()) delete options_;
}

void TestTableProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TestTableProto::descriptor() {
  ::protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TestTableProto& TestTableProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::scc_info_TestTableProto.base);
  return *internal_default_instance();
}


void TestTableProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TestTableProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(contents_ != NULL);
      contents_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(options_ != NULL);
      options_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TestTableProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.TestTableProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zetasql.TestTableProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zetasql.TypeAndValue contents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_contents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zetasql.TestTableOptionsProto options = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.TestTableProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.TestTableProto)
  return false;
#undef DO_
}

void TestTableProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.TestTableProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.TestTableProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .zetasql.TypeAndValue contents = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_contents(), output);
  }

  // optional .zetasql.TestTableOptionsProto options = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_options(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.TestTableProto)
}

::google::protobuf::uint8* TestTableProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TestTableProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zetasql.TestTableProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .zetasql.TypeAndValue contents = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_contents(), deterministic, target);
  }

  // optional .zetasql.TestTableOptionsProto options = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_options(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TestTableProto)
  return target;
}

size_t TestTableProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TestTableProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .zetasql.TypeAndValue contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *contents_);
    }

    // optional .zetasql.TestTableOptionsProto options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *options_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestTableProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.TestTableProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TestTableProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestTableProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.TestTableProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.TestTableProto)
    MergeFrom(*source);
  }
}

void TestTableProto::MergeFrom(const TestTableProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TestTableProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_contents()->::zetasql::TypeAndValue::MergeFrom(from.contents());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_options()->::zetasql::TestTableOptionsProto::MergeFrom(from.options());
    }
  }
}

void TestTableProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.TestTableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestTableProto::CopyFrom(const TestTableProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TestTableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestTableProto::IsInitialized() const {
  if (has_contents()) {
    if (!this->contents_->IsInitialized()) return false;
  }
  return true;
}

void TestTableProto::Swap(TestTableProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestTableProto::InternalSwap(TestTableProto* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(contents_, other->contents_);
  swap(options_, other->options_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TestTableProto::GetMetadata() const {
  protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TypeAndValue::InitAsDefaultInstance() {
  ::zetasql::_TypeAndValue_default_instance_._instance.get_mutable()->value_ = const_cast< ::zetasql::ValueProto*>(
      ::zetasql::ValueProto::internal_default_instance());
  ::zetasql::_TypeAndValue_default_instance_._instance.get_mutable()->type_ = const_cast< ::zetasql::TypeProto*>(
      ::zetasql::TypeProto::internal_default_instance());
}
void TypeAndValue::clear_value() {
  if (value_ != NULL) value_->Clear();
  clear_has_value();
}
void TypeAndValue::clear_type() {
  if (type_ != NULL) type_->Clear();
  clear_has_type();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeAndValue::kValueFieldNumber;
const int TypeAndValue::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeAndValue::TypeAndValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::scc_info_TypeAndValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasql.TypeAndValue)
}
TypeAndValue::TypeAndValue(const TypeAndValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::zetasql::ValueProto(*from.value_);
  } else {
    value_ = NULL;
  }
  if (from.has_type()) {
    type_ = new ::zetasql::TypeProto(*from.type_);
  } else {
    type_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.TypeAndValue)
}

void TypeAndValue::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(type_));
}

TypeAndValue::~TypeAndValue() {
  // @@protoc_insertion_point(destructor:zetasql.TypeAndValue)
  SharedDtor();
}

void TypeAndValue::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete type_;
}

void TypeAndValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TypeAndValue::descriptor() {
  ::protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TypeAndValue& TypeAndValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::scc_info_TypeAndValue.base);
  return *internal_default_instance();
}


void TypeAndValue::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TypeAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(value_ != NULL);
      value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(type_ != NULL);
      type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TypeAndValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zetasql.TypeAndValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zetasql.ValueProto value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zetasql.TypeProto type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasql.TypeAndValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasql.TypeAndValue)
  return false;
#undef DO_
}

void TypeAndValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasql.TypeAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.ValueProto value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_value(), output);
  }

  // optional .zetasql.TypeProto type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zetasql.TypeAndValue)
}

::google::protobuf::uint8* TypeAndValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TypeAndValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.ValueProto value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_value(), deterministic, target);
  }

  // optional .zetasql.TypeProto type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_type(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TypeAndValue)
  return target;
}

size_t TypeAndValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TypeAndValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .zetasql.ValueProto value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional .zetasql.TypeProto type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypeAndValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zetasql.TypeAndValue)
  GOOGLE_DCHECK_NE(&from, this);
  const TypeAndValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TypeAndValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zetasql.TypeAndValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zetasql.TypeAndValue)
    MergeFrom(*source);
  }
}

void TypeAndValue::MergeFrom(const TypeAndValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TypeAndValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_value()->::zetasql::ValueProto::MergeFrom(from.value());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_type()->::zetasql::TypeProto::MergeFrom(from.type());
    }
  }
}

void TypeAndValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zetasql.TypeAndValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeAndValue::CopyFrom(const TypeAndValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TypeAndValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeAndValue::IsInitialized() const {
  if (has_type()) {
    if (!this->type_->IsInitialized()) return false;
  }
  return true;
}

void TypeAndValue::Swap(TypeAndValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypeAndValue::InternalSwap(TypeAndValue* other) {
  using std::swap;
  swap(value_, other->value_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TypeAndValue::GetMetadata() const {
  protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zetasql_2fcompliance_2ftest_5fdriver_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::TestDatabaseProto* Arena::CreateMaybeMessage< ::zetasql::TestDatabaseProto >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::TestDatabaseProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::TestTableOptionsProto* Arena::CreateMaybeMessage< ::zetasql::TestTableOptionsProto >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::TestTableOptionsProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::TestTableProto* Arena::CreateMaybeMessage< ::zetasql::TestTableProto >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::TestTableProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zetasql::TypeAndValue* Arena::CreateMaybeMessage< ::zetasql::TypeAndValue >(Arena* arena) {
  return Arena::CreateInternal< ::zetasql::TypeAndValue >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
