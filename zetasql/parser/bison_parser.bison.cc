// A Bison parser, made by GNU Bison 3.6.2.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015, 2018-2020 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.

// DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
// especially those whose name start with YY_ or yy_.  They are
// private implementation details that can be changed or removed.


// Take the name prefix into account.
#define yylex   zetasql_bison_parserlex



#include "bison_parser.bison.h"


// Unqualified %code blocks.
#line 638 "zetasql/parser/bison_parser.y"


inline int zetasql_bison_parserlex(
    zetasql_bison_parser::BisonParserImpl::semantic_type* yylval,
    zetasql_bison_parser::location* yylloc,
    zetasql::parser::ZetaSqlFlexTokenizer* tokenizer) {
  ZETASQL_DCHECK(tokenizer != nullptr);
  return tokenizer->GetNextTokenFlex(yylloc);
}

// Generates a parse error with message 'msg' (which must be a string
// expression) at bison location 'location', and aborts the parser.
#define YYERROR_AND_ABORT_AT(location, msg) \
    do { \
      error(location, (msg)); \
      YYABORT; \
    } while (0)

// Generates a parse error of the form "Unexpected X", where X is a description
// of the current token, at bison location 'location', and aborts the parser.
#define YYERROR_UNEXPECTED_AND_ABORT_AT(location) \
    do { \
      error(location, ""); \
      YYABORT; \
    } while (0)

#define CHECK_LABEL_SUPPORT(node, location) \
    if (node != nullptr \
        && (parser->language_options() == nullptr \
            || !parser->language_options()->LanguageFeatureEnabled( \
                    zetasql::FEATURE_V_1_3_SCRIPT_LABEL))) { \
      YYERROR_AND_ABORT_AT(location, "Script labels are not supported"); \
    }

#define CHECK_END_LABEL_VALID( \
  label_node, label_location, end_label_node, end_label_location) \
    if (end_label_node != nullptr \
        && !end_label_node->GetAsIdString().CaseEquals( \
              label_node->GetAsIdString())) { \
      YYERROR_AND_ABORT_AT(end_label_location, \
          absl::StrCat("Mismatched end label; expected ", \
              label_node->GetAsStringView(), ", got ", \
              end_label_node->GetAsStringView())); \
    } \

// Adds 'children' to 'node' and then returns 'node'.
template <typename ASTNodeType>
ASTNodeType* WithExtraChildren(
    ASTNodeType* node,
    absl::Span<zetasql::ASTNode* const> children) {
  for (zetasql::ASTNode* child : children) {
    if (child != nullptr) {
      node->AddChild(child);
    }
  }
  return node;
}

// Returns the first location in 'locations' that is not empty. If none of the
// locations are nonempty, returns the first location.
static zetasql_bison_parser::location FirstNonEmptyLocation(
    absl::Span<const zetasql_bison_parser::location> locations) {
  for (const zetasql_bison_parser::location& location : locations) {
    if (location.begin.column != location.end.column) {
      return location;
    }
  }
  return locations[0];
}

static bool IsUnparenthesizedNotExpression(zetasql::ASTNode* node) {
  using zetasql::ASTUnaryExpression;
  const ASTUnaryExpression* expr =
      node->GetAsOrNull<ASTUnaryExpression>();
  return expr != nullptr && !expr->parenthesized() &&
         expr->op() == ASTUnaryExpression::NOT;
}

using zetasql::ASTInsertStatement;
using zetasql::ASTCreateFunctionStmtBase;
using zetasql::ASTDropStatement;


#line 132 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif


// Whether we are compiled with exception support.
#ifndef YY_EXCEPTIONS
# if defined __GNUC__ && !defined __EXCEPTIONS
#  define YY_EXCEPTIONS 0
# else
#  define YY_EXCEPTIONS 1
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (false)
# endif


// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << '\n';                       \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yy_stack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YYUSE (Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void> (0)
# define YY_STACK_PRINT()                static_cast<void> (0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)

namespace zetasql_bison_parser {
#line 224 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"

  /// Build a parser object.
  BisonParserImpl::BisonParserImpl (zetasql::parser::ZetaSqlFlexTokenizer* tokenizer_yyarg, zetasql::parser::BisonParser* parser_yyarg, zetasql::ASTNode** ast_node_result_yyarg, zetasql::parser::ASTStatementProperties*
                  ast_statement_properties_yyarg, std::string* error_message_yyarg, zetasql::ParseLocationPoint* error_location_yyarg, bool* move_error_location_past_whitespace_yyarg, int* statement_end_byte_offset_yyarg)
#if YYDEBUG
    : yydebug_ (false),
      yycdebug_ (&std::cerr),
#else
    :
#endif
      tokenizer (tokenizer_yyarg),
      parser (parser_yyarg),
      ast_node_result (ast_node_result_yyarg),
      ast_statement_properties (ast_statement_properties_yyarg),
      error_message (error_message_yyarg),
      error_location (error_location_yyarg),
      move_error_location_past_whitespace (move_error_location_past_whitespace_yyarg),
      statement_end_byte_offset (statement_end_byte_offset_yyarg)
  {}

  BisonParserImpl::~BisonParserImpl ()
  {}

  BisonParserImpl::syntax_error::~syntax_error () YY_NOEXCEPT YY_NOTHROW
  {}

  /*---------------.
  | symbol kinds.  |
  `---------------*/

  // basic_symbol.
  template <typename Base>
  BisonParserImpl::basic_symbol<Base>::basic_symbol (const basic_symbol& that)
    : Base (that)
    , value (that.value)
    , location (that.location)
  {}


  /// Constructor for valueless symbols.
  template <typename Base>
  BisonParserImpl::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, YY_MOVE_REF (location_type) l)
    : Base (t)
    , value ()
    , location (l)
  {}

  template <typename Base>
  BisonParserImpl::basic_symbol<Base>::basic_symbol (typename Base::kind_type t, YY_RVREF (semantic_type) v, YY_RVREF (location_type) l)
    : Base (t)
    , value (YY_MOVE (v))
    , location (YY_MOVE (l))
  {}

  template <typename Base>
  BisonParserImpl::symbol_kind_type
  BisonParserImpl::basic_symbol<Base>::type_get () const YY_NOEXCEPT
  {
    return this->kind ();
  }

  template <typename Base>
  bool
  BisonParserImpl::basic_symbol<Base>::empty () const YY_NOEXCEPT
  {
    return this->kind () == symbol_kind::S_YYEMPTY;
  }

  template <typename Base>
  void
  BisonParserImpl::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move (s);
    value = YY_MOVE (s.value);
    location = YY_MOVE (s.location);
  }

  // by_kind.
  BisonParserImpl::by_kind::by_kind ()
    : kind_ (symbol_kind::S_YYEMPTY)
  {}

#if 201103L <= YY_CPLUSPLUS
  BisonParserImpl::by_kind::by_kind (by_kind&& that)
    : kind_ (that.kind_)
  {
    that.clear ();
  }
#endif

  BisonParserImpl::by_kind::by_kind (const by_kind& that)
    : kind_ (that.kind_)
  {}

  BisonParserImpl::by_kind::by_kind (token_kind_type t)
    : kind_ (yytranslate_ (t))
  {}

  void
  BisonParserImpl::by_kind::clear ()
  {
    kind_ = symbol_kind::S_YYEMPTY;
  }

  void
  BisonParserImpl::by_kind::move (by_kind& that)
  {
    kind_ = that.kind_;
    that.clear ();
  }

  BisonParserImpl::symbol_kind_type
  BisonParserImpl::by_kind::kind () const YY_NOEXCEPT
  {
    return kind_;
  }

  BisonParserImpl::symbol_kind_type
  BisonParserImpl::by_kind::type_get () const YY_NOEXCEPT
  {
    return this->kind ();
  }


  // by_state.
  BisonParserImpl::by_state::by_state () YY_NOEXCEPT
    : state (empty_state)
  {}

  BisonParserImpl::by_state::by_state (const by_state& that) YY_NOEXCEPT
    : state (that.state)
  {}

  void
  BisonParserImpl::by_state::clear () YY_NOEXCEPT
  {
    state = empty_state;
  }

  void
  BisonParserImpl::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  BisonParserImpl::by_state::by_state (state_type s) YY_NOEXCEPT
    : state (s)
  {}

  BisonParserImpl::symbol_kind_type
  BisonParserImpl::by_state::kind () const YY_NOEXCEPT
  {
    if (state == empty_state)
      return symbol_kind::S_YYEMPTY;
    else
      return YY_CAST (symbol_kind_type, yystos_[+state]);
  }

  BisonParserImpl::stack_symbol_type::stack_symbol_type ()
  {}

  BisonParserImpl::stack_symbol_type::stack_symbol_type (YY_RVREF (stack_symbol_type) that)
    : super_type (YY_MOVE (that.state), YY_MOVE (that.value), YY_MOVE (that.location))
  {
#if 201103L <= YY_CPLUSPLUS
    // that is emptied.
    that.state = empty_state;
#endif
  }

  BisonParserImpl::stack_symbol_type::stack_symbol_type (state_type s, YY_MOVE_REF (symbol_type) that)
    : super_type (s, YY_MOVE (that.value), YY_MOVE (that.location))
  {
    // that is emptied.
    that.kind_ = symbol_kind::S_YYEMPTY;
  }

#if YY_CPLUSPLUS < 201103L
  BisonParserImpl::stack_symbol_type&
  BisonParserImpl::stack_symbol_type::operator= (const stack_symbol_type& that)
  {
    state = that.state;
    value = that.value;
    location = that.location;
    return *this;
  }

  BisonParserImpl::stack_symbol_type&
  BisonParserImpl::stack_symbol_type::operator= (stack_symbol_type& that)
  {
    state = that.state;
    value = that.value;
    location = that.location;
    // that is emptied.
    that.state = empty_state;
    return *this;
  }
#endif

  template <typename Base>
  void
  BisonParserImpl::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);

    // User destructor.
    YYUSE (yysym.kind ());
  }

#if YYDEBUG
  template <typename Base>
  void
  BisonParserImpl::yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YYUSE (yyoutput);
    if (yysym.empty ())
      yyo << "empty symbol";
    else
      {
        symbol_kind_type yykind = yysym.kind ();
        yyo << (yykind < YYNTOKENS ? "token" : "nterm")
            << ' ' << yysym.name () << " ("
            << yysym.location << ": ";
        YYUSE (yykind);
        yyo << ')';
      }
  }
#endif

  void
  BisonParserImpl::yypush_ (const char* m, YY_MOVE_REF (stack_symbol_type) sym)
  {
    if (m)
      YY_SYMBOL_PRINT (m, sym);
    yystack_.push (YY_MOVE (sym));
  }

  void
  BisonParserImpl::yypush_ (const char* m, state_type s, YY_MOVE_REF (symbol_type) sym)
  {
#if 201103L <= YY_CPLUSPLUS
    yypush_ (m, stack_symbol_type (s, std::move (sym)));
#else
    stack_symbol_type ss (s, sym);
    yypush_ (m, ss);
#endif
  }

  void
  BisonParserImpl::yypop_ (int n)
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  BisonParserImpl::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  BisonParserImpl::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  BisonParserImpl::debug_level_type
  BisonParserImpl::debug_level () const
  {
    return yydebug_;
  }

  void
  BisonParserImpl::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  BisonParserImpl::state_type
  BisonParserImpl::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - YYNTOKENS] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - YYNTOKENS];
  }

  bool
  BisonParserImpl::yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  bool
  BisonParserImpl::yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  int
  BisonParserImpl::operator() ()
  {
    return parse ();
  }

  int
  BisonParserImpl::parse ()
  {
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

#if YY_EXCEPTIONS
    try
#endif // YY_EXCEPTIONS
      {
    YYCDEBUG << "Starting parse\n";


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, YY_MOVE (yyla));

  /*-----------------------------------------------.
  | yynewstate -- push a new symbol on the stack.  |
  `-----------------------------------------------*/
  yynewstate:
    YYCDEBUG << "Entering state " << int (yystack_[0].state) << '\n';
    YY_STACK_PRINT ();

    // Accept?
    if (yystack_[0].state == yyfinal_)
      YYACCEPT;

    goto yybackup;


  /*-----------.
  | yybackup.  |
  `-----------*/
  yybackup:
    // Try to take a decision without lookahead.
    yyn = yypact_[+yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token\n";
#if YY_EXCEPTIONS
        try
#endif // YY_EXCEPTIONS
          {
            yyla.kind_ = yytranslate_ (yylex (&yyla.value, &yyla.location, tokenizer));
          }
#if YY_EXCEPTIONS
        catch (const syntax_error& yyexc)
          {
            YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
            error (yyexc);
            goto yyerrlab1;
          }
#endif // YY_EXCEPTIONS
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    if (yyla.kind () == symbol_kind::S_YYerror)
    {
      // The scanner already issued an error message, process directly
      // to error recovery.  But do not keep the error token as
      // lookahead, it is too special and may lead us to an endless
      // loop in error recovery. */
      yyla.kind_ = symbol_kind::S_YYUNDEF;
      goto yyerrlab1;
    }

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.kind ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.kind ())
      {
        goto yydefault;
      }

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", state_type (yyn), YY_MOVE (yyla));
    goto yynewstate;


  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[+yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;


  /*-----------------------------.
  | yyreduce -- do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_ (yystack_[yylen].state, yyr1_[yyn]);
      /* If YYLEN is nonzero, implement the default value of the
         action: '$$ = $1'.  Otherwise, use the top of the stack.

         Otherwise, the following line sets YYLHS.VALUE to garbage.
         This behavior is undocumented and Bison users should not rely
         upon it.  */
      if (yylen)
        yylhs.value = yystack_[yylen - 1].value;
      else
        yylhs.value = yystack_[0].value;

      // Default location.
      {
        stack_type::slice range (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, range, yylen);
        yyerror_range[1].location = yylhs.location;
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
#if YY_EXCEPTIONS
      try
#endif // YY_EXCEPTIONS
        {
          switch (yyn)
            {
  case 2:
#line 1549 "zetasql/parser/bison_parser.y"
                                 { *ast_node_result = (yystack_[0].value.node); }
#line 699 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 3:
#line 1550 "zetasql/parser/bison_parser.y"
                         { *ast_node_result = (yystack_[0].value.node); }
#line 705 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 4:
#line 1551 "zetasql/parser/bison_parser.y"
                                         { *ast_node_result = (yystack_[0].value.node); }
#line 711 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 5:
#line 1552 "zetasql/parser/bison_parser.y"
                                                       { *ast_node_result = (yystack_[0].value.node); }
#line 717 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 6:
#line 1554 "zetasql/parser/bison_parser.y"
      { ast_statement_properties->node_kind = (yystack_[0].value.ast_node_kind); }
#line 723 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 7:
#line 1555 "zetasql/parser/bison_parser.y"
                                 { *ast_node_result = (yystack_[0].value.expression); }
#line 729 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 8:
#line 1556 "zetasql/parser/bison_parser.y"
                     { *ast_node_result = (yystack_[0].value.node); }
#line 735 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 11:
#line 1564 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[1].value.node);
      }
#line 743 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 12:
#line 1571 "zetasql/parser/bison_parser.y"
      {
        // The semicolon marks the end of the statement.
        tokenizer->SetForceTerminate();
        *statement_end_byte_offset = yystack_[0].location.end.column;
        (yylhs.value.node) = (yystack_[1].value.node);
      }
#line 754 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 13:
#line 1578 "zetasql/parser/bison_parser.y"
      {
        // There's no semicolon. That means we have to be at EOF.
        *statement_end_byte_offset = -1;
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 764 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 14:
#line 1587 "zetasql/parser/bison_parser.y"
      {
        // The semicolon marks the end of the statement.
        tokenizer->SetForceTerminate();
        *statement_end_byte_offset = yystack_[0].location.end.column;
        (yylhs.value.node) = (yystack_[1].value.node);
      }
#line 775 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 15:
#line 1594 "zetasql/parser/bison_parser.y"
      {
        // There's no semicolon. That means we have to be at EOF.
        *statement_end_byte_offset = -1;
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 785 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 16:
#line 1602 "zetasql/parser/bison_parser.y"
  { (yylhs.value.node) = (yystack_[0].value.node); }
#line 791 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 17:
#line 1603 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 797 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 18:
#line 1607 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 803 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 19:
#line 1609 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHintedStatement, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 811 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 20:
#line 1615 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 817 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 21:
#line 1616 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 823 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 22:
#line 1617 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 829 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 23:
#line 1618 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 835 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 24:
#line 1619 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 841 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 25:
#line 1620 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 847 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 26:
#line 1621 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 853 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 27:
#line 1622 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 859 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 28:
#line 1623 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 865 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 29:
#line 1624 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 871 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 30:
#line 1625 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 877 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 31:
#line 1626 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 883 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 32:
#line 1631 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[1].value.node);
      }
#line 891 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 33:
#line 1637 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 897 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 34:
#line 1638 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 903 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 35:
#line 1639 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 909 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 36:
#line 1640 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 915 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 37:
#line 1641 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 921 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 38:
#line 1642 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 927 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 39:
#line 1643 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 933 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 40:
#line 1644 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 939 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 41:
#line 1645 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 945 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 42:
#line 1646 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 951 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 43:
#line 1647 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 957 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 44:
#line 1648 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 963 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 45:
#line 1649 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 969 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 46:
#line 1650 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 975 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 47:
#line 1651 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 981 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 48:
#line 1652 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 987 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 49:
#line 1653 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 993 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 50:
#line 1654 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 999 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 51:
#line 1655 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1005 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 52:
#line 1656 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1011 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 53:
#line 1657 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1017 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 54:
#line 1658 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1023 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 55:
#line 1659 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1029 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 56:
#line 1660 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1035 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 57:
#line 1661 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1041 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 58:
#line 1662 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1047 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 59:
#line 1663 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1053 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 60:
#line 1664 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1059 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 61:
#line 1665 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1065 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 62:
#line 1666 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1071 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 63:
#line 1667 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1077 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 64:
#line 1668 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1083 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 65:
#line 1669 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1089 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 66:
#line 1670 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1095 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 67:
#line 1671 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1101 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 68:
#line 1672 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1107 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 69:
#line 1673 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1113 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 70:
#line 1674 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1119 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 71:
#line 1675 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1125 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 72:
#line 1676 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1131 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 73:
#line 1677 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1137 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 74:
#line 1678 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1143 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 75:
#line 1679 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1149 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 76:
#line 1680 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1155 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 77:
#line 1681 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1161 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 78:
#line 1682 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1167 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 79:
#line 1683 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1173 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 80:
#line 1688 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTQueryStatement, yylhs.location, {(yystack_[0].value.query)});
      }
#line 1181 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 81:
#line 1695 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSetOptionsAction, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1189 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 82:
#line 1700 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSetAsAction, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1197 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 83:
#line 1704 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAddConstraintAction, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1205 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 84:
#line 1708 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAddConstraintAction, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1213 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 85:
#line 1713 "zetasql/parser/bison_parser.y"
      {
        auto* constraint = (yystack_[0].value.node);
        constraint->AddChild((yystack_[1].value.identifier));
        parser->WithStartLocation(constraint, yystack_[1].location);
        auto* node = MAKE_NODE(ASTAddConstraintAction, yylhs.location, {constraint});
        node->set_is_if_not_exists((yystack_[2].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1226 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 86:
#line 1722 "zetasql/parser/bison_parser.y"
      {
        auto* node =
          MAKE_NODE(ASTDropConstraintAction, yylhs.location, {(yystack_[0].value.identifier)});
        node->set_is_if_exists((yystack_[1].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1237 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 87:
#line 1729 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTDropPrimaryKeyAction, yylhs.location, {});
        node->set_is_if_exists((yystack_[0].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1247 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 88:
#line 1735 "zetasql/parser/bison_parser.y"
      {
        auto* node =
          MAKE_NODE(ASTAlterConstraintEnforcementAction, yylhs.location, {(yystack_[1].value.identifier)});
        node->set_is_if_exists((yystack_[2].value.boolean));
        node->set_is_enforced((yystack_[0].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1259 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 89:
#line 1743 "zetasql/parser/bison_parser.y"
      {
        auto* node =
          MAKE_NODE(ASTAlterConstraintSetOptionsAction, yylhs.location, {(yystack_[3].value.identifier), (yystack_[0].value.node)});
        node->set_is_if_exists((yystack_[4].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1270 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 90:
#line 1751 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAddColumnAction, yylhs.location, {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.expression)});
        node->set_is_if_not_exists((yystack_[3].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1280 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 91:
#line 1757 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTDropColumnAction, yylhs.location, {(yystack_[0].value.identifier)});
        node->set_is_if_exists((yystack_[1].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1290 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 92:
#line 1763 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTRenameColumnAction, yylhs.location, {(yystack_[2].value.identifier), (yystack_[0].value.identifier)});
        node->set_is_if_exists((yystack_[3].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1300 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 93:
#line 1770 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAlterColumnTypeAction, yylhs.location, {(yystack_[4].value.identifier), (yystack_[0].value.node)});
        node->set_is_if_exists((yystack_[5].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1310 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 94:
#line 1776 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAlterColumnOptionsAction, yylhs.location, {(yystack_[3].value.identifier), (yystack_[0].value.node)});
        node->set_is_if_exists((yystack_[4].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1320 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 95:
#line 1782 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAlterColumnDropNotNullAction, yylhs.location, {(yystack_[3].value.identifier)});
        node->set_is_if_exists((yystack_[4].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1330 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 96:
#line 1788 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRenameToClause, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 1338 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 97:
#line 1792 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSetCollateClause, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1346 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 98:
#line 1799 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAlterActionList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1354 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 99:
#line 1803 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 1362 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 100:
#line 1809 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1368 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 101:
#line 1811 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTFilterUsingClause* node = MAKE_NODE(
            ASTFilterUsingClause, yylhs.location, {(yystack_[1].value.expression)});
        node->set_has_filter_keyword(true);
        (yylhs.value.node) = node;
      }
#line 1379 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 102:
#line 1818 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRevokeFromClause, yylhs.location, {(yystack_[1].value.node)});
      }
#line 1387 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 103:
#line 1822 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTRevokeFromClause* node = MAKE_NODE(
            ASTRevokeFromClause, yylhs.location);
        node->set_is_revoke_from_all(true);
        (yylhs.value.node) = node;
      }
#line 1398 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 104:
#line 1829 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTPathExpression* id =
            MAKE_NODE(ASTPathExpression, yystack_[0].location, {(yystack_[0].value.identifier)});
        (yylhs.value.node) = MAKE_NODE(ASTRenameToClause, yylhs.location, {id});
      }
#line 1408 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 105:
#line 1840 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAlterActionList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1416 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 106:
#line 1844 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 1424 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 107:
#line 1859 "zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kAggregateFunction; }
#line 1430 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 108:
#line 1861 "zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kConstant; }
#line 1436 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 109:
#line 1863 "zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kDatabase; }
#line 1442 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 110:
#line 1864 "zetasql/parser/bison_parser.y"
                                         {
        if ((yystack_[0].value.table_or_table_function_keywords) == TableOrTableFunctionKeywords::kTableAndFunctionKeywords) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
               "EXTERNAL TABLE FUNCTION is not supported");
        } else {
           (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kExternalTable;
        }
      }
#line 1455 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 111:
#line 1873 "zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kFunction; }
#line 1461 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 112:
#line 1875 "zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kIndex; }
#line 1467 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 113:
#line 1877 "zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kMaterializedView; }
#line 1473 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 114:
#line 1879 "zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kModel; }
#line 1479 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 115:
#line 1881 "zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kProcedure; }
#line 1485 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 116:
#line 1883 "zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kSchema; }
#line 1491 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 117:
#line 1885 "zetasql/parser/bison_parser.y"
      { (yylhs.value.schema_object_kind_keyword) = zetasql::SchemaObjectKind::kView; }
#line 1497 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 118:
#line 1891 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[3].value.table_or_table_function_keywords) == TableOrTableFunctionKeywords::kTableAndFunctionKeywords) {
          YYERROR_AND_ABORT_AT(yystack_[3].location, "ALTER TABLE FUNCTION is not supported");

        }
        zetasql::ASTAlterTableStatement* node = MAKE_NODE(
          ASTAlterTableStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
        node->set_is_if_exists((yystack_[2].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1512 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 119:
#line 1903 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTAlterStatementBase* node = nullptr;
        // Only ALTER DATABASE, SCHEMA, TABLE, VIEW, and MATERIALIZED VIEW are
        // currently supported.
        if ((yystack_[3].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kDatabase) {
          node = MAKE_NODE(ASTAlterDatabaseStatement, yylhs.location);
        } else if ((yystack_[3].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kSchema) {
          node = MAKE_NODE(ASTAlterSchemaStatement, yylhs.location);
        } else if ((yystack_[3].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kView) {
          node = MAKE_NODE(ASTAlterViewStatement, yylhs.location);
        } else if ((yystack_[3].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kMaterializedView) {
          node = MAKE_NODE(ASTAlterMaterializedViewStatement, yylhs.location);
        } else {
          YYERROR_AND_ABORT_AT(yystack_[3].location, absl::StrCat("ALTER ", absl::AsciiStrToUpper(
            parser->GetInputText(yystack_[3].location)), " is not supported"));
        }
        node->set_is_if_exists((yystack_[2].value.boolean));
        node->AddChildren({(yystack_[1].value.expression), (yystack_[0].value.node)});
        (yylhs.value.node) = parser->WithLocation(node, yylhs.location);
      }
#line 1537 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 120:
#line 1925 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTAlterEntityStatement, yylhs.location, {(yystack_[3].value.node), (yystack_[1].value.expression), (yystack_[0].value.node)});
        node->set_is_if_exists((yystack_[2].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1547 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 121:
#line 1932 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTAlterRowAccessPolicyStatement* node = MAKE_NODE(
            ASTAlterRowAccessPolicyStatement, yylhs.location, {(yystack_[3].value.identifier), (yystack_[1].value.expression), (yystack_[0].value.node)});
        node->set_is_if_exists((yystack_[4].value.boolean));
        (yylhs.value.node) = node;
      }
#line 1558 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 122:
#line 1940 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAlterAllRowAccessPoliciesStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 1566 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 123:
#line 1947 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTransformClause, yylhs.location, {(yystack_[1].value.node)})
      }
#line 1574 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 124:
#line 1950 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 1580 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 125:
#line 1955 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAssertStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 1588 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 126:
#line 1962 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 1596 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 127:
#line 1966 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 1604 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 128:
#line 1973 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAnalyzeStatement, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 1612 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 129:
#line 1979 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1618 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 130:
#line 1980 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 1624 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 131:
#line 1985 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTableAndColumnInfoList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1632 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 132:
#line 1989 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 1640 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 133:
#line 1996 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTableAndColumnInfo, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 1648 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 134:
#line 2003 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTTransactionReadWriteMode, yylhs.location, {});
        node->set_mode(zetasql::ASTTransactionReadWriteMode::READ_ONLY);
        (yylhs.value.node) = node;
      }
#line 1658 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 135:
#line 2009 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTTransactionReadWriteMode, yylhs.location, {});
        node->set_mode(zetasql::ASTTransactionReadWriteMode::READ_WRITE);
        (yylhs.value.node) = node;
      }
#line 1668 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 136:
#line 2015 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTransactionIsolationLevel, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 1676 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 137:
#line 2019 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTransactionIsolationLevel, yylhs.location, {(yystack_[1].value.identifier), (yystack_[0].value.identifier)});
      }
#line 1684 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 138:
#line 2026 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTransactionModeList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1692 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 139:
#line 2030 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 1700 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 140:
#line 2036 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 1706 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 141:
#line 2038 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 1714 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 142:
#line 2045 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTBeginStatement, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1722 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 148:
#line 2066 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSetTransactionStatement, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1730 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 149:
#line 2070 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTSingleAssignment, yylhs.location, {(yystack_[2].value.identifier), (yystack_[0].value.expression)});
    }
#line 1738 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 150:
#line 2074 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTParameterAssignment, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
    }
#line 1746 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 151:
#line 2078 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTSystemVariableAssignment, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
    }
#line 1754 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 152:
#line 2082 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTAssignmentFromStruct, yylhs.location, {(yystack_[3].value.node), (yystack_[0].value.expression)});
    }
#line 1762 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 153:
#line 2086 "zetasql/parser/bison_parser.y"
    {
      // Provide improved error message for an empty variable list.
      YYERROR_AND_ABORT_AT(yystack_[0].location,
        "Parenthesized SET statement requires a variable list");
    }
#line 1772 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 154:
#line 2092 "zetasql/parser/bison_parser.y"
    {
      // Provide improved error message for missing parentheses around a
      // list of multiple variables.
      YYERROR_AND_ABORT_AT(yystack_[3].location,
        "Using SET with multiple variables requires parentheses around the "
        "variable list");
    }
#line 1784 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 155:
#line 2103 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCommitStatement, yylhs.location, {});
      }
#line 1792 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 156:
#line 2110 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRollbackStatement, yylhs.location, {});
      }
#line 1800 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 157:
#line 2117 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStartBatchStatement, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 1808 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 158:
#line 2124 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRunBatchStatement, yylhs.location, {});
      }
#line 1816 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 159:
#line 2131 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAbortBatchStatement, yylhs.location, {});
      }
#line 1824 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 160:
#line 2139 "zetasql/parser/bison_parser.y"
      {
        auto* create = MAKE_NODE(ASTCreateConstantStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        create->set_is_or_replace((yystack_[6].value.boolean));
        create->set_scope((yystack_[5].value.create_scope));
        create->set_is_if_not_exists((yystack_[3].value.boolean));
        (yylhs.value.node) = create;
      }
#line 1836 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 161:
#line 2150 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCreateDatabaseStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 1844 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 162:
#line 2161 "zetasql/parser/bison_parser.y"
      {
        auto* create =
            MAKE_NODE(ASTCreateFunctionStatement, yylhs.location,
                      {(yystack_[6].value.node), (yystack_[5].value.node), (yystack_[2].value.language_or_remote_with_connection).language, (yystack_[2].value.language_or_remote_with_connection).with_connection_clause, (yystack_[1].value.node),
                       (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[11].value.boolean));
        create->set_scope((yystack_[10].value.create_scope));
        create->set_is_aggregate((yystack_[9].value.boolean));
        create->set_is_if_not_exists((yystack_[7].value.boolean));
        create->set_sql_security((yystack_[4].value.sql_security));
        create->set_determinism_level((yystack_[3].value.determinism_level));
        create->set_is_remote((yystack_[2].value.language_or_remote_with_connection).is_remote);
        (yylhs.value.node) = create;
      }
#line 1863 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 163:
#line 2180 "zetasql/parser/bison_parser.y"
      {
        auto* create =
            MAKE_NODE(ASTCreateFunctionStatement, yylhs.location,
                      {(yystack_[7].value.node), (yystack_[6].value.node), (yystack_[3].value.language_or_remote_with_connection).language, (yystack_[3].value.language_or_remote_with_connection).with_connection_clause, (yystack_[0].value.node),
                       (yystack_[1].value.node)});
        create->set_is_or_replace((yystack_[12].value.boolean));
        create->set_scope((yystack_[11].value.create_scope));
        create->set_is_aggregate((yystack_[10].value.boolean));
        create->set_is_if_not_exists((yystack_[8].value.boolean));
        create->set_sql_security((yystack_[5].value.sql_security));
        create->set_determinism_level((yystack_[4].value.determinism_level));
        create->set_is_remote((yystack_[3].value.language_or_remote_with_connection).is_remote);
        (yylhs.value.node) = create;
      }
#line 1882 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 164:
#line 2198 "zetasql/parser/bison_parser.y"
      {
        auto* create =
            MAKE_NODE(ASTCreateFunctionStatement, yylhs.location,
                      {(yystack_[4].value.node), (yystack_[3].value.node), (yystack_[0].value.language_or_remote_with_connection).language, (yystack_[0].value.language_or_remote_with_connection).with_connection_clause,
                       nullptr, nullptr});
        create->set_is_or_replace((yystack_[9].value.boolean));
        create->set_scope((yystack_[8].value.create_scope));
        create->set_is_aggregate((yystack_[7].value.boolean));
        create->set_is_if_not_exists((yystack_[5].value.boolean));
        create->set_sql_security((yystack_[2].value.sql_security));
        create->set_determinism_level((yystack_[1].value.determinism_level));
        create->set_is_remote((yystack_[0].value.language_or_remote_with_connection).is_remote);
        (yylhs.value.node) = create;
      }
#line 1901 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 165:
#line 2216 "zetasql/parser/bison_parser.y"
                { (yylhs.value.boolean) = true; }
#line 1907 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 166:
#line 2217 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.boolean) = false; }
#line 1913 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 167:
#line 2222 "zetasql/parser/bison_parser.y"
                      { (yylhs.value.boolean) = true; }
#line 1919 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 168:
#line 2223 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.boolean) = false; }
#line 1925 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 169:
#line 2228 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTFunctionDeclaration, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 1933 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 170:
#line 2236 "zetasql/parser/bison_parser.y"
      {
        auto* parameter = MAKE_NODE(ASTFunctionParameter, yylhs.location, {(yystack_[4].value.identifier), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node)});
        parameter->set_is_not_aggregate((yystack_[0].value.boolean));
        (yylhs.value.node) = parameter;
      }
#line 1943 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 171:
#line 2242 "zetasql/parser/bison_parser.y"
      {
        auto* parameter = MAKE_NODE(ASTFunctionParameter, yylhs.location, {(yystack_[2].value.node), (yystack_[1].value.node)});
        parameter->set_is_not_aggregate((yystack_[0].value.boolean));
        (yylhs.value.node) = parameter;
      }
#line 1953 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 172:
#line 2251 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTFunctionParameters, yylhs.location, {(yystack_[0].value.node)});
      }
#line 1961 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 173:
#line 2255 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 1969 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 174:
#line 2262 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 1977 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 175:
#line 2266 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTFunctionParameters, yylhs.location);
      }
#line 1985 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 176:
#line 2275 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTStatementList* stmt_list = MAKE_NODE(
            ASTStatementList, yystack_[0].location, {(yystack_[0].value.node)});
        zetasql::ASTScript* body = MAKE_NODE(ASTScript, yystack_[0].location, {stmt_list});
        auto* create =
            MAKE_NODE(ASTCreateProcedureStatement, yylhs.location, {(yystack_[3].value.expression), (yystack_[2].value.node), (yystack_[1].value.node), body});
        create->set_is_or_replace((yystack_[7].value.boolean));
        create->set_scope((yystack_[6].value.create_scope));
        create->set_is_if_not_exists((yystack_[4].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2001 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 177:
#line 2290 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTFunctionParameters, yylhs.location, {(yystack_[0].value.node)});
      }
#line 2009 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 178:
#line 2294 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 2017 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 179:
#line 2301 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 2025 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 180:
#line 2305 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTFunctionParameters, yylhs.location);
      }
#line 2033 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 183:
#line 2317 "zetasql/parser/bison_parser.y"
      {
        auto* parameter = MAKE_NODE(ASTFunctionParameter, yylhs.location, {(yystack_[1].value.identifier), (yystack_[0].value.node)});
        parameter->set_procedure_parameter_mode((yystack_[2].value.parameter_mode));
        (yylhs.value.node) = parameter;
      }
#line 2043 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 184:
#line 2323 "zetasql/parser/bison_parser.y"
      {
        // There may be 3 cases causing this error:
        // 1. OUT int32_t where mode is empty and intended identifier name is
        //    "OUT"
        // 2. OUT int32_t where mode is OUT and identifier is missing
        // 3. OUT param_a where type is missing
        YYERROR_AND_ABORT_AT(yystack_[0].location,
                             "Syntax error: Unexpected end of parameter."
                             " Parameters should be in the format "
                             "[<parameter mode>] <parameter name> <type>. "
                             "If IN/OUT/INOUT is intended to be the name of a "
                             "parameter, it must be escaped with backticks"
                             );
      }
#line 2062 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 185:
#line 2340 "zetasql/parser/bison_parser.y"
         {(yylhs.value.parameter_mode) = ::zetasql::ASTFunctionParameter::ProcedureParameterMode::IN;}
#line 2068 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 186:
#line 2342 "zetasql/parser/bison_parser.y"
      {(yylhs.value.parameter_mode) = ::zetasql::ASTFunctionParameter::ProcedureParameterMode::OUT;}
#line 2074 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 187:
#line 2344 "zetasql/parser/bison_parser.y"
      {(yylhs.value.parameter_mode) = ::zetasql::ASTFunctionParameter::ProcedureParameterMode::INOUT;}
#line 2080 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 188:
#line 2346 "zetasql/parser/bison_parser.y"
      {(yylhs.value.parameter_mode) = ::zetasql::ASTFunctionParameter::ProcedureParameterMode::NOT_SET;}
#line 2086 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 189:
#line 2351 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[0].value.node)->node_kind() == zetasql::AST_TEMPLATED_PARAMETER_TYPE) {
          // TODO: Note that the official design supports this
          // feature. A reasonable use-case is named templated types here: e.g.
          // CREATE FUNCTION f(arg ANY TYPE T) RETURNS T AS ...
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              "Syntax error: Templated types are not allowed in the "
              "RETURNS clause");
        }
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 2103 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 190:
#line 2364 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 2111 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 191:
#line 2371 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[0].value.node) != nullptr &&
            (yystack_[0].value.node)->node_kind() == zetasql::AST_TVF_SCHEMA) {
            YYERROR_AND_ABORT_AT(yystack_[0].location, "Syntax error: Unexpected TABLE");
        }
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 2123 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 192:
#line 2381 "zetasql/parser/bison_parser.y"
                    {(yylhs.value.determinism_level) = ASTCreateFunctionStmtBase::DETERMINISTIC;}
#line 2129 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 193:
#line 2383 "zetasql/parser/bison_parser.y"
      {(yylhs.value.determinism_level) = ASTCreateFunctionStmtBase::NOT_DETERMINISTIC;}
#line 2135 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 194:
#line 2385 "zetasql/parser/bison_parser.y"
      {(yylhs.value.determinism_level) = ASTCreateFunctionStmtBase::IMMUTABLE;}
#line 2141 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 195:
#line 2387 "zetasql/parser/bison_parser.y"
      {(yylhs.value.determinism_level) = ASTCreateFunctionStmtBase::STABLE;}
#line 2147 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 196:
#line 2389 "zetasql/parser/bison_parser.y"
      {(yylhs.value.determinism_level) = ASTCreateFunctionStmtBase::VOLATILE;}
#line 2153 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 197:
#line 2391 "zetasql/parser/bison_parser.y"
      {(yylhs.value.determinism_level) = ASTCreateFunctionStmtBase::DETERMINISM_UNSPECIFIED;}
#line 2159 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 198:
#line 2397 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.identifier) = (yystack_[0].value.identifier);
      }
#line 2167 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 199:
#line 2401 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.identifier) = nullptr;
      }
#line 2175 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 200:
#line 2408 "zetasql/parser/bison_parser.y"
      {
        if (parser->language_options() != nullptr &&
            !parser->language_options()->LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_REMOTE_FUNCTION)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "REMOTE is not supported");
        }

        (yylhs.value.language_or_remote_with_connection).language = nullptr;
        (yylhs.value.language_or_remote_with_connection).is_remote = true;
        if ((yystack_[0].value.node) == nullptr) {
          (yylhs.value.language_or_remote_with_connection).with_connection_clause = nullptr;
        } else {
          (yylhs.value.language_or_remote_with_connection).with_connection_clause =
              (yystack_[0].value.node)->GetAsOrDie<zetasql::ASTWithConnectionClause>();
        }
      }
#line 2196 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 201:
#line 2425 "zetasql/parser/bison_parser.y"
      {
        // This case is to generate more informative error message. Otherwise
        // the error message for WITH CONNECTION without leading REMOTE will be
        // something like "Expected end of input but got keyword WITH".
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "WITH CONNECTION is only allowed after REMOTE in CREATE FUNCTION");
      }
#line 2209 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 202:
#line 2437 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.language_or_remote_with_connection) = (yystack_[0].value.language_or_remote_with_connection);
      }
#line 2217 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 203:
#line 2441 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.language_or_remote_with_connection).language = nullptr;
        (yylhs.value.language_or_remote_with_connection).is_remote = false;
        (yylhs.value.language_or_remote_with_connection).with_connection_clause = nullptr;
      }
#line 2227 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 204:
#line 2451 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.language_or_remote_with_connection) = (yystack_[0].value.language_or_remote_with_connection);
        (yylhs.value.language_or_remote_with_connection).language = (yystack_[1].value.identifier);
      }
#line 2236 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 205:
#line 2456 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.language_or_remote_with_connection) = (yystack_[1].value.language_or_remote_with_connection);
        (yylhs.value.language_or_remote_with_connection).language = (yystack_[0].value.identifier);
      }
#line 2245 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 206:
#line 2461 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.language_or_remote_with_connection).language = nullptr;
        (yylhs.value.language_or_remote_with_connection).is_remote = false;
        (yylhs.value.language_or_remote_with_connection).with_connection_clause = nullptr;
      }
#line 2255 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 207:
#line 2470 "zetasql/parser/bison_parser.y"
                                              { (yylhs.value.sql_security) = (yystack_[0].value.sql_security); }
#line 2261 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 208:
#line 2472 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.sql_security) = zetasql::ASTCreateStatement::SQL_SECURITY_UNSPECIFIED;
      }
#line 2269 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 209:
#line 2478 "zetasql/parser/bison_parser.y"
            { (yylhs.value.sql_security) = zetasql::ASTCreateStatement::SQL_SECURITY_INVOKER; }
#line 2275 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 210:
#line 2479 "zetasql/parser/bison_parser.y"
              { (yylhs.value.sql_security) = zetasql::ASTCreateStatement::SQL_SECURITY_DEFINER; }
#line 2281 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 211:
#line 2483 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 2289 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 212:
#line 2487 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 2297 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 213:
#line 2493 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 2303 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 214:
#line 2495 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 2311 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 215:
#line 2502 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 2319 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 216:
#line 2506 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 2327 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 217:
#line 2513 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSqlFunctionBody, yylhs.location, {(yystack_[1].value.expression)});
      }
#line 2335 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 218:
#line 2517 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "The body of each CREATE FUNCTION statement is an expression, not a "
        "query; to use a query as an expression, the query must be wrapped "
        "with additional parentheses to make it a scalar subquery expression");
      }
#line 2347 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 219:
#line 2531 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTRestrictToClause* node =
            MAKE_NODE(ASTRestrictToClause, yylhs.location, {(yystack_[1].value.node)});
        (yylhs.value.node) = node;
      }
#line 2357 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 220:
#line 2540 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 2365 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 221:
#line 2544 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 2373 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 222:
#line 2551 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTGrantToClause* grant_to =
            MAKE_NODE(ASTGrantToClause, yylhs.location, {(yystack_[1].value.node)});
        grant_to->set_has_grant_keyword_and_parens(true);
        (yylhs.value.node) = grant_to;
      }
#line 2384 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 223:
#line 2559 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 2390 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 224:
#line 2561 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTGrantToClause* grant_to =
            MAKE_NODE(ASTGrantToClause, yylhs.location, {(yystack_[0].value.node)});
        grant_to->set_has_grant_keyword_and_parens(false);
        (yylhs.value.node) = grant_to;
      }
#line 2401 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 225:
#line 2570 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 2409 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 226:
#line 2574 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 2417 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 227:
#line 2582 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.boolean) = true;
      }
#line 2425 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 228:
#line 2586 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.boolean) = false;
      }
#line 2433 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 229:
#line 2593 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTFilterUsingClause* filter_using =
            MAKE_NODE(ASTFilterUsingClause, yylhs.location, {(yystack_[1].value.expression)});
        filter_using->set_has_filter_keyword((yystack_[4].value.boolean));
        (yylhs.value.node) = filter_using;
      }
#line 2444 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 230:
#line 2603 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTCreatePrivilegeRestrictionStatement* node =
            MAKE_NODE(ASTCreatePrivilegeRestrictionStatement, yylhs.location,
                      {(yystack_[3].value.node), (yystack_[1].value.expression), (yystack_[0].value.node)});
        node->set_is_or_replace((yystack_[8].value.boolean));
        node->set_is_if_not_exists((yystack_[5].value.boolean));
        (yylhs.value.node) = node;
      }
#line 2457 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 231:
#line 2617 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTPathExpression* opt_path_expression =
            (yystack_[4].value.identifier) == nullptr ? nullptr : MAKE_NODE(ASTPathExpression, yystack_[4].location, {(yystack_[4].value.identifier)});
        zetasql::ASTCreateRowAccessPolicyStatement* create =
            MAKE_NODE(ASTCreateRowAccessPolicyStatement, yylhs.location,
                      {(yystack_[2].value.expression), (yystack_[1].value.node), (yystack_[0].value.node), opt_path_expression});
        create->set_is_or_replace((yystack_[9].value.boolean));
        create->set_is_if_not_exists((yystack_[5].value.boolean));
        create->set_has_access_keyword((yystack_[7].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2473 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 232:
#line 2632 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTWithPartitionColumnsClause* with_partition_columns =
            MAKE_NODE(ASTWithPartitionColumnsClause, yylhs.location, {(yystack_[0].value.node)});
        (yylhs.value.node) = with_partition_columns;
      }
#line 2483 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 233:
#line 2641 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWithConnectionClause, yylhs.location, {(yystack_[0].value.node)});
      }
#line 2491 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 234:
#line 2656 "zetasql/parser/bison_parser.y"
                                                         {
      (yylhs.value.external_table_with_clauses).with_partition_columns_clause =
          (yystack_[1].value.node)->GetAsOrDie<zetasql::ASTWithPartitionColumnsClause>();
      (yylhs.value.external_table_with_clauses).with_connection_clause =
          (yystack_[0].value.node)->GetAsOrDie<zetasql::ASTWithConnectionClause>();
    }
#line 2502 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 235:
#line 2662 "zetasql/parser/bison_parser.y"
                                    {
      (yylhs.value.external_table_with_clauses).with_partition_columns_clause =
          (yystack_[0].value.node)->GetAsOrDie<zetasql::ASTWithPartitionColumnsClause>();
      (yylhs.value.external_table_with_clauses).with_connection_clause = nullptr;
    }
#line 2512 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 236:
#line 2667 "zetasql/parser/bison_parser.y"
                             {
      (yylhs.value.external_table_with_clauses).with_partition_columns_clause = nullptr;
      (yylhs.value.external_table_with_clauses).with_connection_clause =
          (yystack_[0].value.node)->GetAsOrDie<zetasql::ASTWithConnectionClause>();
    }
#line 2522 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 237:
#line 2672 "zetasql/parser/bison_parser.y"
                    {
      (yylhs.value.external_table_with_clauses).with_partition_columns_clause = nullptr;
      (yylhs.value.external_table_with_clauses).with_connection_clause = nullptr;
    }
#line 2531 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 238:
#line 2683 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[0].value.node) == nullptr) {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              "Syntax error: Expected keyword OPTIONS");
        }
        auto* create =
            MAKE_NODE(ASTCreateExternalTableStatement, yylhs.location,
            {(yystack_[5].value.expression), (yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.external_table_with_clauses).with_partition_columns_clause,
             (yystack_[1].value.external_table_with_clauses).with_connection_clause, (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[10].value.boolean));
        create->set_scope((yystack_[9].value.create_scope));
        create->set_is_if_not_exists((yystack_[6].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2551 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 239:
#line 2708 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
        yystack_[2].location,
        "Syntax error: CREATE EXTERNAL TABLE FUNCTION is not supported");
      }
#line 2561 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 240:
#line 2718 "zetasql/parser/bison_parser.y"
      {
        auto* create =
          MAKE_NODE(ASTCreateIndexStatement, yylhs.location, {(yystack_[7].value.expression), (yystack_[5].value.expression), (yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[12].value.boolean));
        create->set_is_unique((yystack_[11].value.boolean));
        create->set_is_if_not_exists((yystack_[8].value.boolean));
        create->set_is_search((yystack_[10].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2575 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 241:
#line 2732 "zetasql/parser/bison_parser.y"
      {
        auto* create = MAKE_NODE(ASTCreateSchemaStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[1].value.node), (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[5].value.boolean));
        create->set_is_if_not_exists((yystack_[3].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2586 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 242:
#line 2743 "zetasql/parser/bison_parser.y"
      {
        auto* create =
            MAKE_NODE(ASTCreateSnapshotTableStatement, yylhs.location, {(yystack_[3].value.expression), (yystack_[1].value.node), (yystack_[0].value.node)});
        create->set_is_if_not_exists((yystack_[4].value.boolean));
        create->set_is_or_replace((yystack_[7].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2598 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 243:
#line 2761 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[5].value.node) == nullptr) {
            // Missing function argument list.
            YYERROR_AND_ABORT_AT(yystack_[5].location, "Syntax error: Expected (");
        }
        if ((yystack_[4].value.node) != nullptr  &&
            (yystack_[4].value.node)->node_kind() != zetasql::AST_TVF_SCHEMA) {
          YYERROR_AND_ABORT_AT(yystack_[4].location, "Syntax error: Expected keyword TABLE");
        }
        // Build the create table function statement.
        auto* fn_decl = MAKE_NODE(ASTFunctionDeclaration, yystack_[6].location, yystack_[5].location, {(yystack_[6].value.expression), (yystack_[5].value.node)});
        auto* create = MAKE_NODE(ASTCreateTableFunctionStatement, yylhs.location,
                                 {fn_decl, (yystack_[4].value.node), (yystack_[2].value.node), (yystack_[1].value.identifier), (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[11].value.boolean));
        create->set_scope((yystack_[10].value.create_scope));
        create->set_is_if_not_exists((yystack_[7].value.boolean));
        create->set_sql_security((yystack_[3].value.sql_security));
        (yylhs.value.node) = create;
      }
#line 2622 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 244:
#line 2794 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTCreateStatement* create =
            MAKE_NODE(ASTCreateTableStatement, yylhs.location, {(yystack_[9].value.expression), (yystack_[8].value.node), (yystack_[7].value.node), (yystack_[6].value.node), (yystack_[5].value.node), (yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[13].value.boolean));
        create->set_scope((yystack_[12].value.create_scope));
        create->set_is_if_not_exists((yystack_[10].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2635 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 245:
#line 2805 "zetasql/parser/bison_parser.y"
           {  // INTO to mean append, which is consistent with INSERT INTO
      (yylhs.value.insertion_mode) = zetasql::ASTAuxLoadDataStatement::InsertionMode::APPEND;
    }
#line 2643 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 246:
#line 2808 "zetasql/parser/bison_parser.y"
                  {
      (yylhs.value.insertion_mode) = zetasql::ASTAuxLoadDataStatement::InsertionMode::OVERWRITE;
    }
#line 2651 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 247:
#line 2815 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAuxLoadDataFromFilesOptionsList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 2659 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 248:
#line 2829 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTAuxLoadDataStatement* statement =
            MAKE_NODE(
                ASTAuxLoadDataStatement, yylhs.location,
                {(yystack_[7].value.expression), (yystack_[6].value.node), (yystack_[5].value.node), (yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.external_table_with_clauses).with_partition_columns_clause,
                 (yystack_[0].value.external_table_with_clauses).with_connection_clause});
        statement->set_insertion_mode((yystack_[8].value.insertion_mode));
        (yylhs.value.node) = statement;
      }
#line 2673 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 249:
#line 2842 "zetasql/parser/bison_parser.y"
      {
        std::string entity_type(parser->GetInputText(yystack_[0].location));
        if (parser->language_options() != nullptr &&
          !parser->language_options()
                 ->GenericEntityTypeSupported(entity_type)) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, absl::StrCat(
                               entity_type, " is not a supported object type"));
        }
        // It is by design that we don't want to support backtick quoted
        // entity type. Backtick is kept as part of entity type name, and will
        // be rejected by engine later.
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 2691 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 250:
#line 2859 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 2699 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 251:
#line 2863 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 2707 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 252:
#line 2870 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 2715 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 253:
#line 2873 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 2721 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 254:
#line 2879 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(
            ASTCreateEntityStatement,
            yylhs.location,
            {
              (yystack_[4].value.node),
              (yystack_[2].value.expression),
              (yystack_[1].value.node),
              (yystack_[0].value.node)
            });
        node->set_is_or_replace((yystack_[5].value.boolean));
        node->set_is_if_not_exists((yystack_[3].value.boolean));
        (yylhs.value.node) = node;
      }
#line 2740 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 255:
#line 2898 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTCreateStatement* create =
            MAKE_NODE(ASTCreateModelStatement, yylhs.location, {(yystack_[3].value.expression), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[7].value.boolean));
        create->set_scope((yystack_[6].value.create_scope));
        create->set_is_if_not_exists((yystack_[4].value.boolean));
        (yylhs.value.node) = create;
      }
#line 2753 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 256:
#line 2909 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 2759 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 257:
#line 2910 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 2765 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 258:
#line 2915 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 2773 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 259:
#line 2922 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTableElementList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 2781 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 260:
#line 2926 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 2789 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 261:
#line 2930 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 2797 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 262:
#line 2968 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 2803 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 263:
#line 2969 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 2809 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 264:
#line 2974 "zetasql/parser/bison_parser.y"
      {
        auto* schema = parser->WithEndLocation(
            WithExtraChildren((yystack_[2].value.node), {(yystack_[1].value.node), (yystack_[0].value.node)}), yylhs.location);
        (yylhs.value.node) = MAKE_NODE(ASTColumnDefinition, yylhs.location, {(yystack_[3].value.identifier), schema});
      }
#line 2819 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 265:
#line 2983 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[1].value.generated_or_default_column_info).generated_column_info != nullptr) {
          (yylhs.value.node) = parser->WithEndLocation(
              WithExtraChildren((yystack_[2].value.node), {(yystack_[1].value.generated_or_default_column_info).generated_column_info,
                                     /*default_expression=*/nullptr, (yystack_[0].value.node)}), yylhs.location);
        } else if ((yystack_[1].value.generated_or_default_column_info).default_expression != nullptr) {
          (yylhs.value.node) = parser->WithEndLocation(
              WithExtraChildren((yystack_[2].value.node), {/*generated_column_info=*/nullptr,
                                     (yystack_[1].value.generated_or_default_column_info).default_expression, (yystack_[0].value.node)}), yylhs.location);
        } else {
          (yylhs.value.node) = parser->WithEndLocation(
              WithExtraChildren((yystack_[2].value.node), {/*generated_column_info=*/nullptr,
                                     /*default_expression=*/nullptr, (yystack_[0].value.node)}), yylhs.location);
        }
      }
#line 2839 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 266:
#line 2999 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTInferredTypeColumnSchema, yylhs.location, {(yystack_[0].value.node)});
      }
#line 2847 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 267:
#line 3006 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSimpleColumnSchema, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 2855 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 268:
#line 3011 "zetasql/parser/bison_parser.y"
      {
        auto* id = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
        auto* path_expression = MAKE_NODE(ASTPathExpression, yylhs.location, {id});
        (yylhs.value.node) = MAKE_NODE(ASTSimpleColumnSchema, yylhs.location, {path_expression});
      }
#line 2865 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 269:
#line 3020 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTArrayColumnSchema, yylhs.location, {(yystack_[1].value.node)});
      }
#line 2873 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 270:
#line 3044 "zetasql/parser/bison_parser.y"
      {
        auto* schema = parser->WithEndLocation(
            WithExtraChildren((yystack_[2].value.node), {(yystack_[1].value.node), (yystack_[0].value.node)}), yylhs.location);
        (yylhs.value.node) = MAKE_NODE(ASTStructColumnField, yylhs.location, {schema});
      }
#line 2883 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 271:
#line 3050 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructColumnField, yylhs.location, {(yystack_[1].value.identifier), (yystack_[0].value.node)});
      }
#line 2891 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 272:
#line 3057 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructColumnSchema, yylhs.location, {(yystack_[0].value.node)});
      }
#line 2899 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 273:
#line 3061 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 2907 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 274:
#line 3070 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructColumnSchema, yylhs.location);
      }
#line 2915 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 275:
#line 3073 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[1].value.node); }
#line 2921 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 276:
#line 3077 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 2927 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 277:
#line 3078 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 2933 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 278:
#line 3079 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 2939 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 279:
#line 3084 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = WithExtraChildren(parser->WithEndLocation((yystack_[1].value.node), yystack_[0].location), {(yystack_[0].value.node)});
    }
#line 2947 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 282:
#line 3095 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.stored_mode) = zetasql::ASTGeneratedColumnInfo::StoredMode::STORED_VOLATILE;
    }
#line 2955 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 283:
#line 3099 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.stored_mode) = zetasql::ASTGeneratedColumnInfo::StoredMode::STORED;
    }
#line 2963 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 284:
#line 3103 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.stored_mode) = zetasql::ASTGeneratedColumnInfo::StoredMode::NON_STORED;
    }
#line 2971 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 285:
#line 3110 "zetasql/parser/bison_parser.y"
    {
      auto* column = MAKE_NODE(ASTGeneratedColumnInfo, yylhs.location, {(yystack_[2].value.expression)});
      column->set_stored_mode((yystack_[0].value.stored_mode));
      (yylhs.value.node) = column;
    }
#line 2981 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 286:
#line 3119 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.boolean) = true;
    }
#line 2989 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 287:
#line 3123 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.boolean) = false;
    }
#line 2997 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 288:
#line 3130 "zetasql/parser/bison_parser.y"
    {
      if (parser->language_options() != nullptr &&
          parser->language_options()->LanguageFeatureEnabled(
             zetasql::FEATURE_V_1_3_COLUMN_DEFAULT_VALUE)) {
        (yylhs.value.node) = (yystack_[0].value.expression);
      } else {
        YYERROR_AND_ABORT_AT(yystack_[0].location, "Column DEFAULT value is not supported.");
      }
    }
#line 3011 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 289:
#line 3143 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.boolean) = true;
    }
#line 3019 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 290:
#line 3147 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.boolean) = false;
    }
#line 3027 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 291:
#line 3154 "zetasql/parser/bison_parser.y"
    {
      if ((yystack_[0].value.boolean)) {
        YYERROR_AND_ABORT_AT(yystack_[0].location, "Syntax error: \"DEFAULT\" and \"GENERATED "
            "ALWAYS AS\" clauses must not be both provided for the column");
      }
      (yylhs.value.generated_or_default_column_info).generated_column_info =
          static_cast<zetasql::ASTGeneratedColumnInfo*>((yystack_[1].value.node));
      (yylhs.value.generated_or_default_column_info).default_expression = nullptr;
    }
#line 3041 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 292:
#line 3164 "zetasql/parser/bison_parser.y"
    {
      if ((yystack_[0].value.boolean)) {
        YYERROR_AND_ABORT_AT(yystack_[0].location, "Syntax error: \"DEFAULT\" and \"GENERATED "
            "ALWAYS AS\" clauses must not be both provided for the column");
      }
      (yylhs.value.generated_or_default_column_info).generated_column_info = nullptr;
      (yylhs.value.generated_or_default_column_info).default_expression = static_cast<zetasql::ASTExpression*>((yystack_[1].value.node));
    }
#line 3054 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 293:
#line 3173 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.generated_or_default_column_info).generated_column_info = nullptr;
      (yylhs.value.generated_or_default_column_info).default_expression = nullptr;
    }
#line 3063 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 294:
#line 3181 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[3].value.node), {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)}), yylhs.location);
    }
#line 3071 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 295:
#line 3188 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTPrimaryKeyColumnAttribute, yylhs.location, {});
    }
#line 3079 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 296:
#line 3195 "zetasql/parser/bison_parser.y"
    {
      auto* node = MAKE_NODE(ASTForeignKeyColumnAttribute, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.foreign_key_reference)});
      (yylhs.value.node) = parser->WithStartLocation(node, FirstNonEmptyLocation({yystack_[1].location, yystack_[0].location}));
    }
#line 3088 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 297:
#line 3203 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTHiddenColumnAttribute, yylhs.location, {});
    }
#line 3096 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 298:
#line 3210 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTNotNullColumnAttribute, yylhs.location, {});
    }
#line 3104 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 299:
#line 3216 "zetasql/parser/bison_parser.y"
  { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3110 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 300:
#line 3217 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3116 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 301:
#line 3218 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3122 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 302:
#line 3219 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3128 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 303:
#line 3240 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTColumnAttributeList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 3136 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 304:
#line 3244 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[1].value.node), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 3144 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 305:
#line 3248 "zetasql/parser/bison_parser.y"
      {
        auto* last = (yystack_[1].value.node)->mutable_child((yystack_[1].value.node)->num_children() - 1);
        if (last->node_kind() != zetasql::AST_FOREIGN_KEY_COLUMN_ATTRIBUTE
          && last->node_kind() != zetasql::AST_PRIMARY_KEY_COLUMN_ATTRIBUTE) {
          YYERROR_AND_ABORT_AT(yystack_[0].location,
              "Syntax error: Unexpected constraint enforcement clause");
        }
        // Update the node's location to include constraint_enforcement.
        last = parser->WithEndLocation(last, yylhs.location);
        if (last->node_kind() == zetasql::AST_FOREIGN_KEY_COLUMN_ATTRIBUTE) {
          int index = last->find_child_index(
              zetasql::AST_FOREIGN_KEY_REFERENCE);
          if (index == -1) {
            YYERROR_AND_ABORT_AT(yystack_[0].location,
                "Internal Error: Expected foreign key reference");
          }
          zetasql::ASTForeignKeyReference* reference =
              last->mutable_child(index)
                  ->GetAsOrDie<zetasql::ASTForeignKeyReference>();
          reference->set_enforced((yystack_[0].value.boolean));
        } else {
          zetasql::ASTPrimaryKeyColumnAttribute* primary_key =
              last->GetAsOrDie<zetasql::ASTPrimaryKeyColumnAttribute>();
          primary_key->set_enforced((yystack_[0].value.boolean));
        }
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 3176 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 306:
#line 3278 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3182 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 307:
#line 3279 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 3188 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 308:
#line 3284 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTColumnAttributeList, yylhs.location, {(yystack_[0].value.node)});
    }
#line 3196 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 309:
#line 3287 "zetasql/parser/bison_parser.y"
                  { (yylhs.value.node) = nullptr; }
#line 3202 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 310:
#line 3292 "zetasql/parser/bison_parser.y"
      {
        auto* pos = MAKE_NODE(ASTColumnPosition, yylhs.location, {(yystack_[0].value.identifier)});
        pos->set_type(zetasql::ASTColumnPosition::PRECEDING);
        (yylhs.value.node) = pos;
      }
#line 3212 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 311:
#line 3298 "zetasql/parser/bison_parser.y"
      {
        auto* pos = MAKE_NODE(ASTColumnPosition, yylhs.location, {(yystack_[0].value.identifier)});
        pos->set_type(zetasql::ASTColumnPosition::FOLLOWING);
        (yylhs.value.node) = pos;
      }
#line 3222 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 312:
#line 3306 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3228 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 313:
#line 3307 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 3234 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 314:
#line 3312 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = (yystack_[0].value.expression);
      }
#line 3242 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 315:
#line 3318 "zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 3248 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 316:
#line 3319 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.expression) = nullptr; }
#line 3254 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 317:
#line 3324 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTCheckConstraint, yylhs.location, {(yystack_[3].value.expression), (yystack_[0].value.node)});
        node->set_is_enforced((yystack_[1].value.boolean));
        (yylhs.value.node) = node;
      }
#line 3264 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 318:
#line 3331 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTForeignKeyReference* foreign_key_ref = (yystack_[2].value.foreign_key_reference);
        foreign_key_ref->set_enforced((yystack_[1].value.boolean));
        (yylhs.value.node) = MAKE_NODE(ASTForeignKey, yylhs.location, {(yystack_[3].value.node), (yystack_[2].value.foreign_key_reference), (yystack_[0].value.node)});
      }
#line 3274 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 319:
#line 3341 "zetasql/parser/bison_parser.y"
    {
      zetasql::ASTPrimaryKey* node = MAKE_NODE(ASTPrimaryKey, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
      node->set_enforced((yystack_[1].value.boolean));
      (yylhs.value.node) = node;
    }
#line 3284 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 320:
#line 3349 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3290 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 321:
#line 3350 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3296 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 322:
#line 3356 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3302 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 323:
#line 3357 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3308 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 324:
#line 3359 "zetasql/parser/bison_parser.y"
      {
        auto* node = (yystack_[0].value.node);
        absl::string_view constraint = parser->GetInputText(yystack_[2].location);
        if (!zetasql_base::CaseEqual(constraint, "CONSTRAINT")) {
          if (node->node_kind() == zetasql::AST_CHECK_CONSTRAINT) {
            YYERROR_AND_ABORT_AT(
              yystack_[2].location,
              "Syntax error: Expected CONSTRAINT for check constraint "
              "definition. Check constraints on columns are not supported. "
              "Define check constraints as table elements instead");
          } else if (node->node_kind() == zetasql::AST_FOREIGN_KEY) {
            YYERROR_AND_ABORT_AT(yystack_[2].location,
              "Syntax error: Expected CONSTRAINT for foreign key definition");
          } else {
            YYERROR_AND_ABORT_AT(yylhs.location,
              "Syntax error: Unkown table constraint type");
          }
        }
        node->AddChild((yystack_[1].value.identifier));
        (yylhs.value.node) = parser->WithLocation(node, yylhs.location);
      }
#line 3334 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 325:
#line 3387 "zetasql/parser/bison_parser.y"
      {
        auto* reference = MAKE_NODE(ASTForeignKeyReference, yylhs.location, {(yystack_[3].value.expression), (yystack_[2].value.node), (yystack_[0].value.node)});
        reference->set_match((yystack_[1].value.foreign_key_match));
        (yylhs.value.foreign_key_reference) = reference;
      }
#line 3344 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 326:
#line 3395 "zetasql/parser/bison_parser.y"
                                   { (yylhs.value.foreign_key_match) = (yystack_[0].value.foreign_key_match); }
#line 3350 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 327:
#line 3396 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.foreign_key_match) = zetasql::ASTForeignKeyReference::SIMPLE; }
#line 3356 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 328:
#line 3400 "zetasql/parser/bison_parser.y"
             { (yylhs.value.foreign_key_match) = zetasql::ASTForeignKeyReference::SIMPLE; }
#line 3362 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 329:
#line 3401 "zetasql/parser/bison_parser.y"
             { (yylhs.value.foreign_key_match) = zetasql::ASTForeignKeyReference::FULL; }
#line 3368 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 330:
#line 3402 "zetasql/parser/bison_parser.y"
                               {
      (yylhs.value.foreign_key_match) = zetasql::ASTForeignKeyReference::NOT_DISTINCT;
    }
#line 3376 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 331:
#line 3409 "zetasql/parser/bison_parser.y"
      {
        auto* actions = MAKE_NODE(ASTForeignKeyActions, yylhs.location, {});
        actions->set_update_action((yystack_[1].value.foreign_key_action));
        actions->set_delete_action((yystack_[0].value.foreign_key_action));
        (yylhs.value.node) = actions;
      }
#line 3387 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 332:
#line 3416 "zetasql/parser/bison_parser.y"
      {
        auto* actions = MAKE_NODE(ASTForeignKeyActions, yylhs.location, {});
        actions->set_delete_action((yystack_[1].value.foreign_key_action));
        actions->set_update_action((yystack_[0].value.foreign_key_action));
        (yylhs.value.node) = actions;
      }
#line 3398 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 333:
#line 3423 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTForeignKeyActions, yylhs.location, {});
      }
#line 3406 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 334:
#line 3429 "zetasql/parser/bison_parser.y"
    { (yylhs.value.foreign_key_action) = (yystack_[0].value.foreign_key_action); }
#line 3412 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 335:
#line 3430 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.foreign_key_action) = zetasql::ASTForeignKeyActions::NO_ACTION; }
#line 3418 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 336:
#line 3434 "zetasql/parser/bison_parser.y"
    { (yylhs.value.foreign_key_action) = (yystack_[0].value.foreign_key_action); }
#line 3424 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 337:
#line 3435 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.foreign_key_action) = zetasql::ASTForeignKeyActions::NO_ACTION; }
#line 3430 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 338:
#line 3439 "zetasql/parser/bison_parser.y"
                                     { (yylhs.value.foreign_key_action) = (yystack_[0].value.foreign_key_action); }
#line 3436 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 339:
#line 3443 "zetasql/parser/bison_parser.y"
                                     { (yylhs.value.foreign_key_action) = (yystack_[0].value.foreign_key_action); }
#line 3442 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 340:
#line 3447 "zetasql/parser/bison_parser.y"
                  { (yylhs.value.foreign_key_action) = zetasql::ASTForeignKeyActions::NO_ACTION; }
#line 3448 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 341:
#line 3448 "zetasql/parser/bison_parser.y"
                 { (yylhs.value.foreign_key_action) = zetasql::ASTForeignKeyActions::RESTRICT; }
#line 3454 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 342:
#line 3449 "zetasql/parser/bison_parser.y"
                { (yylhs.value.foreign_key_action) = zetasql::ASTForeignKeyActions::CASCADE; }
#line 3460 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 343:
#line 3450 "zetasql/parser/bison_parser.y"
                   { (yylhs.value.foreign_key_action) = zetasql::ASTForeignKeyActions::SET_NULL; }
#line 3466 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 344:
#line 3454 "zetasql/parser/bison_parser.y"
                            { (yylhs.value.node) = (yystack_[0].value.identifier); }
#line 3472 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 345:
#line 3455 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 3478 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 346:
#line 3459 "zetasql/parser/bison_parser.y"
    { (yylhs.value.boolean) = (yystack_[0].value.boolean); }
#line 3484 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 347:
#line 3460 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.boolean) = true; }
#line 3490 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 348:
#line 3464 "zetasql/parser/bison_parser.y"
               { (yylhs.value.boolean) = true; }
#line 3496 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 349:
#line 3465 "zetasql/parser/bison_parser.y"
                       { (yylhs.value.boolean) = false; }
#line 3502 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 350:
#line 3472 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.table_or_table_function_keywords) = TableOrTableFunctionKeywords::kTableAndFunctionKeywords;
      }
#line 3510 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 351:
#line 3476 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.table_or_table_function_keywords) = TableOrTableFunctionKeywords::kTableKeyword;
      }
#line 3518 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 352:
#line 3483 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFSchemaColumn, yylhs.location, {(yystack_[1].value.identifier), (yystack_[0].value.node)});
      }
#line 3526 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 353:
#line 3487 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFSchemaColumn, yylhs.location, {nullptr, (yystack_[0].value.node)});
      }
#line 3534 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 354:
#line 3494 "zetasql/parser/bison_parser.y"
      {
        auto* create = MAKE_NODE(ASTTVFSchema, yylhs.location, {(yystack_[0].value.node)});
        (yylhs.value.node) = create;
      }
#line 3543 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 355:
#line 3499 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 3551 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 356:
#line 3506 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 3559 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 357:
#line 3511 "zetasql/parser/bison_parser.y"
                           { (yylhs.value.boolean) = true; }
#line 3565 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 358:
#line 3512 "zetasql/parser/bison_parser.y"
                  { (yylhs.value.boolean) = false; }
#line 3571 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 359:
#line 3520 "zetasql/parser/bison_parser.y"
      {
        auto* create =
            MAKE_NODE(ASTCreateViewStatement, yylhs.location, {(yystack_[4].value.expression), (yystack_[3].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[9].value.boolean));
        create->set_scope((yystack_[8].value.create_scope));
        create->set_recursive((yystack_[7].value.boolean));
        create->set_is_if_not_exists((yystack_[5].value.boolean));
        create->set_sql_security((yystack_[2].value.sql_security));
        (yylhs.value.node) = create;
      }
#line 3586 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 360:
#line 3535 "zetasql/parser/bison_parser.y"
      {
        auto* create = MAKE_NODE(
          ASTCreateMaterializedViewStatement, yylhs.location, {(yystack_[6].value.expression), (yystack_[5].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
        create->set_is_or_replace((yystack_[11].value.boolean));
        create->set_recursive((yystack_[9].value.boolean));
        create->set_scope(zetasql::ASTCreateStatement::DEFAULT_SCOPE);
        create->set_is_if_not_exists((yystack_[7].value.boolean));
        create->set_sql_security((yystack_[4].value.sql_security));
        (yylhs.value.node) = create;
      }
#line 3601 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 361:
#line 3548 "zetasql/parser/bison_parser.y"
               { (yylhs.value.node) = (yystack_[0].value.query); }
#line 3607 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 362:
#line 3551 "zetasql/parser/bison_parser.y"
             { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3613 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 363:
#line 3552 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 3619 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 364:
#line 3556 "zetasql/parser/bison_parser.y"
             { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3625 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 365:
#line 3557 "zetasql/parser/bison_parser.y"
                          { (yylhs.value.node) = (yystack_[0].value.expression); }
#line 3631 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 366:
#line 3558 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 3637 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 367:
#line 3562 "zetasql/parser/bison_parser.y"
                        { (yylhs.value.boolean) = true; }
#line 3643 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 368:
#line 3563 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.boolean) = false; }
#line 3649 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 369:
#line 3568 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithStartLocation((yystack_[0].value.node), yylhs.location);
      }
#line 3657 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 370:
#line 3575 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDescribeStatement, yylhs.location, {(yystack_[2].value.identifier), (yystack_[1].value.expression), (yystack_[0].value.expression)});
      }
#line 3665 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 371:
#line 3579 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDescribeStatement, yylhs.location, {nullptr, (yystack_[1].value.expression), (yystack_[0].value.expression)});
      }
#line 3673 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 372:
#line 3586 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = (yystack_[0].value.expression);
      }
#line 3681 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 373:
#line 3589 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.expression) = nullptr; }
#line 3687 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 374:
#line 3594 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTExplainStatement, yylhs.location, {(yystack_[0].value.node)});
      }
#line 3695 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 375:
#line 3601 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTExportDataStatement, yylhs.location, {(yystack_[3].value.node), (yystack_[2].value.node), (yystack_[0].value.query)});
      }
#line 3703 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 376:
#line 3608 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTExportModelStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 3711 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 377:
#line 3615 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTGrantStatement, yylhs.location, {(yystack_[5].value.node), (yystack_[3].value.identifier), (yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 3719 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 378:
#line 3619 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTGrantStatement, yylhs.location, {(yystack_[4].value.node), (yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 3727 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 379:
#line 3626 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRevokeStatement, yylhs.location, {(yystack_[5].value.node), (yystack_[3].value.identifier), (yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 3735 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 380:
#line 3630 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRevokeStatement, yylhs.location, {(yystack_[4].value.node), (yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 3743 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 381:
#line 3637 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPrivileges, yylhs.location, {});
      }
#line 3751 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 382:
#line 3641 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 3759 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 385:
#line 3653 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPrivileges, yylhs.location, {(yystack_[0].value.node)});
      }
#line 3767 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 386:
#line 3657 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 3775 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 387:
#line 3664 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPrivileges, yylhs.location, {(yystack_[0].value.node)});
      }
#line 3783 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 388:
#line 3668 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 3791 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 389:
#line 3675 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPrivilege, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 3799 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 390:
#line 3682 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPrivilege, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 3807 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 391:
#line 3689 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.identifier);
      }
#line 3815 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 392:
#line 3693 "zetasql/parser/bison_parser.y"
      {
        // The SELECT keyword is allowed to be a privilege name.
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 3824 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 393:
#line 3701 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRenameStatement, yylhs.location, {(yystack_[3].value.identifier), (yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 3832 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 394:
#line 3709 "zetasql/parser/bison_parser.y"
      {
        auto* import = MAKE_NODE(ASTImportStatement, yylhs.location, {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
        switch ((yystack_[3].value.import_type)) {
          case ImportType::kModule:
            import->set_import_kind(zetasql::ASTImportStatement::MODULE);
            break;
          case ImportType::kProto:
            import->set_import_kind(zetasql::ASTImportStatement::PROTO);
            break;
        }
        (yylhs.value.node) = import;
      }
#line 3849 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 395:
#line 3725 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTModuleStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 3857 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 396:
#line 3732 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTIndexItemList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 3865 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 397:
#line 3736 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 3873 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 398:
#line 3743 "zetasql/parser/bison_parser.y"
      {
        auto* all_columns = MAKE_NODE(ASTIndexAllColumns, yylhs.location);
        all_columns->set_image("ALL COLUMNS");
        auto* ordering_expr =
            MAKE_NODE(ASTOrderingExpression, yylhs.location,
                      {all_columns, nullptr, nullptr});
        ordering_expr->set_ordering_spec(
                                zetasql::ASTOrderingExpression::UNSPECIFIED);
        (yylhs.value.node) = MAKE_NODE(ASTIndexItemList, yylhs.location, {ordering_expr});
      }
#line 3888 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 399:
#line 3756 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
    }
#line 3896 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 400:
#line 3760 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location);
    }
#line 3904 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 401:
#line 3767 "zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = MAKE_NODE(ASTIndexUnnestExpressionList, yylhs.location, {(yystack_[0].value.node)});
     }
#line 3912 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 402:
#line 3772 "zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = WithExtraChildren((yystack_[1].value.node), {(yystack_[0].value.node)});
     }
#line 3920 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 403:
#line 3778 "zetasql/parser/bison_parser.y"
   { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3926 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 404:
#line 3779 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 3932 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 405:
#line 3784 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTIndexStoringExpressionList, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 3940 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 406:
#line 3788 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 3948 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 407:
#line 3795 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 3956 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 408:
#line 3801 "zetasql/parser/bison_parser.y"
                                          {
    (yylhs.value.node) = (yystack_[0].value.node);
  }
#line 3964 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 409:
#line 3807 "zetasql/parser/bison_parser.y"
   { (yylhs.value.node) = (yystack_[0].value.node); }
#line 3970 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 410:
#line 3808 "zetasql/parser/bison_parser.y"
                   { (yylhs.value.node) = nullptr; }
#line 3976 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 411:
#line 3813 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTColumnList, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 3984 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 412:
#line 3817 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.identifier)});
      }
#line 3992 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 413:
#line 3824 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 4000 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 414:
#line 3830 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4006 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 415:
#line 3831 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4012 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 416:
#line 3836 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 4020 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 417:
#line 3840 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 4028 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 418:
#line 3847 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTGranteeList, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 4036 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 419:
#line 3851 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)}), yylhs.location);
      }
#line 4044 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 420:
#line 3858 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTShowStatement, yylhs.location, {(yystack_[2].value.identifier), (yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 4052 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 421:
#line 3865 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.identifier) = parser->MakeIdentifier(yylhs.location, "MATERIALIZED VIEWS");
    }
#line 4060 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 422:
#line 3869 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.identifier) = (yystack_[0].value.identifier);
    }
#line 4068 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 423:
#line 3876 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 4076 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 424:
#line 3879 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4082 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 425:
#line 3884 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 4090 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 426:
#line 3887 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4096 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 427:
#line 3892 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 4104 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 428:
#line 3895 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4110 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 429:
#line 3900 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 4118 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 430:
#line 3903 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4124 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 431:
#line 3908 "zetasql/parser/bison_parser.y"
          { (yylhs.value.all_or_distinct_keyword) = AllOrDistinctKeyword::kAll; }
#line 4130 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 432:
#line 3909 "zetasql/parser/bison_parser.y"
                 { (yylhs.value.all_or_distinct_keyword) = AllOrDistinctKeyword::kDistinct; }
#line 4136 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 433:
#line 3916 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.set_operation_type) = zetasql::ASTSetOperation::UNION;
      }
#line 4144 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 434:
#line 3920 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.set_operation_type) = zetasql::ASTSetOperation::EXCEPT;
      }
#line 4152 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 435:
#line 3924 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.set_operation_type) = zetasql::ASTSetOperation::INTERSECT;
      }
#line 4160 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 436:
#line 3931 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4166 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 437:
#line 3932 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4172 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 438:
#line 3943 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4178 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 439:
#line 3944 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4184 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 440:
#line 3954 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.query) = MAKE_NODE(ASTQuery, yylhs.location, {(yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 4192 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 441:
#line 3958 "zetasql/parser/bison_parser.y"
      {
        // TODO: Consider pointing the error location at the comma
        // instead of at the SELECT.
        YYERROR_AND_ABORT_AT(yystack_[0].location,
                             "Syntax error: Trailing comma after the WITH "
                             "clause before the SELECT clause is not allowed");
      }
#line 4204 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 442:
#line 3967 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.query) = MAKE_NODE(ASTQuery, yylhs.location, {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 4212 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 443:
#line 3981 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTQuery, yylhs.location, {(yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 4220 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 444:
#line 3985 "zetasql/parser/bison_parser.y"
      {
        // TODO: Consider pointing the error location at the comma
        // instead of at the SELECT.
        YYERROR_AND_ABORT_AT(yystack_[0].location,
                             "Syntax error: Trailing comma after the WITH "
                             "clause before the SELECT clause is not allowed");
      }
#line 4232 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 445:
#line 3994 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTQuery, yylhs.location, {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 4240 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 446:
#line 4010 "zetasql/parser/bison_parser.y"
      {
        auto* set_op = MAKE_NODE(ASTSetOperation, yylhs.location, {(yystack_[2].value.node), (yystack_[4].value.node), (yystack_[0].value.node)});
        set_op->set_op_type((yystack_[3].value.set_operation_type));
        set_op->set_distinct((yystack_[1].value.all_or_distinct_keyword) == AllOrDistinctKeyword::kDistinct);
        (yylhs.value.query_set_operation) = set_op;
      }
#line 4251 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 447:
#line 4018 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTSetOperation* set_op = (yystack_[4].value.query_set_operation);
        if (set_op->op_type() != (yystack_[3].value.set_operation_type) ||
            set_op->distinct() != ((yystack_[1].value.all_or_distinct_keyword) == AllOrDistinctKeyword::kDistinct)) {
          YYERROR_AND_ABORT_AT(
              yystack_[3].location,
              "Syntax error: Different set operations cannot be used in the "
              "same query without using parentheses for grouping");
        }
        if (/*hint*/(yystack_[2].value.node)) {
          YYERROR_AND_ABORT_AT(
              yystack_[2].location,
              "Syntax error: Hints on set operations must appear on the first "
              " operation.");
        }
        (yylhs.value.query_set_operation) = WithExtraChildren(set_op, {(yystack_[0].value.node)});
      }
#line 4273 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 448:
#line 4040 "zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.query_set_operation), yylhs.location);
     }
#line 4281 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 449:
#line 4055 "zetasql/parser/bison_parser.y"
      {
        auto* set_op = MAKE_NODE(ASTSetOperation, yylhs.location, {(yystack_[3].value.node), (yystack_[0].value.node)});
        set_op->set_op_type((yystack_[2].value.set_operation_type));
        set_op->set_distinct((yystack_[1].value.all_or_distinct_keyword) == AllOrDistinctKeyword::kDistinct);
        (yylhs.value.query_set_operation) = set_op;
      }
#line 4292 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 450:
#line 4063 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTSetOperation* set_op = (yystack_[3].value.query_set_operation);
        if (set_op->op_type() != (yystack_[2].value.set_operation_type) ||
            set_op->distinct() != ((yystack_[1].value.all_or_distinct_keyword) == AllOrDistinctKeyword::kDistinct)) {
          YYERROR_AND_ABORT_AT(
              yystack_[2].location,
              "Syntax error: Different set operations cannot be used in the "
              "same query without using parentheses for grouping");
        }
        (yylhs.value.query_set_operation) = WithExtraChildren(set_op, {(yystack_[0].value.node)});
      }
#line 4308 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 451:
#line 4084 "zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.query_set_operation), yylhs.location);
     }
#line 4316 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 452:
#line 4091 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4322 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 453:
#line 4093 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTQuery* query = (yystack_[1].value.query);
        query->set_parenthesized(true);
        (yylhs.value.node) = query;
      }
#line 4332 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 454:
#line 4108 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4338 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 455:
#line 4110 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[0].value.expression)->node_kind() != zetasql::AST_EXPRESSION_SUBQUERY) {
          // We could give an error at the end of the expression, because that's
          // where the context turns the expression into an argument of a
          // relational set operator. However, there are cases where this is
          // triggered where the following token really can't be recognized by
          // the user as a relational operator, even though it does force the
          // interpretation to be "query". So we point at the beginning of the
          // expression instead, to be on the safe side.
          // TODO: This is not ideal. Make a better error message.
          YYERROR_AND_ABORT_AT(
              yylhs.location,
              "Syntax error: Parenthesized expression cannot be parsed as an "
              "expression, struct constructor, or subquery");
        }
        zetasql::ASTQuery* query =
            (yystack_[0].value.expression)->GetAsOrDie<zetasql::ASTExpressionSubquery>()
              ->GetMutableQueryChildInternal();
        if (query == nullptr) {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              "Internal error: expected query as child of subquery");
        }
        query->set_parenthesized(true);
        (yylhs.value.node) = query;
      }
#line 4369 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 456:
#line 4143 "zetasql/parser/bison_parser.y"
      {
        auto* select =
            MAKE_NODE(ASTSelect, yylhs.location, {(yystack_[6].value.node), (yystack_[5].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.clauses_following_from).where, (yystack_[0].value.clauses_following_from).group_by,
                                      (yystack_[0].value.clauses_following_from).having, (yystack_[0].value.clauses_following_from).qualify, (yystack_[0].value.clauses_following_from).window});
        select->set_distinct((yystack_[4].value.all_or_distinct_keyword) == AllOrDistinctKeyword::kDistinct);
        (yylhs.value.node) = select;
      }
#line 4381 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 457:
#line 4154 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: SELECT list must not be empty");
      }
#line 4391 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 458:
#line 4163 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = (yystack_[0].value.node);
      if ((yylhs.value.node) == nullptr ) {
        // Since WITH ANONYMIZATION is present but there was no options list
        // specified, we indicate the presence of WITH ANONYMIZATION by
        // returning an empty options list.
        (yylhs.value.node) = MAKE_NODE(ASTOptionsList, yylhs.location);
      }
    }
#line 4405 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 459:
#line 4172 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4411 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 460:
#line 4179 "zetasql/parser/bison_parser.y"
      {
         auto* select_as = MAKE_NODE(ASTSelectAs, yylhs.location);
         select_as->set_as_mode(zetasql::ASTSelectAs::STRUCT);
         (yylhs.value.node) = select_as;
      }
#line 4421 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 461:
#line 4185 "zetasql/parser/bison_parser.y"
      {
        // "VALUE" is a valid identifier, so it can be a valid path expression.
        // But AS VALUE has a special meaning as a SELECT statement mode. We
        // handle it here, but only when VALUE is used without backquotes. With
        // backquotes the `VALUE` is treated like a regular path expression.
        bool is_value = false;
        if ((yystack_[0].value.expression)->num_children() == 1) {
          if (zetasql_base::CaseEqual(parser->GetInputText(yystack_[0].location), "VALUE")) {
            auto* select_as = MAKE_NODE(ASTSelectAs, yylhs.location);
            select_as->set_as_mode(zetasql::ASTSelectAs::VALUE);
            (yylhs.value.node) = select_as;
            is_value = true;
          }
        }
        if (!is_value) {
          auto* select_as = MAKE_NODE(ASTSelectAs, yylhs.location, {(yystack_[0].value.expression)});
          select_as->set_as_mode(zetasql::ASTSelectAs::TYPE_NAME);
          (yylhs.value.node) = select_as;
        }
      }
#line 4446 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 462:
#line 4205 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4452 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 466:
#line 4215 "zetasql/parser/bison_parser.y"
    { (yylhs.value.identifier) = (yystack_[0].value.identifier); }
#line 4458 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 467:
#line 4217 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.identifier) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 4466 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 468:
#line 4224 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHintEntry, yylhs.location, {(yystack_[2].value.identifier), (yystack_[0].value.expression)});
      }
#line 4474 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 469:
#line 4228 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHintEntry, yylhs.location, {(yystack_[4].value.identifier), (yystack_[2].value.identifier), (yystack_[0].value.expression)});
      }
#line 4482 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 470:
#line 4235 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHint, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 4490 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 471:
#line 4239 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHint, yylhs.location, {(yystack_[0].value.node)});
      }
#line 4498 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 472:
#line 4243 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 4506 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 473:
#line 4250 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 4514 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 474:
#line 4260 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHint, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 4522 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 475:
#line 4263 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4528 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 476:
#line 4268 "zetasql/parser/bison_parser.y"
          { (yylhs.value.all_or_distinct_keyword) = AllOrDistinctKeyword::kAll; }
#line 4534 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 477:
#line 4269 "zetasql/parser/bison_parser.y"
                 { (yylhs.value.all_or_distinct_keyword) = AllOrDistinctKeyword::kDistinct; }
#line 4540 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 478:
#line 4270 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.all_or_distinct_keyword) = AllOrDistinctKeyword::kNone; }
#line 4546 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 479:
#line 4275 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSelectList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 4554 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 480:
#line 4279 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 4562 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 481:
#line 4286 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location);
      }
#line 4570 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 482:
#line 4291 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 4578 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 483:
#line 4298 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStarExceptList, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 4586 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 484:
#line 4302 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.identifier)});
      }
#line 4594 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 485:
#line 4309 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 4602 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 486:
#line 4316 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStarReplaceItem, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.identifier)});
      }
#line 4610 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 487:
#line 4323 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStarModifiers, yylhs.location, {(yystack_[3].value.node), (yystack_[0].value.node)});
      }
#line 4618 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 488:
#line 4327 "zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = MAKE_NODE(ASTStarModifiers, yylhs.location, {(yystack_[0].value.node)});
     }
#line 4626 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 489:
#line 4331 "zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
     }
#line 4634 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 490:
#line 4338 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStarModifiers, yylhs.location, {(yystack_[0].value.node)});
      }
#line 4642 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 491:
#line 4342 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 4650 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 492:
#line 4349 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 4658 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 493:
#line 4353 "zetasql/parser/bison_parser.y"
      {
        auto* alias = MAKE_NODE(ASTAlias, yystack_[1].location, yystack_[0].location, {(yystack_[0].value.identifier)});
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {(yystack_[2].value.expression), alias});
      }
#line 4667 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 494:
#line 4358 "zetasql/parser/bison_parser.y"
      {
        auto* alias = MAKE_NODE(ASTAlias, yystack_[0].location, {(yystack_[0].value.identifier)});
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {(yystack_[1].value.expression), alias});
      }
#line 4676 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 495:
#line 4363 "zetasql/parser/bison_parser.y"
      {
        auto* dot_star = MAKE_NODE(ASTDotStar, yystack_[0].location, {(yystack_[1].value.expression)});
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {dot_star});
      }
#line 4685 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 496:
#line 4368 "zetasql/parser/bison_parser.y"
      {
        auto* dot_star_with_modifiers =
            MAKE_NODE(ASTDotStarWithModifiers, yystack_[1].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.node)});
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {dot_star_with_modifiers});
      }
#line 4695 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 497:
#line 4374 "zetasql/parser/bison_parser.y"
      {
        auto* star = MAKE_NODE(ASTStar, yylhs.location);
        star->set_image("*");
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {star});
      }
#line 4705 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 498:
#line 4380 "zetasql/parser/bison_parser.y"
      {
        auto* star_with_modifiers = MAKE_NODE(ASTStarWithModifiers, yylhs.location, {(yystack_[0].value.node)});
        (yylhs.value.node) = MAKE_NODE(ASTSelectColumn, yylhs.location, {star_with_modifiers});
      }
#line 4714 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 499:
#line 4388 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAlias, FirstNonEmptyLocation({yystack_[1].location, yystack_[0].location}), yystack_[0].location, {(yystack_[0].value.identifier)});
      }
#line 4722 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 500:
#line 4391 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4728 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 501:
#line 4396 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAlias, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 4736 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 502:
#line 4399 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4742 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 503:
#line 4404 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAlias, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 4750 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 504:
#line 4408 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTIntoAlias, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 4758 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 505:
#line 4411 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4764 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 508:
#line 4421 "zetasql/parser/bison_parser.y"
              { (yylhs.value.boolean) = true; }
#line 4770 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 509:
#line 4422 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.boolean) = false; }
#line 4776 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 512:
#line 4428 "zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 4782 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 513:
#line 4429 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 4788 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 514:
#line 4430 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 4794 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 515:
#line 4434 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTCastExpression, yylhs.location, {(yystack_[4].value.expression), (yystack_[2].value.node), (yystack_[1].value.node)});
      }
#line 4802 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 516:
#line 4442 "zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 4808 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 517:
#line 4443 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 4814 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 518:
#line 4448 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRepeatableClause, yylhs.location, {(yystack_[1].value.expression)});
      }
#line 4822 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 519:
#line 4454 "zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 4828 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 520:
#line 4455 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 4834 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 521:
#line 4460 "zetasql/parser/bison_parser.y"
           { (yylhs.value.sample_size_unit) = zetasql::ASTSampleSize::ROWS; }
#line 4840 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 522:
#line 4461 "zetasql/parser/bison_parser.y"
                { (yylhs.value.sample_size_unit) = zetasql::ASTSampleSize::PERCENT; }
#line 4846 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 523:
#line 4466 "zetasql/parser/bison_parser.y"
      {
        auto* sample_size = MAKE_NODE(ASTSampleSize, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.node)});
        sample_size->set_unit((yystack_[1].value.sample_size_unit));
        (yylhs.value.node) = sample_size;
      }
#line 4856 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 524:
#line 4474 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4862 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 525:
#line 4475 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4868 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 526:
#line 4482 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSampleSuffix, yylhs.location, {nullptr, (yystack_[0].value.node)});
      }
#line 4876 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 527:
#line 4486 "zetasql/parser/bison_parser.y"
      {
        auto* with_weight = MAKE_NODE(ASTWithWeight, yylhs.location, {});
        (yylhs.value.node) = MAKE_NODE(ASTSampleSuffix, yylhs.location, {with_weight, (yystack_[0].value.node)});
      }
#line 4885 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 528:
#line 4491 "zetasql/parser/bison_parser.y"
      {
        auto* alias = MAKE_NODE(ASTAlias, yystack_[1].location, {(yystack_[1].value.identifier)});
        auto* with_weight = MAKE_NODE(ASTWithWeight, yylhs.location, {alias});
        (yylhs.value.node) = MAKE_NODE(ASTSampleSuffix, yylhs.location, {with_weight, (yystack_[0].value.node)});
      }
#line 4895 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 529:
#line 4497 "zetasql/parser/bison_parser.y"
      {
        auto* alias = MAKE_NODE(ASTAlias, yystack_[2].location, yystack_[1].location, {(yystack_[1].value.identifier)});
        auto* with_weight = MAKE_NODE(ASTWithWeight, yylhs.location, {alias});
        (yylhs.value.node) = MAKE_NODE(ASTSampleSuffix, yylhs.location, {with_weight, (yystack_[0].value.node)});
      }
#line 4905 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 530:
#line 4502 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4911 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 531:
#line 4507 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSampleClause, yylhs.location, {(yystack_[4].value.identifier), (yystack_[2].value.node), (yystack_[0].value.node)});
      }
#line 4919 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 532:
#line 4513 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 4925 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 533:
#line 4514 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 4931 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 534:
#line 4518 "zetasql/parser/bison_parser.y"
                          {
    (yylhs.value.node) = MAKE_NODE(ASTPivotExpression, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
  }
#line 4939 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 535:
#line 4524 "zetasql/parser/bison_parser.y"
                   {
    (yylhs.value.node) = MAKE_NODE(ASTPivotExpressionList, yylhs.location, {(yystack_[0].value.node)});
  }
#line 4947 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 536:
#line 4527 "zetasql/parser/bison_parser.y"
                                               {
    (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
  }
#line 4955 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 537:
#line 4533 "zetasql/parser/bison_parser.y"
                          {
    (yylhs.value.node) = MAKE_NODE(ASTPivotValue, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
  }
#line 4963 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 538:
#line 4538 "zetasql/parser/bison_parser.y"
              {
    (yylhs.value.node) = MAKE_NODE(ASTPivotValueList, yylhs.location, {(yystack_[0].value.node)});
  }
#line 4971 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 539:
#line 4541 "zetasql/parser/bison_parser.y"
                                     {
    (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
  }
#line 4979 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 540:
#line 4547 "zetasql/parser/bison_parser.y"
                                                      {
      if ((yystack_[7].value.node) == nullptr) {
        YYERROR_AND_ABORT_AT(yystack_[7].location,
        "PIVOT clause requires at least one pivot expression");
      }
      (yylhs.value.pivot_clause) = MAKE_NODE(ASTPivotClause, yylhs.location, {(yystack_[7].value.node), (yystack_[5].value.expression), (yystack_[2].value.node)});
  }
#line 4991 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 541:
#line 4556 "zetasql/parser/bison_parser.y"
                       {
    (yylhs.value.node) = MAKE_NODE(ASTUnpivotInItemLabel, yylhs.location, {(yystack_[0].value.expression)});
  }
#line 4999 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 542:
#line 4559 "zetasql/parser/bison_parser.y"
                          {
    (yylhs.value.node) = MAKE_NODE(ASTUnpivotInItemLabel, yylhs.location, {(yystack_[0].value.expression)})
  }
#line 5007 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 543:
#line 4562 "zetasql/parser/bison_parser.y"
                  { (yylhs.value.node) = nullptr; }
#line 5013 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 544:
#line 4566 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTPathExpressionList, yylhs.location, {(yystack_[0].value.expression)});
    }
#line 5021 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 545:
#line 4570 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)}), yylhs.location);
    }
#line 5029 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 546:
#line 4575 "zetasql/parser/bison_parser.y"
                              {
   (yylhs.value.node) = (yystack_[1].value.node);
 }
#line 5037 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 547:
#line 4579 "zetasql/parser/bison_parser.y"
                 {
   (yylhs.value.node) = MAKE_NODE(ASTPathExpressionList, yylhs.location, {(yystack_[0].value.expression)});
 }
#line 5045 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 548:
#line 4584 "zetasql/parser/bison_parser.y"
                                                                {
    (yylhs.value.node) = MAKE_NODE(ASTUnpivotInItem, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.node)});
  }
#line 5053 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 549:
#line 4589 "zetasql/parser/bison_parser.y"
                      {
    (yylhs.value.node) = MAKE_NODE(ASTUnpivotInItemList, yylhs.location, {(yystack_[0].value.node)});
  }
#line 5061 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 550:
#line 4592 "zetasql/parser/bison_parser.y"
                                                    {
    (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
  }
#line 5069 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 551:
#line 4597 "zetasql/parser/bison_parser.y"
                                  {
    (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
  }
#line 5077 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 552:
#line 4602 "zetasql/parser/bison_parser.y"
                      { (yylhs.value.opt_unpivot_nulls_filter) = zetasql::ASTUnpivotClause::kExclude; }
#line 5083 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 553:
#line 4603 "zetasql/parser/bison_parser.y"
                        { (yylhs.value.opt_unpivot_nulls_filter) = zetasql::ASTUnpivotClause::kInclude; }
#line 5089 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 554:
#line 4604 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.opt_unpivot_nulls_filter) = zetasql::ASTUnpivotClause::kUnspecified; }
#line 5095 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 555:
#line 4610 "zetasql/parser/bison_parser.y"
                                                       {
    auto* unpivot_clause = MAKE_NODE(ASTUnpivotClause, yylhs.location, {(yystack_[5].value.node), (yystack_[3].value.expression), (yystack_[1].value.node)});
    unpivot_clause->set_null_filter((yystack_[7].value.opt_unpivot_nulls_filter));
    (yylhs.value.unpivot_clause) = unpivot_clause;
   }
#line 5105 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 556:
#line 4629 "zetasql/parser/bison_parser.y"
                  {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = MAKE_NODE(ASTAlias, yylhs.location, {(yystack_[0].value.identifier)});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = nullptr;
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = nullptr;
  }
#line 5115 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 557:
#line 4634 "zetasql/parser/bison_parser.y"
               {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = MAKE_NODE(ASTAlias, yylhs.location, {(yystack_[0].value.identifier)});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = nullptr;
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = nullptr;
  }
#line 5125 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 558:
#line 4639 "zetasql/parser/bison_parser.y"
                                              {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = MAKE_NODE(ASTAlias, yystack_[3].location, {(yystack_[2].value.identifier)});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = parser->WithEndLocation((yylhs.value.pivot_or_unpivot_clause_and_alias).alias, yystack_[2].location);
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = WithExtraChildren((yystack_[1].value.pivot_clause),
        {static_cast<zetasql::ASTAlias*>((yystack_[0].value.node))});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = nullptr;
  }
#line 5137 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 559:
#line 4646 "zetasql/parser/bison_parser.y"
                                                {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = MAKE_NODE(ASTAlias, yystack_[3].location, {(yystack_[2].value.identifier)});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = parser->WithEndLocation((yylhs.value.pivot_or_unpivot_clause_and_alias).alias, yystack_[2].location);
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = WithExtraChildren((yystack_[1].value.unpivot_clause),
        {static_cast<zetasql::ASTAlias*>((yystack_[0].value.node))});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = nullptr;
  }
#line 5149 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 560:
#line 4653 "zetasql/parser/bison_parser.y"
                                               {
    YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "QUALIFY clause must be used in conjunction with WHERE or GROUP BY "
        "or HAVING clause");
  }
#line 5160 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 561:
#line 4659 "zetasql/parser/bison_parser.y"
                                         {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = MAKE_NODE(ASTAlias, yystack_[2].location, {(yystack_[2].value.identifier)});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = WithExtraChildren((yystack_[1].value.pivot_clause),
        {static_cast<zetasql::ASTAlias*>((yystack_[0].value.node))});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = nullptr;
  }
#line 5171 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 562:
#line 4665 "zetasql/parser/bison_parser.y"
                                           {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = MAKE_NODE(ASTAlias, yystack_[2].location, {(yystack_[2].value.identifier)});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = WithExtraChildren((yystack_[1].value.unpivot_clause),
        {static_cast<zetasql::ASTAlias*>((yystack_[0].value.node))});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = nullptr;
  }
#line 5182 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 563:
#line 4671 "zetasql/parser/bison_parser.y"
                                          {
    YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "QUALIFY clause must be used in conjunction with WHERE or GROUP BY "
        "or HAVING clause");
  }
#line 5193 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 564:
#line 4677 "zetasql/parser/bison_parser.y"
                              {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = nullptr;
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = WithExtraChildren((yystack_[1].value.pivot_clause),
        {static_cast<zetasql::ASTAlias*>((yystack_[0].value.node))});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = nullptr;
  }
#line 5204 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 565:
#line 4683 "zetasql/parser/bison_parser.y"
                                {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = nullptr;
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = WithExtraChildren((yystack_[1].value.unpivot_clause),
        {static_cast<zetasql::ASTAlias*>((yystack_[0].value.node))});
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = nullptr;
  }
#line 5215 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 566:
#line 4689 "zetasql/parser/bison_parser.y"
                               {
    YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "QUALIFY clause must be used in conjunction with WHERE or GROUP BY "
        "or HAVING clause");
  }
#line 5226 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 567:
#line 4695 "zetasql/parser/bison_parser.y"
                  {
    (yylhs.value.pivot_or_unpivot_clause_and_alias).alias = nullptr;
    (yylhs.value.pivot_or_unpivot_clause_and_alias).pivot_clause = nullptr;
    (yylhs.value.pivot_or_unpivot_clause_and_alias).unpivot_clause = nullptr;
  }
#line 5236 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 568:
#line 4704 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTQuery* query = (yystack_[3].value.query);
        if ((yystack_[1].value.pivot_or_unpivot_clause_and_alias).pivot_clause != nullptr) {
          query->set_is_pivot_input(true);
        }
        query->set_is_nested(true);
        (yylhs.value.node) = MAKE_NODE(ASTTableSubquery, yylhs.location, {
            (yystack_[3].value.query), (yystack_[1].value.pivot_or_unpivot_clause_and_alias).alias, (yystack_[1].value.pivot_or_unpivot_clause_and_alias).pivot_clause, (yystack_[1].value.pivot_or_unpivot_clause_and_alias).unpivot_clause, (yystack_[0].value.node)});
      }
#line 5250 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 569:
#line 4718 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTableClause, yylhs.location, {(yystack_[0].value.node)});
      }
#line 5258 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 570:
#line 4722 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTableClause, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 5266 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 571:
#line 4729 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTModelClause, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 5274 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 572:
#line 4736 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTConnectionClause, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 5282 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 573:
#line 4743 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDescriptorColumn, yylhs.location, {(yystack_[0].value.identifier), nullptr});
      }
#line 5290 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 574:
#line 4750 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDescriptorColumnList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 5298 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 575:
#line 4754 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 5306 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 576:
#line 4761 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDescriptor, yylhs.location, {(yystack_[1].value.node)});
      }
#line 5314 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 577:
#line 4768 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFArgument, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 5322 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 578:
#line 4772 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFArgument, yylhs.location, {(yystack_[0].value.node)});
      }
#line 5330 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 579:
#line 4776 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFArgument, yylhs.location, {(yystack_[0].value.node)});
      }
#line 5338 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 580:
#line 4780 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFArgument, yylhs.location, {(yystack_[0].value.node)});
      }
#line 5346 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 581:
#line 4784 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFArgument, yylhs.location, {(yystack_[0].value.node)});
      }
#line 5354 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 582:
#line 4788 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVFArgument, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 5362 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 583:
#line 4792 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[2].location,
            "Syntax error: Table arguments for table-valued function "
            "calls written as \"TABLE path\" must not be enclosed in "
            "parentheses. To fix this, replace (TABLE path) with TABLE path");
      }
#line 5374 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 584:
#line 4800 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[2].location,
            "Syntax error: Model arguments for table-valued function "
            "calls written as \"MODEL path\" must not be enclosed in "
            "parentheses. To fix this, replace (MODEL path) with MODEL path");
      }
#line 5386 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 585:
#line 4808 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[2].location,
            "Syntax error: Connection arguments for table-valued function "
            "calls written as \"CONNECTION path\" must not be enclosed in "
            "parentheses. To fix this, replace (CONNECTION path) with "
            "CONNECTION path");
      }
#line 5399 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 586:
#line 4817 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[2].location,
            "Syntax error: Named arguments for table-valued function "
            "calls written as \"name => value\" must not be enclosed in "
            "parentheses. To fix this, replace (name => value) with "
            "name => value");
      }
#line 5412 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 587:
#line 4826 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Each subquery argument for table-valued function "
            "calls must be enclosed in parentheses. To fix this, replace "
            "SELECT... with (SELECT...)");
      }
#line 5424 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 588:
#line 4834 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Each subquery argument for table-valued function "
            "calls must be enclosed in parentheses. To fix this, replace "
            "WITH... with (WITH...)");
      }
#line 5436 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 589:
#line 4845 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTVF, yylhs.location, {(yystack_[1].value.expression)});
      }
#line 5444 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 590:
#line 4849 "zetasql/parser/bison_parser.y"
      {
        auto* identifier = parser->MakeIdentifier(yystack_[1].location, parser->GetInputText(yystack_[1].location));
        auto* path_expression = MAKE_NODE(ASTPathExpression, yystack_[1].location, {identifier});
        (yylhs.value.node) = MAKE_NODE(ASTTVF, yylhs.location, {path_expression});
      }
#line 5454 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 591:
#line 4858 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[1].value.node), {(yystack_[0].value.node)});
      }
#line 5462 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 592:
#line 4862 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 5470 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 593:
#line 4870 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren(parser->WithEndLocation((yystack_[4].value.node), yylhs.location), {
            (yystack_[2].value.node), (yystack_[1].value.pivot_or_unpivot_clause_and_alias).alias, (yystack_[0].value.node), (yystack_[1].value.pivot_or_unpivot_clause_and_alias).pivot_clause, (yystack_[1].value.pivot_or_unpivot_clause_and_alias).unpivot_clause});
      }
#line 5479 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 594:
#line 4876 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren(parser->WithEndLocation((yystack_[4].value.node), yylhs.location), {
            (yystack_[2].value.node), (yystack_[1].value.pivot_or_unpivot_clause_and_alias).alias, (yystack_[1].value.pivot_or_unpivot_clause_and_alias).pivot_clause, (yystack_[1].value.pivot_or_unpivot_clause_and_alias).unpivot_clause, (yystack_[0].value.node)});
      }
#line 5488 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 595:
#line 4883 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5494 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 596:
#line 4884 "zetasql/parser/bison_parser.y"
                                              { (yylhs.value.node) = (yystack_[0].value.expression); }
#line 5500 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 597:
#line 4886 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Array element access is not allowed in the FROM "
            "clause without UNNEST; Use UNNEST(<expression>)");
      }
#line 5511 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 598:
#line 4893 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Generalized field access is not allowed in the FROM "
            "clause without UNNEST; Use UNNEST(<expression>)");
      }
#line 5522 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 599:
#line 4900 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Array element access is not allowed in the FROM "
            "clause without UNNEST; Use UNNEST(<expression>)");
      }
#line 5533 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 600:
#line 4907 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Generalized field access is not allowed in the FROM "
            "clause without UNNEST; Use UNNEST(<expression>)");
      }
#line 5544 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 601:
#line 4919 "zetasql/parser/bison_parser.y"
      {
        if ( (yystack_[2].value.node) != nullptr) {
          // We do not support combining PIVOT or UNPIVOT with WITH OFFSET.
          // If we did, we would want the WITH OFFSET clause to appear in the
          // grammar before PIVOT so that it operates on the pivot input.
          // However, putting it there results in reduce/reduce conflicts and,
          // even if there were a way to avoid such conflicts, the resultant
          // tree would be thrown out in the resolver later anyway, since we
          // don't support value-tables as PIVOT input.
          //
          // So, the simplest solution to avoid dealing with the above is to
          // put opt_with_offset_and_alias after PIVOT (so the right action
          // happens if we have a WITH OFFSET without PIVOT) and give an explicit
          // error if both clauses are present.
          if ((yystack_[3].value.pivot_or_unpivot_clause_and_alias).pivot_clause != nullptr) {
            YYERROR_AND_ABORT_AT(yystack_[2].location,
              "PIVOT and WITH OFFSET cannot be combined");
          }
          if ((yystack_[3].value.pivot_or_unpivot_clause_and_alias).unpivot_clause != nullptr) {
            YYERROR_AND_ABORT_AT(yystack_[2].location,
              "UNPIVOT and WITH OFFSET cannot be combined");
          }
        }

        if ((yystack_[1].value.node) != nullptr) {
          if ((yystack_[3].value.pivot_or_unpivot_clause_and_alias).pivot_clause != nullptr) {
            YYERROR_AND_ABORT_AT(
                yystack_[1].location,
                "Syntax error: PIVOT and FOR SYSTEM TIME AS OF "
                "may not be combined");
          }
          if ((yystack_[3].value.pivot_or_unpivot_clause_and_alias).unpivot_clause != nullptr) {
            YYERROR_AND_ABORT_AT(
                yystack_[1].location,
                "Syntax error: UNPIVOT and FOR SYSTEM TIME AS OF "
                "may not be combined");
          }
        }
        (yylhs.value.node) = MAKE_NODE(ASTTablePathExpression, yylhs.location, {(yystack_[5].value.node), (yystack_[4].value.node), (yystack_[3].value.pivot_or_unpivot_clause_and_alias).alias,
            (yystack_[3].value.pivot_or_unpivot_clause_and_alias).pivot_clause, (yystack_[3].value.pivot_or_unpivot_clause_and_alias).unpivot_clause, (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 5590 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 602:
#line 4962 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5596 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 603:
#line 4963 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5602 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 604:
#line 4965 "zetasql/parser/bison_parser.y"
      {
        zetasql::parser::ErrorInfo error_info;
        auto node = zetasql::parser::TransformJoinExpression(
          (yystack_[2].value.node), parser, &error_info);
        if (node == nullptr) {
          YYERROR_AND_ABORT_AT(error_info.location, error_info.message);
        }

        (yylhs.value.node) = MAKE_NODE(ASTParenthesizedJoin, yylhs.location, {node, (yystack_[0].value.node)});
      }
#line 5617 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 605:
#line 4975 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5623 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 606:
#line 4980 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTForSystemTime, yylhs.location, {(yystack_[0].value.expression)})
      }
#line 5631 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 607:
#line 4984 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTForSystemTime, yylhs.location, {(yystack_[0].value.expression)})
      }
#line 5639 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 608:
#line 4988 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 5645 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 609:
#line 4993 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTOnClause, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 5653 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 610:
#line 5000 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUsingClause, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 5661 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 611:
#line 5004 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.identifier)});
      }
#line 5669 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 612:
#line 5011 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 5677 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 613:
#line 5017 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5683 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 614:
#line 5019 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 5691 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 615:
#line 5026 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTOnOrUsingClauseList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 5699 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 616:
#line 5030 "zetasql/parser/bison_parser.y"
      {
        if (parser->language_options() != nullptr &&
            parser->language_options()->LanguageFeatureEnabled(
               zetasql::FEATURE_V_1_3_ALLOW_CONSECUTIVE_ON)) {
          (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[1].value.node), {(yystack_[0].value.node)}), yylhs.location);
        } else {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              absl::StrCat(
                  "Syntax error: Expected end of input but got keyword ",
                  ((yystack_[0].value.node)->node_kind() == zetasql::AST_ON_CLAUSE
                       ? "ON" : "USING")));
        }
      }
#line 5718 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 617:
#line 5047 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5724 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 618:
#line 5048 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5730 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 619:
#line 5052 "zetasql/parser/bison_parser.y"
            { (yylhs.value.join_type) = zetasql::ASTJoin::CROSS; }
#line 5736 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 620:
#line 5053 "zetasql/parser/bison_parser.y"
                       { (yylhs.value.join_type) = zetasql::ASTJoin::FULL; }
#line 5742 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 621:
#line 5054 "zetasql/parser/bison_parser.y"
              { (yylhs.value.join_type) = zetasql::ASTJoin::INNER; }
#line 5748 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 622:
#line 5055 "zetasql/parser/bison_parser.y"
                       { (yylhs.value.join_type) = zetasql::ASTJoin::LEFT; }
#line 5754 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 623:
#line 5056 "zetasql/parser/bison_parser.y"
                        { (yylhs.value.join_type) = zetasql::ASTJoin::RIGHT; }
#line 5760 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 624:
#line 5057 "zetasql/parser/bison_parser.y"
                     { (yylhs.value.join_type) = zetasql::ASTJoin::DEFAULT_JOIN_TYPE; }
#line 5766 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 625:
#line 5062 "zetasql/parser/bison_parser.y"
           { (yylhs.value.join_hint) = zetasql::ASTJoin::HASH; }
#line 5772 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 626:
#line 5063 "zetasql/parser/bison_parser.y"
               { (yylhs.value.join_hint) = zetasql::ASTJoin::LOOKUP; }
#line 5778 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 627:
#line 5064 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.join_hint) = zetasql::ASTJoin::NO_JOIN_HINT; }
#line 5784 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 628:
#line 5067 "zetasql/parser/bison_parser.y"
            { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5790 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 629:
#line 5067 "zetasql/parser/bison_parser.y"
                   { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5796 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 630:
#line 5079 "zetasql/parser/bison_parser.y"
      {
        zetasql::parser::ErrorInfo error_info;
        auto node = zetasql::parser::JoinRuleAction(
            FirstNonEmptyLocation({yystack_[6].location, yystack_[5].location, yystack_[4].location, yystack_[3].location}), yylhs.location,
            (yystack_[7].value.node), (yystack_[6].value.boolean), (yystack_[5].value.join_type), (yystack_[4].value.join_hint), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node), parser, &error_info);
        if (node == nullptr) {
          YYERROR_AND_ABORT_AT(error_info.location, error_info.message);
        }

        (yylhs.value.node) = node;
      }
#line 5812 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 631:
#line 5093 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5818 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 632:
#line 5095 "zetasql/parser/bison_parser.y"
      {
        zetasql::parser::ErrorInfo error_info;
        auto node = zetasql::parser::CommaJoinRuleAction(
            yystack_[1].location, yystack_[0].location, (yystack_[2].value.node), (yystack_[0].value.node), parser, &error_info);
        if (node == nullptr) {
          YYERROR_AND_ABORT_AT(error_info.location, error_info.message);
        }

        (yylhs.value.node) = node;
      }
#line 5833 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 633:
#line 5107 "zetasql/parser/bison_parser.y"
      {
        // Give an error if we have a RIGHT or FULL JOIN following a comma
        // join since our left-to-right binding would violate the standard.
        // See (broken link).
        if (((yystack_[5].value.join_type) == zetasql::ASTJoin::FULL ||
             (yystack_[5].value.join_type) == zetasql::ASTJoin::RIGHT) &&
            (yystack_[7].value.node)->node_kind() == zetasql::AST_JOIN) {
          const auto* join_input = (yystack_[7].value.node)->GetAsOrDie<zetasql::ASTJoin>();
          while (true) {
            if (join_input->join_type() == zetasql::ASTJoin::COMMA) {
              YYERROR_AND_ABORT_AT(
                  yystack_[5].location,
                  absl::StrCat("Syntax error: ",
                               ((yystack_[5].value.join_type) == zetasql::ASTJoin::FULL
                                    ? "FULL" : "RIGHT"),
                               " JOIN must be parenthesized when following a "
                               "comma join.  Also, if the preceding comma join "
                               "is a correlated CROSS JOIN that unnests an "
                               "array, then CROSS JOIN syntax must be used in "
                               "place of the comma join"));
            }
            if (join_input->child(0)->node_kind() == zetasql::AST_JOIN) {
              // Look deeper only if the left input is an unparenthesized join.
              join_input =
                  join_input->child(0)->GetAsOrDie<zetasql::ASTJoin>();
            } else {
              break;
            }
          }
        }

        zetasql::parser::ErrorInfo error_info;
        auto node = zetasql::parser::JoinRuleAction(
            FirstNonEmptyLocation({yystack_[6].location, yystack_[5].location, yystack_[4].location, yystack_[3].location}), yylhs.location,
            (yystack_[7].value.node), (yystack_[6].value.boolean), (yystack_[5].value.join_type), (yystack_[4].value.join_hint), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node),
            parser, &error_info);
        if (node == nullptr) {
          YYERROR_AND_ABORT_AT(error_info.location, error_info.message);
        }

        (yylhs.value.node) = node;
      }
#line 5880 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 634:
#line 5150 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location, "Query parameters cannot be used in place of table names");
      }
#line 5889 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 635:
#line 5155 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location, "Query parameters cannot be used in place of table names");
      }
#line 5898 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 636:
#line 5160 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location, "System variables cannot be used in place of table names");
      }
#line 5907 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 637:
#line 5168 "zetasql/parser/bison_parser.y"
      {
        zetasql::parser::ErrorInfo error_info;
        auto node = zetasql::parser::TransformJoinExpression(
          (yystack_[0].value.node), parser, &error_info);
        if (node == nullptr) {
          YYERROR_AND_ABORT_AT(error_info.location, error_info.message);
        }

        (yylhs.value.node) = MAKE_NODE(ASTFromClause, yylhs.location, {node});
      }
#line 5922 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 638:
#line 5178 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 5928 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 639:
#line 5194 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.clauses_following_from) = {(yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)};
      }
#line 5936 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 640:
#line 5198 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.clauses_following_from) = {/*where=*/nullptr, (yystack_[0].value.clauses_following_from).group_by, (yystack_[0].value.clauses_following_from).having, (yystack_[0].value.clauses_following_from).qualify, (yystack_[0].value.clauses_following_from).window};
      }
#line 5944 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 641:
#line 5204 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.clauses_following_from) = {/*where=*/nullptr, (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)};
      }
#line 5952 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 642:
#line 5208 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.clauses_following_from) = {/*where=*/nullptr, /*group_by=*/nullptr, (yystack_[0].value.clauses_following_from).having, (yystack_[0].value.clauses_following_from).qualify,
              (yystack_[0].value.clauses_following_from).window};
      }
#line 5961 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 643:
#line 5215 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.clauses_following_from) = {/*where=*/nullptr, /*group_by=*/nullptr, (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)};
      }
#line 5969 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 644:
#line 5219 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.clauses_following_from) = {/*where=*/nullptr, /*group_by=*/nullptr, /*having=*/nullptr,
              (yystack_[1].value.node), (yystack_[0].value.node)};
      }
#line 5978 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 645:
#line 5225 "zetasql/parser/bison_parser.y"
                       { (yylhs.value.node) = MAKE_NODE(ASTWhereClause, yylhs.location, {(yystack_[0].value.expression)}); }
#line 5984 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 646:
#line 5228 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 5990 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 647:
#line 5229 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 5996 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 648:
#line 5234 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTRollup, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6004 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 649:
#line 5238 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 6012 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 650:
#line 5245 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTGroupingItem, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6020 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 651:
#line 5249 "zetasql/parser/bison_parser.y"
      {
        (yystack_[1].value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
        (yylhs.value.node) = MAKE_NODE(ASTGroupingItem, yylhs.location, {(yystack_[1].value.node)});
      }
#line 6029 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 652:
#line 5257 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTGroupBy, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
      }
#line 6037 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 653:
#line 5261 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 6045 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 654:
#line 5268 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location);
      }
#line 6053 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 655:
#line 5273 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6059 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 656:
#line 5274 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6065 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 657:
#line 5279 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTHaving, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6073 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 658:
#line 5284 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6079 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 659:
#line 5285 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6085 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 660:
#line 5290 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWindowDefinition, yylhs.location, {(yystack_[2].value.identifier), (yystack_[0].value.node)});
      }
#line 6093 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 661:
#line 5297 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWindowClause, yylhs.location, {(yystack_[0].value.node)});
      }
#line 6101 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 662:
#line 5301 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 6109 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 663:
#line 5308 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location);
      }
#line 6117 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 664:
#line 5311 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6123 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 665:
#line 5315 "zetasql/parser/bison_parser.y"
                              { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6129 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 666:
#line 5316 "zetasql/parser/bison_parser.y"
                                 { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6135 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 667:
#line 5317 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6141 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 668:
#line 5322 "zetasql/parser/bison_parser.y"
      {
       if (parser->language_options() == nullptr ||
            !parser->language_options()->LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_QUALIFY)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "QUALIFY is not supported");
        }
        (yylhs.value.node) = MAKE_NODE(ASTQualify, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6154 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 669:
#line 5333 "zetasql/parser/bison_parser.y"
                           { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6160 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 670:
#line 5334 "zetasql/parser/bison_parser.y"
                   { (yylhs.value.node) = nullptr; }
#line 6166 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 671:
#line 5338 "zetasql/parser/bison_parser.y"
      {
       if (parser->language_options() == nullptr ||
            !parser->language_options()->LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_QUALIFY)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "QUALIFY is not supported");
        }
        (yylhs.value.node) = MAKE_NODE(ASTQualify, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6179 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 672:
#line 5351 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTLimitOffset, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 6187 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 673:
#line 5355 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTLimitOffset, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6195 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 674:
#line 5358 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6201 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 675:
#line 5363 "zetasql/parser/bison_parser.y"
      {
        auto* modifier = MAKE_NODE(ASTHavingModifier, yylhs.location, {(yystack_[0].value.expression)});
        modifier->set_modifier_kind(
            zetasql::ASTHavingModifier::ModifierKind::MAX);
        (yylhs.value.node) = modifier;
      }
#line 6212 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 676:
#line 5370 "zetasql/parser/bison_parser.y"
      {
        auto* modifier = MAKE_NODE(ASTHavingModifier, yylhs.location, {(yystack_[0].value.expression)});
        modifier->set_modifier_kind(
            zetasql::ASTHavingModifier::ModifierKind::MIN);
        (yylhs.value.node) = modifier;
      }
#line 6223 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 677:
#line 5376 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6229 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 678:
#line 5381 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTClampedBetweenModifier, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)})
      }
#line 6237 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 679:
#line 5384 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6243 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 680:
#line 5389 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.null_handling_modifier) = zetasql::ASTFunctionCall::IGNORE_NULLS;
      }
#line 6251 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 681:
#line 5393 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.null_handling_modifier) = zetasql::ASTFunctionCall::RESPECT_NULLS;
      }
#line 6259 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 682:
#line 5397 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.null_handling_modifier) = zetasql::ASTFunctionCall::DEFAULT_NULL_HANDLING;
      }
#line 6267 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 683:
#line 5404 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWithClauseEntry, yylhs.location, {(yystack_[4].value.identifier), (yystack_[1].value.query)});
      }
#line 6275 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 684:
#line 5411 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWithClause, yylhs.location, {(yystack_[0].value.node)});
        (yylhs.value.node) = parser->WithEndLocation((yylhs.value.node), yylhs.location);
      }
#line 6284 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 685:
#line 5416 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTWithClause* with_clause =
            MAKE_NODE(ASTWithClause, yylhs.location, {(yystack_[0].value.node)})
        with_clause = parser->WithEndLocation(with_clause, yylhs.location);
        with_clause->set_recursive(true);
        (yylhs.value.node) = with_clause;
      }
#line 6296 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 686:
#line 5424 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 6304 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 687:
#line 5430 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6310 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 688:
#line 5431 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6316 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 689:
#line 5436 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 6324 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 690:
#line 5443 "zetasql/parser/bison_parser.y"
          { (yylhs.value.ordering_spec) = zetasql::ASTOrderingExpression::ASC; }
#line 6330 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 691:
#line 5444 "zetasql/parser/bison_parser.y"
             { (yylhs.value.ordering_spec) = zetasql::ASTOrderingExpression::DESC; }
#line 6336 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 692:
#line 5445 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.ordering_spec) = zetasql::ASTOrderingExpression::UNSPECIFIED; }
#line 6342 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 693:
#line 5450 "zetasql/parser/bison_parser.y"
      {
        auto* null_order = MAKE_NODE(ASTNullOrder, yylhs.location, {});
        null_order->set_nulls_first(true);
        (yylhs.value.node) = null_order;
      }
#line 6352 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 694:
#line 5456 "zetasql/parser/bison_parser.y"
      {
        auto* null_order = MAKE_NODE(ASTNullOrder, yylhs.location, {});
        null_order->set_nulls_first(false);
        (yylhs.value.node) = null_order;
      }
#line 6362 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 695:
#line 5461 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6368 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 696:
#line 5465 "zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6374 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 697:
#line 5466 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6380 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 698:
#line 5467 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6386 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 699:
#line 5471 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCollate, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 6394 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 700:
#line 5476 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 6400 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 701:
#line 5477 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6406 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 702:
#line 5482 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 6414 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 703:
#line 5485 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6420 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 704:
#line 5490 "zetasql/parser/bison_parser.y"
      {
        auto* ordering_expr =
            MAKE_NODE(ASTOrderingExpression, yylhs.location, {(yystack_[3].value.expression), (yystack_[2].value.node), (yystack_[0].value.node)});
        ordering_expr->set_ordering_spec((yystack_[1].value.ordering_spec));
        (yylhs.value.node) = ordering_expr;
      }
#line 6431 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 705:
#line 5500 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTOrderBy, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
      }
#line 6439 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 706:
#line 5504 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 6447 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 707:
#line 5511 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location);
      }
#line 6455 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 708:
#line 5514 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 6461 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 709:
#line 5525 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTExpressionSubquery* subquery = (yystack_[0].value.expression_subquery);
        zetasql::ASTQuery* query =
            subquery->GetMutableQueryChildInternal();
        if (query == nullptr) {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              "Internal error: expected query child of subquery");
        }
        (yylhs.value.node) = query;
      }
#line 6477 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 710:
#line 5537 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[1].value.expression)->node_kind() == zetasql::AST_EXPRESSION_SUBQUERY) {
          auto* subquery = (yystack_[1].value.expression)->GetAsOrDie<zetasql::ASTExpressionSubquery>();
          if (subquery->modifier() ==
                  zetasql::ASTExpressionSubquery::Modifier::NONE) {
            // To match the JavaCC parser, we prefer interpretating IN ((query))
            // as IN (query) with a parenthesized query, not a value IN list
            // containing a scalar expression query.
            // Return the contained ASTQuery, wrapped in another ASTQuery to
            // replace the parentheses.
            zetasql::ASTQuery* query =
                subquery->GetMutableQueryChildInternal();
            if (query == nullptr) {
              YYERROR_AND_ABORT_AT(
                  yystack_[1].location,
                  "Internal error: expected query child of parenthesized"
                  " subquery");
            }
            query->set_parenthesized(true);
            (yylhs.value.node) = MAKE_NODE(ASTQuery, yystack_[1].location, {query});
          } else {
            // The expression subquery is an EXISTS or ARRAY subquery, which
            // is a scalar expression and is not interpreted as a Query.  Treat
            // this as an InList with a single element.
            // Don't include the parentheses in the location, to match the
            // JavaCC parser.
            (yylhs.value.node) = MAKE_NODE(ASTInList, yystack_[1].location, {(yystack_[1].value.expression)});
          }
        } else {
          // Don't include the parentheses in the location, to match the JavaCC
          // parser.
          (yylhs.value.node) = MAKE_NODE(ASTInList, yystack_[1].location, {(yystack_[1].value.expression)});
        }
      }
#line 6516 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 711:
#line 5572 "zetasql/parser/bison_parser.y"
      {
        // Don't include the ")" in the location, to match the JavaCC parser.
        // TODO: Fix that.
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yystack_[1].location);
      }
#line 6526 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 712:
#line 5581 "zetasql/parser/bison_parser.y"
      {
        // The JavaCC parser doesn't include the opening "(" in the location
        // for some reason. TODO: Correct this after JavaCC is gone.
        (yylhs.value.node) = MAKE_NODE(ASTInList, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 6536 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 713:
#line 5587 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 6544 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 714:
#line 5594 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUnnestExpression, yylhs.location, {(yystack_[1].value.expression)});
      }
#line 6552 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 715:
#line 5598 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "The argument to UNNEST is an expression, not a query; to use a query "
        "as an expression, the query must be wrapped with additional "
        "parentheses to make it a scalar subquery expression");
      }
#line 6564 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 716:
#line 5609 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUnnestExpressionWithOptAliasAndOffset, yylhs.location,
                       {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 6573 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 717:
#line 5617 "zetasql/parser/bison_parser.y"
        { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::EQ; }
#line 6579 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 718:
#line 5618 "zetasql/parser/bison_parser.y"
           { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::NE; }
#line 6585 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 719:
#line 5619 "zetasql/parser/bison_parser.y"
           { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::NE2; }
#line 6591 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 720:
#line 5620 "zetasql/parser/bison_parser.y"
          { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::LT; }
#line 6597 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 721:
#line 5621 "zetasql/parser/bison_parser.y"
           { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::LE; }
#line 6603 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 722:
#line 5622 "zetasql/parser/bison_parser.y"
          { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::GT; }
#line 6609 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 723:
#line 5623 "zetasql/parser/bison_parser.y"
           { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::GE; }
#line 6615 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 724:
#line 5626 "zetasql/parser/bison_parser.y"
        { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::PLUS; }
#line 6621 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 725:
#line 5627 "zetasql/parser/bison_parser.y"
          { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::MINUS; }
#line 6627 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 726:
#line 5631 "zetasql/parser/bison_parser.y"
        { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::MULTIPLY; }
#line 6633 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 727:
#line 5632 "zetasql/parser/bison_parser.y"
          { (yylhs.value.binary_op) = zetasql::ASTBinaryExpression::DIVIDE; }
#line 6639 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 728:
#line 5637 "zetasql/parser/bison_parser.y"
         { (yylhs.value.shift_operator) = ShiftOperator::kLeft; }
#line 6645 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 729:
#line 5638 "zetasql/parser/bison_parser.y"
           { (yylhs.value.shift_operator) = ShiftOperator::kRight; }
#line 6651 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 730:
#line 5643 "zetasql/parser/bison_parser.y"
             { (yylhs.value.import_type) = ImportType::kModule; }
#line 6657 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 731:
#line 5644 "zetasql/parser/bison_parser.y"
              { (yylhs.value.import_type) = ImportType::kProto; }
#line 6663 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 732:
#line 5650 "zetasql/parser/bison_parser.y"
      {
       if (parser->language_options() == nullptr ||
            !parser->language_options()->LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_LIKE_ANY_SOME_ALL)) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, "LIKE ANY is not supported");
        }
        auto* op =
            MAKE_NODE(ASTAnySomeAllOp, yylhs.location, {});
        op->set_op(zetasql::ASTAnySomeAllOp::kAny);
        (yylhs.value.node) = op;
      }
#line 6679 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 733:
#line 5662 "zetasql/parser/bison_parser.y"
      {
       if (parser->language_options() == nullptr ||
            !parser->language_options()->LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_LIKE_ANY_SOME_ALL)) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, "LIKE SOME is not supported");
        }
        auto* op =
            MAKE_NODE(ASTAnySomeAllOp, yylhs.location, {});
        op->set_op(zetasql::ASTAnySomeAllOp::kSome);
        (yylhs.value.node) = op;
      }
#line 6695 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 734:
#line 5674 "zetasql/parser/bison_parser.y"
      {
       if (parser->language_options() == nullptr ||
            !parser->language_options()->LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_LIKE_ANY_SOME_ALL)) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, "LIKE ALL is not supported");
        }
        auto* op =
            MAKE_NODE(ASTAnySomeAllOp, yylhs.location, {});
        op->set_op(zetasql::ASTAnySomeAllOp::kAll);
        (yylhs.value.node) = op;
      }
#line 6711 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 735:
#line 5689 "zetasql/parser/bison_parser.y"
           { (yylhs.value.not_keyword_presence) = NotKeywordPresence::kAbsent; }
#line 6717 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 736:
#line 5691 "zetasql/parser/bison_parser.y"
      {
        yylhs.location = yystack_[0].location;  // Error messages should point at the "LIKE".
        (yylhs.value.not_keyword_presence) = NotKeywordPresence::kPresent;
      }
#line 6726 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 737:
#line 5700 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.not_keyword_presence) = NotKeywordPresence::kAbsent;
      }
#line 6734 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 738:
#line 5704 "zetasql/parser/bison_parser.y"
      {
        yylhs.location = yystack_[0].location;  // Error messages should point at the "BETWEEN".
        (yylhs.value.not_keyword_presence) = NotKeywordPresence::kPresent;
      }
#line 6743 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 739:
#line 5712 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.not_keyword_presence) = NotKeywordPresence::kAbsent;
      }
#line 6751 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 740:
#line 5716 "zetasql/parser/bison_parser.y"
      {
        yylhs.location = yystack_[1].location;  // Error messages should point at the "DISTINCT".
        (yylhs.value.not_keyword_presence) = NotKeywordPresence::kPresent;
      }
#line 6760 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 741:
#line 5724 "zetasql/parser/bison_parser.y"
         { (yylhs.value.not_keyword_presence) = NotKeywordPresence::kAbsent; }
#line 6766 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 742:
#line 5726 "zetasql/parser/bison_parser.y"
      {
        yylhs.location = yystack_[0].location;  // Error messages should point at the "IN".
        (yylhs.value.not_keyword_presence) = NotKeywordPresence::kPresent;
      }
#line 6775 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 743:
#line 5734 "zetasql/parser/bison_parser.y"
         { (yylhs.value.not_keyword_presence) = NotKeywordPresence::kAbsent; }
#line 6781 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 744:
#line 5735 "zetasql/parser/bison_parser.y"
                 { (yylhs.value.not_keyword_presence) = NotKeywordPresence::kPresent; }
#line 6787 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 745:
#line 5740 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.unary_op) = zetasql::ASTUnaryExpression::PLUS;
      }
#line 6795 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 746:
#line 5744 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.unary_op) = zetasql::ASTUnaryExpression::MINUS;
      }
#line 6803 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 747:
#line 5748 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.unary_op) = zetasql::ASTUnaryExpression::BITWISE_NOT;
      }
#line 6811 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 748:
#line 5756 "zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6817 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 749:
#line 5757 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6823 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 750:
#line 5758 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6829 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 751:
#line 5759 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6835 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 752:
#line 5760 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6841 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 753:
#line 5761 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6847 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 754:
#line 5762 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6853 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 755:
#line 5763 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6859 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 756:
#line 5764 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6865 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 757:
#line 5765 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6871 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 758:
#line 5766 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6877 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 759:
#line 5767 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6883 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 760:
#line 5768 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6889 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 761:
#line 5769 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6895 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 762:
#line 5770 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6901 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 763:
#line 5771 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6907 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 764:
#line 5772 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6913 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 765:
#line 5773 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6919 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 766:
#line 5774 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6925 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 767:
#line 5775 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6931 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 768:
#line 5776 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6937 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 769:
#line 5778 "zetasql/parser/bison_parser.y"
      {
        // The path expression is extended by the "." identifier rule below.
        (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, {(yystack_[0].value.identifier)});

        // This could be a bare reference to a CURRENT_* date/time function.
        // Those functions can be called without arguments, but they should
        // still be parsed as function calls. We only parse them as such when
        // the identifiers are not backquoted, i.e., when they are used as
        // keywords. The backquoted versions are treated like regular
        // identifiers.
        // GetInputText() returns the backquotes if they are in the input.
        absl::string_view raw_input = parser->GetInputText(yystack_[0].location);
        // Quick check to filter out certain non-matches.
        if (zetasql_base::CaseEqual(raw_input.substr(0, 8), "current_")) {
          absl::string_view remainder = raw_input.substr(8);
          if (zetasql_base::CaseEqual(remainder, "time") ||
              zetasql_base::CaseEqual(remainder, "date") ||
              zetasql_base::CaseEqual(remainder, "datetime") ||
              zetasql_base::CaseEqual(remainder, "timestamp")) {
            auto* function_call = MAKE_NODE(ASTFunctionCall, yylhs.location, {(yylhs.value.expression)});
            function_call->set_is_current_date_time_without_parentheses(true);
            (yylhs.value.expression) = function_call;
          }
        }
      }
#line 6967 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 770:
#line 5803 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6973 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 771:
#line 5804 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 6979 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 772:
#line 5806 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = (yystack_[0].value.expression_subquery);
      }
#line 6987 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 773:
#line 5810 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTArrayElement, yystack_[2].location, yystack_[0].location, {(yystack_[3].value.expression), (yystack_[1].value.expression)});
      }
#line 6995 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 774:
#line 5814 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTDotGeneralizedField, yystack_[3].location, yystack_[0].location, {(yystack_[4].value.expression), (yystack_[1].value.expression)});
      }
#line 7003 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 775:
#line 5818 "zetasql/parser/bison_parser.y"
      {
        // Note that if "expression" ends with an identifier, then the tokenizer
        // switches to IDENTIFIER_DOT mode before tokenizing $3. That means that
        // "identifier" here allows any non-reserved keyword to be used as an
        // identifier, as well as "identifiers" that start with a digit.

        // We try to build path expressions as long as identifiers are added.
        // As soon as a dotted path contains anything else, we use generalized
        // DotIdentifier.
        if ((yystack_[2].value.expression)->node_kind() == zetasql::AST_PATH_EXPRESSION &&
            !(yystack_[2].value.expression)->parenthesized()) {
          (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.identifier)});
        } else {
          (yylhs.value.expression) = MAKE_NODE(ASTDotIdentifier, yystack_[1].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.identifier)});
        }
      }
#line 7024 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 776:
#line 5835 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[2].value.expression)->node_kind() == zetasql::AST_OR_EXPR &&
            !(yystack_[2].value.expression)->parenthesized()) {
          // Embrace and extend $1's ASTNode.
          (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.expression)});
        } else {
          (yylhs.value.expression) = MAKE_NODE(ASTOrExpr, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        }
      }
#line 7038 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 777:
#line 5845 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[2].value.expression)->node_kind() == zetasql::AST_AND_EXPR &&
            !(yystack_[2].value.expression)->parenthesized()) {
          // Embrace and extend $1's ASTNode to flatten a series of ANDs.
          (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.expression)});
        } else {
          (yylhs.value.expression) = MAKE_NODE(ASTAndExpr, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        }
      }
#line 7052 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 778:
#line 5855 "zetasql/parser/bison_parser.y"
      {
        auto* not_expr = MAKE_NODE(ASTUnaryExpression, yylhs.location, {(yystack_[0].value.expression)});
        not_expr->set_op(zetasql::ASTUnaryExpression::NOT);
        (yylhs.value.expression) = not_expr;
      }
#line 7062 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 779:
#line 5861 "zetasql/parser/bison_parser.y"
        {
          if ((yystack_[1].value.node)) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
                                 "Syntax error: HINTs cannot be specified on "
                                 "LIKE clause with UNNEST");
          }
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[4].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[3].location,
                                 "Syntax error: Expression to the left of LIKE "
                                 "must be parenthesized");
          }
          auto* like_expression = MAKE_NODE(ASTLikeExpression, yystack_[3].location, yystack_[0].location, {(yystack_[4].value.expression), (yystack_[2].value.node), (yystack_[0].value.node)});
          like_expression->set_is_not((yystack_[3].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          (yylhs.value.expression) = like_expression;
        }
#line 7084 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 780:
#line 5879 "zetasql/parser/bison_parser.y"
        {
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[4].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[3].location,
                                "Syntax error: Expression to the left of LIKE "
                                "must be parenthesized");
          }
          zetasql::ASTLikeExpression* like_expression = nullptr;
          if ((yystack_[0].value.node)->node_kind() == zetasql::AST_QUERY) {
            like_expression = MAKE_NODE(ASTLikeExpression, yystack_[3].location, yystack_[0].location, {(yystack_[4].value.expression), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
          } else {
            if((yystack_[1].value.node)) {
              YYERROR_AND_ABORT_AT(yystack_[1].location,
                                  "Syntax error: HINTs cannot be specified on "
                                  "LIKE clause with value list");
            }
            like_expression = MAKE_NODE(ASTLikeExpression, yystack_[3].location, yystack_[0].location, {(yystack_[4].value.expression), (yystack_[2].value.node), (yystack_[0].value.node)});
          }
          like_expression->set_is_not((yystack_[3].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          (yylhs.value.expression) = like_expression;
        }
#line 7111 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 781:
#line 5902 "zetasql/parser/bison_parser.y"
        {
          // NOT has lower precedence but can be parsed unparenthesized in the
          // rhs because it is not ambiguous. This is not allowed.
          if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
            YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
          }
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[2].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(
                yystack_[1].location,
                "Syntax error: "
                "Expression to the left of LIKE must be parenthesized");
          }
          auto* binary_expression =
              MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
          binary_expression->set_is_not((yystack_[1].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          binary_expression->set_op(zetasql::ASTBinaryExpression::LIKE);
          (yylhs.value.expression) = binary_expression;
        }
#line 7136 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 782:
#line 5923 "zetasql/parser/bison_parser.y"
        {
          if (parser->language_options() == nullptr
              || !parser->language_options()->LanguageFeatureEnabled(
              zetasql::FEATURE_V_1_3_IS_DISTINCT)) {
            YYERROR_AND_ABORT_AT(
                yystack_[1].location,
                "IS DISTINCT FROM is not supported");
          }
          auto binary_expression =
              MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
              binary_expression->set_is_not((yystack_[1].value.not_keyword_presence) == NotKeywordPresence::kPresent);
              binary_expression->set_op(
                  zetasql::ASTBinaryExpression::DISTINCT);
          (yylhs.value.expression) = binary_expression;
        }
#line 7156 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 783:
#line 5939 "zetasql/parser/bison_parser.y"
        {
          if ((yystack_[1].value.node)) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
                                 "Syntax error: HINTs cannot be specified on "
                                 "IN clause with UNNEST");
          }
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[3].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[2].location,
                                 "Syntax error: Expression to the left of IN "
                                 "must be parenthesized");
          }
          auto* in_expression = MAKE_NODE(ASTInExpression, yystack_[2].location, yystack_[0].location, {(yystack_[3].value.expression), (yystack_[0].value.node)});
          in_expression->set_is_not((yystack_[2].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          (yylhs.value.expression) = in_expression;
        }
#line 7178 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 784:
#line 5957 "zetasql/parser/bison_parser.y"
        {
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[3].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[2].location,
                                "Syntax error: Expression to the left of IN "
                                "must be parenthesized");
          }
          zetasql::ASTInExpression* in_expression = nullptr;
          if ((yystack_[0].value.node)->node_kind() == zetasql::AST_QUERY)
          {
            in_expression = MAKE_NODE(ASTInExpression, yystack_[2].location, yystack_[0].location, {(yystack_[3].value.expression), (yystack_[1].value.node), (yystack_[0].value.node)});
          }
          else
          {
            if((yystack_[1].value.node))
            {
              YYERROR_AND_ABORT_AT(yystack_[1].location,
                                  "Syntax error: HINTs cannot be specified on "
                                  "IN clause with value list");
            }
            in_expression = MAKE_NODE(ASTInExpression, yystack_[2].location, yystack_[0].location, {(yystack_[3].value.expression), (yystack_[0].value.node)});
          }
          in_expression->set_is_not((yystack_[2].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          (yylhs.value.expression) = in_expression;
        }
#line 7209 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 785:
#line 5985 "zetasql/parser/bison_parser.y"
        {
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[4].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[3].location,
                                 "Syntax error: Expression to the left of "
                                 "BETWEEN must be parenthesized");
          }
          // Test the middle operand for unparenthesized operators with lower
          // or equal precedence. These cases are unambiguous w.r.t. the
          // operator precedence parsing, but they are disallowed by the SQL
          // standard because it interprets precedence strictly, i.e., it allows
          // no nesting of operators with lower precedence even if it is
          // unambiguous.
          if (!(yystack_[2].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[2].location,
                                 "Syntax error: Expression in BETWEEN must be "
                                 "parenthesized");
          }
          // NOT has lower precedence but can be parsed unparenthesized in the
          // rhs because it is not ambiguous. This is not allowed.
          if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
            YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[2].location);
          }
          auto* between_expression =
              MAKE_NODE(ASTBetweenExpression, yystack_[3].location, yystack_[0].location, {(yystack_[4].value.expression), (yystack_[2].value.expression), (yystack_[0].value.expression)});
          between_expression->set_is_not((yystack_[3].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          (yylhs.value.expression) = between_expression;
        }
#line 7243 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 786:
#line 6015 "zetasql/parser/bison_parser.y"
        {
          // The Bison parser allows comparison expressions in the LHS, even
          // though these operators are at the same precedence level and are not
          // associative. Explicitly forbid this.
          if (!(yystack_[2].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
                                 "Syntax error: Expression to the left of IS "
                                 "must be parenthesized");
          }
          auto* binary_expression =
              MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
          binary_expression->set_is_not((yystack_[1].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          binary_expression->set_op(zetasql::ASTBinaryExpression::IS);
          (yylhs.value.expression) = binary_expression;
        }
#line 7263 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 787:
#line 6031 "zetasql/parser/bison_parser.y"
        {
          // The Bison parser allows comparison expressions in the LHS, even
          // though these operators are at the same precedence level and are not
          // associative. Explicitly forbid this.
          if (!(yystack_[2].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
                                 "Syntax error: Expression to the left of IS "
                                 "must be parenthesized");
          }
          auto* binary_expression =
              MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
          binary_expression->set_is_not((yystack_[1].value.not_keyword_presence) == NotKeywordPresence::kPresent);
          binary_expression->set_op(zetasql::ASTBinaryExpression::IS);
          (yylhs.value.expression) = binary_expression;
        }
#line 7283 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 788:
#line 6047 "zetasql/parser/bison_parser.y"
        {
          // NOT has lower precedence but can be parsed unparenthesized in the
          // rhs because it is not ambiguous. This is not allowed. We don't have
          // to check for other expressions: other comparison expressions are
          // caught by the Bison grammar because "=" is %nonassoc, and AND and
          // OR will not be parsed as children of this rule because they have
          // lower precedence than "=".
          if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
            YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
          }
          // Bison allows some cases like IN on the left hand side because it's
          // not ambiguous. The language doesn't allow this.
          if (!(yystack_[2].value.expression)->IsAllowedInComparison()) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
                                 "Syntax error: Expression to the left of "
                                 "comparison must be parenthesized");
          }
          auto* binary_expression =
              MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
          binary_expression->set_op((yystack_[1].value.binary_op));
          (yylhs.value.expression) = binary_expression;
        }
#line 7310 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 789:
#line 6070 "zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* binary_expression =
            MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        binary_expression->set_op(
            zetasql::ASTBinaryExpression::BITWISE_OR);
        (yylhs.value.expression) = binary_expression;
      }
#line 7329 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 790:
#line 6085 "zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* binary_expression =
            MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        binary_expression->set_op(
            zetasql::ASTBinaryExpression::BITWISE_XOR);
        (yylhs.value.expression) = binary_expression;
      }
#line 7348 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 791:
#line 6100 "zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* binary_expression =
            MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        binary_expression->set_op(
            zetasql::ASTBinaryExpression::BITWISE_AND);
        (yylhs.value.expression) = binary_expression;
      }
#line 7367 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 792:
#line 6115 "zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. However, this is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* binary_expression =
            MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        binary_expression->set_op(
            zetasql::ASTBinaryExpression::CONCAT_OP);
        (yylhs.value.expression) = binary_expression;
      }
#line 7386 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 793:
#line 6130 "zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* binary_expression =
            MAKE_NODE(ASTBitwiseShiftExpression, yystack_[1].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        binary_expression->set_is_left_shift((yystack_[1].value.shift_operator) == ShiftOperator::kLeft);
        (yylhs.value.expression) = binary_expression;
      }
#line 7404 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 794:
#line 6144 "zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* binary_expression =
            MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        binary_expression->set_op((yystack_[1].value.binary_op));
        (yylhs.value.expression) = binary_expression;
      }
#line 7422 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 795:
#line 6158 "zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* binary_expression =
            MAKE_NODE(ASTBinaryExpression, yystack_[2].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
        binary_expression->set_op((yystack_[1].value.binary_op));
        (yylhs.value.expression) = binary_expression;
      }
#line 7440 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 796:
#line 6172 "zetasql/parser/bison_parser.y"
      {
        // NOT has lower precedence but can be parsed unparenthesized in the
        // rhs because it is not ambiguous. This is not allowed. Other
        // expressions with lower precedence wouldn't be parsed as children, so
        // we don't have to check for those.
        if (IsUnparenthesizedNotExpression((yystack_[0].value.expression))) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        auto* expression =
            MAKE_NODE(ASTUnaryExpression, yylhs.location, {(yystack_[0].value.expression)});
        expression->set_op((yystack_[1].value.unary_op));
        (yylhs.value.expression) = expression;
      }
#line 7458 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 797:
#line 6193 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 7466 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 798:
#line 6197 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.identifier)});
      }
#line 7474 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 799:
#line 6204 "zetasql/parser/bison_parser.y"
      {
        // a - b
        if (parser->HasWhitespace(yystack_[2].location, yystack_[1].location) || parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        absl::string_view id1 = parser->GetInputText(yystack_[2].location);
        absl::string_view id2 = parser->GetInputText(yystack_[0].location);
        if (id1[0] == '`' || id2[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[2].location);
        out->set_path_parts({{id1, "-", id2}});
        (yylhs.value.slashed_identifier) = out;
      }
#line 7493 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 800:
#line 6219 "zetasql/parser/bison_parser.y"
      {
        // a-b - c
        if (parser->HasWhitespace(yystack_[2].location, yystack_[1].location) || parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        SeparatedIdentifierTmpNode::PathParts prev = (yystack_[2].value.slashed_identifier)->release_path_parts();
        absl::string_view id2 = parser->GetInputText(yystack_[0].location);
        if (id2[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        // Add an extra sub-part to the ending dashed identifier.
        prev.back().push_back("-");
        prev.back().push_back(id2);
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[2].location);
        out->set_path_parts(std::move(prev));
        (yylhs.value.slashed_identifier) = out;
      }
#line 7515 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 801:
#line 6237 "zetasql/parser/bison_parser.y"
      {
        // a - 5
        if (parser->HasWhitespace(yystack_[2].location, yystack_[1].location) || parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        absl::string_view id1 = parser->GetInputText(yystack_[2].location);
        absl::string_view id2 = parser->GetInputText(yystack_[0].location);
        if (id1[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[2].location);
        out->set_path_parts({{id1, "-", id2}});
        (yylhs.value.slashed_identifier) = out;
      }
#line 7534 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 802:
#line 6252 "zetasql/parser/bison_parser.y"
      {
        // a-b - 5
        if (parser->HasWhitespace(yystack_[2].location, yystack_[1].location) || parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"-\"");
        }
        SeparatedIdentifierTmpNode::PathParts prev = (yystack_[2].value.slashed_identifier)->release_path_parts();
        absl::string_view id2 = parser->GetInputText(yystack_[0].location);
        prev.back().push_back("-");
        prev.back().push_back(id2);
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[2].location);
        out->set_path_parts(std::move(prev));
        (yylhs.value.slashed_identifier) = out;
      }
#line 7552 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 803:
#line 6266 "zetasql/parser/bison_parser.y"
      {
        // a - 1. b
        if (parser->HasWhitespace(yystack_[3].location, yystack_[2].location) || parser->HasWhitespace(yystack_[2].location, yystack_[1].location)) {
          YYERROR_AND_ABORT_AT(yystack_[2].location, "Syntax error: Unexpected \"-\"");
        }
        absl::string_view id1 = parser->GetInputText(yystack_[3].location);
        absl::string_view id2 = parser->GetInputText(yystack_[1].location);
        absl::string_view id3 = parser->GetInputText(yystack_[0].location);
        if (id1[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[2].location, "Syntax error: Unexpected \"-\"");
        }
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[3].location);
        // Here (and below) we need to handle the case where dot is lex'ed as
        // part of floating number as opposed to path delimiter. To parse it
        // correctly, we push the components separately (as string_view).
        // {{"a", "1"}, "b"}
        out->set_path_parts({{id1, "-", id2}, {id3}});
        (yylhs.value.slashed_identifier) = out;
      }
#line 7576 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 804:
#line 6286 "zetasql/parser/bison_parser.y"
      {
        // a-b - 1. c
        if (parser->HasWhitespace(yystack_[3].location, yystack_[2].location) || parser->HasWhitespace(yystack_[2].location, yystack_[1].location)) {
          YYERROR_AND_ABORT_AT(yystack_[2].location, "Syntax error: Unexpected \"-\"");
        }
        SeparatedIdentifierTmpNode::PathParts prev = (yystack_[3].value.slashed_identifier)->release_path_parts();
        absl::string_view id1 = parser->GetInputText(yystack_[1].location);
        absl::string_view id2 = parser->GetInputText(yystack_[0].location);
        // This case is a continuation of an existing dashed_identifier `prev`,
        // followed by what the lexer believes is a floating point literal.
        // here: /*prev=*/={{"a", "b"}}
        // we append "1" to complete the dashed components, followed
        // by the identifier ("c") as {{"c"}}.
        // Thus, we end up with {{"a", "b", "1"}, {"c"}}
        prev.back().push_back("-");
        prev.back().push_back(id1);
        prev.push_back({id2});
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[3].location);
        out->set_path_parts(std::move(prev));
        (yylhs.value.slashed_identifier) = out;
      }
#line 7602 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 805:
#line 6310 "zetasql/parser/bison_parser.y"
      {
        absl::StatusOr<std::vector<zetasql::ASTNode*>> path_parts =
          SeparatedIdentifierTmpNode::BuildPathParts(yystack_[0].location,
            std::move((yystack_[0].value.slashed_identifier)->release_path_parts()), parser);
        if (!path_parts.ok()) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, std::string(path_parts.status().message()));
        }
        (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, std::move(path_parts).value());
      }
#line 7616 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 806:
#line 6320 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.identifier)});
      }
#line 7624 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 807:
#line 6326 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7630 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 808:
#line 6328 "zetasql/parser/bison_parser.y"
      {
        if (parser->language_options() != nullptr &&
            parser->language_options()->LanguageFeatureEnabled(
               zetasql::FEATURE_V_1_3_ALLOW_DASHES_IN_TABLE_NAME)) {
          (yylhs.value.expression) = (yystack_[0].value.expression);
        } else {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              absl::StrCat(
                "Syntax error: Table name contains '-' character. "
                "It needs to be quoted: ",
                zetasql::ToIdentifierLiteral(
                  parser->GetInputText(yystack_[0].location), false)));
        }
      }
#line 7650 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 809:
#line 6345 "zetasql/parser/bison_parser.y"
                                 { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 7656 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 810:
#line 6347 "zetasql/parser/bison_parser.y"
      {
        if (parser->language_options() != nullptr &&
            parser->language_options()->LanguageFeatureEnabled(
               zetasql::FEATURE_V_1_3_ALLOW_SLASH_PATHS)) {
          (yylhs.value.expression) = (yystack_[0].value.expression);
        } else {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              absl::StrCat(
                "Syntax error: Table name contains '/' character. "
                "It needs to be quoted: ",
                zetasql::ToIdentifierLiteral(
                  parser->GetInputText(yystack_[0].location), false)));
        }
      }
#line 7676 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 817:
#line 6375 "zetasql/parser/bison_parser.y"
      {
        // Return an error if there is embedded whitespace.
        if (parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"/\"");
        }
        absl::string_view id = parser->GetInputText(yystack_[0].location);
        // Return an error if the identifier/literal is quoted.
        if (id[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected \"/\"");
        }
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[1].location);
        out->set_path_parts({{"/", id}});
        (yylhs.value.slashed_identifier) = out;
      }
#line 7695 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 818:
#line 6391 "zetasql/parser/bison_parser.y"
      {
        absl::string_view separator = parser->GetInputText(yystack_[1].location);
        absl::string_view id = parser->GetInputText(yystack_[0].location);
        // Return an error if there is embedded whitespace.
        if (parser->HasWhitespace(yystack_[2].location, yystack_[1].location) || parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[1].location,
            absl::StrFormat("Syntax error: Unexpected \"%s\"", separator));
        }
        // Return an error if the identifier/literal is quoted.
        if (id[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[1].location,
            absl::StrFormat("Syntax error: Unexpected \"%s\"", separator));
        }
        SeparatedIdentifierTmpNode::PathParts prev = (yystack_[2].value.slashed_identifier)->release_path_parts();
        // Add the separator and extra sub-part to the end of the current
        // identifier: {"a", "-", "b"} -> {"a", "-", "b", ":", "c"}
        prev.back().push_back(separator);
        prev.back().push_back(id);
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[2].location);
        out->set_path_parts(std::move(prev));
        (yylhs.value.slashed_identifier) = out;
      }
#line 7722 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 819:
#line 6415 "zetasql/parser/bison_parser.y"
      {
        // This rule handles floating point literals between separator
        // characters (/:-) before the first dot.  The floating point literal
        // can be {1., .1, 1.1, 1e2, 1.e2, .1e2, 1.1e2}.  The only valid form is
        // "1e2".  All forms containing a dot are invalid because the separator
        // characters are not allowed in identifiers after the dot.
        absl::string_view separator1 = parser->GetInputText(yystack_[3].location);
        absl::string_view float_literal = parser->GetInputText(yystack_[2].location);
        absl::string_view separator2 = parser->GetInputText(yystack_[1].location);
        absl::string_view id = parser->GetInputText(yystack_[0].location);
        // Return an error if there is embedded whitespace.
        if (parser->HasWhitespace(yystack_[4].location, yystack_[3].location) || parser->HasWhitespace(yystack_[3].location, yystack_[2].location)) {
          YYERROR_AND_ABORT_AT(yystack_[3].location,
            absl::StrFormat("Syntax error: Unexpected \"%s\"", separator1));
        }
        // Return an error if there is embedded whitespace.
        if (parser->HasWhitespace(yystack_[2].location, yystack_[1].location) || parser->HasWhitespace(yystack_[1].location, yystack_[0].location)) {
          YYERROR_AND_ABORT_AT(yystack_[3].location,
            absl::StrFormat("Syntax error: Unexpected \"%s\"", separator2));
        }
        // Return an error if the trailing identifier is quoted.
        if (id[0] == '`') {
          YYERROR_AND_ABORT_AT(yystack_[3].location,
            absl::StrFormat("Syntax error: Unexpected \"%s\"", separator2));
        }
        // Return an error if the floating point literal contains a dot. Only
        // scientific notation is allowed in this rule.
        if (absl::StrContains(float_literal, '.')) {
          YYERROR_AND_ABORT_AT(yystack_[2].location,
            "Syntax error: Unexpected floating point literal");
        }
        // We are parsing a floating point literal that uses scientific notation
        // in the middle of a slashed path, so just append the text to the
        // existing path. For text: "/a/1e10-b", {"/", "a"} becomes
        // {"/", "a", "/", "1e10". "-", "b"} after matching this rule.
        SeparatedIdentifierTmpNode::PathParts prev = (yystack_[4].value.slashed_identifier)->release_path_parts();
        prev.back().push_back(separator1);
        prev.back().push_back(float_literal);
        prev.back().push_back(separator2);
        prev.back().push_back(id);
        auto out = parser->CreateASTNode<SeparatedIdentifierTmpNode>(yystack_[4].location);
        out->set_path_parts(std::move(prev));
        (yylhs.value.slashed_identifier) = out;
      }
#line 7771 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 820:
#line 6467 "zetasql/parser/bison_parser.y"
     {
       // Build the path.
       absl::StatusOr<std::vector<zetasql::ASTNode*>> path_parts =
          SeparatedIdentifierTmpNode::BuildPathParts(yystack_[0].location,
            std::move((yystack_[0].value.slashed_identifier)->release_path_parts()), parser);
       if (!path_parts.ok()) {
         YYERROR_AND_ABORT_AT(yystack_[0].location, std::string(path_parts.status().message()));
       }
       (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, std::move(path_parts).value());
     }
#line 7786 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 821:
#line 6479 "zetasql/parser/bison_parser.y"
    {
      // This rule handles floating point literals that are preceded by a
      // separator character (/:-). The floating point literal can be
      // {1., .1, 1.1, 1e2, 1.e2, .1e2, 1.1e2}, but the only valid form is a
      // floating point that ends with a dot. The dot is interpreted as the path
      // component separator, and we only allow a regular identifier following
      // the dot. A floating point that starts with a dot is not valid becuase
      // this implies that a dot and separator are adjacent: "-.1". A floating
      // point that has a dot in the middle is not supported because this format
      // is rejected by the tokenizer: "1.5table". A floating point literal that
      // does not contain a dot is not valid because this implies scientific
      // notation was lexed when adjacent to an identifier:
      // "/path/1e10  table". In this case it is not possible to determine if
      // the next token is an alias or part of the next statement.
      absl::string_view separator = parser->GetInputText(yystack_[2].location);
      absl::string_view float_literal = parser->GetInputText(yystack_[1].location);
      absl::string_view id = (yystack_[0].value.identifier)->GetAsStringView();
      // Return an error if there is embedded whitespace.
      if (parser->HasWhitespace(yystack_[3].location, yystack_[2].location) || parser->HasWhitespace(yystack_[2].location, yystack_[1].location)) {
        YYERROR_AND_ABORT_AT(yystack_[2].location,
          absl::StrFormat("Syntax error: Unexpected \"%s\"", separator));
      }
      // Assert that the raw text of the floating literal ends in a dot since
      // we expect this rule to match at the boundary of a new path component.
      if (!absl::EndsWith(float_literal, ".")) {
        YYERROR_AND_ABORT_AT(yystack_[2].location,absl::StrFormat(
          "Syntax error: Unexpected floating point literal \"%s\" after \"%s\"",
          float_literal, separator));
      }
      SeparatedIdentifierTmpNode::PathParts prev =
        (yystack_[3].value.slashed_identifier)->release_path_parts();
      // This case is a continuation of an existing slashed_identifier
      // `prev`, followed by what the lexer believes is a floating point
      // literal.
      // here: /*prev=*/={{"a", "-", "b"}}
      // we append "1" to complete the identifier components, followed
      // by the identifier ("c") as {{"c"}}.
      // Thus, we end up with {{"a", "-", "b", "/", "1"}, {"c"}}
      prev.back().push_back(separator);
      prev.back().push_back(float_literal);
      prev.push_back({id});

      // Build the path.
      absl::StatusOr<std::vector<zetasql::ASTNode*>> path_parts =
        SeparatedIdentifierTmpNode::BuildPathParts(yylhs.location,
          std::move(prev), parser);
      if (!path_parts.ok()) {
        YYERROR_AND_ABORT_AT(yystack_[3].location, std::string(path_parts.status().message()));
      }
      (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, std::move(path_parts).value());
    }
#line 7842 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 822:
#line 6532 "zetasql/parser/bison_parser.y"
    {
      // This rule matches a slashed_identifier that terminates in a floating
      // point literal and is followed by the next path component, which must be
      // a regular identifier. The floating point literal can be
      // {1., .1, 1.1, 1e2, 1.e2, .1e2, 1.1e2}, but the only valid form is
      // "1e2".  All forms containing a dot are invalid because this implies
      // that either there are two dots in a row "1.." or the next path
      // component is a number itself, which we do not support (like "1.5.table"
      // and "1.1e10.table"). Note: paths like "/span/global.5.table" are
      // supported because once the lexer sees the first dot it enters
      // DOT_IDENTIFIER mode and lexs the "5" as an identifier rather than
      // producing a ".5" floating point literal token.
      absl::string_view separator = parser->GetInputText(yystack_[3].location);
      absl::string_view float_literal = parser->GetInputText(yystack_[2].location);
      // Return an error if there is embedded whitespace.
      if (parser->HasWhitespace(yystack_[4].location, yystack_[3].location) || parser->HasWhitespace(yystack_[3].location, yystack_[2].location)) {
        YYERROR_AND_ABORT_AT(yystack_[3].location,
          absl::StrFormat("Syntax error: Unexpected \"%s\"", separator));
      }
      // Reject any floating point literal that contains a dot.
      if (absl::StrContains(float_literal, '.')) {
        YYERROR_AND_ABORT_AT(yystack_[2].location,
          "Syntax error: Unexpected floating point literal");
      }
      // We are parsing a floating point literal that uses scientific notation
      // "1e10" that is followed by a dot and then an identifier. Append the
      // separator and floating point literal to the existing path and then
      // form an ASTPathExpression from the slash path and the trailing
      // identifier.
      SeparatedIdentifierTmpNode::PathParts prev = (yystack_[4].value.slashed_identifier)->release_path_parts();
      prev.back().push_back(separator);
      prev.back().push_back(float_literal);

      // Build the slash path.
      absl::StatusOr<std::vector<zetasql::ASTNode*>> path_parts =
        SeparatedIdentifierTmpNode::BuildPathParts(yylhs.location,
          std::move(prev), parser);
      if (!path_parts.ok()) {
        YYERROR_AND_ABORT_AT(yystack_[4].location, std::string(path_parts.status().message()));
      }
      // Add the trailing identifier to the path.
      path_parts.value().push_back((yystack_[0].value.identifier));
      (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, std::move(path_parts).value());
    }
#line 7891 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 823:
#line 6577 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.identifier)});
    }
#line 7899 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 824:
#line 6583 "zetasql/parser/bison_parser.y"
                { (yylhs.value.expression) = MAKE_NODE(ASTArrayConstructor, yylhs.location); }
#line 7905 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 825:
#line 6584 "zetasql/parser/bison_parser.y"
          { (yylhs.value.expression) = MAKE_NODE(ASTArrayConstructor, yylhs.location); }
#line 7911 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 826:
#line 6586 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTArrayConstructor, yylhs.location, {(yystack_[1].value.node)});
      }
#line 7919 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 827:
#line 6593 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[1].value.expression), {(yystack_[0].value.expression)});
      }
#line 7927 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 828:
#line 6597 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[2].value.expression), {(yystack_[0].value.expression)});
      }
#line 7935 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 829:
#line 6604 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 7943 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 830:
#line 6608 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 7951 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 831:
#line 6614 "zetasql/parser/bison_parser.y"
           { (yylhs.value.type_kind) = zetasql::TYPE_DATE; }
#line 7957 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 832:
#line 6615 "zetasql/parser/bison_parser.y"
                 { (yylhs.value.type_kind) = zetasql::TYPE_DATETIME; }
#line 7963 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 833:
#line 6616 "zetasql/parser/bison_parser.y"
             { (yylhs.value.type_kind) = zetasql::TYPE_TIME; }
#line 7969 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 834:
#line 6617 "zetasql/parser/bison_parser.y"
                  { (yylhs.value.type_kind) = zetasql::TYPE_TIMESTAMP; }
#line 7975 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 835:
#line 6622 "zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTDateOrTimeLiteral, yylhs.location, {(yystack_[0].value.expression)});
        literal->set_type_kind((yystack_[1].value.type_kind));
        (yylhs.value.expression) = literal;
      }
#line 7985 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 836:
#line 6631 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTIntervalExpr, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.identifier)});
      }
#line 7993 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 837:
#line 6635 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTIntervalExpr, yylhs.location, {(yystack_[3].value.expression), (yystack_[2].value.identifier), (yystack_[0].value.identifier)});
      }
#line 8001 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 838:
#line 6641 "zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8007 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 839:
#line 6643 "zetasql/parser/bison_parser.y"
      {
        auto* parameter_expr = MAKE_NODE(ASTParameterExpr, yylhs.location, {});
        // Bison's algorithm guarantees that the "?" productions are reduced in
        // left-to-right order.
        parameter_expr->set_position(
          parser->GetNextPositionalParameterPosition());
        (yylhs.value.expression) = parameter_expr;
      }
#line 8020 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 840:
#line 6655 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTParameterExpr, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 8028 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 841:
#line 6659 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTIdentifier* reserved_keyword_identifier =
            parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
        (yylhs.value.expression) = MAKE_NODE(ASTParameterExpr, yylhs.location, {reserved_keyword_identifier});
      }
#line 8038 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 842:
#line 6668 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTSimpleType, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 8046 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 843:
#line 6673 "zetasql/parser/bison_parser.y"
      {
        auto* id = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
        auto* path_expression = MAKE_NODE(ASTPathExpression, yylhs.location, {id});
        (yylhs.value.node) = MAKE_NODE(ASTSimpleType, yylhs.location, {path_expression});
      }
#line 8056 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 844:
#line 6682 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTArrayType, yylhs.location, {(yystack_[1].value.node)});
      }
#line 8064 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 845:
#line 6689 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructField, yylhs.location, {(yystack_[1].value.identifier), (yystack_[0].value.node)});
      }
#line 8072 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 846:
#line 6693 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructField, yylhs.location, {(yystack_[0].value.node)});
      }
#line 8080 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 847:
#line 6700 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructType, yylhs.location, {(yystack_[0].value.node)});
      }
#line 8088 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 848:
#line 6704 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 8096 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 849:
#line 6711 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructType, yylhs.location);
      }
#line 8104 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 850:
#line 6715 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 8112 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 851:
#line 6721 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 8118 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 852:
#line 6721 "zetasql/parser/bison_parser.y"
                 { (yylhs.value.node) = (yystack_[0].value.node); }
#line 8124 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 853:
#line 6721 "zetasql/parser/bison_parser.y"
                               { (yylhs.value.node) = (yystack_[0].value.node); }
#line 8130 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 854:
#line 6724 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8136 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 855:
#line 6725 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8142 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 856:
#line 6726 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8148 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 857:
#line 6727 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8154 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 858:
#line 6729 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = (yystack_[0].value.expression);
      }
#line 8162 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 859:
#line 6733 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTMaxLiteral, yystack_[0].location, {});
      }
#line 8170 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 860:
#line 6740 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTypeParameterList, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 8178 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 861:
#line 6744 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)}), yylhs.location);
      }
#line 8186 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 862:
#line 6750 "zetasql/parser/bison_parser.y"
                               { (yylhs.value.node) = (yystack_[1].value.node); }
#line 8192 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 863:
#line 6752 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(yystack_[1].location,
                             "Syntax error: Trailing comma in type parameter "
                             "list is not allowed.");
      }
#line 8202 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 864:
#line 6757 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 8208 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 865:
#line 6761 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[1].value.node), {(yystack_[0].value.node)}), yylhs.location);
    }
#line 8216 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 866:
#line 6767 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.templated_parameter_kind) = zetasql::ASTTemplatedParameterType::ANY_PROTO;
      }
#line 8224 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 867:
#line 6771 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.templated_parameter_kind) = zetasql::ASTTemplatedParameterType::ANY_ENUM;
      }
#line 8232 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 868:
#line 6775 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.templated_parameter_kind) = zetasql::ASTTemplatedParameterType::ANY_STRUCT;
      }
#line 8240 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 869:
#line 6779 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.templated_parameter_kind) = zetasql::ASTTemplatedParameterType::ANY_ARRAY;
      }
#line 8248 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 870:
#line 6783 "zetasql/parser/bison_parser.y"
      {
        const absl::string_view templated_type_string = (yystack_[0].value.identifier)->GetAsStringView();
        if (zetasql_base::CaseEqual(templated_type_string, "TABLE")) {
          (yylhs.value.templated_parameter_kind) = zetasql::ASTTemplatedParameterType::ANY_TABLE;
        } else if (zetasql_base::CaseEqual(templated_type_string, "TYPE")) {
          (yylhs.value.templated_parameter_kind) = zetasql::ASTTemplatedParameterType::ANY_TYPE;
        } else {
          YYERROR_AND_ABORT_AT(yystack_[0].location,
                               "Syntax error: unexpected ANY template type");
        }
      }
#line 8264 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 871:
#line 6798 "zetasql/parser/bison_parser.y"
      {
        auto* templated_parameter =
            MAKE_NODE(ASTTemplatedParameterType, yylhs.location, {});
        templated_parameter->set_kind((yystack_[0].value.templated_parameter_kind));
        (yylhs.value.node) = templated_parameter;
      }
#line 8275 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 872:
#line 6806 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 8281 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 873:
#line 6806 "zetasql/parser/bison_parser.y"
                           { (yylhs.value.node) = (yystack_[0].value.node); }
#line 8287 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 874:
#line 6806 "zetasql/parser/bison_parser.y"
                                                      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 8293 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 875:
#line 6810 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTNewConstructor, yylhs.location, {(yystack_[1].value.node)});
      }
#line 8301 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 876:
#line 6817 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTNewConstructorArg, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 8309 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 877:
#line 6821 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTNewConstructorArg, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.identifier)});
      }
#line 8317 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 878:
#line 6825 "zetasql/parser/bison_parser.y"
      {
        // Do not parenthesize $4 because it is not really a parenthesized
        // path expression. The parentheses are just part of the syntax here.
        (yylhs.value.node) = MAKE_NODE(ASTNewConstructorArg, yylhs.location, {(yystack_[4].value.expression), (yystack_[1].value.expression)});
      }
#line 8327 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 879:
#line 6834 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[1].value.expression), {(yystack_[0].value.node)});
      }
#line 8335 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 880:
#line 6838 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[2].value.expression), {(yystack_[0].value.node)});
      }
#line 8343 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 881:
#line 6845 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yystack_[0].location);
      }
#line 8351 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 882:
#line 6849 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yystack_[0].location);
      }
#line 8359 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 883:
#line 6856 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTCaseNoValueExpression, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 8367 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 884:
#line 6860 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[4].value.expression), {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 8375 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 885:
#line 6867 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTCaseValueExpression, yylhs.location, {(yystack_[4].value.expression), (yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 8383 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 886:
#line 6871 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[4].value.expression), {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 8391 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 887:
#line 6877 "zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8397 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 888:
#line 6878 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8403 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 889:
#line 6883 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 8411 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 890:
#line 6887 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[3].value.expression), yylhs.location), {(yystack_[1].value.expression)});
      }
#line 8419 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 891:
#line 6894 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = (yystack_[0].value.expression);
      }
#line 8427 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 892:
#line 6897 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.expression) = nullptr; }
#line 8433 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 893:
#line 6903 "zetasql/parser/bison_parser.y"
       {
         (yylhs.value.node) = MAKE_NODE(ASTFormatClause, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.expression)});
       }
#line 8441 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 894:
#line 6906 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 8447 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 895:
#line 6911 "zetasql/parser/bison_parser.y"
      {
        auto* cast = MAKE_NODE(ASTCastExpression, yylhs.location, {(yystack_[4].value.expression), (yystack_[2].value.node), (yystack_[1].value.node)});
        cast->set_is_safe_cast(false);
        (yylhs.value.expression) = cast;
      }
#line 8457 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 896:
#line 6917 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "The argument to CAST is an expression, not a query; to use a query "
        "as an expression, the query must be wrapped with additional "
        "parentheses to make it a scalar subquery expression");
      }
#line 8469 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 897:
#line 6927 "zetasql/parser/bison_parser.y"
      {
        auto* cast = MAKE_NODE(ASTCastExpression, yylhs.location, {(yystack_[4].value.expression), (yystack_[2].value.node), (yystack_[1].value.node)});
        cast->set_is_safe_cast(true);
        (yylhs.value.expression) = cast;
      }
#line 8479 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 898:
#line 6933 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "The argument to SAFE_CAST is an expression, not a query; to use a "
        "query as an expression, the query must be wrapped with additional "
        "parentheses to make it a scalar subquery expression");
      }
#line 8491 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 899:
#line 6944 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTExtractExpression, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 8499 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 900:
#line 6951 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 8507 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 901:
#line 6955 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[5].value.expression), yylhs.location), {(yystack_[1].value.expression)});
      }
#line 8515 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 902:
#line 6962 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTReplaceFieldsArg, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 8523 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 903:
#line 6966 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTReplaceFieldsArg, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 8531 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 904:
#line 6973 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTReplaceFieldsExpression, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 8539 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 905:
#line 6977 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[2].value.expression), {(yystack_[0].value.node)});
      }
#line 8547 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 906:
#line 6984 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 8555 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 907:
#line 6990 "zetasql/parser/bison_parser.y"
                               { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8561 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 908:
#line 6991 "zetasql/parser/bison_parser.y"
                                  { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8567 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 909:
#line 6997 "zetasql/parser/bison_parser.y"
      {
        auto* expression =
            MAKE_NODE(ASTFilterFieldsArg, yylhs.location, {(yystack_[0].value.expression)});
        expression->set_filter_type(
          zetasql::ASTFilterFieldsArg::FilterType::INCLUDE);
        (yylhs.value.node) = expression;
      }
#line 8579 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 910:
#line 7005 "zetasql/parser/bison_parser.y"
      {
        auto* expression =
            MAKE_NODE(ASTFilterFieldsArg, yylhs.location, {(yystack_[0].value.expression)});
        expression->set_filter_type(
          zetasql::ASTFilterFieldsArg::FilterType::EXCLUDE);
        (yylhs.value.node) = expression;
      }
#line 8591 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 911:
#line 7016 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTFilterFieldsExpression, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 8599 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 912:
#line 7020 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[2].value.expression), {(yystack_[0].value.node)});
      }
#line 8607 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 913:
#line 7027 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 8615 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 914:
#line 7034 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 8623 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 915:
#line 7038 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 8631 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 916:
#line 7042 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 8639 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 917:
#line 7046 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 8647 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 918:
#line 7050 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 8655 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 919:
#line 7071 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[2].value.expression)->node_kind() == zetasql::AST_FUNCTION_CALL) {
          auto* function_call = (yystack_[2].value.expression)->GetAsOrDie<zetasql::ASTFunctionCall>();
          if (function_call->parenthesized()) {
            YYERROR_AND_ABORT_AT(
                yystack_[1].location,
                "Syntax error: Function call cannot be applied to this "
                "expression. Function calls require a path, e.g. a.b.c()");
          } else if (
              function_call->is_current_date_time_without_parentheses()) {
            // This is a function call like "CURRENT_DATE", which does not
            // allow DISTINCT.
            // Note that we don't call this a "Syntax error" because it's really
            // a semantic error.
            YYERROR_AND_ABORT_AT(
                yystack_[0].location,
                absl::StrCat("DISTINCT not allowed for function ",
                             parser->GetInputText(yystack_[2].location)));
          } else {
            // TODO: Add test for this error.
            YYERROR_AND_ABORT_AT(
                yystack_[1].location,
                "Syntax error: Double function call parentheses");
          }
        } else if (
            (yystack_[2].value.expression)->node_kind() != zetasql::AST_PATH_EXPRESSION ||
            (yystack_[2].value.expression)->GetAsOrDie<zetasql::ASTPathExpression>()->parenthesized()) {
          YYERROR_AND_ABORT_AT(
              yystack_[1].location,
              "Syntax error: Function call cannot be applied to this "
              "expression. Function calls require a path, e.g. a.b.c()");
        } else {
          auto* function_call = MAKE_NODE(ASTFunctionCall, yylhs.location, {(yystack_[2].value.expression)});
          function_call->set_distinct(true);
          (yylhs.value.function_call) = function_call;
        }
      }
#line 8697 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 920:
#line 7109 "zetasql/parser/bison_parser.y"
      {
        // TODO: Merge this with the other code path. We have to have
        // two separate productions to avoid an empty opt_distinct rule that
        // causes shift/reduce conflicts.
        if ((yystack_[1].value.expression)->node_kind() == zetasql::AST_FUNCTION_CALL) {
          auto* function_call = (yystack_[1].value.expression)->GetAsOrDie<zetasql::ASTFunctionCall>();
          if (function_call->parenthesized()) {
            YYERROR_AND_ABORT_AT(
                yystack_[0].location,
                "Syntax error: Function call cannot be applied to this "
                "expression. Function calls require a path, e.g. a.b.c()");
          } else if (
              function_call->is_current_date_time_without_parentheses()) {
            // This is a function call like "CURRENT_DATE" without parentheses.
            // Allow parentheses to be added to such a call at most once.
            function_call->set_is_current_date_time_without_parentheses(false);
            (yylhs.value.function_call) = function_call;
          } else {
            // TODO: Add test for this error.
            YYERROR_AND_ABORT_AT(
                yystack_[0].location,
                "Syntax error: Double function call parentheses");
          }
        } else if (
            (yystack_[1].value.expression)->node_kind() != zetasql::AST_PATH_EXPRESSION ||
            (yystack_[1].value.expression)->GetAsOrDie<zetasql::ASTPathExpression>()->parenthesized()) {
          YYERROR_AND_ABORT_AT(
              yystack_[0].location,
              "Syntax error: Function call cannot be applied to this "
              "expression. Function calls require a path, e.g. a.b.c()");
        } else {
          auto* function_call = MAKE_NODE(ASTFunctionCall, yylhs.location, {(yystack_[1].value.expression)});
          function_call->set_distinct(false);
          (yylhs.value.function_call) = function_call;
        }
      }
#line 8738 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 921:
#line 7146 "zetasql/parser/bison_parser.y"
      {
        // IF and GROUPING can be function calls, but they are also keywords.
        // Treat them specially, and don't allow DISTINCT etc. since that only
        // applies to aggregate functions.
        auto* path_expression = MAKE_NODE(ASTPathExpression, yystack_[1].location, {(yystack_[1].value.node)});
        auto* function_call = MAKE_NODE(ASTFunctionCall, yylhs.location, {path_expression});
        function_call->set_distinct(false);
        (yylhs.value.function_call) = function_call;
      }
#line 8752 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 922:
#line 7158 "zetasql/parser/bison_parser.y"
    { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8758 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 923:
#line 7160 "zetasql/parser/bison_parser.y"
      {
        YYERROR_AND_ABORT_AT(
        yystack_[0].location,
        "Each function argument is an expression, not a query; to use a "
        "query as an expression, the query must be wrapped with additional "
        "parentheses to make it a scalar subquery expression");
      }
#line 8770 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 924:
#line 7167 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8776 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 925:
#line 7168 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 8782 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 926:
#line 7173 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTNamedArgument, yylhs.location, {(yystack_[2].value.identifier), (yystack_[0].value.expression)});
      }
#line 8790 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 927:
#line 7180 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTLambda, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.expression)});
      }
#line 8798 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 928:
#line 7199 "zetasql/parser/bison_parser.y"
      {
        auto expr_kind = (yystack_[0].value.expression)->node_kind();
        if (expr_kind != zetasql::AST_STRUCT_CONSTRUCTOR_WITH_PARENS &&
            expr_kind != zetasql::AST_PATH_EXPRESSION) {
          YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            "Syntax error: Expecting lambda argument list");
        }
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 8813 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 929:
#line 7210 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTStructConstructorWithParens, yylhs.location);
    }
#line 8821 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 930:
#line 7217 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.function_call) = WithExtraChildren((yystack_[1].value.function_call), {(yystack_[0].value.expression)});
      }
#line 8829 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 931:
#line 7225 "zetasql/parser/bison_parser.y"
      {
        auto* star = MAKE_NODE(ASTStar, yystack_[0].location);
        star->set_image("*");
        (yylhs.value.function_call) = WithExtraChildren((yystack_[1].value.function_call), {star});
      }
#line 8839 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 932:
#line 7231 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.function_call) = WithExtraChildren((yystack_[2].value.function_call), {(yystack_[0].value.expression)});
      }
#line 8847 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 933:
#line 7240 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.function_call) = WithExtraChildren(parser->WithEndLocation((yystack_[4].value.function_call), yylhs.location), {(yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node)});
      }
#line 8855 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 934:
#line 7252 "zetasql/parser/bison_parser.y"
      {
        (yystack_[6].value.function_call)->set_null_handling_modifier((yystack_[5].value.null_handling_modifier));
        (yylhs.value.function_call) = WithExtraChildren(parser->WithEndLocation((yystack_[6].value.function_call), yylhs.location), {
            (yystack_[4].value.node),
            (yystack_[3].value.node),
            (yystack_[2].value.node), (yystack_[1].value.node)});
      }
#line 8867 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 935:
#line 7262 "zetasql/parser/bison_parser.y"
    { (yylhs.value.identifier) = (yystack_[0].value.identifier); }
#line 8873 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 936:
#line 7263 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.identifier) = nullptr; }
#line 8879 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 937:
#line 7268 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPartitionBy, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.expression)});
      }
#line 8887 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 938:
#line 7272 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 8895 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 939:
#line 7278 "zetasql/parser/bison_parser.y"
                               { (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location); }
#line 8901 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 940:
#line 7279 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 8907 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 941:
#line 7284 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTPartitionBy, yylhs.location, {nullptr, (yystack_[0].value.expression)});
      }
#line 8915 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 942:
#line 7288 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 8923 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 943:
#line 7294 "zetasql/parser/bison_parser.y"
                                       { (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location); }
#line 8929 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 944:
#line 7295 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 8935 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 945:
#line 7300 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTClusterBy, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 8943 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 946:
#line 7304 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 8951 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 947:
#line 7310 "zetasql/parser/bison_parser.y"
                                     { (yylhs.value.node) = parser->WithEndLocation((yystack_[0].value.node), yylhs.location); }
#line 8957 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 948:
#line 7311 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 8963 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 949:
#line 7316 "zetasql/parser/bison_parser.y"
                { (yylhs.value.preceding_or_following_keyword) = PrecedingOrFollowingKeyword::kPreceding; }
#line 8969 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 950:
#line 7317 "zetasql/parser/bison_parser.y"
                  { (yylhs.value.preceding_or_following_keyword) = PrecedingOrFollowingKeyword::kFollowing; }
#line 8975 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 951:
#line 7322 "zetasql/parser/bison_parser.y"
      {
        auto* frame = MAKE_NODE(ASTWindowFrameExpr, yylhs.location);
        frame->set_boundary_type(
            ((yystack_[0].value.preceding_or_following_keyword) == PrecedingOrFollowingKeyword::kPreceding)
                ? zetasql::ASTWindowFrameExpr::UNBOUNDED_PRECEDING
                : zetasql::ASTWindowFrameExpr::UNBOUNDED_FOLLOWING);
        (yylhs.value.node) = frame;
      }
#line 8988 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 952:
#line 7331 "zetasql/parser/bison_parser.y"
      {
        auto* frame = MAKE_NODE(ASTWindowFrameExpr, yylhs.location);
        frame->set_boundary_type(
            zetasql::ASTWindowFrameExpr::CURRENT_ROW);
        (yylhs.value.node) = frame;
      }
#line 8999 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 953:
#line 7338 "zetasql/parser/bison_parser.y"
      {
        auto* frame = MAKE_NODE(ASTWindowFrameExpr, yylhs.location, {(yystack_[1].value.expression)});
        frame->set_boundary_type(
            ((yystack_[0].value.preceding_or_following_keyword) == PrecedingOrFollowingKeyword::kPreceding)
                ? zetasql::ASTWindowFrameExpr::OFFSET_PRECEDING
                : zetasql::ASTWindowFrameExpr::OFFSET_FOLLOWING);
        (yylhs.value.node) = frame;
      }
#line 9012 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 954:
#line 7349 "zetasql/parser/bison_parser.y"
           { (yylhs.value.frame_unit) = zetasql::ASTWindowFrame::ROWS; }
#line 9018 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 955:
#line 7350 "zetasql/parser/bison_parser.y"
              { (yylhs.value.frame_unit) = zetasql::ASTWindowFrame::RANGE; }
#line 9024 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 956:
#line 7355 "zetasql/parser/bison_parser.y"
      {
        auto* frame = MAKE_NODE(ASTWindowFrame, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
        frame->set_unit((yystack_[4].value.frame_unit));
        (yylhs.value.node) = frame;
      }
#line 9034 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 957:
#line 7361 "zetasql/parser/bison_parser.y"
      {
        auto* frame = MAKE_NODE(ASTWindowFrame, yylhs.location, {(yystack_[0].value.node)});
        frame->set_unit((yystack_[1].value.frame_unit));
        (yylhs.value.node) = frame;
      }
#line 9044 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 958:
#line 7366 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 9050 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 959:
#line 7370 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWindowSpecification, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 9058 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 960:
#line 7375 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWindowSpecification, yylhs.location, {(yystack_[4].value.identifier), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node)});
      }
#line 9066 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 961:
#line 7382 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTExpression* current_expression = (yystack_[3].value.function_call);
        if ((yystack_[2].value.node) != nullptr) {
          current_expression->AddChild((yystack_[2].value.node));
        }
        if ((yystack_[1].value.node) != nullptr) {
          if (parser->language_options() != nullptr &&
              !parser->language_options()->LanguageFeatureEnabled(
                  zetasql::FEATURE_V_1_3_WITH_GROUP_ROWS)) {
            YYERROR_AND_ABORT_AT(yystack_[1].location, "WITH GROUP_ROWS is not supported");
          }
          auto* with_group_rows = MAKE_NODE(ASTWithGroupRows, yylhs.location, {(yystack_[1].value.node)});
          current_expression->AddChild(with_group_rows);
        }
        if ((yystack_[0].value.node) != nullptr) {
          current_expression = MAKE_NODE(ASTAnalyticFunctionCall, yylhs.location,
              {current_expression, (yystack_[0].value.node)});
        }
        (yylhs.value.expression) = current_expression;
      }
#line 9091 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 962:
#line 7405 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[1].value.query);
      }
#line 9099 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 963:
#line 7408 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 9105 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 964:
#line 7413 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 9113 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 965:
#line 7416 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 9119 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 966:
#line 7421 "zetasql/parser/bison_parser.y"
      {
        (yystack_[1].value.expression)->set_parenthesized(true);
        // Don't include the location in the parentheses. Semantic error
        // messages about this expression should point at the start of the
        // expression, not at the opening parentheses.
        (yylhs.value.expression) = (yystack_[1].value.expression);
      }
#line 9131 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 967:
#line 7432 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTStructConstructorWithKeyword, yylhs.location, {(yystack_[1].value.node)});
      }
#line 9139 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 968:
#line 7436 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTStructConstructorWithKeyword, yylhs.location);
      }
#line 9147 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 969:
#line 7443 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[1].value.expression), {(yystack_[0].value.node)});
      }
#line 9155 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 970:
#line 7447 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[2].value.expression), {(yystack_[0].value.node)});
      }
#line 9163 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 971:
#line 7454 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTStructConstructorArg, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 9171 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 972:
#line 7463 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTStructConstructorWithParens, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 9179 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 973:
#line 7467 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = WithExtraChildren((yystack_[2].value.expression), {(yystack_[0].value.expression)});
      }
#line 9187 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 974:
#line 7474 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 9195 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 975:
#line 7478 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 9203 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 976:
#line 7482 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = parser->WithEndLocation((yystack_[1].value.expression), yylhs.location);
      }
#line 9211 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 977:
#line 7489 "zetasql/parser/bison_parser.y"
      {
        auto* subquery = MAKE_NODE(ASTExpressionSubquery, yylhs.location, {(yystack_[1].value.query)});
        subquery->set_modifier(zetasql::ASTExpressionSubquery::ARRAY);
        (yylhs.value.expression_subquery) = subquery;
      }
#line 9221 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 978:
#line 7495 "zetasql/parser/bison_parser.y"
      {
        auto* subquery = MAKE_NODE(ASTExpressionSubquery, yylhs.location, {(yystack_[3].value.node), (yystack_[1].value.query)});
        subquery->set_modifier(zetasql::ASTExpressionSubquery::EXISTS);
        (yylhs.value.expression_subquery) = subquery;
      }
#line 9231 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 979:
#line 7500 "zetasql/parser/bison_parser.y"
      { (yylhs.value.expression_subquery) = (yystack_[0].value.expression_subquery); }
#line 9237 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 980:
#line 7505 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression_subquery) = MAKE_NODE(ASTExpressionSubquery, yylhs.location, {(yystack_[1].value.node)});
      }
#line 9245 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 981:
#line 7512 "zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTNullLiteral, yystack_[0].location);
        // TODO: Migrate to absl::string_view or avoid having to
        // set this at all if the client isn't interested.
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9257 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 982:
#line 7523 "zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTBooleanLiteral, yystack_[0].location);
        literal->set_value(true);
        // TODO: Migrate to absl::string_view or avoid having to
        // set this at all if the client isn't interested.
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9270 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 983:
#line 7532 "zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTBooleanLiteral, yystack_[0].location);
        literal->set_value(false);
        // TODO: Migrate to absl::string_view or avoid having to
        // set this at all if the client isn't interested.
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9283 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 984:
#line 7544 "zetasql/parser/bison_parser.y"
      {
        const absl::string_view input_text = parser->GetInputText(yystack_[0].location);
        std::string str;
        std::string error_string;
        int error_offset;
        const absl::Status parse_status = zetasql::ParseStringLiteral(
            input_text, &str, &error_string, &error_offset);
        if (!parse_status.ok()) {
          zetasql_bison_parser::location location = yyla.location;
          location.begin.column += error_offset;
          if (!error_string.empty()) {
            YYERROR_AND_ABORT_AT(location,
                                 absl::StrCat("Syntax error: ", error_string));
          }
          ZETASQL_DLOG(FATAL) << "ParseStringLiteral did not return an error string";
          YYERROR_AND_ABORT_AT(location,
                               absl::StrCat("Syntax error: ",
                                            parse_status.message()));
        }

        auto* literal = MAKE_NODE(ASTStringLiteral, yystack_[0].location);
        literal->set_string_value(std::move(str));
        // TODO: Migrate to absl::string_view or avoid having to
        // set this at all if the client isn't interested.
        literal->set_image(std::string(input_text));
        (yylhs.value.expression) = literal;
      }
#line 9315 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 985:
#line 7575 "zetasql/parser/bison_parser.y"
      {
        const absl::string_view input_text = parser->GetInputText(yystack_[0].location);
        std::string bytes;
        std::string error_string;
        int error_offset;
        const absl::Status parse_status = zetasql::ParseBytesLiteral(
            input_text, &bytes, &error_string, &error_offset);
        if (!parse_status.ok()) {
          zetasql_bison_parser::location location = yyla.location;
          location.begin.column += error_offset;
          if (!error_string.empty()) {
            YYERROR_AND_ABORT_AT(location,
                                 absl::StrCat("Syntax error: ", error_string));
          }
          ZETASQL_DLOG(FATAL) << "ParseBytesLiteral did not return an error string";
          YYERROR_AND_ABORT_AT(location,
                               absl::StrCat("Syntax error: ",
                                            parse_status.message()));
        }

        // The identifier is parsed *again* in the resolver. The output of the
        // parser maintains the original image.
        // TODO: Fix this wasted work when the JavaCC parser is gone.
        auto* literal = MAKE_NODE(ASTBytesLiteral, yystack_[0].location);
        literal->set_bytes_value(std::move(bytes));
        // TODO: Migrate to absl::string_view or avoid having to
        // set this at all if the client isn't interested.
        literal->set_image(std::string(input_text));
        (yylhs.value.expression) = literal;
      }
#line 9350 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 986:
#line 7609 "zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTIntLiteral, yystack_[0].location);
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9360 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 989:
#line 7623 "zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTNumericLiteral, yylhs.location);
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9370 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 992:
#line 7637 "zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTBigNumericLiteral, yylhs.location);
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9380 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 993:
#line 7646 "zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTJSONLiteral, yylhs.location);
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9390 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 994:
#line 7655 "zetasql/parser/bison_parser.y"
      {
        auto* literal = MAKE_NODE(ASTFloatLiteral, yystack_[0].location);
        literal->set_image(std::string(parser->GetInputText(yystack_[0].location)));
        (yylhs.value.expression) = literal;
      }
#line 9400 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 995:
#line 7664 "zetasql/parser/bison_parser.y"
      {
        const absl::string_view identifier_text = parser->GetInputText(yystack_[0].location);
        // The tokenizer rule already validates that the identifier is valid,
        // except for backquoted identifiers.
        if (identifier_text[0] == '`') {
          std::string str;
          std::string error_string;
          int error_offset;
          const absl::Status parse_status =
              zetasql::ParseGeneralizedIdentifier(
                  identifier_text, &str, &error_string, &error_offset);
          if (!parse_status.ok()) {
            zetasql_bison_parser::location location = yyla.location;
            location.begin.column += error_offset;
            if (!error_string.empty()) {
              YYERROR_AND_ABORT_AT(location,
                                   absl::StrCat("Syntax error: ",
                                                error_string));
            }
            ZETASQL_DLOG(FATAL) << "ParseIdentifier did not return an error string";
            YYERROR_AND_ABORT_AT(location,
                                 absl::StrCat("Syntax error: ",
                                              parse_status.message()));
          }
          (yylhs.value.identifier) = parser->MakeIdentifier(yystack_[0].location, str);
        } else {
          (yylhs.value.identifier) = parser->MakeIdentifier(yystack_[0].location, identifier_text);
        }
      }
#line 9434 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 996:
#line 7694 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.identifier) = parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
      }
#line 9442 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 997:
#line 7701 "zetasql/parser/bison_parser.y"
    {
      const absl::string_view label_text = parser->GetInputText(yystack_[0].location);
      // The tokenizer rule already validates that the identifier is valid and
      // non-empty, except for backquoted identifiers.
      if (label_text[0] == '`') {
        std::string str;
        std::string error_string;
        int error_offset;
        const absl::Status parse_status =
            zetasql::ParseGeneralizedIdentifier(
                label_text, &str, &error_string, &error_offset);
        if (!parse_status.ok()) {
          zetasql_bison_parser::location location = yyla.location;
          location.begin.column += error_offset;
          if (!error_string.empty()) {
            YYERROR_AND_ABORT_AT(location,
                                 absl::StrCat("Syntax error: ",
                                              error_string));
          }
          ZETASQL_DLOG(FATAL) << "ParseIdentifier did not return an error string";
          YYERROR_AND_ABORT_AT(location,
                               absl::StrCat("Syntax error: ",
                                            parse_status.message()));
        }
        (yylhs.value.identifier) = parser->MakeIdentifier(yystack_[0].location, str);
      } else {
        (yylhs.value.identifier) = parser->MakeIdentifier(yystack_[0].location, label_text);
      }
    }
#line 9476 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 998:
#line 7734 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.expression) = MAKE_NODE(ASTSystemVariableExpr, yylhs.location, {(yystack_[0].value.expression)});
    }
#line 9484 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 999:
#line 7738 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTIdentifier* reserved_keyword_identifier =
            parser->MakeIdentifier(yystack_[0].location, parser->GetInputText(yystack_[0].location));
        zetasql::ASTPathExpression* path =
            MAKE_NODE(ASTPathExpression, yylhs.location, {reserved_keyword_identifier});
        (yylhs.value.expression) = MAKE_NODE(ASTSystemVariableExpr, yylhs.location, {path});
      }
#line 9496 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1255:
#line 8021 "zetasql/parser/bison_parser.y"
                               { (yylhs.value.boolean) = true; }
#line 9502 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1256:
#line 8021 "zetasql/parser/bison_parser.y"
                                                              { (yylhs.value.boolean) = false; }
#line 9508 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1257:
#line 8024 "zetasql/parser/bison_parser.y"
           { (yylhs.value.create_scope) = zetasql::ASTCreateStatement::TEMPORARY; }
#line 9514 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1258:
#line 8025 "zetasql/parser/bison_parser.y"
                  { (yylhs.value.create_scope) = zetasql::ASTCreateStatement::TEMPORARY; }
#line 9520 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1259:
#line 8026 "zetasql/parser/bison_parser.y"
               { (yylhs.value.create_scope) = zetasql::ASTCreateStatement::PUBLIC; }
#line 9526 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1260:
#line 8027 "zetasql/parser/bison_parser.y"
                { (yylhs.value.create_scope) = zetasql::ASTCreateStatement::PRIVATE; }
#line 9532 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1261:
#line 8028 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.create_scope) = zetasql::ASTCreateStatement::DEFAULT_SCOPE; }
#line 9538 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1262:
#line 8031 "zetasql/parser/bison_parser.y"
                     { (yylhs.value.boolean) = true; }
#line 9544 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1263:
#line 8031 "zetasql/parser/bison_parser.y"
                                                    { (yylhs.value.boolean) = false; }
#line 9550 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1264:
#line 8033 "zetasql/parser/bison_parser.y"
                     { (yylhs.value.boolean) = true; }
#line 9556 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1265:
#line 8033 "zetasql/parser/bison_parser.y"
                                                    { (yylhs.value.boolean) = false; }
#line 9562 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1268:
#line 8038 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 9568 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1269:
#line 8039 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 9574 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1270:
#line 8044 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTOptionsEntry, yylhs.location, {(yystack_[2].value.identifier), (yystack_[0].value.expression)});
      }
#line 9582 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1271:
#line 8051 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTOptionsList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 9590 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1272:
#line 8055 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 9598 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1273:
#line 8062 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 9606 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1274:
#line 8066 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTOptionsList, yylhs.location);
      }
#line 9614 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1275:
#line 8072 "zetasql/parser/bison_parser.y"
                           { (yylhs.value.node) = (yystack_[0].value.node); }
#line 9620 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1276:
#line 8073 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 9626 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1277:
#line 8078 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDefineTableStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 9634 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1278:
#line 8084 "zetasql/parser/bison_parser.y"
                     { (yylhs.value.node) = (yystack_[0].value.insert_statement); }
#line 9640 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1279:
#line 8085 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 9646 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1280:
#line 8086 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 9652 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1283:
#line 8093 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 9660 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1284:
#line 8097 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 9668 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1285:
#line 8104 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTAssertRowsModified, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 9676 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1286:
#line 8108 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 9684 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1287:
#line 8115 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTReturningClause, yylhs.location, {(yystack_[0].value.node)});
      }
#line 9692 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1288:
#line 8119 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTIdentifier* default_identifier =
          parser->MakeIdentifier(yystack_[1].location, "ACTION");
        auto* action_alias = MAKE_NODE(ASTAlias, yylhs.location, {default_identifier});
        (yylhs.value.node) = MAKE_NODE(ASTReturningClause, yylhs.location, {(yystack_[0].value.node), action_alias});
      }
#line 9703 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1289:
#line 8126 "zetasql/parser/bison_parser.y"
      {
        auto* action_alias = MAKE_NODE(ASTAlias, yylhs.location, {(yystack_[1].value.identifier)});
        (yylhs.value.node) = MAKE_NODE(ASTReturningClause, yylhs.location, {(yystack_[0].value.node), action_alias});
      }
#line 9712 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1290:
#line 8130 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 9718 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1291:
#line 8140 "zetasql/parser/bison_parser.y"
                  { (yylhs.value.insert_mode) = zetasql::ASTInsertStatement::IGNORE; }
#line 9724 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1292:
#line 8141 "zetasql/parser/bison_parser.y"
               { (yylhs.value.insert_mode) = zetasql::ASTInsertStatement::IGNORE; }
#line 9730 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1293:
#line 8143 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.insert_mode) = zetasql::ASTInsertStatement::REPLACE;
      }
#line 9738 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1294:
#line 8147 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.insert_mode) = zetasql::ASTInsertStatement::UPDATE;
      }
#line 9746 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1295:
#line 8155 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.insert_statement) = MAKE_NODE(ASTInsertStatement, yylhs.location);
      }
#line 9754 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1296:
#line 8159 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[1].value.insert_statement);
        if (insert->parse_progress() >=
            ASTInsertStatement::kSeenOrIgnoreReplaceUpdate) {
          YYERROR_UNEXPECTED_AND_ABORT_AT(yystack_[0].location);
        }
        insert->set_insert_mode((yystack_[0].value.insert_mode));
        insert->set_parse_progress(
            ASTInsertStatement::kSeenOrIgnoreReplaceUpdate);
        (yylhs.value.insert_statement) = insert;
      }
#line 9770 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1297:
#line 8171 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[2].value.insert_statement);
        if (insert->parse_progress() >= ASTInsertStatement::kSeenTargetPath) {
          YYERROR_AND_ABORT_AT(
              yystack_[1].location, "Syntax error: Unexpected INSERT target name");
        }
        insert->set_parse_progress(
            ASTInsertStatement::kSeenTargetPath);
        (yylhs.value.insert_statement) = WithExtraChildren(insert, {(yystack_[0].value.expression)});
      }
#line 9785 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1298:
#line 8182 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[1].value.insert_statement);
        // Recognize REPLACE and UPDATE as keywords, but only if there was no
        // OR IGNORE/REPLACE/UPDATE before.
        bool is_or_replace_update = false;
        if (insert->parse_progress() <
            ASTInsertStatement::kSeenOrIgnoreReplaceUpdate) {
          absl::string_view path_expression_text = parser->GetInputText(yystack_[0].location);
          if (zetasql_base::CaseEqual(path_expression_text, "REPLACE")) {
            insert->set_insert_mode(
                zetasql::ASTInsertStatement::REPLACE);
            is_or_replace_update = true;
          } else if (zetasql_base::CaseEqual(path_expression_text, "UPDATE")) {
            insert->set_insert_mode(
                zetasql::ASTInsertStatement::UPDATE);
            is_or_replace_update = true;
          }
        }
        if (is_or_replace_update) {
          insert->set_parse_progress(
              ASTInsertStatement::kSeenOrIgnoreReplaceUpdate);
          (yylhs.value.insert_statement) = insert;
        } else {
          if (insert->parse_progress() == ASTInsertStatement::kSeenTargetPath) {
            YYERROR_AND_ABORT_AT(
                 yystack_[0].location, "Syntax error: INSERT target cannot have an alias");
          }
          if (insert->parse_progress() > ASTInsertStatement::kSeenTargetPath) {
            YYERROR_AND_ABORT_AT(
                 yystack_[0].location, "Syntax error: Unexpected INSERT target name");
          }
          insert->set_parse_progress(
              ASTInsertStatement::kSeenTargetPath);
          (yylhs.value.insert_statement) = WithExtraChildren(insert, {(yystack_[0].value.expression)});
        }
      }
#line 9826 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1299:
#line 8219 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[1].value.insert_statement);
        if (insert->parse_progress() >= ASTInsertStatement::kSeenColumnList) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, "Syntax error: Unexpected column list");
        }
        if (insert->parse_progress() < ASTInsertStatement::kSeenTargetPath) {
          YYERROR_AND_ABORT_AT(yystack_[0].location, "Syntax error: Expecting INSERT target name");
        }
        insert->set_parse_progress(ASTInsertStatement::kSeenColumnList);
        (yylhs.value.insert_statement) = WithExtraChildren(insert, {(yystack_[0].value.node)});
      }
#line 9842 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1300:
#line 8240 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[2].value.insert_statement);
        (yystack_[0].value.insert_values_row_list) = parser->WithStartLocation((yystack_[0].value.insert_values_row_list), yystack_[1].location);
        if (insert->parse_progress() < ASTInsertStatement::kSeenTargetPath) {
          // We haven't seen a target path yet. That means the "VALUES" should
          // be reinterpreted as a target path, and the insert_values_list as a
          // column list! We convert the already-parsed values list into the
          // intended column list.
          zetasql::ASTIdentifier* values_identifier =
              parser->MakeIdentifier(yystack_[1].location, parser->GetInputText(yystack_[1].location));
          auto* values_path_expression =
              MAKE_NODE(ASTPathExpression, yystack_[1].location, {values_identifier});
          insert->AddChild(values_path_expression);
          zetasql::ASTInsertValuesRowList* row_list = (yystack_[0].value.insert_values_row_list);
          if (row_list->num_children() == 0 ||
              row_list->child(0)->node_kind() !=
                  zetasql::AST_INSERT_VALUES_ROW) {
            YYERROR_AND_ABORT_AT(
                yystack_[0].location,
                "Internal error: values list is unexpected type");
          }
          auto* row =
              row_list->mutable_child(0)
                      ->GetAsOrDie<zetasql::ASTInsertValuesRow>();
          auto* column_list = MAKE_NODE(ASTColumnList, yystack_[0].location, {});
          for (int i = 0; i < row->num_children(); ++i) {
            zetasql::ASTNode* element = row->mutable_child(i);
            if (element->node_kind() != zetasql::AST_PATH_EXPRESSION) {
              if (element->node_kind() == zetasql::AST_DEFAULT_LITERAL) {
                YYERROR_AND_ABORT_AT(
                    parser->GetBisonLocation(element->GetParseLocationRange()),
                    "Syntax error: Expected column name, got keyword DEFAULT");
              }
              YYERROR_AND_ABORT_AT(
                  parser->GetBisonLocation(element->GetParseLocationRange()),
                  "Syntax error: Expected column name");
            }
            auto* path_expression =
                element->GetAsOrDie<zetasql::ASTPathExpression>();
            if (path_expression->num_children() != 1) {
              YYERROR_AND_ABORT_AT(
                  parser->GetBisonLocation(element->GetParseLocationRange()),
                  "Syntax error: Expected column name");
            }
            column_list->AddChild(path_expression->mutable_child(0));
          }
          if (row_list->num_children() > 1) {
            // There are multiple lists. Assume the user actually intended to
            // write VALUES but forgot to do so. Do this without checking the
            // first list for being correct as a column list, because we assume
            // that the user intended it as a VALUES list.
            YYERROR_AND_ABORT_AT(
                parser->GetBisonLocation(
                    row_list->child(1)->GetParseLocationRange()),
                "Syntax error: Unexpected multiple column lists");
          }
          insert->AddChild(column_list);
          insert->set_parse_progress(
              ASTInsertStatement::kSeenColumnList);
        } else if (insert->parse_progress() >=
                   ASTInsertStatement::kSeenValuesList) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Unexpected VALUES list");
        } else if (insert->parse_progress() <
                   ASTInsertStatement::kSeenTargetPath) {
          YYERROR_AND_ABORT_AT(yystack_[1].location, "Syntax error: Expecting INSERT target name");
        } else {
          (yylhs.value.insert_statement) = parser->WithEndLocation(WithExtraChildren(insert, {(yystack_[0].value.insert_values_row_list)}), yylhs.location);
          insert->set_parse_progress(
              ASTInsertStatement::kSeenValuesList);
        }
      }
#line 9918 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1301:
#line 8369 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[2].value.insert_statement);
        if (insert->parse_progress() < ASTInsertStatement::kSeenTargetPath) {
          YYERROR_AND_ABORT_AT(yystack_[1].location,
                               "Syntax error: Expecting INSERT target name");
        }
        if (insert->parse_progress() < ASTInsertStatement::kSeenValuesList) {
          YYERROR_AND_ABORT_AT(yystack_[1].location,
                               "Syntax error: Expecting VALUES list or query");
        }
        (yylhs.value.insert_statement) = parser->WithEndLocation(WithExtraChildren(insert, {(yystack_[1].value.node), (yystack_[0].value.node)}), yylhs.location);
      }
#line 9935 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1302:
#line 8382 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTInsertStatement* insert = (yystack_[3].value.insert_statement);
        if (insert->parse_progress() < ASTInsertStatement::kSeenTargetPath) {
          YYERROR_AND_ABORT_AT(
               yystack_[2].location, "Syntax error: Expecting INSERT target name");
        }
        if (insert->parse_progress() >= ASTInsertStatement::kSeenValuesList) {
          YYERROR_AND_ABORT_AT(yystack_[2].location, "Syntax error: Unexpected query");
        }
        (yylhs.value.insert_statement) = parser->WithEndLocation(
            WithExtraChildren(insert, {(yystack_[2].value.query), (yystack_[1].value.node), (yystack_[0].value.node)}), yylhs.location);
      }
#line 9952 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1303:
#line 8398 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCopyDataSource, yylhs.location, {(yystack_[2].value.expression), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 9960 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1304:
#line 8405 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCloneDataSource, yylhs.location, {(yystack_[2].value.expression), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 9968 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1305:
#line 8412 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCloneDataSourceList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 9976 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1306:
#line 8416 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[3].value.node), {(yystack_[0].value.node)});
      }
#line 9984 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1307:
#line 8424 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCloneDataStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 9992 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1308:
#line 8430 "zetasql/parser/bison_parser.y"
   { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 9998 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1309:
#line 8432 "zetasql/parser/bison_parser.y"
     {
       (yylhs.value.expression) = MAKE_NODE(ASTDefaultLiteral, yylhs.location, {});
     }
#line 10006 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1310:
#line 8439 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTInsertValuesRow, yylhs.location, {(yystack_[0].value.expression)});
      }
#line 10014 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1311:
#line 8443 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.expression)});
      }
#line 10022 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1312:
#line 8450 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 10030 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1313:
#line 8457 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.insert_values_row_list) = MAKE_NODE(ASTInsertValuesRowList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 10038 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1314:
#line 8461 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.insert_values_row_list) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.insert_values_row_list), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 10046 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1315:
#line 8470 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTDeleteStatement, yylhs.location, {(yystack_[5].value.expression), (yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 10054 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1316:
#line 8477 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTWithOffset, yylhs.location, {(yystack_[0].value.node)});
      }
#line 10062 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1317:
#line 8480 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.node) = nullptr; }
#line 10068 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1318:
#line 8487 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUpdateStatement, yylhs.location, {(yystack_[8].value.expression), (yystack_[7].value.node), (yystack_[6].value.node), (yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 10076 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1319:
#line 8494 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTTruncateStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
      }
#line 10084 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1320:
#line 8501 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[1].value.node);
      }
#line 10092 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1321:
#line 8513 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTPathExpression, yylhs.location, {(yystack_[0].value.identifier)});
      }
#line 10100 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1322:
#line 8517 "zetasql/parser/bison_parser.y"
      {
        // Remove the parentheses from generalized_extension_path as they were
        // added to indicate the path corresponds to an extension field in the
        // resolver. It is implied that the path argument of
        // ASTDotGeneralizedField is an extension and thus parentheses are
        // automatically added when this node is unparsed.
        (yystack_[0].value.expression)->set_parenthesized(false);
        (yylhs.value.expression) = MAKE_NODE(ASTDotGeneralizedField, yystack_[1].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 10114 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1323:
#line 8527 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[2].value.expression)->node_kind() == zetasql::AST_PATH_EXPRESSION) {
          (yylhs.value.expression) = WithExtraChildren(parser->WithEndLocation((yystack_[2].value.expression), yystack_[0].location), {(yystack_[0].value.identifier)});
        } else {
          (yylhs.value.expression) = MAKE_NODE(ASTDotIdentifier, yystack_[1].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.identifier)});
        }
      }
#line 10126 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1324:
#line 8535 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTArrayElement, yystack_[2].location, yystack_[0].location, {(yystack_[3].value.expression), (yystack_[1].value.expression)});
      }
#line 10134 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1325:
#line 8541 "zetasql/parser/bison_parser.y"
                              { (yylhs.value.expression) = (yystack_[0].value.expression); }
#line 10140 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1326:
#line 8547 "zetasql/parser/bison_parser.y"
    {
      if (parser->language_options() != nullptr &&
          parser->language_options()->LanguageFeatureEnabled(
             zetasql::FEATURE_V_1_3_ALLOW_DASHES_IN_TABLE_NAME)) {
        (yylhs.value.expression) = (yystack_[0].value.expression);
      } else {
        YYERROR_AND_ABORT_AT(
            yystack_[0].location,
            absl::StrCat(
              "Syntax error: Table name contains '-' character. "
              "It needs to be quoted: ",
              zetasql::ToIdentifierLiteral(
                parser->GetInputText(yystack_[0].location), false)));
      }
    }
#line 10160 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1327:
#line 8572 "zetasql/parser/bison_parser.y"
      {
       (yystack_[1].value.expression)->set_parenthesized(true);
       (yylhs.value.expression) = (yystack_[1].value.expression);
      }
#line 10169 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1328:
#line 8577 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTDotGeneralizedField, yystack_[3].location, yystack_[0].location, {(yystack_[4].value.expression), (yystack_[1].value.expression)});
      }
#line 10177 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1329:
#line 8581 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = MAKE_NODE(ASTDotIdentifier, yystack_[1].location, yystack_[0].location, {(yystack_[2].value.expression), (yystack_[0].value.identifier)});
      }
#line 10185 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1330:
#line 8588 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUpdateSetValue, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.expression)});
      }
#line 10193 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1331:
#line 8595 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUpdateItem, yylhs.location, {(yystack_[0].value.node)});
      }
#line 10201 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1332:
#line 8599 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTUpdateItem, yylhs.location, {(yystack_[0].value.node)});
      }
#line 10209 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1333:
#line 8606 "zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = MAKE_NODE(ASTUpdateItemList, yylhs.location, {(yystack_[0].value.node)});
     }
#line 10217 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1334:
#line 8610 "zetasql/parser/bison_parser.y"
     {
       (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
     }
#line 10225 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1339:
#line 8627 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 10233 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1340:
#line 8631 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 10241 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1341:
#line 8638 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.node);
      }
#line 10249 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1342:
#line 8642 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTInsertValuesRow, yylhs.location, {});
      }
#line 10257 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1343:
#line 8649 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTMergeAction, yylhs.location, {(yystack_[1].value.node), (yystack_[0].value.node)});
        node->set_action_type(zetasql::ASTMergeAction::INSERT);
        (yylhs.value.node) = node;
      }
#line 10267 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1344:
#line 8655 "zetasql/parser/bison_parser.y"
        {
          auto* node = MAKE_NODE(ASTMergeAction, yylhs.location, {(yystack_[0].value.node)});
          node->set_action_type(zetasql::ASTMergeAction::UPDATE);
          (yylhs.value.node) = node;
        }
#line 10277 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1345:
#line 8661 "zetasql/parser/bison_parser.y"
        {
          auto* node = MAKE_NODE(ASTMergeAction, yylhs.location, {});
          node->set_action_type(zetasql::ASTMergeAction::DELETE);
          (yylhs.value.node) = node;
        }
#line 10287 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1346:
#line 8670 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTMergeWhenClause, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
        node->set_match_type(zetasql::ASTMergeWhenClause::MATCHED);
        (yylhs.value.node) = node;
      }
#line 10297 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1347:
#line 8677 "zetasql/parser/bison_parser.y"
        {
          auto* node = MAKE_NODE(ASTMergeWhenClause, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
          node->set_match_type(
              zetasql::ASTMergeWhenClause::NOT_MATCHED_BY_TARGET);
          (yylhs.value.node) = node;
        }
#line 10308 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1348:
#line 8685 "zetasql/parser/bison_parser.y"
      {
        auto* node = MAKE_NODE(ASTMergeWhenClause, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.node)});
        node->set_match_type(
            zetasql::ASTMergeWhenClause::NOT_MATCHED_BY_SOURCE);
        (yylhs.value.node) = node;
      }
#line 10319 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1349:
#line 8695 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTMergeWhenClauseList, yylhs.location, {(yystack_[0].value.node)});
    }
#line 10327 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1350:
#line 8699 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[1].value.node), {(yystack_[0].value.node)}), yylhs.location);
    }
#line 10335 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1351:
#line 8707 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 10341 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1352:
#line 8708 "zetasql/parser/bison_parser.y"
      { (yylhs.value.node) = (yystack_[0].value.node); }
#line 10347 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1353:
#line 8714 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTMergeStatement, yylhs.location, {(yystack_[5].value.expression), (yystack_[4].value.node), (yystack_[2].value.node), (yystack_[0].value.expression)});
    }
#line 10355 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1354:
#line 8721 "zetasql/parser/bison_parser.y"
    {
      parser->WithEndLocation(WithExtraChildren((yystack_[1].value.node), {(yystack_[0].value.node)}), yylhs.location);
    }
#line 10363 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1355:
#line 8728 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCallStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.node)});
      }
#line 10371 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1356:
#line 8732 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)});
      }
#line 10379 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1357:
#line 8739 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[1].value.node), yylhs.location);
      }
#line 10387 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1358:
#line 8743 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTCallStatement, yylhs.location, {(yystack_[2].value.expression)});
      }
#line 10395 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1359:
#line 8749 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 10401 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1360:
#line 8751 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 10409 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1361:
#line 8759 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.boolean) = true;
      }
#line 10417 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1362:
#line 8763 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.boolean) = false;
      }
#line 10425 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1363:
#line 8771 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.boolean) = true;
      }
#line 10433 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1364:
#line 8775 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.boolean) = false;
      }
#line 10441 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1365:
#line 8783 "zetasql/parser/bison_parser.y"
      {
        auto* drop_all = MAKE_NODE(ASTDropAllRowAccessPoliciesStatement, yylhs.location,
            {(yystack_[0].value.expression)});
        drop_all->set_has_access_keyword((yystack_[3].value.boolean));
        (yylhs.value.node) = drop_all;
      }
#line 10452 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1366:
#line 8793 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.expression) = (yystack_[0].value.expression);
      }
#line 10460 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1367:
#line 8800 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.expression);
      }
#line 10468 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1368:
#line 8804 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 10476 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1369:
#line 8810 "zetasql/parser/bison_parser.y"
               { (yylhs.value.drop_mode) = zetasql::ASTDropStatement::DropMode::RESTRICT; }
#line 10482 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1370:
#line 8811 "zetasql/parser/bison_parser.y"
                { (yylhs.value.drop_mode) = zetasql::ASTDropStatement::DropMode::CASCADE; }
#line 10488 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1371:
#line 8813 "zetasql/parser/bison_parser.y"
    { (yylhs.value.drop_mode) = zetasql::ASTDropStatement::DropMode::DROP_MODE_UNSPECIFIED; }
#line 10494 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1372:
#line 8819 "zetasql/parser/bison_parser.y"
      {
        zetasql::ASTPathExpression* path_expression =
            (yystack_[0].value.expression) == nullptr ? nullptr : MAKE_NODE(ASTPathExpression, yystack_[1].location, {(yystack_[1].value.identifier)});
        // This is a DROP ROW ACCESS POLICY statement.
        auto* drop_row_access_policy = MAKE_NODE(
            ASTDropRowAccessPolicyStatement, yylhs.location, {path_expression, (yystack_[0].value.expression)});
        drop_row_access_policy->set_is_if_exists((yystack_[2].value.boolean));
        (yylhs.value.node) = drop_row_access_policy;
      }
#line 10508 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1373:
#line 8830 "zetasql/parser/bison_parser.y"
      {
        auto* drop_search_index = MAKE_NODE(
            ASTDropSearchIndexStatement, yylhs.location, {(yystack_[1].value.expression), (yystack_[0].value.node)});
        drop_search_index->set_is_if_exists((yystack_[2].value.boolean));
        (yylhs.value.node) = drop_search_index;
      }
#line 10519 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1374:
#line 8838 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[3].value.table_or_table_function_keywords) == TableOrTableFunctionKeywords::kTableAndFunctionKeywords) {
          // Table functions don't support overloading so this statement doesn't
          // accept any function parameters.
          // (broken link)
          if ((yystack_[0].value.node) != nullptr) {
            YYERROR_AND_ABORT_AT(yystack_[0].location,
                                 "Syntax error: Parameters are not supported "
                                 "for DROP TABLE FUNCTION because table "
                                 "functions don't support "
                                 "overloading");
          }
          auto* drop = MAKE_NODE(ASTDropTableFunctionStatement, yylhs.location, {(yystack_[1].value.expression)});
          drop->set_is_if_exists((yystack_[2].value.boolean));
          (yylhs.value.node) = drop;
        } else {
          // This is a DROP TABLE statement. Table function parameters should
          // not be populated.
          if ((yystack_[0].value.node) != nullptr) {
            YYERROR_AND_ABORT_AT(yystack_[0].location,
                                 "Syntax error: Unexpected \"(\"");
          }
          auto* drop = MAKE_NODE(ASTDropStatement, yylhs.location, {(yystack_[1].value.expression)});
          drop->set_schema_object_kind(zetasql::SchemaObjectKind::kTable);
          drop->set_is_if_exists((yystack_[2].value.boolean));
          (yylhs.value.node) = drop;
        }
      }
#line 10552 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1375:
#line 8867 "zetasql/parser/bison_parser.y"
      {
        auto* drop = MAKE_NODE(ASTDropSnapshotTableStatement, yylhs.location, {(yystack_[0].value.expression)});
        drop->set_is_if_exists((yystack_[1].value.boolean));
        (yylhs.value.node) = drop;
      }
#line 10562 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1376:
#line 8873 "zetasql/parser/bison_parser.y"
      {
        auto* drop = MAKE_NODE(ASTDropEntityStatement, yylhs.location, {(yystack_[2].value.node), (yystack_[0].value.expression)});
        drop->set_is_if_exists((yystack_[1].value.boolean));
        (yylhs.value.node) = drop;
      }
#line 10572 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1377:
#line 8880 "zetasql/parser/bison_parser.y"
      {
        // This is a DROP <object_type> <object_name> statement.
        if ((yystack_[4].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kAggregateFunction) {
          // ZetaSQL does not (yet) support DROP AGGREGATE FUNCTION,
          // though it should as per a recent spec.  Currently, table/aggregate
          // functions are dropped via simple DROP FUNCTION statements.
          YYERROR_AND_ABORT_AT(yystack_[4].location,
                               "DROP AGGREGATE FUNCTION is not "
                               "supported, use DROP FUNCTION");
        }
        if ((yystack_[4].value.schema_object_kind_keyword) != zetasql::SchemaObjectKind::kSchema) {
          if ((yystack_[0].value.drop_mode) != ASTDropStatement::DropMode::DROP_MODE_UNSPECIFIED) {
            YYERROR_AND_ABORT_AT(
              yystack_[0].location, absl::StrCat(
              "Syntax error: '",
              zetasql::ASTDropStatement::GetSQLForDropMode((yystack_[0].value.drop_mode)),
              "' is not supported for DROP ",
              zetasql::SchemaObjectKindToName((yystack_[4].value.schema_object_kind_keyword))));
            }
        }
        if ((yystack_[4].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kFunction) {
            // If no function parameters are given, then all overloads of the
            // named function will be dropped. Note that "DROP FUNCTION FOO()"
            // will drop the zero-argument overload of foo(), rather than
            // dropping all overloads.
            auto* drop_function =
                MAKE_NODE(ASTDropFunctionStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[1].value.node)});
            drop_function->set_is_if_exists((yystack_[3].value.boolean));
            (yylhs.value.node) = drop_function;
        } else {
          if ((yystack_[1].value.node) != nullptr) {
            YYERROR_AND_ABORT_AT(yystack_[1].location,
                                 "Syntax error: Parameters are only "
                                 "supported for DROP FUNCTION");
          }
          if ((yystack_[4].value.schema_object_kind_keyword) == zetasql::SchemaObjectKind::kMaterializedView) {
            auto* drop_materialized_view =
                MAKE_NODE(ASTDropMaterializedViewStatement, yylhs.location, {(yystack_[2].value.expression)});
            drop_materialized_view->set_is_if_exists((yystack_[3].value.boolean));
            (yylhs.value.node) = drop_materialized_view;
          } else {
            auto* drop = MAKE_NODE(ASTDropStatement, yylhs.location, {(yystack_[2].value.expression)});
            drop->set_schema_object_kind((yystack_[4].value.schema_object_kind_keyword));
            drop->set_is_if_exists((yystack_[3].value.boolean));
            drop->set_drop_mode((yystack_[0].value.drop_mode));
            (yylhs.value.node) = drop;
          }
        }
      }
#line 10626 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1378:
#line 8933 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.statement_list) = MAKE_NODE(ASTStatementList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 10634 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1379:
#line 8937 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.statement_list) = parser->WithEndLocation(WithExtraChildren((yystack_[1].value.statement_list), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 10642 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1380:
#line 8943 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.statement_list) = MAKE_NODE(ASTStatementList, yylhs.location, {(yystack_[0].value.node)});
      }
#line 10650 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1381:
#line 8947 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.statement_list) = parser->WithEndLocation(WithExtraChildren((yystack_[1].value.statement_list), {(yystack_[0].value.node)}), yylhs.location);
      }
#line 10658 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1382:
#line 8953 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTExecuteIntoClause, yylhs.location, {(yystack_[0].value.node)});
    }
#line 10666 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1383:
#line 8957 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = nullptr;
    }
#line 10674 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1384:
#line 8964 "zetasql/parser/bison_parser.y"
    {
      auto* alias = MAKE_NODE(ASTAlias, yystack_[0].location, yystack_[0].location, {(yystack_[0].value.identifier)});
      (yylhs.value.node) = MAKE_NODE(ASTExecuteUsingArgument, yylhs.location, {(yystack_[2].value.expression), alias});
    }
#line 10683 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1385:
#line 8969 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTExecuteUsingArgument, yylhs.location, {(yystack_[0].value.expression), nullptr});
    }
#line 10691 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1386:
#line 8978 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTExecuteUsingClause, yylhs.location, {(yystack_[0].value.node)});
    }
#line 10699 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1387:
#line 8982 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.node)}), yylhs.location);
    }
#line 10707 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1388:
#line 8989 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = (yystack_[0].value.node);
    }
#line 10715 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1389:
#line 8993 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = nullptr;
    }
#line 10723 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1390:
#line 9001 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTExecuteImmediateStatement, yylhs.location, {(yystack_[2].value.expression), (yystack_[1].value.node), (yystack_[0].value.node)});
    }
#line 10731 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1391:
#line 9008 "zetasql/parser/bison_parser.y"
  {
    (yystack_[0].value.statement_list)->set_variable_declarations_allowed(true);
    (yylhs.value.node) = MAKE_NODE(ASTScript, yylhs.location, {(yystack_[0].value.statement_list)});
  }
#line 10740 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1392:
#line 9013 "zetasql/parser/bison_parser.y"
  {
    (yystack_[0].value.statement_list)->set_variable_declarations_allowed(true);
    (yylhs.value.node) = MAKE_NODE(ASTScript, yylhs.location, {(yystack_[0].value.statement_list)});
  }
#line 10749 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1393:
#line 9018 "zetasql/parser/bison_parser.y"
    {
      // Resolve to an empty script.
      zetasql::ASTStatementList* empty_stmt_list = MAKE_NODE(
          ASTStatementList, yylhs.location, {});
      (yylhs.value.node) = MAKE_NODE(ASTScript, yylhs.location, {empty_stmt_list});
    }
#line 10760 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1394:
#line 9028 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.statement_list) = (yystack_[0].value.statement_list);
    }
#line 10768 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1395:
#line 9032 "zetasql/parser/bison_parser.y"
    {
      // Resolve to an empty statement list.
      (yylhs.value.statement_list) = MAKE_NODE(ASTStatementList, yylhs.location, {});
    }
#line 10777 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1396:
#line 9040 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = (yystack_[0].value.statement_list);
      }
#line 10785 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1397:
#line 9044 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = nullptr;
      }
#line 10793 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1398:
#line 9051 "zetasql/parser/bison_parser.y"
  {
    zetasql::ASTElseifClause* elseif_clause = MAKE_NODE(
        ASTElseifClause, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.statement_list)});
    (yylhs.value.node) = MAKE_NODE(ASTElseifClauseList, yylhs.location, {elseif_clause});
  }
#line 10803 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1399:
#line 9057 "zetasql/parser/bison_parser.y"
  {
    zetasql::ASTElseifClause* elseif_clause = MAKE_NODE(
        ASTElseifClause, yystack_[3].location, {(yystack_[2].value.expression), (yystack_[0].value.statement_list)});
    (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren(
        (yystack_[4].value.node), {parser->WithEndLocation(elseif_clause, yylhs.location)}), yylhs.location);
  }
#line 10814 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1400:
#line 9066 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = (yystack_[0].value.node);
    }
#line 10822 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1401:
#line 9070 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = nullptr;
    }
#line 10830 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1402:
#line 9077 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = MAKE_NODE(ASTIfStatement, yylhs.location, {(yystack_[4].value.expression), (yystack_[2].value.statement_list), (yystack_[1].value.node), (yystack_[0].value.node)});
      }
#line 10838 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1403:
#line 9085 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.node) = parser->WithEndLocation((yystack_[2].value.node), yylhs.location);
      }
#line 10846 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1404:
#line 9090 "zetasql/parser/bison_parser.y"
      {
        // This rule produces an error for any IF statement not closed with END
        // IF. Without it, the error would indicate that the parser expected the
        // END keyword without explicitly referencing END IF.
        YYERROR_AND_ABORT_AT(yystack_[0].location, "Syntax error: Expected END IF");
      }
#line 10857 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1405:
#line 9100 "zetasql/parser/bison_parser.y"
    {
      zetasql::ASTWhenThenClause* when_then_clause = MAKE_NODE(
          ASTWhenThenClause, yylhs.location, {(yystack_[2].value.expression), (yystack_[0].value.statement_list)});
      (yylhs.value.node) = MAKE_NODE(ASTWhenThenClauseList, yylhs.location, {when_then_clause});
    }
#line 10867 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1406:
#line 9106 "zetasql/parser/bison_parser.y"
    {
      zetasql::ASTWhenThenClause* when_then_clause = MAKE_NODE(
          ASTWhenThenClause, yystack_[3].location, {(yystack_[2].value.expression), (yystack_[0].value.statement_list)});
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren(
          (yystack_[4].value.node), {parser->WithEndLocation(when_then_clause, yylhs.location)}), yylhs.location);
    }
#line 10878 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1407:
#line 9115 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = (yystack_[0].value.expression);
    }
#line 10886 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1408:
#line 9119 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = nullptr;
    }
#line 10894 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1409:
#line 9126 "zetasql/parser/bison_parser.y"
      {
        if (parser->language_options() != nullptr &&
           !parser->language_options()->LanguageFeatureEnabled(
                zetasql::FEATURE_V_1_3_CASE_STMT)) {
          YYERROR_AND_ABORT_AT(yystack_[5].location, "Statement CASE...WHEN is not supported");
        }
        (yylhs.value.node) = MAKE_NODE(ASTCaseStatement, yylhs.location, {(yystack_[4].value.node), (yystack_[3].value.node), (yystack_[2].value.node)});
      }
#line 10907 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1410:
#line 9137 "zetasql/parser/bison_parser.y"
                                                       {
      (yystack_[2].value.statement_list)->set_variable_declarations_allowed(true);
      (yylhs.value.node) = MAKE_NODE(ASTBeginEndBlock, yylhs.location, {(yystack_[2].value.statement_list), (yystack_[1].value.node)});
    }
#line 10916 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1411:
#line 9144 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 10922 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1412:
#line 9146 "zetasql/parser/bison_parser.y"
                                                       {
      CHECK_LABEL_SUPPORT((yystack_[3].value.identifier), yystack_[3].location);
      CHECK_END_LABEL_VALID((yystack_[3].value.identifier), yystack_[3].location, (yystack_[0].value.identifier), yystack_[0].location);
      auto block = static_cast<zetasql::ASTBeginEndBlock*>((yystack_[1].value.node));
      auto label = MAKE_NODE(ASTLabel, yystack_[3].location, {(yystack_[3].value.identifier)});
      block->AddChildFront(label);
      (yylhs.value.node) = parser->WithLocation(block, yylhs.location);
    }
#line 10935 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1413:
#line 9157 "zetasql/parser/bison_parser.y"
                                                     {
      zetasql::ASTExceptionHandler* handler = MAKE_NODE(
          ASTExceptionHandler, yystack_[3].location, {(yystack_[0].value.statement_list)});
      (yylhs.value.node) = MAKE_NODE(ASTExceptionHandlerList, yystack_[4].location, {handler});
    }
#line 10945 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1414:
#line 9163 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = nullptr;
    }
#line 10953 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1415:
#line 9170 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = (yystack_[0].value.expression);
    }
#line 10961 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1416:
#line 9174 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = nullptr;
    }
#line 10969 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1417:
#line 9181 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTIdentifierList, yylhs.location, {(yystack_[0].value.identifier)});
    }
#line 10977 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1418:
#line 9185 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = parser->WithEndLocation(WithExtraChildren((yystack_[2].value.node), {(yystack_[0].value.identifier)}), yylhs.location);
    }
#line 10985 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1419:
#line 9192 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTVariableDeclaration, yylhs.location, {(yystack_[2].value.node), (yystack_[1].value.node), (yystack_[0].value.node)});
    }
#line 10993 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1420:
#line 9197 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTVariableDeclaration, yylhs.location, {(yystack_[2].value.node), nullptr, (yystack_[0].value.expression)});
    }
#line 11001 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1421:
#line 9204 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTWhileStatement, yylhs.location, {(yystack_[2].value.statement_list)});
    }
#line 11009 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1422:
#line 9210 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 11015 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1423:
#line 9212 "zetasql/parser/bison_parser.y"
                                                      {
      CHECK_LABEL_SUPPORT((yystack_[3].value.identifier), yystack_[3].location);
      CHECK_END_LABEL_VALID((yystack_[3].value.identifier), yystack_[3].location, (yystack_[0].value.identifier), yystack_[0].location);
      auto loop = static_cast<zetasql::ASTWhileStatement*>((yystack_[1].value.node));
      auto label = MAKE_NODE(ASTLabel, yystack_[3].location, {(yystack_[3].value.identifier)});
      loop->AddChildFront(label);
      (yylhs.value.node) = parser->WithLocation(loop, yylhs.location);
    }
#line 11028 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1424:
#line 9224 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTWhileStatement, yylhs.location, {(yystack_[4].value.expression), (yystack_[2].value.statement_list)});
    }
#line 11036 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1425:
#line 9230 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 11042 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1426:
#line 9232 "zetasql/parser/bison_parser.y"
                                                       {
      CHECK_LABEL_SUPPORT((yystack_[3].value.identifier), yystack_[3].location);
      CHECK_END_LABEL_VALID((yystack_[3].value.identifier), yystack_[3].location, (yystack_[0].value.identifier), yystack_[0].location);
      auto loop = static_cast<zetasql::ASTWhileStatement*>((yystack_[1].value.node));
      auto label = MAKE_NODE(ASTLabel, yystack_[3].location, {(yystack_[3].value.identifier)});
      loop->AddChildFront(label);
      (yylhs.value.node) = parser->WithLocation(loop, yylhs.location);
    }
#line 11055 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1427:
#line 9244 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTUntilClause, yylhs.location, {(yystack_[0].value.expression)});
    }
#line 11063 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1428:
#line 9251 "zetasql/parser/bison_parser.y"
    {
     if (parser->language_options() != nullptr &&
         !parser->language_options()->LanguageFeatureEnabled(
              zetasql::FEATURE_V_1_3_REPEAT)) {
        YYERROR_AND_ABORT_AT(yystack_[4].location, "REPEAT is not supported");
      }
      (yylhs.value.node) = MAKE_NODE(ASTRepeatStatement, yylhs.location, {(yystack_[3].value.statement_list), (yystack_[2].value.node)});
    }
#line 11076 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1429:
#line 9262 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 11082 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1430:
#line 9264 "zetasql/parser/bison_parser.y"
                                                        {
      CHECK_LABEL_SUPPORT((yystack_[3].value.identifier), yystack_[3].location);
      CHECK_END_LABEL_VALID((yystack_[3].value.identifier), yystack_[3].location, (yystack_[0].value.identifier), yystack_[0].location);
      auto loop = static_cast<zetasql::ASTRepeatStatement*>((yystack_[1].value.node));
      auto label = MAKE_NODE(ASTLabel, yystack_[3].location, {(yystack_[3].value.identifier)});
      loop->AddChildFront(label);
      (yylhs.value.node) = parser->WithLocation(loop, yylhs.location);
    }
#line 11095 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1431:
#line 9276 "zetasql/parser/bison_parser.y"
    {
     if (parser->language_options() != nullptr &&
         !parser->language_options()->LanguageFeatureEnabled(
              zetasql::FEATURE_V_1_3_FOR_IN)) {
        YYERROR_AND_ABORT_AT(yystack_[9].location, "FOR...IN is not supported");
      }
      (yylhs.value.node) = MAKE_NODE(ASTForInStatement, yylhs.location, {(yystack_[8].value.identifier), (yystack_[5].value.query), (yystack_[2].value.statement_list)});
    }
#line 11108 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1432:
#line 9287 "zetasql/parser/bison_parser.y"
    { (yylhs.value.node) = (yystack_[0].value.node); }
#line 11114 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1433:
#line 9289 "zetasql/parser/bison_parser.y"
                                                        {
      CHECK_LABEL_SUPPORT((yystack_[3].value.identifier), yystack_[3].location);
      CHECK_END_LABEL_VALID((yystack_[3].value.identifier), yystack_[3].location, (yystack_[0].value.identifier), yystack_[0].location);
      auto loop = static_cast<zetasql::ASTForInStatement*>((yystack_[1].value.node));
      auto label = MAKE_NODE(ASTLabel, yystack_[3].location, {(yystack_[3].value.identifier)});
      loop->AddChildFront(label);
      (yylhs.value.node) = parser->WithLocation(loop, yylhs.location);;
    }
#line 11127 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1434:
#line 9301 "zetasql/parser/bison_parser.y"
    {
      CHECK_LABEL_SUPPORT((yystack_[0].value.identifier), yystack_[0].location);
      zetasql::ASTBreakStatement* stmt;
      if ((yystack_[0].value.identifier) == nullptr) {
        stmt = MAKE_NODE(ASTBreakStatement, yylhs.location, {});
      } else {
        auto label = MAKE_NODE(ASTLabel, yystack_[0].location, {(yystack_[0].value.identifier)});
        stmt = MAKE_NODE(ASTBreakStatement, yylhs.location, {label});
      }
      stmt->set_keyword(zetasql::ASTBreakContinueStatement::BREAK);
      (yylhs.value.node) = stmt;
    }
#line 11144 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1435:
#line 9314 "zetasql/parser/bison_parser.y"
    {
      CHECK_LABEL_SUPPORT((yystack_[0].value.identifier), yystack_[0].location);
      zetasql::ASTBreakStatement* stmt;
      if ((yystack_[0].value.identifier) == nullptr) {
        stmt = MAKE_NODE(ASTBreakStatement, yylhs.location, {});
      } else {
        auto label = MAKE_NODE(ASTLabel, yystack_[0].location, {(yystack_[0].value.identifier)});
        stmt = MAKE_NODE(ASTBreakStatement, yylhs.location, {label});
      }
      stmt->set_keyword(zetasql::ASTBreakContinueStatement::LEAVE);
      (yylhs.value.node) = stmt;
    }
#line 11161 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1436:
#line 9330 "zetasql/parser/bison_parser.y"
    {
      CHECK_LABEL_SUPPORT((yystack_[0].value.identifier), yystack_[0].location);
      zetasql::ASTContinueStatement* stmt;
      if ((yystack_[0].value.identifier) == nullptr) {
        stmt = MAKE_NODE(ASTContinueStatement, yylhs.location, {});
      } else {
        auto label = MAKE_NODE(ASTLabel, yystack_[0].location, {(yystack_[0].value.identifier)});
        stmt = MAKE_NODE(ASTContinueStatement, yylhs.location, {label});
      }
      stmt->set_keyword(zetasql::ASTBreakContinueStatement::CONTINUE);
      (yylhs.value.node) = stmt;
    }
#line 11178 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1437:
#line 9343 "zetasql/parser/bison_parser.y"
    {
      CHECK_LABEL_SUPPORT((yystack_[0].value.identifier), yystack_[0].location);
      zetasql::ASTContinueStatement* stmt;
      if ((yystack_[0].value.identifier) == nullptr) {
        stmt = MAKE_NODE(ASTContinueStatement, yylhs.location, {});
      } else {
        auto label = MAKE_NODE(ASTLabel, yystack_[0].location, {(yystack_[0].value.identifier)});
        stmt = MAKE_NODE(ASTContinueStatement, yylhs.location, {label});
      }
      stmt->set_keyword(zetasql::ASTBreakContinueStatement::ITERATE);
      (yylhs.value.node) = stmt;
    }
#line 11195 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1438:
#line 9361 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTReturnStatement, yylhs.location, {});
    }
#line 11203 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1439:
#line 9368 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTRaiseStatement, yylhs.location);
    }
#line 11211 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1440:
#line 9372 "zetasql/parser/bison_parser.y"
    {
      (yylhs.value.node) = MAKE_NODE(ASTRaiseStatement, yylhs.location, {(yystack_[0].value.expression)});
    }
#line 11219 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1441:
#line 9378 "zetasql/parser/bison_parser.y"
      {
        ast_statement_properties->statement_level_hints = (yystack_[1].value.node);
        // The parser will complain about the remainder of the input if we let
        // the tokenizer continue to produce tokens, because we don't have any
        // grammar for the rest of the input.
        tokenizer->SetForceTerminate();
        (yylhs.value.ast_node_kind) = (yystack_[0].value.ast_node_kind);
      }
#line 11232 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1442:
#line 9389 "zetasql/parser/bison_parser.y"
                                                 { (yylhs.value.ast_node_kind) = (yystack_[0].value.ast_node_kind); }
#line 11238 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1443:
#line 9390 "zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTQueryStatement::kConcreteNodeKind; }
#line 11244 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1444:
#line 9391 "zetasql/parser/bison_parser.y"
             { (yylhs.value.ast_node_kind) = zetasql::ASTQueryStatement::kConcreteNodeKind; }
#line 11250 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1445:
#line 9396 "zetasql/parser/bison_parser.y"
      {
        // Set statement properties node_kind before finishing parsing, so that
        // in the case of a syntax error after "TABLE", ParseNextStatementKind()
        // still returns ASTCreateTableStatement::kConcreteNodeKind.
        ast_statement_properties->node_kind =
            zetasql::ASTCreateTableStatement::kConcreteNodeKind;
      }
#line 11262 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1446:
#line 9406 "zetasql/parser/bison_parser.y"
         { ast_statement_properties->is_create_table_as_select = true; }
#line 11268 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1449:
#line 9413 "zetasql/parser/bison_parser.y"
      {
        ast_statement_properties->create_scope = (yystack_[0].value.create_scope);
      }
#line 11276 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1450:
#line 9418 "zetasql/parser/bison_parser.y"
              { (yylhs.value.ast_node_kind) = zetasql::ASTExplainStatement::kConcreteNodeKind; }
#line 11282 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1451:
#line 9419 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = (yystack_[0].value.ast_node_kind); }
#line 11288 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1452:
#line 9421 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTDefineTableStatement::kConcreteNodeKind; }
#line 11294 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1453:
#line 9423 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTExecuteImmediateStatement::kConcreteNodeKind; }
#line 11300 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1454:
#line 9425 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTExportDataStatement::kConcreteNodeKind; }
#line 11306 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1455:
#line 9427 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTExportModelStatement::kConcreteNodeKind; }
#line 11312 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1456:
#line 9428 "zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTInsertStatement::kConcreteNodeKind; }
#line 11318 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1457:
#line 9429 "zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTUpdateStatement::kConcreteNodeKind; }
#line 11324 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1458:
#line 9430 "zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTDeleteStatement::kConcreteNodeKind; }
#line 11330 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1459:
#line 9431 "zetasql/parser/bison_parser.y"
              { (yylhs.value.ast_node_kind) = zetasql::ASTMergeStatement::kConcreteNodeKind; }
#line 11336 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1460:
#line 9433 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCloneDataStatement::kConcreteNodeKind; }
#line 11342 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1461:
#line 9435 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAuxLoadDataStatement::kConcreteNodeKind; }
#line 11348 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1462:
#line 9437 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTDescribeStatement::kConcreteNodeKind; }
#line 11354 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1463:
#line 9438 "zetasql/parser/bison_parser.y"
             { (yylhs.value.ast_node_kind) = zetasql::ASTShowStatement::kConcreteNodeKind; }
#line 11360 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1464:
#line 9440 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTDropAllRowAccessPoliciesStatement::kConcreteNodeKind;
      }
#line 11368 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1465:
#line 9444 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTDropRowAccessPolicyStatement::kConcreteNodeKind; }
#line 11374 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1466:
#line 9446 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTDropSearchIndexStatement::kConcreteNodeKind; }
#line 11380 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1467:
#line 9448 "zetasql/parser/bison_parser.y"
      {
        if ((yystack_[0].value.table_or_table_function_keywords) == TableOrTableFunctionKeywords::kTableAndFunctionKeywords) {
          (yylhs.value.ast_node_kind) = zetasql::ASTDropTableFunctionStatement::kConcreteNodeKind;
        } else {
          (yylhs.value.ast_node_kind) = zetasql::ASTDropStatement::kConcreteNodeKind;
        }
      }
#line 11392 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1468:
#line 9456 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTDropSnapshotTableStatement::kConcreteNodeKind; }
#line 11398 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1469:
#line 9458 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTDropEntityStatement::kConcreteNodeKind; }
#line 11404 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1470:
#line 9460 "zetasql/parser/bison_parser.y"
      {
        switch ((yystack_[0].value.schema_object_kind_keyword)) {
          case zetasql::SchemaObjectKind::kFunction:
            (yylhs.value.ast_node_kind) = zetasql::ASTDropFunctionStatement::kConcreteNodeKind;
            break;
          case zetasql::SchemaObjectKind::kMaterializedView:
            (yylhs.value.ast_node_kind) = zetasql::ASTDropMaterializedViewStatement::kConcreteNodeKind;
            break;
          default:
            (yylhs.value.ast_node_kind) = zetasql::ASTDropStatement::kConcreteNodeKind;
            break;
        }
      }
#line 11422 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1471:
#line 9473 "zetasql/parser/bison_parser.y"
              { (yylhs.value.ast_node_kind) = zetasql::ASTGrantStatement::kConcreteNodeKind; }
#line 11428 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1472:
#line 9474 "zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTRevokeStatement::kConcreteNodeKind; }
#line 11434 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1473:
#line 9475 "zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTRenameStatement::kConcreteNodeKind; }
#line 11440 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1474:
#line 9476 "zetasql/parser/bison_parser.y"
              { (yylhs.value.ast_node_kind) = zetasql::ASTBeginStatement::kConcreteNodeKind; }
#line 11446 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1475:
#line 9477 "zetasql/parser/bison_parser.y"
              { (yylhs.value.ast_node_kind) = zetasql::ASTBeginStatement::kConcreteNodeKind; }
#line 11452 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1476:
#line 9479 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTSetTransactionStatement::kConcreteNodeKind; }
#line 11458 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1477:
#line 9481 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTSingleAssignment::kConcreteNodeKind; }
#line 11464 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1478:
#line 9483 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTParameterAssignment::kConcreteNodeKind; }
#line 11470 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1479:
#line 9485 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTSystemVariableAssignment::kConcreteNodeKind; }
#line 11476 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1480:
#line 9487 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAssignmentFromStruct::kConcreteNodeKind; }
#line 11482 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1481:
#line 9488 "zetasql/parser/bison_parser.y"
               { (yylhs.value.ast_node_kind) = zetasql::ASTCommitStatement::kConcreteNodeKind; }
#line 11488 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1482:
#line 9489 "zetasql/parser/bison_parser.y"
                 { (yylhs.value.ast_node_kind) = zetasql::ASTRollbackStatement::kConcreteNodeKind; }
#line 11494 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1483:
#line 9491 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTStartBatchStatement::kConcreteNodeKind; }
#line 11500 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1484:
#line 9492 "zetasql/parser/bison_parser.y"
                    { (yylhs.value.ast_node_kind) = zetasql::ASTRunBatchStatement::kConcreteNodeKind; }
#line 11506 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1485:
#line 9494 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAbortBatchStatement::kConcreteNodeKind; }
#line 11512 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1486:
#line 9496 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterDatabaseStatement::kConcreteNodeKind; }
#line 11518 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1487:
#line 9498 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterSchemaStatement::kConcreteNodeKind; }
#line 11524 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1488:
#line 9500 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterTableStatement::kConcreteNodeKind; }
#line 11530 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1489:
#line 9502 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterRowAccessPolicyStatement::kConcreteNodeKind; }
#line 11536 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1490:
#line 9504 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) =
          zetasql::ASTAlterAllRowAccessPoliciesStatement::kConcreteNodeKind; }
#line 11543 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1491:
#line 9507 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterViewStatement::kConcreteNodeKind; }
#line 11549 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1492:
#line 9509 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterMaterializedViewStatement::kConcreteNodeKind; }
#line 11555 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1493:
#line 9511 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAlterEntityStatement::kConcreteNodeKind; }
#line 11561 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1494:
#line 9513 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateDatabaseStatement::kConcreteNodeKind; }
#line 11567 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1495:
#line 9516 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateConstantStatement::kConcreteNodeKind;
      }
#line 11575 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1496:
#line 9521 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateFunctionStatement::kConcreteNodeKind;
      }
#line 11583 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1497:
#line 9525 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateProcedureStatement::kConcreteNodeKind;
      }
#line 11591 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1498:
#line 9529 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateIndexStatement::kConcreteNodeKind; }
#line 11597 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1499:
#line 9531 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateSchemaStatement::kConcreteNodeKind; }
#line 11603 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1500:
#line 9533 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateEntityStatement::kConcreteNodeKind; }
#line 11609 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1501:
#line 9542 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateTableStatement::kConcreteNodeKind;
      }
#line 11617 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1502:
#line 9546 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateModelStatement::kConcreteNodeKind;
      }
#line 11625 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1503:
#line 9551 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateTableFunctionStatement::kConcreteNodeKind;
      }
#line 11633 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1504:
#line 9555 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateExternalTableStatement::kConcreteNodeKind;
      }
#line 11641 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1505:
#line 9559 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreatePrivilegeRestrictionStatement::kConcreteNodeKind;
      }
#line 11649 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1506:
#line 9563 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateRowAccessPolicyStatement::kConcreteNodeKind; }
#line 11655 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1507:
#line 9565 "zetasql/parser/bison_parser.y"
      {
        (yylhs.value.ast_node_kind) = zetasql::ASTCreateViewStatement::kConcreteNodeKind;
      }
#line 11663 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1508:
#line 9569 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateMaterializedViewStatement::kConcreteNodeKind; }
#line 11669 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1509:
#line 9571 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCreateSnapshotTableStatement::kConcreteNodeKind; }
#line 11675 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1510:
#line 9573 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTCallStatement::kConcreteNodeKind; }
#line 11681 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1511:
#line 9575 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTReturnStatement::kConcreteNodeKind; }
#line 11687 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1512:
#line 9577 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTImportStatement::kConcreteNodeKind; }
#line 11693 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1513:
#line 9579 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTModuleStatement::kConcreteNodeKind; }
#line 11699 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1514:
#line 9581 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAnalyzeStatement::kConcreteNodeKind; }
#line 11705 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1515:
#line 9583 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTAssertStatement::kConcreteNodeKind; }
#line 11711 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1516:
#line 9585 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTTruncateStatement::kConcreteNodeKind; }
#line 11717 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1517:
#line 9587 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTIfStatement::kConcreteNodeKind; }
#line 11723 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1518:
#line 9589 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTWhileStatement::kConcreteNodeKind; }
#line 11729 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1519:
#line 9591 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTWhileStatement::kConcreteNodeKind; }
#line 11735 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1520:
#line 9593 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTVariableDeclaration::kConcreteNodeKind; }
#line 11741 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1521:
#line 9595 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTBreakStatement::kConcreteNodeKind; }
#line 11747 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1522:
#line 9597 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTBreakStatement::kConcreteNodeKind; }
#line 11753 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1523:
#line 9599 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTContinueStatement::kConcreteNodeKind; }
#line 11759 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1524:
#line 9601 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTContinueStatement::kConcreteNodeKind; }
#line 11765 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1525:
#line 9603 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTRaiseStatement::kConcreteNodeKind; }
#line 11771 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1526:
#line 9605 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTForInStatement::kConcreteNodeKind; }
#line 11777 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1527:
#line 9607 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTRepeatStatement::kConcreteNodeKind; }
#line 11783 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1528:
#line 9609 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTBeginStatement::kConcreteNodeKind; }
#line 11789 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1529:
#line 9611 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTWhileStatement::kConcreteNodeKind; }
#line 11795 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1530:
#line 9613 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTWhileStatement::kConcreteNodeKind; }
#line 11801 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1531:
#line 9615 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTForInStatement::kConcreteNodeKind; }
#line 11807 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;

  case 1532:
#line 9617 "zetasql/parser/bison_parser.y"
      { (yylhs.value.ast_node_kind) = zetasql::ASTRepeatStatement::kConcreteNodeKind; }
#line 11813 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"
    break;


#line 11817 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"

            default:
              break;
            }
        }
#if YY_EXCEPTIONS
      catch (const syntax_error& yyexc)
        {
          YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
          error (yyexc);
          YYERROR;
        }
#endif // YY_EXCEPTIONS
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, YY_MOVE (yylhs));
    }
    goto yynewstate;


  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        context yyctx (*this, yyla);
        std::string msg = yysyntax_error_ (yyctx);
        error (yyla.location, YY_MOVE (msg));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.kind () == symbol_kind::S_YYEOF)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:
    /* Pacify compilers when the user code never invokes YYERROR and
       the label yyerrorlab therefore never appears in user code.  */
    if (false)
      YYERROR;

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    YY_STACK_PRINT ();
    goto yyerrlab1;


  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    // Pop stack until we find a state that shifts the error token.
    for (;;)
      {
        yyn = yypact_[+yystack_[0].state];
        if (!yy_pact_value_is_default_ (yyn))
          {
            yyn += symbol_kind::S_YYerror;
            if (0 <= yyn && yyn <= yylast_
                && yycheck_[yyn] == symbol_kind::S_YYerror)
              {
                yyn = yytable_[yyn];
                if (0 < yyn)
                  break;
              }
          }

        // Pop the current state because it cannot handle the error token.
        if (yystack_.size () == 1)
          YYABORT;

        yyerror_range[1].location = yystack_[0].location;
        yy_destroy_ ("Error: popping", yystack_[0]);
        yypop_ ();
        YY_STACK_PRINT ();
      }
    {
      stack_symbol_type error_token;

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      error_token.state = state_type (yyn);
      yypush_ ("Shifting", YY_MOVE (error_token));
    }
    goto yynewstate;


  /*-------------------------------------.
  | yyacceptlab -- YYACCEPT comes here.  |
  `-------------------------------------*/
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;


  /*-----------------------------------.
  | yyabortlab -- YYABORT comes here.  |
  `-----------------------------------*/
  yyabortlab:
    yyresult = 1;
    goto yyreturn;


  /*-----------------------------------------------------.
  | yyreturn -- parsing is finished, return the result.  |
  `-----------------------------------------------------*/
  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    YY_STACK_PRINT ();
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
#if YY_EXCEPTIONS
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack\n";
        // Do not try to display the values of the reclaimed symbols,
        // as their printers might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
#endif // YY_EXCEPTIONS
  }

  void
  BisonParserImpl::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what ());
  }

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  std::string
  BisonParserImpl::yytnamerr_ (const char *yystr)
  {
    if (*yystr == '"')
      {
        std::string yyr;
        char const *yyp = yystr;

        for (;;)
          switch (*++yyp)
            {
            case '\'':
            case ',':
              goto do_not_strip_quotes;

            case '\\':
              if (*++yyp != '\\')
                goto do_not_strip_quotes;
              else
                goto append;

            append:
            default:
              yyr += *yyp;
              break;

            case '"':
              return yyr;
            }
      do_not_strip_quotes: ;
      }

    return yystr;
  }

  std::string
  BisonParserImpl::symbol_name (symbol_kind_type yysymbol)
  {
    return yytnamerr_ (yytname_[yysymbol]);
  }



  // BisonParserImpl::context.
  BisonParserImpl::context::context (const BisonParserImpl& yyparser, const symbol_type& yyla)
    : yyparser_ (yyparser)
    , yyla_ (yyla)
  {}

  int
  BisonParserImpl::context::expected_tokens (symbol_kind_type yyarg[], int yyargn) const
  {
    // Actual number of expected tokens
    int yycount = 0;

    int yyn = yypact_[+yyparser_.yystack_[0].state];
    if (!yy_pact_value_is_default_ (yyn))
      {
        /* Start YYX at -YYN if negative to avoid negative indexes in
           YYCHECK.  In other words, skip the first -YYN actions for
           this state because they are default actions.  */
        int yyxbegin = yyn < 0 ? -yyn : 0;
        // Stay within bounds of both yycheck and yytname.
        int yychecklim = yylast_ - yyn + 1;
        int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
        for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
          if (yycheck_[yyx + yyn] == yyx && yyx != symbol_kind::S_YYerror
              && !yy_table_value_is_error_ (yytable_[yyx + yyn]))
            {
              if (!yyarg)
                ++yycount;
              else if (yycount == yyargn)
                return 0;
              else
                yyarg[yycount++] = YY_CAST (symbol_kind_type, yyx);
            }
      }

    if (yyarg && yycount == 0 && 0 < yyargn)
      yyarg[0] = symbol_kind::S_YYEMPTY;
    return yycount;
  }



  int
  BisonParserImpl::yy_syntax_error_arguments_ (const context& yyctx,
                                                 symbol_kind_type yyarg[], int yyargn) const
  {
    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
       - Of course, the expected token list depends on states to have
         correct lookahead information, and it depends on the parser not
         to perform extra reductions after fetching a lookahead from the
         scanner and before detecting a syntax error.  Thus, state merging
         (from LALR or IELR) and default reductions corrupt the expected
         token list.  However, the list is correct for canonical LR with
         one exception: it will still contain any token that will not be
         accepted due to an error action in a later state.
    */

    if (!yyctx.lookahead ().empty ())
      {
        if (yyarg)
          yyarg[0] = yyctx.token ();
        int yyn = yyctx.expected_tokens (yyarg ? yyarg + 1 : yyarg, yyargn - 1);
        return yyn + 1;
      }
    return 0;
  }

  // Generate an error message.
  std::string
  BisonParserImpl::yysyntax_error_ (const context& yyctx) const
  {
    // Its maximum.
    enum { YYARGS_MAX = 5 };
    // Arguments of yyformat.
    symbol_kind_type yyarg[YYARGS_MAX];
    int yycount = yy_syntax_error_arguments_ (yyctx, yyarg, YYARGS_MAX);

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
      default: // Avoid compiler warnings.
        YYCASE_ (0, YY_("syntax error"));
        YYCASE_ (1, YY_("syntax error, unexpected %s"));
        YYCASE_ (2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_ (3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_ (4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_ (5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    std::ptrdiff_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += symbol_name (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short BisonParserImpl::yypact_ninf_ = -2159;

  const short BisonParserImpl::yytable_ninf_ = -1396;

  const short
  BisonParserImpl::yypact_[] =
  {
     697,  2335,  3171,  2335,  3171,   851, 12651, 19887,   216,   357,
   20188,   218,   381,   187, -2159,   486,   851, 20489, 22596,   432,
     788,   402, 12651,   397, 28014,   554,   397,   680, -2159,    84,
     581,  2335,   291, 21994,   162, -2159,   589, 28014, 28014, 21994,
     397,   690, 28315,    -1,   548, 28014, -2159,   854, -2159, -2159,
   -2159, -2159, -2159, -2159,   353, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,   796, -2159,
     114, -2159,   114, -2159,   192, -2159,  3595,   446,   815, 22897,
   -2159, -2159, 15372, -2159, -2159, -2159, -2159, -2159,   797, -2159,
     894, -2159, -2159, -2159, -2159, -2159, 12651, 12651, 28014,  2839,
   28014, 28014, 28014, 28014, 28014,  3171,   781,  3171, -2159, 12651,
     904, -2159, -2159, -2159,   895,  3171, -2159, -2159,   520, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159,   949, -2159,   956,
   -2159,  3411, -2159, -2159, -2159, -2159, -2159, -2159,  6246, -2159,
   14469, 14469, -2159, -2159, -2159, -2159,   836,  8686,   940, -2159,
     851,   960, -2159, -2159, -2159, 12651, -2159, 23198, 12651, -2159,
   -2159,   845, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159,   984,   996, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159,  1012,  1022,  1039, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159,  1036, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159,  1043, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,  1052, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159,  1050, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159,  1055, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159,  1069,  1089, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, 12651, 29014,  8991,   196, -2159,  1103, -2159, -2159,
   -2159, -2159,  1061,   710,  1099,  9296,   898, -2159,   991,   993,
     990, -2159, -2159,   414, -2159,   907, -2159,   918, -2159,  1107,
    4416,   368,   851, -2159, -2159,  9601,   920,   926, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159,  1119, -2159,  1121, -2159,
   -2159, -2159, -2159, -2159, -2159,  1110, -2159,  1111, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
    1091, -2159, -2159, -2159,  1117, -2159, -2159, -2159,  1122, -2159,
   -2159, -2159, -2159,   569, -2159, -2159,  1102,   882, 28014,   410,
   28014, -2159, 28014,  1008, 23499,   353,  1128,   204,  1130, 28014,
   -2159,  1093, -2159, -2159,   880,   947, -2159, -2159,   868, -2159,
   -2159,   855, -2159, -2159,  1016, -2159,   959, -2159,  1081,  1081,
    1081,  1159, 28014, 13258, -2159, -2159, -2159,   447,  1084, -2159,
   -2159, 28014,   908,  1028,   965,   896,  1081,  1081,  1081, 12651,
   -2159,  1047, 28014,   935, -2159,  1075,  1172, -2159,  1171, -2159,
   -2159, -2159, 12956,    85,   102, 28014,  1085, -2159, -2159,   885,
    1112, -2159, 28014, -2159, 28014,  1156,  1160,  1164,   807,   497,
   -2159, -2159,   967,   -61, -2159,  1187, -2159,   851,  1189,  1104,
   -2159, -2159, -2159,   851,   851, 20188, -2159, -2159, 28014,   796,
   -2159, 13562, -2159,  1091,  1160, -2159,  1112,   798,  1170, 22295,
   20790,   673, -2159, 28014,    64,  1195,   934, -2159,  1153, -2159,
    1087, -2159,   807,    57, -2159,   797,  6551, -2159, 29014,  1086,
   13558,  1125,   904,  3171,   909, -2159, -2159, -2159, -2159, 16877,
   -2159, -2159,  1145,   994,   925,  2222, -2159,   143,   904, -2159,
   -2159,  1135, -2159, -2159,   358,   455,   939, -2159, -2159, -2159,
   21091, -2159, -2159,  1077,    82, -2159, -2159, -2159, -2159, -2159,
    1049, -2159, -2159, -2159, -2159,   517,  1019, -2159,   404, -2159,
   -2159, -2159, -2159, -2159,  1057, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159,  1079, -2159,  1090, -2159, -2159, -2159,  1206,
   -2159, -2159, -2159,   796,  1239,   114, -2159,   114, -2159,  6856,
    1136,  4155, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
    1091, -2159,   357, 19887, -2159, 12651, 13863,  9906,  1242, 12651,
   15071,  1244,  4318, -2159, 17479, 12651, -2159, 12651, 10211,   742,
   -2159,  1190, -2159, -2159, -2159, -2159, -2159, -2159, -2159, 12651,
   12651, 12651, 12651, 12651, -2159, -2159, -2159, 23800, -2159, -2159,
   12651, -2159, -2159,   483, -2159, 12651,   140, 12651, 12651, 12651,
   12651,  4721, 12651, 12651,   851,   528, -2159, 29014, 12651, -2159,
   -2159, -2159, 19887, -2159, -2159, -2159, 14166, -2159, 12651, -2159,
   12651, 12651, 12651, -2159, -2159,   971, 12651, -2159,  1083, -2159,
   -2159, -2159,  5026,   648, -2159,   796, 16274, -2159, -2159, -2159,
    1219,  1221, 10516,  1161,  1165,  1180,  1138, -2159, 18380, -2159,
   12651, -2159, 12651, -2159, -2159, -2159, 28014,   120,   941, -2159,
   -2159, 12651, 20188, 20188, -2159,   102,  1157, -2159,  1013, -2159,
    1123,  1192,   997, -2159, -2159, -2159,  1192,    18,  1005,   723,
     369,  1164,  1124,   570, -2159,   951,  1187, 12651, 28014, 12651,
   12651, -2159,  1263,  1131, -2159, -2159, -2159,  1041, -2159,  1209,
   28014, 28014, 28014, 17780,   964, -2159, -2159,  1271, -2159,  1171,
    1103, -2159,  5331, 28014,   557,  1123,  1044,  1081,  1081, 28014,
   28014, 28014, 19585,  1116, -2159,   402,   135, -2159, -2159, 28014,
   24101, 28014, -2159, -2159,   536,  1091, -2159, -2159, -2159, 28014,
   -2159,   144, 28014, -2159, 22897,  1194, -2159,  1162, 13865, 28014,
   14168, 12651, 24402, -2159,  1163, 28014, 28014, -2159, -2159,   353,
    1232, 12651,   673, -2159,   709,   709, -2159, -2159,  1104, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, 13259, 28014,  1112,
   -2159,  1282, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159, 10821,   968, -2159,  1286, 28014, -2159,  1087,  1037,
   -2159,  1071,  1249, -2159,  7161, -2159, -2159, 28014,  1288, 28014,
   24703, -2159, -2159, -2159, -2159, -2159, 29014, -2159, 12651,   480,
    3171,  1290,  1174,  1234, 28014, 12651,  1240,  1088,  1293, 12651,
    1237,  3171,  3171, 28014, 28014, 28014, 28014, 28014, -2159, -2159,
   -2159,   919,    26, -2159, -2159, 28014,  1295,  1296,  1299, -2159,
    1051, -2159,  1015, -2159, -2159, -2159, -2159, -2159, -2159,  1053,
    1166,  1108,  1038, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159, -2159,   224,  1104, -2159,   709,   709,   796, 29014, -2159,
   12651, -2159,  1311,  1307, 16876, 12651, -2159, 20186,   357, 18682,
    1204, -2159, -2159, -2159, -2159, 19887, 18983, 19886, -2159, 20789,
   -2159,  1035,  1129,   992, 21391,   743, 28014, -2159,  4318,  1250,
   -2159,  1261, 29114, -2159, -2159, -2159, 29159,  1070,   742,   780,
   -2159, -2159, -2159,   851, 29159, 21692, 29159,   243, -2159, -2159,
   29014, -2159, 25004, -2159, 21992, 22594, 22896,  1030, 23197, -2159,
   24402, 24402, -2159, -2159, 12651, 12651,  1104, 12651, 12651, -2159,
   -2159, -2159,  1167,  1126,  1224, 28014, -2159, -2159, 29014, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159,   105, -2159, 29014,
    1321, -2159, -2159, -2159,  1045,  1192, -2159,  1094,  1235, 28014,
    1192, 28014, -2159,  1192,  1056,  1192,  1192,   178,  1139,  1046,
   -2159,  1132, -2159,  1212,   402, -2159, -2159,  1292,  1328, 29014,
     878, 29014, 29014,   357,  1106,  1081, -2159,    97,    97,   267,
   -2159,  1334, -2159, 20188, -2159, 28014, -2159, -2159, -2159, -2159,
    1272,  1163,  1109,  1081, 28014, 28014,   758,  1091,  1341, 28014,
    1227, 28014, -2159,  1302,   402,   395, 28014, -2159, 28014, 28014,
     402,  1345, 28014,   153, 28014, -2159,  1103, -2159, 12651, -2159,
   -2159, 28014, -2159, -2159, -2159, 28014, -2159, 23799, 28014, -2159,
   -2159,  1133,  1243, -2159, 28014, -2159, 12651, -2159, 24099,  1134,
   -2159, -2159,   394,   394, -2159, 18081, -2159, -2159, -2159,   705,
   -2159, 29014, -2159, 10821, -2159,  1195, -2159, -2159,  7466,  1300,
   12651,  1241,  1347,  1349,  1353,  1356,  1091, 28014,  1091,  1358,
    5636,   970, -2159,   785, 24401,  3171, 12651,  1304,  1181,   357,
    1092, -2159, -2159, 29014, 12651, -2159, -2159, 12651, 29014,  1118,
    1306, -2159, -2159, -2159, -2159, -2159,  1157, -2159,  1123, -2159,
    1100, -2159, -2159,  1005, -2159, -2159, -2159,  1183,   466,  1095,
    1192, -2159, -2159, -2159, -2159,  1246, -2159,  1123,  1141, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159,   394,   394,  1104,
   29014, -2159, -2159, 12651, 24702, 19887,  1375, 12651, 28014, -2159,
    1083, 12651, 19887, -2159,   748, -2159,  1310,   243, 12651,  6246,
    1378, -2159,   974, -2159, -2159, 28014, -2159, 12651, 12651, -2159,
   12651, 24402, -2159,   807,  1359, -2159, 29014, 29014,  1383, 29014,
   29014,  1333,   796,  1387, 25305, -2159, -2159, -2159, -2159, 12651,
    1192,  1297,  1192,  1325,   163, 28014,   102, 28014,   323, 28014,
   28014,  1192, 28014,  1192,  1192,  1192, 21392, -2159, 25606,  7771,
   12651, -2159,  1388,  1298, 28014,   119,   407,   558,   295,   502,
   -2159,  1394,  1394,  1394, 12651, -2159, -2159, 28014,  1162,  1301,
   28014,   148, -2159, 17178,   975, -2159,   232, -2159,  1401, 12651,
   -2159,   357, -2159,   688,   417, -2159, -2159, -2159, 28616,  1352,
   -2159,   981,  1091,   688,   587, -2159, 29014, -2159, -2159, -2159,
     750, 25907,  2581, 26208, -2159, -2159,   688, -2159,   405,   673,
   -2159, -2159, 28014, 13562, -2159,  1364, -2159, -2159,    62,  1273,
    1412, -2159, -2159, 14770,   578,  1249, 29014,   253, -2159, -2159,
   -2159, -2159, -2159,   982, -2159, -2159,   851, -2159,  6551,   851,
   -2159,  3171, -2159, 25003,  1365, 12651,  1238,  1360,  1416,  1308,
   29014, 29014, -2159,  1137,  1142,  1191, -2159,  1223, -2159, -2159,
   -2159, -2159, 28014,  1196,  1197, -2159, -2159, -2159, -2159, 29014,
   12651,  1231, -2159, 29014, -2159, -2159, -2159,  1231, -2159, -2159,
   -2159, -2159, 29159,  4268, 11126, 12651, -2159,   782, 29014, 29014,
   25604,   807,  1359, -2159, 12651,  1104,   357, 28014, -2159, -2159,
   29014, 28014, 24101, 28014, -2159,  1352,   402,  1269,  1382,   691,
   -2159, 28014,    60,   789, 28014,  1345, 28014, 28014, 28014,   357,
   -2159,   851, -2159,   834,   839, -2159,  1337, -2159,  1091, -2159,
    1366, 29014, -2159, 28014,  1343,   124,  1352,  1159,  1437,  1192,
    1192,  1233,  1245, -2159, -2159,  1081,  1081,  1081,  1081,  1247,
   28014,  1081,   267, 29014,  1313, -2159,  1323,  1153, 28014,  1348,
   28014, -2159, -2159, 18382,  1438, -2159,   858, -2159, -2159, -2159,
    1404, 18683, 18683, -2159, -2159, -2159, -2159, 25304, -2159,  1449,
   -2159,  1450, -2159, -2159, -2159, -2159,   688,  1437,  1233,  1245,
   -2159, -2159, -2159, -2159, -2159, 18984,  1354, 28616, -2159,  1450,
     688, -2159, 28014, -2159, -2159,   268, -2159,   818, -2159, -2159,
     415, -2159, -2159, -2159,  1362, -2159, -2159, -2159, 19887,  1455,
    1457,   983,  1214,  1023, -2159,  8076, 11431,    62, 28014, -2159,
    1249, -2159,  1357, -2159,  1171,  1361, -2159, 28014, -2159, 26509,
   -2159, 26509, -2159,  3171, -2159, 25906, 12651, -2159,  1303,  3171,
   -2159, -2159, -2159, -2159,  1345, -2159, -2159, 29014, 12651,  1466,
    1469, 12651, -2159, -2159, 26507, 29014, -2159, -2159, 26207,  1470,
    1471,  1377,  1171,   391, -2159,  1171,  1384, -2159, -2159, 28014,
     124, -2159, 12651,  1345,  1476,   402,   106,  1027,   402,   758,
    1396,  1230,   758,  1171,   151,  1480, 26509, -2159,  1482, -2159,
   26810, 12651, 15673,   511,    73, 28014,  1043, -2159, -2159, -2159,
   -2159, -2159, 12651, 28014, 28014,  1171,  1483, 28014, 28014, 28014,
   28014,  1081,  1091, 28014, -2159,   816,  1367,  1452,  1087,  1091,
   28014, -2159,  1091, -2159, -2159, -2159, -2159, -2159, -2159, 19887,
   19887, -2159,  1400,  1404, -2159, 28014, 12651,   688,  1450,  1481,
   -2159, -2159,  1487,  1453,    41, -2159, -2159,   863, -2159,  1117,
     100,  1494, -2159,  1091,    31,  1454,  1498,  1344, -2159,  1450,
     790,  1496, 10821, 26208,  1162,     5, -2159,  1231, 28014, 12651,
   28014, -2159,  1502, 12651, -2159, 28014, -2159, -2159, -2159, -2159,
    1392,   253,   396, 26208, -2159, 28014,  1504, 12651,   129,  3822,
    3822,  1395, -2159,   457,  1395, -2159,  3171, 26809,  3171, -2159,
    1396, 27411, -2159, -2159, 29014, -2159, 12651, -2159, -2159,   851,
    1508,   796,  1248, 24101, 28014, -2159, 28014,   402, -2159, 29014,
    1396, 11431,  1467, -2159, -2159, -2159, -2159, -2159, 28014,    59,
   -2159,  1368,  1230, 28014,  1363, 18683, -2159,  1248, -2159,  1248,
   28014, 26509,  1163, -2159, -2159, 29014, 16275, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159,   786,   760,   851, 12651, 12651, 12651,
   -2159, -2159, -2159,  1439,  1514,  1441,   278, -2159,  1397,  1399,
    1406,  1407,  1458, -2159, -2159,    73, 27711,   390, 18984,   324,
    1280, 27111,  1029,   360,   341,   355, -2159, -2159, -2159,  1409,
    1251,  1486, -2159, -2159, 28014, -2159,  1091, -2159, -2159, 19887,
   -2159,  1389, -2159,  1240, -2159, -2159, -2159, 21693, 19285, -2159,
    1431, 28014, -2159,  1324, -2159, -2159, -2159, -2159, -2159,   197,
     402,  1280, 21693, -2159, -2159, 12651,  1453,  1478,   101,  1352,
   12651, -2159, 12651, 12651,  1488,  1535,   402, -2159, -2159, -2159,
   -2159,  1153, -2159, -2159,  1533, -2159, -2159, 28012, -2159, 12651,
   -2159, 11431,   253, -2159, -2159,  1195, -2159,  1538,   457, 12651,
   29014,  1445,  1446,  1539, -2159, -2159, 28014, -2159, -2159,  1504,
   12651,   347,  3822,  3822, -2159, -2159, -2159,  3171,  1484,  1363,
    1265, -2159, 29014,  1495, 12651,   604,  1283,  1354, -2159,    65,
     156, -2159,  1490,  1544,   357, -2159, -2159, 16576, -2159, -2159,
    1248, -2159, 28014,  1391, -2159,    86,   402,   367,  1395,  1313,
   16275, -2159,  1460,  1547, 19586, -2159,   624,  1503, 29014, 29014,
   29014, -2159,  1441, 11736, -2159,   278,  1397, -2159, -2159, 28014,
    1551, -2159,  1552,  1553, 28014,   584, -2159,  1556,   360, 28014,
   28014, -2159,  1369, -2159, -2159, -2159, 28014,   360, -2159, -2159,
    1374, -2159,   402, -2159,   246,  1475,  1332, -2159, 28014,  1515,
    1430, -2159, -2159, -2159,  1400,  1352,  1554, -2159, -2159,  1352,
   21693, -2159, -2159, -2159,   310, -2159, -2159, -2159, -2159, -2159,
   29014, -2159, -2159, -2159, -2159, -2159, 28313, 29014, 29014, 12651,
   12651,  1499,  1087, -2159, 28014, -2159, -2159, -2159, -2159,  3822,
    3822, -2159, -2159,   152,  3957, -2159, -2159, 27412,  1567, -2159,
   -2159, -2159,  1442,  1391,  1276, 12651, 29014, -2159, -2159,  5941,
    1569,   525,  1344,  1459, -2159, -2159,   688, -2159, -2159,  1390,
    1456, -2159, -2159, -2159, -2159, -2159, -2159,   402, -2159, 28014,
    1490,  1410, -2159, -2159, -2159, -2159,   173,  1467,  1462, -2159,
    1395,  1572,   624,  1395, -2159, -2159,  1485, -2159,  1485,  1485,
     127, 11736,   278,  1580,  1033, -2159, 29014,  1397, -2159, -2159,
    1543, 28014, 12651,   688, -2159,   688, -2159,   418,   402, -2159,
   -2159,  1473, -2159, -2159,   813,   402, -2159, -2159,  1312,  1159,
    1506,  1159, -2159,  1463, 12651, -2159,  1500, -2159,  1500, -2159,
    1320, 29014, 29014,  1415,  1456, -2159, -2159, -2159, -2159, 12651,
   12651, -2159, 28014,  1468,  1091,   647, -2159,  1490, 12651, 29014,
    8381,  1350,   638, 12951, -2159, -2159, -2159, -2159, -2159,   402,
    1600,  1450, -2159,  1489, -2159,   343,  1047, -2159,   402,  1403,
    1313, -2159,  1354, -2159, 28014,  1047,  1403,   104, -2159, -2159,
    1462,  1601,   384, -2159, -2159, 15974,   127, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159,  1521, -2159,  1397, 12651, 12651, -2159,
   -2159, 25305, -2159, 28614,  1042,  1059, -2159, -2159, 12651,  1393,
   -2159, 21693, -2159, -2159, -2159, 12651, 29014, -2159,   402, -2159,
    1318, -2159,  1159, -2159, -2159, 29064,  1063,  1091, 28014, -2159,
     158,  1607, -2159,  1354, 29014,  1573, -2159, -2159, -2159, -2159,
   -2159,  1467,   688,  1614,  1464, -2159, -2159, 28014,  1574,  1367,
    1344,   138, -2159, -2159,   211,  1159,   402, -2159, 12041,  1067,
   -2159,  1351,  1163,  1534,   851, -2159, 29014, 29014, -2159, -2159,
   -2159, -2159, 29014,    54,  1524, -2159, 29014, -2159, -2159, -2159,
    1620, 28014, -2159,   139, -2159, -2159,  1354,    33,  1344,  8381,
   -2159,  1068, 12651,  1345, -2159,   242, -2159, -2159, -2159,   402,
   -2159, -2159, 12346, -2159, -2159,  1581, -2159,  1477, -2159, 12651,
   -2159,  1625, -2159,   402, -2159,   851, 19586, -2159,  1570, -2159,
   -2159,   -16, -2159,  1536,  1541, 12651,  1091,  1626, -2159,  1339,
    1631, -2159, -2159,   402, -2159, -2159, 28914, -2159, -2159,  1467,
   -2159, 28964, -2159, -2159,  1635, -2159, 12651,  1076, -2159, -2159,
   19586,   608, -2159,   118,   118,  1472, -2159, -2159,  1370, -2159,
   -2159, -2159,  1080,  4060, 27412,  1082,  1636, 27713,   673,   198,
   -2159, -2159, -2159, -2159, 29014, 12651, -2159,   608, 12651,  1639,
   -2159,  1096, -2159, -2159,   608, -2159,  1507,  1549, -2159, -2159,
   -2159, -2159, 12651,  1640, -2159,   672, -2159, 27412, -2159, -2159,
   28014,  1631, -2159, -2159,  1398,  1645, -2159, -2159, -2159, 29014,
   -2159, 29014, 28014, 28014, -2159, -2159, -2159, -2159, -2159, -2159,
     917, -2159, -2159,  1398, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159
  };

  const short
  BisonParserImpl::yydefact_[] =
  {
       0,     0,  1393,     0,     0,  1269,     0,     0,     0,     0,
       0,     0,  1256,     0,  1267,  1336,  1269,     0,     0,     0,
       0,  1276,     0,   147,     0,     0,   147,  1282,  1266,     0,
       0,     0,     0,     0,     0,  1295,     0,     0,     0,     0,
     147,     0,     0,     0,     0,     0,     2,    10,    18,    33,
      34,    36,    35,    42,   141,    43,    44,    73,    45,    46,
      47,    48,    49,    50,    51,    53,    54,    55,    56,    52,
      58,    59,    60,    61,    37,    63,    57,    62,    65,    67,
      68,    69,    70,    72,    71,    78,    79,    74,   708,    80,
     448,   437,   436,   452,     0,   475,     0,     0,     0,     0,
      64,    39,  1286,  1278,    38,  1279,  1280,    41,     0,    40,
       0,    77,    75,    76,    66,   997,  1408,     0,     0,   147,
     936,   936,     0,   936,   936,  1395,  1439,  1395,  1438,     0,
    1380,    16,    17,  1378,     0,  1391,  1392,     3,     0,    20,
      21,  1411,    22,    23,  1422,    25,  1425,    24,  1429,    26,
    1432,    27,    28,    29,    30,    31,     4,    15,     5,    13,
    1268,     0,     6,   984,   985,   986,   994,   995,     0,   825,
       0,     0,   745,   746,   747,   839,     0,     0,     0,   918,
    1269,     0,   983,   915,   914,     0,   916,     0,     0,   981,
     917,     0,   982,  1096,  1097,  1098,  1100,  1099,  1101,  1102,
    1103,  1104,  1105,  1106,  1107,  1108,  1109,  1110,  1111,  1112,
    1113,  1114,  1115,  1116,  1117,  1118,  1119,  1120,  1123,  1121,
    1122,  1124,  1125,  1126,  1127,  1128,  1129,  1130,  1131,  1132,
    1254,  1133,  1134,  1135,  1137,  1136,  1140,  1141,  1142,  1143,
    1144,  1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,  1153,
    1154,  1155,  1156,  1157,  1158,  1159,  1160,  1162,  1161,  1163,
    1165,  1164,  1166,  1167,  1168,  1169,  1170,  1171,  1172,  1173,
    1174,  1175,  1176,  1177,  1178,  1179,  1180,  1181,  1182,  1183,
    1184,  1185,  1186,  1187,  1188,  1189,  1190,  1191,  1192,  1193,
    1194,  1195,  1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,
    1204,  1205,  1206,  1207,  1208,  1209,  1211,  1210,  1212,  1213,
    1214,  1215,  1216,  1217,  1218,  1219,  1220,  1221,  1222,  1223,
    1224,  1225,  1226,  1227,  1228,  1229,  1230,  1231,  1232,  1238,
    1233,  1234,  1235,  1236,  1237,  1239,  1240,  1241,  1242,  1243,
    1244,  1245,  1246,  1249,  1247,  1248,  1250,  1251,  1252,  1253,
    1139,  1138,     0,     7,     0,     0,   760,     0,   757,   768,
     758,   838,     0,     0,     0,     0,     0,   761,   887,   888,
       0,   762,   763,     0,   764,     0,   765,     0,   766,     0,
     677,   682,  1269,   767,   770,     0,     0,     0,   771,   772,
     979,   748,   749,   750,   751,   752,     0,   753,     0,   754,
     755,   756,   769,   759,   996,     0,   843,     0,  1107,  1108,
    1126,  1127,  1128,  1146,  1166,  1182,  1207,  1216,  1235,  1236,
     842,   853,   851,   852,   864,     8,   797,     1,     0,   463,
     465,   464,   467,     0,   471,   466,   474,     0,     0,  1261,
       0,  1335,     0,   459,     0,  1237,     0,     0,     0,     0,
     684,     0,   159,   249,     0,     0,   108,   109,     0,   111,
     112,     0,   114,   115,     0,   116,   351,   117,  1362,  1362,
    1362,     0,   130,   127,   145,   146,   144,     0,     0,   155,
    1281,     0,     0,     0,     0,     0,  1362,  1362,  1362,     0,
     374,   688,     0,   384,   392,     0,   382,   385,   415,   391,
     731,   730,     0,     0,  1276,     0,     0,   156,   158,  1176,
     373,   422,   936,   143,     0,   805,  1326,  1321,  1325,   507,
       9,    11,     0,     0,   138,   140,   142,  1269,   707,   674,
     434,   435,   433,  1269,  1269,     0,   473,    19,   689,   708,
     441,     0,   369,   807,   808,   809,   373,   820,   810,   797,
       0,     0,  1292,     0,     0,  1246,     0,  1299,  1286,  1321,
    1290,  1296,  1298,     0,  1349,  1354,     0,  1357,  1407,     0,
       0,     0,     0,  1394,  1414,  1434,   935,  1436,  1417,     0,
    1437,  1435,     0,     0,     0,     0,    32,     0,  1381,  1379,
    1404,     0,    14,    12,     0,  1256,     0,  1517,  1459,  1443,
       0,  1444,  1526,     0,     0,  1514,  1515,  1475,  1521,  1510,
       0,  1481,  1523,  1520,  1458,     0,     0,  1450,     0,  1471,
    1512,  1456,  1524,  1522,     0,  1519,  1513,  1525,  1473,  1527,
    1511,  1472,  1482,     0,  1463,  1474,  1516,  1457,  1518,     0,
    1462,  1451,  1441,   708,     0,   451,   439,   438,   454,     0,
       0,   455,  1000,  1001,  1002,  1003,  1004,  1005,  1006,  1007,
    1008,  1009,  1010,  1011,  1012,  1013,  1014,  1015,  1016,  1017,
    1018,  1019,  1020,  1021,  1022,  1023,  1024,  1025,  1026,  1027,
    1028,  1029,  1030,  1031,  1032,  1033,  1034,  1035,  1036,  1037,
    1038,  1039,  1040,  1041,  1042,  1043,  1044,  1045,  1046,  1047,
    1048,  1049,  1090,  1050,  1051,  1052,  1053,  1054,  1055,  1056,
    1057,  1058,  1059,  1060,  1061,  1062,  1063,  1064,  1065,  1066,
    1067,  1068,  1069,  1070,  1071,  1072,  1073,  1074,  1075,  1076,
    1077,  1078,  1079,  1080,  1081,  1082,  1083,  1084,  1085,  1086,
    1087,  1088,  1089,  1091,  1093,  1094,  1095,  1092,   840,   841,
     998,   999,     0,     0,   824,     0,     0,     0,     0,     0,
       0,     0,   778,   968,     0,     0,   993,     0,     0,   796,
     726,   920,   717,   718,   719,   720,   721,   722,   723,     0,
       0,     0,     0,     0,   724,   725,   727,     0,   728,   729,
       0,   737,   741,   743,   735,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1269,     0,   829,   827,     0,   830,
     835,   826,     0,   850,   967,   882,   876,   879,     0,   881,
       0,     0,     0,   889,   900,     0,     0,   906,     0,   913,
     921,   931,     0,     0,   923,   708,   922,   930,   924,   925,
       0,   769,     0,     0,     0,   677,   963,   975,   502,   969,
       0,   974,     0,   976,   989,   992,     0,     0,     0,   865,
     453,     0,     0,     0,  1255,  1276,   358,  1260,     0,  1259,
    1364,   368,     0,  1257,  1258,  1262,   368,   166,  1265,     0,
     507,   797,     0,   478,   153,     0,   148,     0,     0,     0,
       0,   685,     0,     0,   107,   110,   113,     0,   350,     0,
       0,     0,     0,     0,     0,  1275,   128,   129,   131,   415,
       0,   125,     0,     0,   507,  1364,     0,  1362,  1362,     0,
       0,     0,  1383,     0,   687,  1276,   688,   383,   381,     0,
       0,     0,   414,   389,   505,   215,   216,   245,   246,     0,
     395,     0,     0,   421,     0,   424,   157,  1284,     0,     0,
       0,     0,     0,   506,  1317,     0,     0,   134,   135,     0,
       0,     0,     0,   442,     0,     0,   472,   686,   674,   815,
     816,   817,   814,   371,   811,   812,   813,     0,     0,   373,
     411,     0,   517,   516,  1285,   513,   512,   514,  1297,  1291,
    1293,  1294,     0,     0,  1313,  1300,     0,   413,  1290,     0,
    1301,     0,  1340,  1350,     0,   587,   588,  1120,  1254,  1180,
    1231,   579,   580,   581,   578,  1356,   577,   582,     0,  1397,
    1395,     0,     0,     0,     0,     0,  1416,     0,     0,     0,
       0,  1395,  1395,   936,   936,   936,   936,   936,  1403,  1442,
    1494,  1261,   166,  1452,  1480,  1237,     0,     0,     0,  1485,
       0,  1486,     0,  1489,  1487,  1488,  1491,  1493,  1460,     0,
       0,     0,     0,  1470,  1469,  1467,  1453,  1454,  1455,  1461,
    1484,  1483,     0,   674,   980,     0,     0,   708,   455,   444,
       0,   966,     0,     0,     0,     0,   896,     0,     0,     0,
     836,   875,   849,   847,   846,   797,     0,     0,   898,     0,
     919,   789,   790,   791,     0,   792,     0,   775,   777,     0,
     744,     0,   776,   738,   742,   736,   788,   794,   795,   793,
     734,   732,   733,  1269,   781,     0,   782,     0,   786,   787,
     828,   848,     0,   880,     0,     0,     0,     0,     0,   905,
       0,     0,   912,   929,     0,     0,   674,     0,     0,   932,
     680,   681,   679,     0,   965,     0,   971,   970,   973,   798,
     859,   860,   855,   856,   857,   854,   858,     0,   862,   468,
       0,   470,   161,   357,     0,   368,  1363,     0,     0,     0,
     368,     0,   165,   368,     0,   368,   368,   368,     0,     0,
    1264,     0,  1277,     0,  1276,   476,   477,   462,     0,   150,
       0,   149,   151,     0,     0,  1362,  1361,     0,     0,     0,
    1274,     0,  1271,     0,  1273,     0,   133,   126,  1358,  1355,
       0,  1317,     0,  1362,     0,     0,  1360,  1376,  1360,     0,
    1389,     0,   233,     0,  1276,     0,   797,   386,     0,     0,
    1276,   257,     0,     0,   797,   372,     0,   420,     0,  1319,
     802,     0,   800,   806,   801,     0,   799,     0,     0,  1323,
    1322,     0,     0,   499,   136,   139,     0,   706,   701,   673,
     431,   432,     0,     0,   440,     0,   818,   823,   370,     0,
    1309,  1308,  1310,     0,  1312,     0,   412,  1302,     0,  1338,
       0,     0,     0,     0,     0,     0,   572,     0,   571,     0,
       0,     0,   569,   570,     0,  1395,     0,     0,  1401,     0,
       0,  1410,  1418,  1420,     0,  1419,  1421,     0,  1427,     0,
       0,  1412,  1423,  1426,  1430,  1433,   358,  1505,  1364,  1499,
       0,  1500,  1449,  1265,  1504,  1502,  1497,  1445,     0,     0,
     368,  1476,  1478,  1477,  1479,     0,  1492,  1364,     0,  1466,
    1468,  1531,  1528,  1529,  1532,  1530,   445,     0,     0,   674,
     972,   977,   844,     0,     0,     0,     0,     0,     0,   845,
       0,     0,     0,   773,     0,   739,     0,     0,     0,     0,
       0,   784,     0,   783,   709,     0,   877,     0,     0,   890,
       0,     0,   909,   908,   907,   910,   675,   676,     0,   927,
     926,     0,   708,     0,     0,   961,   501,   863,   861,     0,
     368,     0,   368,     0,   703,     0,  1276,     0,   368,     0,
       0,   368,     0,   368,   368,   368,     0,   458,     0,     0,
       0,   154,     0,     0,     0,     0,     0,     0,     0,     0,
      98,   119,   120,   118,     0,  1272,   132,     0,  1284,     0,
       0,  1368,  1375,     0,     0,  1359,  1371,  1374,  1382,     0,
    1390,     0,   376,     0,     0,   503,   504,   394,     0,   701,
     256,     0,   393,     0,     0,   423,  1283,   804,   803,  1324,
       0,     0,   507,     0,   137,   705,     0,   700,   692,     0,
     447,   446,     0,     0,   821,     0,  1311,  1314,   497,     0,
     481,  1287,   479,   492,     0,  1340,  1339,     0,   583,   584,
     585,   586,   574,     0,   573,   590,  1269,   591,     0,  1269,
     589,  1395,  1396,     0,     0,     0,  1400,  1397,     0,     0,
    1415,  1440,  1428,     0,     0,     0,  1509,     0,  1503,  1495,
    1496,  1507,     0,     0,     0,  1465,   450,   449,   443,   883,
       0,   894,   978,   899,   837,   911,   904,   894,   774,   740,
     780,   779,   785,   455,     0,     0,   711,     0,   884,   886,
       0,   902,   903,   933,     0,   674,     0,   936,   964,   959,
     469,     0,     0,   936,   367,     0,  1276,     0,   253,     0,
     239,     0,   124,     0,     0,   257,     0,     0,     0,     0,
    1352,  1269,  1351,   595,   807,   596,     0,   460,   461,   457,
     638,   152,   683,     0,     0,     0,     0,     0,     0,   368,
     368,     0,     0,    83,    84,  1362,  1362,  1362,  1362,     0,
       0,  1362,     0,  1270,   608,  1305,  1307,  1286,     0,     0,
       0,  1373,   175,     0,  1231,   172,     0,   874,   872,   873,
     502,   797,     0,   174,  1370,  1369,  1377,  1385,  1386,  1388,
     375,   378,   418,   697,   696,   698,     0,  1112,  1149,  1192,
     259,   262,   323,   322,   263,     0,   944,   261,   258,   380,
       0,  1327,     0,  1329,  1316,     0,  1332,     0,  1331,  1333,
     638,   699,   690,   691,   695,   672,   822,   819,     0,     0,
       0,     0,   490,     0,   498,     0,   482,   495,     0,   494,
    1340,  1337,     0,  1345,   415,     0,  1346,     0,   576,   567,
     592,   567,  1405,  1395,  1409,     0,     0,  1402,     0,  1395,
    1424,  1508,  1506,  1498,   257,  1490,  1464,   885,     0,     0,
       0,     0,   710,   715,     0,   713,   878,   901,     0,     0,
       0,   940,   415,     0,   387,     0,     0,   702,   241,     0,
       0,   254,     0,   257,     0,  1276,   188,     0,  1276,  1360,
     426,   190,     0,   415,     0,     0,   567,   599,     0,   597,
       0,     0,     0,   670,     0,     0,     0,    82,   251,   250,
      97,    81,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1362,    96,     0,    99,     0,   647,     0,  1290,  1365,
       0,  1372,  1367,   869,   867,   866,   868,   871,   870,     0,
       0,   356,   168,   502,   173,     0,     0,     0,   377,     0,
     281,   268,     0,  1152,   307,   276,   277,     0,   278,   864,
     293,     0,   266,   267,   797,     0,   943,   948,   260,   379,
       0,     0,     0,     0,  1284,     0,   704,   894,     0,     0,
       0,   485,     0,     0,   491,     0,  1288,   480,   496,   493,
       0,     0,     0,     0,   575,     0,  1189,  1198,  1242,   507,
     507,   533,   566,   557,   533,  1406,  1395,     0,  1395,  1413,
     426,   892,   895,   897,   712,   714,     0,   934,   962,  1269,
     939,   708,   208,     0,     0,   390,     0,  1276,   252,   160,
     426,     0,   363,   180,   185,   187,   186,   177,     0,   188,
     179,     0,   190,     0,   428,     0,   191,   208,   169,   208,
       0,   567,  1317,   600,   598,  1353,     0,   634,   636,   635,
     605,   602,   603,   631,   637,   807,  1269,     0,     0,     0,
     456,   640,   642,   656,   654,   659,   667,   669,   664,     0,
       0,     0,     0,   122,   100,     0,     0,   313,     0,     0,
       0,     0,     0,   347,     0,     0,    91,    86,    87,     0,
       0,     0,   646,  1304,     0,  1315,  1366,   354,   353,   797,
     355,     0,   171,  1416,  1384,  1387,   419,     0,     0,   280,
       0,     0,   297,     0,   299,   300,   301,   302,   303,   306,
    1276,     0,     0,   275,   279,     0,     0,   290,   287,   701,
       0,   324,     0,     0,     0,   947,  1276,  1328,  1320,  1330,
    1334,  1286,   693,   694,     0,   483,   488,     0,   484,     0,
     489,     0,     0,  1347,  1342,     0,  1343,  1344,   556,     0,
     671,     0,     0,     0,   564,   565,     0,   532,   593,     0,
       0,   554,   507,   507,   563,   594,  1398,  1395,     0,   428,
       0,   893,   678,     0,     0,   958,     0,   944,   388,   221,
     226,   242,   703,     0,     0,   362,   255,     0,   178,   176,
     208,   425,     0,   430,   189,   197,  1276,   507,   533,   608,
       0,   629,   509,   628,     0,   508,   624,     0,   657,   645,
     668,   655,   659,     0,   658,   667,   664,   665,   666,     0,
     663,   644,     0,     0,     0,     0,   105,   121,   347,     0,
       0,   312,   316,   321,   320,    85,     0,   347,   417,   416,
       0,   348,  1276,   346,     0,     0,     0,    88,     0,     0,
       0,  1306,   352,   167,   168,   701,     0,   274,   272,   701,
     797,   298,   344,   295,     0,   304,   305,   264,   296,   273,
     288,   289,   291,   286,   292,   265,     0,   941,   942,     0,
       0,     0,  1290,   515,     0,   487,  1289,  1348,  1341,   507,
     507,   560,   535,     0,   507,   552,   553,     0,     0,   561,
     562,  1399,     0,   430,     0,     0,   938,   955,   954,     0,
       0,     0,   948,     0,   220,   230,     0,   223,   225,   228,
     237,   123,   361,   182,   181,   184,   183,  1276,   427,     0,
     703,     0,   192,   194,   195,   196,   206,     0,   404,   568,
     533,     0,   624,   533,   632,   619,   511,   621,   511,   511,
     627,     0,   667,     0,     0,   653,   650,   664,   643,   661,
       0,     0,     0,     0,   104,     0,   103,     0,  1276,   311,
     310,     0,   315,    90,     0,  1276,   349,   319,     0,     0,
       0,     0,    92,     0,     0,   170,   309,   269,   309,   271,
     284,   945,   946,     0,   237,  1318,   486,   558,   559,     0,
       0,   534,     0,     0,   547,     0,  1431,   703,     0,   937,
       0,     0,     0,     0,   957,   960,   210,   209,   207,  1276,
       0,   224,   227,     0,   231,     0,   235,   236,  1276,   199,
     608,   429,   944,   193,     0,   688,   199,   164,   201,   359,
     403,     0,   507,   401,   601,   567,   627,   604,   510,   620,
     622,   623,   625,   626,     0,   652,   664,     0,     0,   651,
     641,     0,   662,     0,     0,     0,   106,   317,     0,   327,
     318,     0,    94,    95,    89,     0,   607,   308,  1276,   270,
     283,   285,     0,   248,   536,     0,     0,   544,     0,   519,
       0,     0,   520,   944,   891,     0,   952,   950,   949,   951,
     953,     0,     0,     0,     0,   234,   238,     0,   366,   647,
     948,   203,   200,   205,     0,     0,  1276,   402,     0,     0,
     400,   410,  1317,     0,  1269,   639,   648,   649,   660,   101,
     222,   102,   314,     0,   333,    93,   606,   294,   282,   247,
     741,     0,   546,     0,   521,   522,   944,   530,   948,     0,
     360,     0,     0,   257,   198,     0,   364,   243,  1303,  1276,
     202,   204,     0,   211,   212,   214,   162,     0,   396,     0,
     399,     0,   409,  1276,   716,  1269,     0,   329,     0,   328,
     326,     0,   325,   337,   335,     0,   545,     0,   523,     0,
       0,   526,   531,  1276,   956,   219,     0,   232,   365,   363,
     218,     0,   213,   163,     0,   397,     0,     0,   408,   240,
       0,   614,   330,     0,     0,     0,   331,   336,     0,   332,
     334,   538,     0,   507,     0,     0,     0,   525,     0,  1448,
     229,   244,   217,   398,   405,     0,   407,   614,     0,     0,
     617,     0,   618,   633,   613,   615,     0,     0,   342,   341,
     339,   338,     0,     0,   537,   507,   549,     0,   551,   555,
       0,  1205,   524,   527,   525,     0,  1447,  1446,  1501,   406,
     630,   609,     0,     0,   612,   616,   340,   343,   539,   540,
       0,   548,   550,   525,   528,   518,   610,   611,   541,   542,
     529
  };

  const short
  BisonParserImpl::yypgoto_[] =
  {
   -2159, -2159, -2159, -2159, -2159, -2159,   168,   721, -2159,   -64,
    1568, -2159,    40,   -93, -1878, -2159,    32, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159,   458,   715,  1236, -2159, -2159, -2159,
    1632,   775, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -2159,   635,  -476, -2159,    27, -2159,   -90, -2159, -2159, -2159,
   -2159,  -239, -2159,  -238, -2159, -2159,  -653,  -726, -2159, -2159,
   -1721, -2159,  -779, -2159, -2159, -2159, -2159, -2159,  -393, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2082,  -606, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,     9,   -71,
   -2159, -2159, -2159, -1554, -2159, -2159,    13,  -102, -2159, -2159,
   -2159,  -319, -2159, -2159, -2159, -1592, -2159, -2159, -1695, -2159,
    -323, -2159, -2159, -2038, -2159, -2159, -2159, -1319,  -313, -2159,
   -2159,  -593, -2159, -2159, -2159, -2159, -1371, -1369, -2159, -2159,
    -312, -2159, -2159, -2159, -2159, -2159,  -787,  -785,  -814, -2159,
   -1237, -1307,    29,  -119, -2159, -2159,  -807, -2159, -2042,  -795,
   -2159,  -775, -2159, -2159,  -467, -2159, -2159, -2159, -2159, -2159,
    1666, -2159, -2159, -2159,   779,  -193, -1490, -2159, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,   -84,
     -92,  -854, -2159, -1428, -2159, -2159, -2159, -1083,  -353,  -486,
    -501,   -28,  1621,  1072,    -4, -2159, -2159, -2159, -2159, -2159,
    -693, -2159,  -139, -2159, -2159, -2159,  -782,  -447, -2159, -2159,
       4, -2159, -2159, -1370, -2159, -2159, -1724, -2159,    12,    14,
    -866, -1510, -2159,  -833,  -379, -1131,   445, -2159,  -928,  -722,
   -2159, -2159, -2159, -1765, -2159, -2159, -1810,  -573, -2159,  -825,
   -2159, -1737, -2159, -2159,  -469,  -828, -2159, -2159, -2159, -1691,
   -1110,   304,   727,   728,  -904,    17, -2159, -2159,  -858, -2159,
   -2159,   725, -2159,   307, -1732, -1994, -2159, -2159, -2159,  -801,
   -2159,  -806,  -505,  -607, -2159, -2159, -2159,    50, -2159, -2159,
   -2159,   -41,  -668, -2159,  -508, -2159,  -209, -2159,   -38,  -365,
    -511, -2159, -2010, -1953,   -32, -2159, -1807,  -912,   910, -2159,
   -2159,  -273,  -133,  -910,  -128, -2159, -2159, -1409,  -959, -1417,
   -1969, -1215, -2159,  -514,   375, -2159, -1101,  -583, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
    2012,   848, -2159,    23,  -314,   -42,   484,  -911, -2159, -2159,
   -2159, -2159, -2159, -2159, -2159, -2159,  -509,    45,  1571,    10,
     948, -2159,    16, -2159,   594, -2159,   -76,     8, -2159, -2159,
   -1582, -2159,   953, -2159, -2159, -2159, -2159, -2159, -2159, -2159,
   -1467, -2159, -2159, -2159,   398, -2159, -2159,   625,   403, -2159,
   -2159, -2159, -2159,   923,  -327, -2159, -2159, -2159, -2159,   -77,
   -2159, -2159, -2159, -2002, -2159, -2117,  -541, -2158, -2159, -2159,
    -586, -2159, -2159, -2159, -2159, -2159, -2159,   930, -2159, -2159,
   -2159, -1030,   976,  -727,  -354,  -773,   -11, -2159, -2159, -2159,
   -2159, -1462,  -850,    -6,  1628,   -15,  1611, -2159,  1200,   745,
     757,   467,  1638,    21,   588, -2159,  -871,  -264, -2159,   117,
   -2159, -1375,  -552,  -968, -2159, -2159, -2159, -2159, -1677, -2159,
   -2159, -1223, -2159, -1242, -2159, -2159, -1193, -2159, -2159, -2159,
     -89,  -290,  -880, -2159,   -50,   -68, -2159, -2159, -1355, -2159,
   -1728,  1252, -2159, -2159, -2159, -2159, -2159, -2159, -1165,  -384,
    -834, -2159, -2159, -2159, -2159, -2159,  1804, -2159, -2159,   -19,
   -2159, -2159, -2159, -2159,  -103,   281, -2159, -2159, -2159, -2159,
   -2159, -2159, -2159,  -566, -2159, -2159,  -184,  -395, -2159,  1228,
   -2159,  1229, -2159, -2159,  1253, -2159,  1254, -2159, -2159, -2159,
   -2159, -2159, -2159,  1216, -2159, -2159, -2159, -2159
  };

  const short
  BisonParserImpl::yydefgoto_[] =
  {
      -1,     8,   521,    46,   158,   156,   572,   131,   132,   133,
      48,    49,  1440,  1441,  1963,  2127,   468,    50,  1765,    51,
     911,    52,   906,   907,   908,   524,   525,   526,    53,    54,
     475,   476,    55,    56,    57,    58,    59,    60,    61,    62,
      63,  1188,  1992,  1771,  1645,  1454,  1455,    64,  1767,  1768,
    2225,  1917,  1918,  1926,  1927,  2236,  2408,  2336,  2461,  2337,
    2077,  2318,  2416,  2503,   934,  2463,  2214,  2215,  1964,  2218,
    2219,  2323,  2324,    65,    66,  2326,   924,  2328,    67,    68,
      69,    70,    71,    72,    73,   939,  2294,    74,   469,  1787,
    1761,    75,    76,  1469,  1470,  1471,  1670,  1671,  1834,  1835,
    1836,  2158,  1837,  1838,  1839,  2155,  1841,  2381,  1842,  2174,
    2018,  2172,  2019,  2156,  2004,  2005,  2006,  2007,  2008,  2009,
    2010,  2378,  2131,  2132,  2272,  2273,  1672,  1673,  2135,  1674,
    2137,  2434,  2480,  2482,  2519,  2516,  2483,  2484,  2550,  2011,
    2142,  2143,   470,  1987,  1646,  1647,  1174,    77,  2085,  2086,
    2457,  1179,    78,   542,   945,    79,    80,    81,    82,    83,
     495,   928,   496,  1753,   497,  1754,   498,    84,    85,    86,
    2419,  2420,  2421,  2340,  2341,  2507,  2508,  2472,  2473,   556,
     932,   933,  1973,  1661,    87,   510,  1247,  1924,  2093,  2230,
    1272,   533,    88,   643,    89,   644,    90,    91,   645,   646,
      92,   647,    93,   883,  1429,   432,   433,   434,    94,    95,
      96,  1197,  1500,  1501,  1701,  1702,  2036,  1703,  1704,  1502,
     954,  1156,  1240,   955,  2106,  2349,   982,   983,   984,  2562,
    2390,  2446,  2391,  2563,  2492,  2057,  2058,  2192,  2193,  2521,
    2522,  1879,  2581,  2386,  2555,  2556,  2525,  2526,  2053,  1880,
    2098,  1940,  1011,  1012,  1013,  1512,  1513,  1014,  1015,  1300,
    1301,  1941,  1601,  1942,  2101,  1806,  2540,  2541,  2542,  2543,
    2544,  2545,  2250,  2354,  2102,  2103,  1944,  1783,  1950,  1951,
    1952,  1982,  1983,  2254,  2255,  1954,  1955,  2112,  2114,  2115,
    2259,  2120,  2121,  2116,  2117,  1958,  1882,   963,   835,  1402,
     845,   450,    97,   925,    98,  1694,  1856,  1662,  1487,  1488,
    1586,  1267,   528,   529,  1381,  1382,  1603,  2343,   797,   798,
     799,   800,   502,  1123,   801,   802,   803,   804,   805,   352,
    1503,   543,   515,   544,   545,  1605,   977,   971,   547,   548,
     354,   355,   356,   357,   358,   359,   360,   361,   421,   362,
    1093,   363,   364,   424,  1161,   858,   859,  1648,  1817,  1649,
    1650,   365,   817,   366,   367,   368,   369,   370,   371,  2071,
    1739,   372,   373,   374,  1139,   375,   376,  1392,  1142,   377,
     378,   379,   380,   837,  1017,   839,   840,   381,   382,   575,
    1900,  1901,  1846,  1847,  2025,  2026,  2399,  2314,  2209,  2210,
    1578,   383,  1154,  1405,   384,   385,   386,   849,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   134,   403,   749,   404,   439,   877,
     878,  1191,    99,   161,  1212,   904,   905,   472,   100,   101,
     481,  1249,   560,  1000,   561,   102,   103,  2331,  1635,  1636,
     104,  1282,   993,   994,   995,   105,  1262,   106,   107,  1686,
     518,   519,  1394,  1688,  1689,  1690,   442,  1505,  1291,  2046,
    1716,   564,   565,  1606,   108,   109,   110,   111,  1456,   900,
    1177,   112,  1811,  1641,  1656,   113,   573,   136,  1230,  1658,
    1659,  1460,   114,   137,   574,  1307,  1526,  1527,   138,   139,
    1019,   569,   140,   141,   142,  1023,  1315,   579,   143,   144,
     145,   146,   147,  1030,   148,   149,   150,   151,   152,   153,
     154,   155,   162,   641,  1340,  2568,  1042,   642
  };

  const short
  BisonParserImpl::yytable_[] =
  {
     436,   426,   448,   810,   435,   428,   998,  1166,  1192,   160,
     557,   447,   451,   562,  1193,   425,  1234,   422,   426,  1232,
     160,  1033,   582,   423,   584,   968,  1383,   499,  1448,   648,
    1287,   426,   505,   499,  1269,   649,   511,   443,   487,   517,
     650,  1770,   985,  1497,   577,  1679,   580,   581,  1221,   885,
    1943,  1485,  1676,   838,  1219,  1216,  1274,   546,   488,  1610,
    1496,   486,   446,  1457,   534,  1623,  1276,  1624,   516,  1823,
    1189,   589,  1260,  1637,  2065,  2212,  2064,  1691,  1129,   973,
    1170,  1222,  1907,  1840,  1164,   901,   902,  2126,   966,   453,
    1740,   453,  1755,   549,   856,  2319,   559,  1384,   558,   856,
    1294,  1181,   919,   920,   921,  2240,  2258,   856,   163,   164,
     165,   166,   571,  2220,   576,   576,   578,   576,   576,  1407,
    1913,  1211,  2289,   163,   164,   165,   166,   163,   880,  1073,
    1162,   856,  1050,  1173,   482,  2477,   856,  1699,  2327,  2040,
    1822,  1173,  -554,  2043,  2000,  2017,  2062,  1914,   936,  2118,
    1712,   989,  2395,  1789,  2338,  1830,  1830,   512,   909,  2414,
    1001,  1356,  2257,  2299,   748,   426,  2489,  2015,  2513,   856,
     130,  1182,   159,   856,  1615,   957,   891,   937,   856,  1182,
    1890,   426,   856,   182,   160,   856,  1616,   856,   530,  2231,
     856,   914,  2063,  1183,  1914,  2339,  1618,   856,   182,  1113,
     947,   758,  2478,   535,   531,  2032,  2095,   808,  2096,  1910,
    2566,  2352,  2327,  1184,   163,   888,   427,  2001,  1435,   889,
    2546,  1334,   809,   165,  2462,  2353,  2033,  2487,  1114,   536,
    1585,   192,  1621,  1473,  1398,  1339,  1115,   455,  1828,  2547,
     940,  2191,   532,   958,  2405,   163,   192,  2360,  2002,  1436,
    1185,  1437,  1849,  2567,  1640,     9,  1379,  1930,  1335,   456,
    1051,  2332,   457,   988,  1178,   967,  1186,  2051,   923,  1242,
    1959,   923,  1915,  2232,  1336,   500,  1561,  2444,  1960,   458,
    2514,  2216,  2548,   118,  1002,  2003,  1438,   459,  2239,   474,
    2490,  2494,  2300,  2459,  -345,  2233,   460,  1916,  1789,  2356,
    2164,  1187,  1032,   588,  2016,  2016,   923,  2151,  2118,  1337,
    1052,  2189,   461,  1993,  2187,  2185,   462,  1166,  -358,  1915,
    1700,  1146,   990,  2173,   938,  2213,  -358,  2479,  1961,  2338,
    2410,  2493,   463,  2435,  1160,  1866,  2409,  1962,  2393,   471,
    2052,  2415,  1786,  2094,  1916,  1764,  2425,  1384,  1053,  1160,
     483,  1054,  1439,   465,   484,  1870,  1617,  2190,   485,  2450,
     991,  1960,    16,  2234,  1351,  1055,  2456,   466,   125,  2227,
       9,   594,  2244,  2001,   841,    18,  1840,  1380,  2549,   842,
    -500,  1421,  1056,  1352,   467,  2235,   160,  2141,  1435,  2366,
    2034,  2448,  2335,  2334,  1164,   501,  1654,  -500,  2445,   127,
    1411,   856,  1903,   846,  2002,  1415,  2159,     9,  1417,  1178,
    1419,  1420,  1422,  1755,  2161,  2228,  1171,   453,  1996,  1436,
    2159,  1437,   953,  2278,   953,  1949,  1853,  2335,   824,   856,
    2344,  1211,   426,  2347,   426,   946,   881,  1713,   578,   953,
    1162,  2003,  1517,   451,  2488,  2118,   129,  1548,   876,  1353,
    -345,   856,    27,   985,  2404,   843,  1438,   538,  2140,     9,
     912,  1692,  2144,  2140,  1273,  1627,   881,  1714,   491,  2129,
     440,  1628,   825,  2021,  1693,   517,  2146,    16,   599,  2031,
    1354,   856,    35,  2279,   844,  2051,   426,   895,   437,  1618,
      18,   601,  1655,  1200,  1535,  1782,   426,  1904,  -500,   426,
    2276,  -500,  2130,  1163,   516,  2226,   576,   979,   881,   589,
     648,  1572,  1278,  1544,    16,   838,  1231,  -500,  -500,  1534,
    1463,   590,  1439,   492,   453,  1621,  1590,  1355,  2060,   435,
    2145,   160,   451,  1224,  1225,   972,   987,   160,   160,  1629,
     986,  2083,  1666,   881,   980,  2141,   428,   517,   960,  1715,
    2141,  1305,   953,  1109,   964,   965,  1217,  -500,  2052,   438,
     841,  1695,   437,  1359,    45,  1542,    16,  1059,  1622,  -500,
     522,  -500,  1618,   426,  1357,  1358,   516,  1619,   441,  1490,
    1491,  1067,  1697,  1620,   861,  1048,  1110,  1026,  1209,   422,
     452,  1238,   591,  1946,  1047,   423,  1947,  2265,  2133,  1220,
    2134,  1172,  2175,   862,  1922,   523,   182,  1228,  1621,  1881,
    1306,  1884,   953,  1057,  -500,  1959,  1684,  1075,  -500,  1076,
    1195,   856, -1263,  1960,  1064,  1241,  1757,  1630,  1239,  2029,
    -500,  1111,   189,  1040,  2266,  1581,  1068,  1583,   866,   471,
    1196,  1539,  1948,  1591,  1065,  1046,  1594,  1063,  1596,  1597,
    1598,  1622,   165,   166,   192,   867,   868,  1790,  1949,   869,
    1720,  1233,  2044,  1749,  1546,  1547,  1932,  1680,  2147,  1540,
     455,  2186,  1631,  1961,   170,   171,   870,  1295,   165,   871,
   -1263,  -500,  1962,  -543,   872,   175,  -543,   474,  -500,  2245,
    -500,   163,   456,   648,  2045,   457,   873,   874,  2059,   649,
     170,   171,  2166,   875,   650,  2246,  1762,  2060,  2316,   981,
     165,   175,   458,  2247,  2538,   170,   171,  2397,  2207,  2248,
     459,   812,    47,  2208,   157,   856,   175,   953,  1625,   460,
     813,   478,   170,   171,  1626,   981,   903,  2539,  2286,  2099,
    2317,  2249,  2288,   175,  2511,   461,  1791,   426,  1082,   462,
    2398,  2061,   490,   770,  1090,   771,   771,   856,  1095,  1270,
     480,  1083,  1558,   422,  1681,   463,   503,   782,   782,   423,
     985,  1453,  1094,  1520,   422,   786,   787,   787,  2537,  1271,
     423,  1107,   856,  1060,   856,  1779,   465,  1061,  2321,   489,
     770,  1062,   856,   771,  1780,   453,  1746,  2104,  1520,  2584,
     466,   479,  1766,  2188,  2027,   782,  1095,  2069,   160,   783,
     784,   785,   786,  1163,   787,   507,   856,   467,  2590,   856,
    1094,  1434,   422,   856,   856,  1127,   931,  2082,   423,   974,
     975,   514,   951,  1852,  1458,  2364,   841,  2365,   454,  1450,
    1985,   952,   976,   951,  1793,  1794,  1165,   856,   508,   752,
    1159,  -509,   952,  1710,   753,   420,   435,   435,   763,  1777,
    1872,   754,  1711,   764,  1779,   648,   520,  -509,  1778,  1820,
    -509,   649,   477,  1780,  2012,  -509,   650,  1144,  1821,  1145,
    -509,  -509,   578,  2013,  -509,   504,  2105,    10,  1575,  1024,
      11,  2268,  1475,  1431,   426,   426,   881,   435,  1902,  2497,
    2275,   909,  1245,  -509,   527,   566,   841,   881,   567,   818,
     583,  1452,   819,   426,   426,   881,   586,  1308,   826,  1929,
     163,   827,   165,  1236,   499,   980,   453,   563,  1320,   828,
    1427,   850,   829,   881,   851,   540,  1244,   852,   881,   587,
     853,   455,  1252,  1253,  1256,   996,  1259,   987,   997,  1263,
    1264,   986,  1167,   757,  1663,  1168,  1321,  1322,  1323,  1324,
    1325,   592,  1024,   456,  1663,  1198,   457,  2377,   593,  2377,
    1462,   972,  1277,   759,  2451,  1213,  1467,  1663,  1214,  1283,
     985,  1518,  1284,   458,  1519,  1565,  1652,  -991,  1566,  1653,
    1286,   459,  1677,  1717,  1860,  1678,  1718,  1861,   841,  -990,
     460,   426,   770,   426,   426,   771,     1,     2,     3,     4,
       5,     6,     7,  2054,  2055,  -831,   461,   782,  1312,   750,
     462,   783,   784,   785,   786,  -832,   787,   576,   576,   576,
     576,   576,   788,   789,  1863,   420,   463,  1864,  1919,  1341,
     996,  1920,  -988,  2139,  2358,   770,   766,  2359,   771,   765,
    1331,  1393,  1393,  1827,   464,  -987,  2430,   465,   780,   781,
     782,   822,   823,   767,   783,   784,   785,   786,   768,   787,
    1827,   466,  -833,  2431,  2441,   788,   789,  2442,  2469,  1827,
     770,  2470,  2495,   771,  1366,  1808,   811,  2535,   467,   426,
    2536,  2552,  -834,  2557,  2553,   782,  2558,  1980,  1981,   783,
     426,  1587,   786,  1369,   787,   422,   163,  2573,  1595,  1664,
    2574,   423,   814,  1140,  1141,  1442,  1443,  2350,  2351,  1664,
     830,   820,   854,   821,   855,   856,  1386,   160,   753,   764,
     857, -1263,  1664,  1634,   559,   559,   860,  2342,   863,   770,
     864,   882,   771,   887,  1377,   890,   893,  1326,   892,  1406,
     894,   466,  1588,   781,   782,   896,  1165,  1663,   783,   784,
     785,   786,   898,   787,   867,  1327,   897,   899,   869,   788,
     789,  1663,   903,   426,   915,   426,   913,   917,   916,   918,
     923,   929,   927,   930,   931,  1328,   943,   948,  1329, -1263,
     956,   942,   944,  1330,   949,   950,  2199,  2200,   959,  1432,
     961,   962,  1522,  2468,   978,   873,   874,   435,   992,   881,
     551,   999,   875,  1021,  2295,  1022,  1018,  1027,   426,   881,
    1029,  1038,  1043,   578,  1028,   426,  1058,  1066,  1734,  2474,
     426,  2238,  1465,  1466,  1069,  1049,   426,  1070,   426,  2342,
     648,  1797,  1798,  1799,  1800,  1477,   649,  1803,  1071,  1478,
    1072,   650,   426,  1074,  2505,  1088,  1079,  1091,  1484,  1137,
    1100,  1788,  1147,  1148,   987,   833,  1150,  1752,   986,  1494,
    1151,  1153,  1173,  1176,  1175,  1190,  1203,  1763,  1178,  1194,
    1180,  1204,  1215,  1773,  1205,  1206,   865,  1223,   879,  1231,
    1246,  1514,  1266,  1248,   841,  1279,  1261,  1285,  1289,  1288,
    1290,  1297,  1571,  1309,  1310,  1528,  1311,  1314,  1317,  1319,
    1342,  1343,  1664,  1316,  1344,  1346,  1348,  1345,  1663,  1347,
    1349,  1350,  1758,  2297,  2298,  1361,  1664,  1362,  2301,  1368,
    1375,  1376,  1403,  1401,  1404,  1390,  1409,  1412,  1413,  1418,
     926,  1426,  1423,  1430,  1425,  1410,  1424,  1428,  1433,  1444,
     935,  1449,  1447,   941,  1453,  2089,  1459,  1461,  1468,   426,
    1504,  1508,  1554,  1509,  1483,  1507,   426,  1510,  1482,  1489,
    1511,  1515,  1525,  1551,  1532,   422,  1524,  2389,  1533,   426,
    1557,   423,   422,  1536,  1545,   559,  1538,  2075,   423,  1552,
    1559,  1564,  1574,  1481,  1687,  1541,  1543,  1573,  1579,  1529,
    1576,  1584,  1612,  1582,  1613,  1632,  1788,  1638,  2372,   881,
    2374,   426,  1024,   426,   426,  1486,   881,  1978,  1722,  1698,
     881,  1232,   426,  1706,  1705,  2412,  1724,   420,  1614,  1726,
    1728,  1305,  1729,  1738,  1732,  1733,  1759,  1760,  1735,  1736,
    1730,   881,  1731,  1781,  1639,  1634,  1782,  1651,  1665,  1785,
    1792,  1807,  1795,  1805,  1810,  2392,  1819,  1660,  1665,  1155,
    1826,  1827,  1675,   422,  1796,  1845,  1801,  1855,  1858,   423,
    1859,  1665,  1862,  1664,   987,  1683,  2422,   559,   986,  2182,
    1892,  1871,  1873,  1893,  1897,  1898,  1696,   972,  1899,  1911,
    1906,  1888,  1923,  1925,  1931,  1933,  1971,  1709,  1948,  1997,
    1751,  1912,  1984,  1991,  1921,  1998,  1756,  2020,  1999,  2023,
    2028,  2439,   841,  2024,  2022,  2039,  2042,  2049,  2056,  2074,
     160,  1946,  2084,   160,  2076,  2113,  1947,  1032,  2122,  2119,
    2092,  2123,  2124,  2136,  2148,  2161,   881,  1719,  2125,  2149,
    1721,  2150,  2153,  2163,  2465,  2015,  2180,  2183,  2179,  1853,
    2195,  2196,  2197,  2204,  2211,  2205,  2202,  1585,  2221,  2229,
    2105,  2243,  2261,  2251,  2276,  2262,  2263,  2267,  2271,  2281,
    2283,   576,  1750,  2284,  2287,   881,   499,   576,  2280,  2293,
    2305,  2308,  2306,  2315,  2320,   881,  2345,  2322,   426,  2325,
     426,   881,   426,  2357,  2348,  1775,  1380,  2333,  2361,  2380,
    2565,   420,  2368,  2000,  2371,   160,  2375,   426,  2388,  2091,
    2373,  2382,   420,  2402,  2418,  2424,  2396,  2438,  2403,  2433,
    1885,  2447,  1776,  2407,   426,  2449,  1889,  2452,  2475,  2455,
    2481,  2471,   426,  2485,   426,  2453,  2414,  1818,  2506,  2524,
    2512,  2527,  2515,  2081,  2528,   426,  1651,  2518,  2504,  2533,
    2559,  1665,  2572,  2577,  2579,  2490,  2513,  2554,  2576,  2585,
     420,   422,   422,  1905,   537,  1665,  2514,   423,   423,  1844,
    1634,  1675,  1804,  1446,  1265,   513,   426,  1338,  2285,  1824,
    2088,   886,  1928,  2413,  2090,  2460,  2502,  2217,  2383,  1908,
    1848,  1967,   426,  2169,  2171,  2379,  2165,  2520,  2517,  2168,
    2551,  1990,  1869,  1970,  2531,   506,  1857,  1663,   422,  1237,
    2078,  1514,  1972,  1883,   423,  1883,  2203,  2307,   539,  1868,
    1867,  1077,  2580,  2242,  1495,  2491,  2384,  2578,  2303,  2582,
    1600,  1292,  1293,  1602,  1874,  1302,  2570,  2346,  2575,  2423,
    1854,  2458,  1953,  2355,  2111,  1956,  2167,  2252,  1207,  1208,
    2362,  1957,  1560,   881,  1663,  1152,  1663,  2417,   761,  1493,
    1131,  1408,  2181,  2014,  1687,  1149,  1395,  1226,  1227,  1556,
    1883,  1133,  2400,  1555,  1159,  2428,   881,  1235,  1634,   426,
    1157,  1128,   751,  2066,  1687,  2068,  1332,  1968,  1969,   639,
    1243,  1974,  1975,  1976,  1977,  1041,   985,  1979,  1333,   640,
    1537,  1445,  1851,  2030,   426,  2047,   135,  1995,  1727,  2154,
    1039,     0,  1665,  1989,  1989,  1034,  1035,  1003,     0,  1994,
       0,     0,     0,     0,     0,     0,     0,  1988,  1988,   422,
     422,     0,  2237,     0,     0,   423,   423,     0,     0,     0,
    1036,  1037,     0,     0,     0,     0,     0,   559,     0,     0,
       0,     0,  2035,     0,  2038,  1296,     0,  1298,  1303,  2041,
       0,     0,  1664,     0,     0,     0,     0,   559,     0,  2048,
       0,     0,     0,     0,     0,     0,     0,     0,  2277,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1663,     0,     0,     0,   499,   426,     0,
     426,     0,     0,   160,     0,     0,     0,     0,     0,  1664,
       0,  1664,  2087,     0,     0,  2330,     0,   881,     0,   426,
    2073,     0,     0,     0,   426,  1883,     0,     0,     0,     0,
     881,     0,  1775,     0,     0,   422,     0,     0,     0,     0,
       0,   423,     0,   420,     0,     0,     0,     0,     0,     0,
     160,     0,     0,     0,  1374,     0,     0,     0,     0,     0,
       0,     0,   426,  2329,  2201,   980,     0,  2107,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   881,     0,
       0,     0,     0,   426,     0,     0,     0,     0,     0,     0,
       0,   426,  2160,     0,     0,  2162,     0,  2152,     0,   422,
       0,     0,     0,     0,  2367,   423,  2160,     0,     0,     0,
       0,  2370,     0,     0,     0,     0,     0,     0,   353,   985,
       0,     0,     0,     0,     0,     0,     0,  1414,     0,  1416,
       0,     0,     0,     0,   473,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1664,     0,
    2198,     0,     0,     0,     0,  2401,     0,     0,     0,     0,
    2464,     0,     0,     0,  2406,     0,     0,     0,     0,     0,
       0,     0,  1451,     0,     0,     0,     0,     0,     0,  1296,
    2222,   426,     0,     0,  1464,     0,   881,     0,     0,     0,
    1472,     0,  1474,     0,   881,     0,  2241,   422,   881,     0,
       0,  2498,     0,   423,     0,     0,  1480,     0,     0,     0,
       0,     0,     0,  2260,  2437,     0,     0,     0,  2264,     0,
       0,     0,     0,  2269,  2270,     0,     0,     0,   568,   570,
     426,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   585,  2282,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2466,     0,   426,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2296,     0,
     651,     0,  2369,     0,     0,     0,     0,     0,     0,   756,
       0,   426,     0,     0,     0,  2499,     0,   760,     0,     0,
     762,  1665,     0,     0,     0,     0,     0,     0,     0,  2509,
       0,     0,     0,   420,     0,     0,     0,     0,     0,     0,
     420,     0,     0,   881,     0,     0,  2588,     0,     0,  2529,
       0,     0,   770,  1567,     0,   771,     0,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,  1665,     0,
    1665,   783,   784,   785,   786,  2260,   787,     0,     0,     0,
       0,     0,   788,   789,     0,  1589,     0,  1592,  1593,     0,
       0,     0,     0,   790,  1604,     0,  1608,     0,     0,     0,
       0,   791,     0,     0,     0,     0,     0,     0,     0,     0,
     987,     0,     0,     0,   986,     0,   426,     0,     0,     0,
       0,   420,     0,     0,     0,     0,     0,     0,     0,     0,
     792,     0,     0,     0,     0,   793,     0,     0,   794,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2411,   795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1883,
       0,     0,     0,     0,     0,     0,     0,     0,     9,     0,
       0,     0,     0,     0,     0,  1579,     0,     0,     0,     0,
       0,     0,     0,     0,   769,   426,   807,     0,     0,     0,
     796,    10,     0,     0,    11,     0,     0,   816,     0,     0,
       0,     0,   426,     0,     0,     0,     0,  1665,     0,     0,
       0,     0,   836,     0,     0,     0,     0,   848,     0,    12,
       0,  2454,     0,    13,    14,     0,     0,     0,     0,     0,
    1031,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   160,     0,
       0,     0,     0,     0,    15,   426,     0,     0,     0,     0,
       0,     0,  1769,     0,  1772,  2476,  1774,     0,     0,     0,
       0,  2222,     0,     0,     0,    16,    17,     0,     0,     0,
       0,  1784,     0,     0,     0,     0,     0,     0,    18,     0,
     881,     0,     0,     0,     0,     0,     0,     0,  1802,   160,
       0,     0,     0,     0,    19,     0,  1809,     0,  1812,    20,
       0,    21,    22,     0,    23,     0,  2510,     0,    24,   420,
     420,   922,    25,     0,   881,     0,     0,    26,     0,     0,
       0,     0,     0,   987,     0,     0,     0,   986,   426,    27,
      28,  2564,     0,  1843,    29,     0,     0,    30,    31,    32,
    1850,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      33,     0,     0,     0,     0,    34,   420,     0,     0,    35,
       0,   426,     0,     0,  2583,     0,     0,     0,     0,    36,
       0,     0,     0,     0,     0,     0,  2586,  2587,    37,  2589,
       0,     0,     0,     0,     0,     0,     0,     0,  1016,     0,
       0,  -500,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,  -500,  -500,  -500,  -500,     0,     0,     0,    39,
      40,     0,    41,     0,     0,     0,     0,    42,     0,     0,
       0,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,     0,     0,
    1945,    45,     0,  1965,     0,     0,   953,     0,  -500,     0,
       0,     0,     0,     0,     0,     0,  -500,     0,     0,     0,
       0,     0,     0,     0,     0,  -500,     0,     0,  1986,     0,
       0,  1078,  -500,  -500,     0,  -500,  -500,   420,   420,     0,
    -500,  -500,     0,     0,     0,  -500,  -500,     0,  -500,  -500,
       0,  -500,     0,     0,     0,     0,     0,  -500,     0,  -500,
       0,     0,     0,     0,     0,     0,     0,     0,  -500,     0,
       0,     0,  -500,     0,  -500,  -500,     0,     0,     0,  -500,
    -500,     0,  -500,  -500,     0,  -500,     0,     0,     0,     0,
       0,  -500,     0,     0,     0,     0,     0,     0,  -500,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2079,     0,  2080,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1084,     0,  1087,
       0,  1089,     0,   420,     0,     0,     0,  1096,  2097,  1097,
    1099,     0,     0,     0,  1945,     0,     0,     0,     0,     0,
       0,  1101,  1102,  1103,  1104,  1105,     0,     0,     0,     0,
       0,     0,  1108,     0,     0,     0,     0,  1112,     0,  1116,
    1117,  1118,  1119,  1124,  1125,  1126,  1843,     0,     0,     0,
    1130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     816,     0,  1134,  1135,  1136,     0,     0,   420,  1138,     0,
       0,     0,     0,     0,   651,  1843,  1843,   115,     0,     0,
       0,     0,     9,     0,   836,     0,     0,     0,     0,     0,
    1843,     0,   848,     0,  1158,     0,     0,     0,     0,     0,
       0,     0,     0,  1169,     0,    10,     0,     0,    11,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1199,
     116,  1201,  1202,    12,     0,     0,     0,    13,    14,     0,
       0, -1395,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1016,   117,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   420,     0,     0,    15,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1945,     0,
       0,     0,  1945,     0,     0,     0,     0,     0,     0,    16,
      17,     0,     0,  1257,     0,     0,     0,     0,     0,     0,
       0,     0,    18,  1268,     0,     0,     0,     0,     0,   118,
       0,     0,     0,     0,  2274,     0,     0,     0,    19,     0,
       0,     0,     0,    20,     0,    21,    22,     0,   119,     0,
       0,   120,    24,     0,  1281,     0,    25,     0,  1843,     0,
       0,    26,     0,   121,     0,     0,   651,     0,     0,     0,
       0,   122,     0,    27,    28,     0,     0,     0,    29,     0,
    1304,    30,    31,    32,     0,     0,     0,  1313,     0,     0,
       0,  1318,     0,     0,    33,  2304,     0,     0,     0,    34,
       0,     0,     0,    35,     0,   123,     0,     0,     0,     0,
       0,   124,     0,    36,   125,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     126,     0,  1360,     0,    38,   127,     0,  1364,     0,     0,
       0,   128,     0,    39,    40,     0,    41,     0,     0,     0,
       0,    42,     0,     0,     0,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   474,
      44,     0,     0,     0,     0,    45,     0,     0,     0,     0,
       0,     0,   129,     0,     0, -1395,     0,     0,     0,     0,
    2387,     0,     0,     0,     0,     0,  1396,  1397,     0,  1399,
    1400,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   115,
       0,     0,     0,     0,     9,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    10,     0,     0,
      11,     0,     0,     0,     0,     0,     0,     0,     0,  1843,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   116,     0,     0,    12,  2443,     0,     0,    13,
      14,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   117,     0,     0,
    1476,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      15,     0,     0,     0,     0,     0,     0,     0,  1268,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2486,
       0,    16,    17,     0,     0,  1281,     0,     0,     0,     0,
       0,     0,  1506,     0,    18,     0,     0,     0,     0,     0,
       0,   118,  1016,     0,     0,     0,     0,     0,  1523,     0,
      19,     0,     0,     0,  1945,    20,  1530,    21,    22,  1531,
     119,     0,     0,   120,    24,     0,     0,     0,    25,     0,
       0,     0,     0,    26,     0,   121,     0,     0,     0,     0,
       0,     0,     0,   122,     0,    27,    28,     0,  1945,     0,
      29,     0,     0,    30,    31,    32,     0,     0,     0,     0,
       0,     0,  2304,     0,     0,  1549,    33,     0,     0,  1553,
       0,    34,     0,  1138,     0,    35,     0,   123,     0,     0,
    1562,  1563,     0,   124,     0,    36,   125,     0,     0,  1568,
    1569,     0,  1570,     0,    37,  2304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   115,
       0,  1580,   126,     0,   594,     0,    38,   127,     0,     0,
       0,     0,     0,   128,     0,    39,    40,     0,    41,     0,
       0,     0,  1611,    42,     0,     0,     0,     0,     0,    43,
       0,     0,     0,     0,     0,     0,  1633,     0,     0,     0,
       0,     0,    44,     0,     0,     0,     0,    45,     0,     0,
       0,  1657,     0,     0,   129,   595,     0,     0,     0,   596,
      14,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   597,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     598,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1016,   599,   600,     0,     0,     0,     0,  1725,     0,     0,
       0,     0,     0,     0,   601,     0,     0,     0,     0,     0,
       0,   602,     0,     0,     0,     0,     0,     0,     0,     0,
     603,     0,  1737,     0,     0,   604,     0,   605,   606,     0,
     607,     0,     0,   608,   609,     0,  1744,  1745,   610,     0,
       0,     0,     0,   611,     0,   612,  1748,     0,     0,     0,
       0,     0,     0,   613,     0,   614,    28,     0,     0,     0,
     615,     0,     0,   616,   617,   618,     0,     0,     9,     0,
       0,     0,     0,     0,     0,     0,   619,     0,     0,     0,
       0,   620,     0,     0,     0,   621,     0,   622,     0,     0,
       0,     0,     0,   623,     0,   624,   625,     0,     0,     0,
       0,     0,     0,     0,   626,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    12,
       0,     0,   627,    13,    14,     0,   628,   629,     0,     0,
       0,     0,     0,   630,     0,   631,   632,     0,   633,     0,
       0,     0,     0,   634,     0,     0,     0,     0,     0,   635,
       0,     0,     0,     0,    15,     0,     0,     0,     0,     0,
       0,     0,   636,     0,     0,     0,     0,   637,     0,     0,
       0,     0,     0,     0,   638,    16,    17,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1887,     0,
       0,     0,     0,     0,    19,     0,     0,     0,     0,    20,
    1891,    21,    22,  1894,    23,     0,     0,     0,    24,     0,
       0,     0,    25,     0,     0,     0,     0,    26,     0,     0,
       0,     0,     0,     0,  1909,     0,     0,     0,     0,    27,
      28,     0,     0,     0,    29,     0,     0,    30,    31,    32,
       0,     0,     0,  1935,     0,     0,     0,     0,     0,     0,
      33,     0,     0,     0,  1966,    34,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
       0,     0,  -500,     0,     0,     0,     0,     0,    37,     0,
       0,     0,     0,  -500,  -500,     0,  -500,     0,  1657,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,     0,     0,     0,     0,     0,     0,     0,    39,
      40,     0,    41,     0,  1281,     0,     0,    42,     0,     0,
       0,  2037,     0,    43,     0,  2037,     0,   953,     0,  -500,
       0,     0,     0,     0,     0,     0,    44,  -500,     0,  2050,
       0,    45,     0,     0,     0,     0,  -500,     0,     0,     0,
       0,     0,     0,  -500,  -500,     0,  -500,  -500,  2072,     0,
       0,  -500,  -500,     0,     0,     0,  -500,  -500,     0,  -500,
    -500,     0,  -500,     0,     0,     0,     0,     0,  -500,     0,
    -500,     0,     0,     0,     0,     0,     0,     0,     0,  -500,
       0,     0,     0,     0,     0,  -500,  -500,     0,     0,     0,
    -500,  -500,     0,  -500,  -500,  -500,     0,     0,     0,  2108,
    2109,  2110,  -500,     0,     0,     0,     0,   770,  -500,  -500,
     771,     0,   772,   773,   774,   775,   776,   777,   778,   779,
     780,   781,   782,     0,     0,     0,   783,   784,   785,   786,
       0,   787,     0,     0,     0,     0,     0,   788,   789,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   790,     0,
       0,     0,   953,     0,     0,     0,   791,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2170,     0,     0,
       0,     0,  2176,     0,  2177,  2178,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   792,     0,     0,     0,     0,
     793,  2037,     0,   794,     0,     0,     0,     0,     0,     0,
       0,  2194,     0,     0,   795,     0,     0,     0,     0,     0,
     770,  -500,  2050,   771,  -500,   772,   773,   774,   775,   776,
     777,   778,   779,   780,   781,   782,  2206,     0,     0,   783,
     784,   785,   786,     0,   787,     0,     0,  -500,     0,     0,
     788,   789,     0,     0,     0,   796,     0,     0,     0,     0,
       0,   790,     0,     0,     0,   953,     0,     0,     0,   791,
       0,     0,     0,     0,     0,  2256,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   792,     0,
       0,     0,     0,   793,     0,     0,   794,     0,     0,     0,
       0,     0,     0,     0,     0,   770,  1080,   795,   771,  1081,
     772,   773,   774,   775,   776,   777,   778,   779,   780,   781,
     782,     0,     0,     0,   783,   784,   785,   786,     0,   787,
       0,  2291,  2292,     0,     0,   788,   789,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   790,     0,   796,     0,
       0,     0,     0,     0,   791,     0,     0,  2309,     0,     0,
       0,  2313,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   792,     0,     0,     0,     0,   793,     0,
       0,   794,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   795,  2256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2363,     0,     0,     0,   770,  1741,
       0,   771,  1742,   772,   773,   774,   775,   776,   777,   778,
     779,   780,   781,   782,     0,     0,  2376,   783,   784,   785,
     786,     0,   787,   796,     0,     0,     0,     0,   788,   789,
       0,  2194,  2385,     0,     0,     0,     0,     0,     0,   790,
    2394,     0,  2313,     0,     0,     0,     0,   791,   770,     0,
       0,   771,     0,   772,   773,   774,   775,   776,   777,   778,
     779,   780,   781,   782,     0,     0,     0,   783,   784,   785,
     786,     0,   787,     0,     0,     0,   792,     0,   788,   789,
       0,   793,     0,     0,   794,     0,     0,     0,     0,  2426,
    2427,     0,     0,     0,     0,   795,     0,   791,     0,     0,
    2432,     0,     0,     0,     0,     0,     0,  2436,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   792,     0,     0,     0,
       0,   793,     0,     0,   794,     0,   796,     0,     0,   163,
     164,   165,   166,   167,     0,     0,   831,     0,     0,   832,
    1268,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,  2313,     0,     0,  2496,     0,   796,     0,     0,     0,
     176,     0,     0,     0,  2501,     0,     0,   177,   178,   179,
       0,  1268,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,  2523,     0,   183,
       0,   833,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,  2534,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,   834,     0,   191,     0,
       0,     0,   192,     0,     0,     0,     0,  2569,     0,     0,
    2571,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2523,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1120,     0,     0,  1121,   176,     0,     0,     0,     0,
       0,     0,   177,   178,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,     0,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,     0,     0,   191,     0,     0,     0,   192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1122,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,   168,
    1143,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,   177,   178,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,     0,     0,   183,
       0,     0,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,     0,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,    16,     0,   191,     0,
       0,     0,   192,     0,     0,     0,     0,     0,     0,    18,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,  1004,  1218,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,   177,   178,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,     0,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,  1005,     0,   191,     0,     0,     0,   192,     0,     0,
       0,     0,     0,     0,  1006,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,  1007,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,  1008,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,  1009,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,  1010,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,  1004,
    1516,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,   177,   178,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,     0,     0,   183,
       0,     0,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,     0,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,  1005,     0,   191,     0,
       0,     0,   192,     0,     0,     0,     0,     0,     0,  1006,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,  1007,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,  1008,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,  1009,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,  1010,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
    2310,     0,   177,   178,   179,     0,     0,  2311,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,     0,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,     0,     0,   191,     0,     0,     0,   192,  2312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,   168,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,   177,   178,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,     0,     0,   183,
       0,     0,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,     0,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,    16,     0,   191,     0,
       0,     0,   192,     0,     0,     0,     0,     0,     0,    18,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,  1004,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,   177,   178,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,     0,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,  1005,     0,   191,     0,     0,     0,   192,     0,     0,
       0,     0,     0,     0,  1006,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,  1007,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,  1008,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,  1009,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,  1010,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
     164,   165,   166,   167,     0,     0,     0,   538,     0,   168,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,   177,   178,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,     0,     0,   183,
       0,     0,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,     0,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,    16,     0,   191,     0,
       0,     0,   192,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,   177,   178,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,     0,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,    16,     0,   191,     0,     0,     0,   192,     0,     0,
       0,     0,     0,     0,    18,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,  1007,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,  1009,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,  1010,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
     164,   165,   166,   167,     0,     0,  1498,     0,     0,   168,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,   177,   178,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,     0,     0,   183,
       0,     0,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,     0,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,     0,     0,   191,     0,
       0,     0,   192,     0,     0,     0,     0,     0,     0,  1499,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,  1498,     0,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,   177,   178,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,  1609,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,     0,     0,   191,     0,     0,     0,   192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
     164,   165,   166,   167,     0,     0,  1498,     0,     0,   168,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,  1865,     0,     0,     0,     0,     0,   177,   178,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,     0,     0,   183,
       0,     0,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,     0,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,     0,     0,   191,     0,
       0,     0,   192,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,   177,   178,   179,     0,     0,  2311,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,     0,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,     0,     0,   191,     0,     0,     0,   192,  2312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,   168,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,   177,   178,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,     0,     0,   183,
       0,     0,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,     0,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,     0,     0,   191,     0,
       0,     0,   192,     0,     0,     0,   755,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,   806,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,   177,   178,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,     0,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,     0,     0,   191,     0,     0,     0,   192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,   168,
     815,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,   177,   178,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,     0,     0,   183,
       0,     0,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,     0,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,     0,     0,   191,     0,
       0,     0,   192,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,   168,   847,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,   177,   178,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,     0,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,     0,     0,   191,     0,     0,     0,   192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,   168,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,   177,   178,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,     0,     0,   183,
       0,     0,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,     0,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,  1086,     0,   191,     0,
       0,     0,   192,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,   177,   178,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,     0,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,  1098,     0,   191,     0,     0,     0,   192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,   832,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,   177,   178,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,     0,     0,   183,
       0,     0,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,     0,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,   834,     0,   191,     0,
       0,     0,   192,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,   177,   178,   179,     0,     0,     0,  1280,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,     0,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,     0,     0,   191,     0,     0,     0,   192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,   168,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,   177,   178,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,     0,     0,   183,
       0,     0,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,     0,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,  1743,     0,   191,     0,
       0,     0,   192,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,  1498,     0,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,   177,   178,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,     0,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,     0,     0,   191,     0,     0,     0,   192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,   168,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,   177,   178,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,     0,     0,   183,
       0,     0,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,     0,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,  2253,     0,     0,     0,   191,     0,
       0,     0,   192,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2467,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,   177,   178,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,     0,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,     0,     0,   191,     0,     0,     0,   192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
     164,   165,   166,   167,     0,     0,     0,     0,     0,   168,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   169,     0,   170,   171,     0,   172,   173,     0,   174,
       0,     0,     0,     0,   175,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     176,     0,     0,     0,     0,     0,     0,   177,   178,   179,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,   181,   182,     0,     0,     0,     0,   183,
       0,     0,   184,     0,     0,     0,     0,   185,     0,     0,
       0,   186,     0,     0,     0,     0,     0,   187,     0,   188,
     189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,  2500,     0,   191,     0,
       0,     0,   192,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   163,   164,   165,   166,   167,     0,
       0,     0,     0,     0,   168,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,   170,   171,
       0,   172,   173,     0,   174,     0,     0,     0,     0,   175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   176,     0,     0,     0,     0,
       0,     0,   177,   178,   179,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   181,   182,
       0,     0,     0,     0,   183,     0,     0,   184,     0,     0,
       0,     0,   185,     0,     0,     0,   186,     0,     0,     0,
       0,     0,   187,     0,   188,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   190,     0,
       0,     0,     0,   191,     0,     0,     0,   192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   163,
       0,   770,     0,   167,   771,     0,   772,   773,   774,   775,
     776,   777,   778,   779,   780,   781,   782,     0,     0,     0,
     783,   784,   785,   786,     0,   787,     0,     0,     0,     0,
       0,   788,   789,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   790,     0,     0,     0,     0,     0,     0,     0,
     791,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2397,     0,     0,     0,     0,     0,     0,     0,     0,   792,
       0,     0,     0,     0,   793,     0,     0,   794,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   795,     0,
       0,     0,     0,  2398,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   796,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   408,   409,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   410,   411,   412,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   413,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   414,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     415,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   416,   304,   305,   306,   307,
     308,   309,   310,   311,   417,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   418,   419,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   969,  1275,   167,   970,   770,     0,
       0,   771,     0,   772,   773,   774,   775,   776,   777,   778,
     779,   780,   781,   782,     0,     0,     0,   783,   784,   785,
     786,     0,   787,     0,     0,     0,     0,     0,   788,   789,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   790,
       0,     0,     0,   910,     0,     0,     0,   791,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   792,     0,     0,     0,
       0,   793,     0,     0,   794,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   795,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   796,     0,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   408,
     409,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   410,   411,
     412,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   413,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   414,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   415,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   416,   304,
     305,   306,   307,   308,   309,   310,   311,   417,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   418,   419,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   969,   770,   167,
     970,   771,     0,   772,   773,   774,   775,   776,   777,   778,
     779,   780,   781,   782,     0,     0,     0,   783,   784,   785,
     786,     0,   787,     0,     0,     0,     0,     0,   788,   789,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   790,
       0,     0,     0,     0,     0,     0,     0,   791,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   792,     0,     0,     0,
       0,   793,     0,     0,   794,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   795,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1020,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   796,     0,     0,     0,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   408,   409,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   410,   411,   412,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     413,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     414,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   415,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   416,   304,   305,   306,   307,   308,   309,   310,   311,
     417,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     418,   419,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
    1250,  1251,   167,   770,     0,     0,   771,     0,   772,   773,
     774,   775,   776,   777,   778,   779,   780,   781,   782,     0,
       0,     0,   783,   784,   785,   786,     0,   787,     0,     0,
       0,     0,     0,   788,   789,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   790,     0,     0,     0,     0,     0,
       0,     0,   791,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   792,     0,     0,     0,     0,   793,     0,     0,   794,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     795,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1085,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   796,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   408,   409,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   410,   411,   412,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   413,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   414,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   415,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   416,   304,   305,   306,   307,   308,
     309,   310,   311,   417,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   418,   419,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,  1254,  1255,   167,   770,     0,     0,   771,
       0,   772,   773,   774,   775,   776,   777,   778,   779,   780,
     781,   782,     0,     0,     0,   783,   784,   785,   786,     0,
     787,     0,     0,     0,     0,     0,   788,   789,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   790,     0,     0,
       0,  1132,     0,     0,     0,   791,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   792,     0,     0,     0,     0,   793,
       0,     0,   794,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   796,     0,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   408,   409,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   410,   411,   412,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   413,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   414,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   415,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   416,   304,   305,
     306,   307,   308,   309,   310,   311,   417,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   418,   419,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   167,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   652,
     653,     0,   654,   655,   656,   657,   658,   659,   660,   661,
     662,   663,   664,   665,   666,   667,   668,   669,   670,   671,
     672,   673,   674,     0,   675,   676,   677,   678,   679,   680,
     681,   682,   683,   684,   685,   686,   687,   688,   689,   690,
     691,   692,   693,   694,   695,   696,   697,   698,   699,   700,
     701,   702,   703,   704,   705,   706,   707,   708,   709,   710,
     711,   712,   713,   714,   715,   716,   717,   718,   719,   720,
     721,   722,   723,   724,   725,   726,   727,   728,   729,   730,
     731,   732,   733,   734,   735,   736,   737,   738,   739,   740,
     741,   742,   743,   744,   745,   746,   747,     0,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   408,
     409,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   410,   411,
     412,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   413,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   414,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   415,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   416,   304,
     305,   306,   307,   308,   309,   310,   311,   417,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   418,   419,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   167,     0,     0,
     770,     0,     0,   771,     0,   772,   773,   774,   775,   776,
     777,   778,   779,   780,   781,   782,     0,     0,     0,   783,
     784,   785,   786,     0,   787,  1707,     0,     0,     0,     0,
     788,   789,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   790,     0,     0,     0,  1708,     0,     0,     0,   791,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   792,     0,
       0,     0,     0,   793,     0,     0,   794,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   795,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   796,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     408,   409,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   410,
     411,   412,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   413,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   414,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   415,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   416,
     304,   305,   306,   307,   308,   309,   310,   311,   417,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   418,   419,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   167,     0,
       0,   770,     0,     0,   771,     0,   772,   773,   774,   775,
     776,   777,   778,   779,   780,   781,   782,     0,     0,     0,
     783,   784,   785,   786,     0,   787,     0,     0,     0,     0,
       0,   788,   789,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   790,     0,     0,     0,     0,     0,     0,     0,
     791,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   792,
       0,     0,     0,     0,   793,     0,     0,   794,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   795,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   796,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   408,   409,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     410,   411,   412,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   413,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   414,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   415,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     416,   304,   305,   306,   307,   308,   309,   310,   311,   417,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   418,
     419,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   167,
       0,     0,     0,     0,     0,   550,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   551,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   552,
       0,     0,     0,     0,   553,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   554,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    16,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    18,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   408,   409,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   410,   411,   412,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     413,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     414,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   415,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   416,   304,   305,   306,   307,   308,   309,   310,   311,
     417,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     418,   419,   334,   335,   336,   337,   338,   339,   340,   341,
     555,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     167,     0,     0,     0,     0,     0,  1936,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1937,  1938,     0,     0,     0,   541,     0,     0,     0,     0,
       0,  1939,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1299,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1380,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   408,   409,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   410,   411,   412,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   413,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   414,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   415,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   416,   304,   305,   306,   307,   308,   309,   310,
     311,   417,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   418,   419,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   167,     0,     0,     0,     0,     0,     0,  -453,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1875,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -453,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -453,     0,     0,     0,     0,     0,
       0,  -453,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -453,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -453,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   408,   409,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   410,   411,   412,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   413,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   414,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   415,   279,
     280,   281,   282,   283,   284,  1876,   286,   287,   288,   289,
     290,   291,   292,   293,  1877,   295,   296,   297,   298,   299,
     300,   301,   302,   416,   304,   305,   306,   307,   308,   309,
     310,   311,   417,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   418,   419,   334,   335,   336,   337,  1878,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   167,     0,   770,     0,     0,   771,  2100,   772,
     773,   774,   775,   776,   777,   778,   779,   780,   781,   782,
       0,     0,     0,   783,   784,   785,   786,   541,   787,     0,
       0,     0,     0,     0,   788,   789,     0,  -928,     0,     0,
       0,     0,     0,     0,     0,   790,     0,     0,     0,     0,
       0,     0,     0,   791,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1299,   792,     0,     0,     0,     0,   793,     0,     0,
     794,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   795,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    16,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    18,  1380,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   796,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   408,   409,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   410,   411,   412,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   413,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   414,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   415,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   416,   304,   305,   306,   307,   308,
     309,   310,   311,   417,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   418,   419,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   167,     0,     0,     0,  2223,     0,     0,
    2224,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1643,
     405,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   406,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   407,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   408,   409,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   410,   411,   412,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   413,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   414,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     415,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   416,   304,   305,   306,   307,
     308,   309,   310,   311,   417,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,  1644,
     328,   329,   330,   331,   418,   419,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   167,     0,   770,     0,  1024,   771,
       0,   772,   773,   774,   775,   776,   777,   778,   779,   780,
     781,   782,     0,     0,     0,   783,   784,   785,   786,     0,
     787,     0,     0,     0,     0,     0,   788,   789,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   790,     0,     0,
       0,   405,     0,     0,     0,   791,     0,     0,     0,     0,
       0,     0,     0,     0,  1025,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   792,     0,     0,     0,   406,   793,
       0,     0,   794,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   407,
    1363,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   796,     0,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   408,   409,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   410,   411,   412,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   413,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   414,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   415,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   416,   304,   305,   306,
     307,   308,   309,   310,   311,   417,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   418,   419,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   167,     0,     0,     0,     0,
       0,     0,  1642,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1643,   405,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   406,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     407,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   408,   409,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   410,   411,   412,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   413,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   414,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   415,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   416,   304,   305,
     306,   307,   308,   309,   310,   311,   417,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,  1644,   328,   329,   330,   331,   418,   419,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   167,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1092,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   405,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     406,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   407,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   408,
     409,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   410,   411,
     412,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   413,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   414,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   415,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   416,   304,
     305,   306,   307,   308,   309,   310,   311,   417,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   418,   419,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   167,     0,     0,
       0,     0,     0,     0,  1210,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   429,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   430,     0,   431,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     408,   409,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   410,
     411,   412,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   413,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   414,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   415,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   416,
     304,   305,   306,   307,   308,   309,   310,   311,   417,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   418,   419,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   167,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   974,   975,     0,  1492,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   976,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   408,   409,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     410,   411,   412,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   413,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   414,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   415,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     416,   304,   305,   306,   307,   308,   309,   310,   311,   417,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   418,
     419,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   167,
     770,     0,     0,   771,     0,   772,   773,   774,   775,   776,
     777,   778,   779,   780,   781,   782,     0,     0,     0,   783,
     784,   785,   786,     0,   787,     0,     0,     0,     0,     0,
     788,   789,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   790,     0,     0,     0,  1155,  1813,     0,     0,   791,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1814,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   792,     0,
       0,     0,     0,   793,     0,     0,   794,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   795,     0,     0,
       0,     0,     0,     0,     0,  1815,     0,     0,     0,     0,
       0,     0,     0,     0,  1816,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   796,     0,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   408,   409,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   410,   411,   412,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     413,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     414,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   415,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   416,   304,   305,   306,   307,   308,   309,   310,   311,
     417,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     418,   419,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     167,     0,   770,     0,     0,   771,     0,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,     0,     0,
       0,   783,   784,   785,   786,     0,   787,     0,     0,     0,
       0,     0,   788,   789,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   790,     0,     0,  1643,   405,     0,     0,
       0,   791,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1367,     0,     0,     0,     0,     0,     0,     0,
     792,     0,     0,     0,   406,   793,     0,     0,   794,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   407,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     796,     0,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   408,   409,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   410,   411,   412,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   413,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   414,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   415,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   416,   304,   305,   306,   307,   308,   309,   310,
     311,   417,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,  1644,   328,   329,   330,
     331,   418,   419,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   167,     0,   770,  1370,     0,   771,     0,   772,   773,
     774,   775,   776,   777,   778,   779,   780,   781,   782,     0,
       0,     0,   783,   784,   785,   786,     0,   787,     0,     0,
       0,     0,     0,   788,   789,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   790,     0,     0,     0,  1829,  1830,
       0,     0,   791,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   792,     0,     0,     0,  1831,   793,     0,     0,   794,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     795,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1832,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   796,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   408,   409,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   410,   411,   412,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   413,   243,   244,   245,   246,   247,  1833,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   414,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   415,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   416,   304,   305,   306,   307,   308,   309,
     310,   311,   417,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   418,   419,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   167,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2157,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1829,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1831,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1832,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   408,   409,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   410,   411,   412,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   413,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   414,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   415,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   416,   304,   305,   306,   307,   308,
     309,   310,   311,   417,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   418,   419,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   167,     0,   770,     0,     0,   771,  1936,
     772,   773,   774,   775,   776,   777,   778,   779,   780,   781,
     782,     0,     0,     0,   783,   784,   785,   786,   541,   787,
       0,     0,     0,     0,     0,   788,   789,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   790,     0,     0,     0,
       0,     0,     0,     0,   791,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1299,   792,     0,     0,     0,  1229,   793,     0,
       0,   794,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   795,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1380,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   796,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   408,   409,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   410,   411,   412,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   413,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   414,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     415,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   416,   304,   305,   306,   307,
     308,   309,   310,   311,   417,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   418,   419,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   167,     0,   770,  1371,     0,   771,
       0,   772,   773,   774,   775,   776,   777,   778,   779,   780,
     781,   782,     0,     0,     0,   783,   784,   785,   786,     0,
     787,     0,     0,     0,     0,     0,   788,   789,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   790,     0,     0,
       0,   405,     0,     0,     0,   791,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   792,     0,     0,     0,   406,   793,
       0,     0,   794,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   407,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   796,     0,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   408,   409,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   410,   411,   412,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   413,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   414,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   415,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   416,   304,   305,   306,
     307,   308,   309,   310,   311,   417,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   418,   419,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   167,   770,     0,     0,   771,
       0,   772,   773,   774,   775,   776,   777,   778,   779,   780,
     781,   782,     0,     0,     0,   783,   784,   785,   786,     0,
     787,     0,     0,     0,     0,     0,   788,   789,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   790,     0,     0,
       0,  1365,     0,     0,     0,   791,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   429,     0,   792,     0,     0,     0,     0,   793,
       0,     0,   794,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   795,     0,     0,     0,     0,     0,   430,
       0,   431,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   796,     0,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   408,   409,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   410,   411,   412,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   413,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   414,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   415,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   416,   304,   305,
     306,   307,   308,   309,   310,   311,   417,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   418,   419,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   167,     0,     0,     0,
       0,     0,   444,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   170,   171,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   408,
     409,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   410,   411,
     412,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   413,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   414,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   415,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   416,   304,
     305,   306,   307,   308,   309,   310,   311,   417,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   418,   419,   445,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   167,     0,   770,
       0,     0,   771,     9,   772,   773,   774,   775,   776,   777,
     778,   779,   780,   781,   782,     0,     0,     0,   783,   784,
     785,   786,     0,   787,     0,     0,     0,     0,     0,   788,
     789,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     790,     0,     0,     0,  1372,     0,     0,     0,   791,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   792,     0,     0,
       0,     0,   793,     0,     0,   794,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   795,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      16,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    18,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   796,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     408,   409,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   410,
     411,   412,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   413,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   414,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   415,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   416,
     304,   305,   306,   307,   308,   309,   310,   311,   417,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   418,   419,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   167,     0,
       0,     0,     0,     0,  1044,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   170,   171,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   408,   409,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     410,   411,   412,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   413,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   414,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   415,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     416,   304,   305,   306,   307,   308,   309,   310,   311,   417,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   418,
     419,  1045,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   167,
       0,   770,     0,     0,   771,  1599,   772,   773,   774,   775,
     776,   777,   778,   779,   780,   781,   782,  1373,     0,     0,
     783,   784,   785,   786,   541,   787,     0,     0,     0,     0,
       0,   788,   789,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   790,     0,     0,     0,     0,     0,     0,     0,
     791,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   792,
       0,     0,     0,     0,   793,     0,     0,   794,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   795,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1380,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   796,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   408,   409,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   410,   411,   412,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     413,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     414,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   415,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   416,   304,   305,   306,   307,   308,   309,   310,   311,
     417,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     418,   419,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     167,     0,   770,     0,     0,   771,     0,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,     0,     0,
       0,   783,   784,   785,   786,     0,   787,     0,     0,     0,
       0,     0,   788,   789,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   790,  1378,     0,     0,  1829,     0,     0,
       0,   791,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     792,     0,     0,     0,  1831,   793,     0,     0,   794,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1832,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     796,     0,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   408,   409,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   410,   411,   412,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   413,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   414,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   415,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   416,   304,   305,   306,   307,   308,   309,   310,
     311,   417,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   418,   419,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   167,   770,     0,     0,   771,     0,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,     0,     0,
       0,   783,   784,   785,   786,     0,   787,     0,     0,     0,
       0,     0,   788,   789,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   790,   493,     0,     0,     0,     0,     0,
       0,   791,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     792,     0,     0,     0,     0,   793,     0,     0,   794,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   494,     0,  1387,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     796,     0,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   408,   409,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   410,   411,   412,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   413,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   414,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   415,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   416,   304,   305,   306,   307,   308,   309,
     310,   311,   417,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   418,   419,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   167,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   950,   541,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   408,   409,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   410,   411,   412,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   413,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   414,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   415,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   416,   304,   305,   306,   307,   308,
     309,   310,   311,   417,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   418,   419,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   167,   770,     0,     0,   771,     0,   772,
     773,   774,   775,   776,   777,   778,   779,   780,   781,   782,
       0,     0,     0,   783,   784,   785,   786,     0,   787,     0,
       0,     0,     0,     0,   788,   789,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   790,     0,     0,     0,     0,
       0,     0,     0,   791,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   792,     0,     0,     0,     0,   793,     0,     0,
     794,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   795,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   449,     0,     0,     0,     0,     0,     0,  1388,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   796,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   408,   409,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   410,   411,   412,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   413,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   414,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     415,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   416,   304,   305,   306,   307,
     308,   309,   310,   311,   417,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   418,   419,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   167,     0,   770,     0,     0,   771,
       0,   772,   773,   774,   775,   776,   777,   778,   779,   780,
     781,   782,     0,     0,     0,   783,   784,   785,   786,   541,
     787,     0,     0,     0,     0,     0,   788,   789,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   790,     0,     0,
       0,     0,     0,     0,     0,   791,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1389,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   792,     0,     0,     0,     0,   793,
       0,     0,   794,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   796,     0,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   408,   409,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   410,   411,   412,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   413,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   414,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   415,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   416,   304,   305,   306,
     307,   308,   309,   310,   311,   417,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   418,   419,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   167,     0,   770,     0,     0,
     771,     0,   772,   773,   774,   775,   776,   777,   778,   779,
     780,   781,   782,     0,     0,     0,   783,   784,   785,   786,
       0,   787,     0,     0,     0,     0,     0,   788,   789,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   790,     0,
       0,     0,  1391,     0,     0,     0,   791,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   792,     0,     0,     0,   406,
     793,     0,     0,   794,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   795,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   796,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   408,   409,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   410,   411,   412,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   413,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   414,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   415,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   416,   304,   305,
     306,   307,   308,   309,   310,   311,   417,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   418,   419,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   167,     0,     0,     0,
       0,     0,     0,   884,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   408,
     409,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   410,   411,
     412,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   413,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   414,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   415,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   416,   304,
     305,   306,   307,   308,   309,   310,   311,   417,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   418,   419,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   167,     0,   770,
       0,     0,   771,  1106,   772,   773,   774,   775,   776,   777,
     778,   779,   780,   781,   782,  1479,     0,     0,   783,   784,
     785,   786,     0,   787,     0,     0,     0,     0,     0,   788,
     789,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     790,     0,     0,     0,     0,     0,     0,     0,   791,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   792,     0,     0,
       0,     0,   793,     0,     0,   794,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   795,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   796,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     408,   409,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   410,
     411,   412,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   413,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   414,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   415,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   416,
     304,   305,   306,   307,   308,   309,   310,   311,   417,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   418,   419,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   167,   770,
       0,     0,   771,     0,   772,   773,   774,   775,   776,   777,
     778,   779,   780,   781,   782,     0,     0,     0,   783,   784,
     785,   786,     0,   787,     0,     0,     0,     0,     0,   788,
     789,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     790,     0,     0,     0,     0,     0,     0,     0,   791,     0,
       0,     0,  1486,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   792,     0,     0,
       0,     0,   793,     0,     0,   794,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   795,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   494,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   796,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   408,   409,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     410,   411,   412,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   413,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   414,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   415,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     416,   304,   305,   306,   307,   308,   309,   310,   311,   417,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   418,
     419,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   167,
       0,   770,     0,     0,   771,  1258,   772,   773,   774,   775,
     776,   777,   778,   779,   780,   781,   782,     0,     0,     0,
     783,   784,   785,   786,     0,   787,     0,     0,     0,     0,
       0,   788,   789,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   790,     0,     0,     0,     0,     0,     0,     0,
     791,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   792,
       0,     0,     0,     0,   793,     0,     0,   794,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   795,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1521,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   796,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   408,   409,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   410,   411,   412,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     413,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     414,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   415,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   416,   304,   305,   306,   307,   308,   309,   310,   311,
     417,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     418,   419,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     167,     0,   770,     0,     0,   771,     0,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,     0,     0,
       0,   783,   784,   785,   786,     0,   787,     0,     0,     0,
       0,     0,   788,   789,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   790,     0,     0,     0,     0,     0,     0,
       0,   791,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1299,
     792,     0,     0,     0,     0,   793,     0,     0,   794,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1550,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     796,     0,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   408,   409,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   410,   411,   412,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   413,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   414,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   415,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   416,   304,   305,   306,   307,   308,   309,   310,
     311,   417,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   418,   419,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   167,     0,   770,     0,     0,   771,  1385,   772,   773,
     774,   775,   776,   777,   778,   779,   780,   781,   782,     0,
       0,     0,   783,   784,   785,   786,     0,   787,     0,     0,
       0,     0,     0,   788,   789,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   790,     0,     0,     0,     0,     0,
       0,     0,   791,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   792,     0,     0,     0,     0,   793,     0,     0,   794,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     795,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1723,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   796,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   408,   409,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   410,   411,   412,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   413,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   414,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   415,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   416,   304,   305,   306,   307,   308,   309,
     310,   311,   417,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   418,   419,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   167,     0,   770,     0,     0,   771,  1577,   772,
     773,   774,   775,   776,   777,   778,   779,   780,   781,   782,
       0,     0,     0,   783,   784,   785,   786,     0,   787,     0,
       0,     0,     0,     0,   788,   789,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   790,     0,     0,     0,  1825,
       0,     0,     0,   791,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   792,     0,     0,     0,     0,   793,     0,     0,
     794,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   795,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   796,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   408,   409,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   410,   411,   412,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   413,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   414,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   415,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   416,   304,   305,   306,   307,   308,
     309,   310,   311,   417,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   418,   419,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   167,   770,     0,     0,   771,  1747,   772,
     773,   774,   775,   776,   777,   778,   779,   780,   781,   782,
       0,     0,     0,   783,   784,   785,   786,     0,   787,     0,
       0,     0,     0,     0,   788,   789,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   790,     0,     0,     0,     0,
       0,     0,     0,   791,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   792,     0,     0,     0,     0,   793,     0,     0,
     794,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   795,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1607,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   796,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   408,   409,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   410,   411,   412,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   413,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   414,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     415,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   416,   304,   305,   306,   307,
     308,   309,   310,   311,   417,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   418,   419,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   167,     0,   770,     0,     0,   771,
    1682,   772,   773,   774,   775,   776,   777,   778,   779,   780,
     781,   782,     0,     0,     0,   783,   784,   785,   786,     0,
     787,     0,     0,     0,     0,     0,   788,   789,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   790,     0,     0,
       0,     0,     0,     0,     0,   791,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   792,     0,     0,     0,     0,   793,
       0,     0,   794,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1886,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   796,     0,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   408,   409,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   410,   411,   412,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   413,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   414,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   415,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   416,   304,   305,   306,
     307,   308,   309,   310,   311,   417,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   418,   419,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   167,     0,   770,     0,     0,
     771,  1685,   772,   773,   774,   775,   776,   777,   778,   779,
     780,   781,   782,     0,     0,     0,   783,   784,   785,   786,
       0,   787,     0,     0,     0,     0,     0,   788,   789,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   790,  1896,
       0,     0,     0,     0,     0,     0,   791,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   792,     0,     0,     0,     0,
     793,     0,     0,   794,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   795,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   796,     0,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   408,   409,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   410,   411,   412,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   413,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   414,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   415,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   416,   304,   305,
     306,   307,   308,   309,   310,   311,   417,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   418,   419,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   167,   770,     0,     0,
     771,  1895,   772,   773,   774,   775,   776,   777,   778,   779,
     780,   781,   782,     0,     0,     0,   783,   784,   785,   786,
       0,   787,     0,     0,     0,     0,     0,   788,   789,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   790,     0,
       0,     0,     0,     0,  1875,     0,   791,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   792,     0,     0,     0,     0,
     793,     0,     0,   794,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   795,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   796,     0,     0,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   408,
     409,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   410,   411,
     412,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   413,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   414,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   415,   279,   280,   281,   282,   283,   284,
    1876,   286,   287,   288,   289,   290,   291,   292,   293,  1877,
     295,   296,   297,   298,   299,   300,   301,   302,   416,   304,
     305,   306,   307,   308,   309,   310,   311,   417,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   418,   419,   334,
     335,   336,   337,  1878,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   167,     0,   770,
       0,     0,   771,  1934,   772,   773,   774,   775,   776,   777,
     778,   779,   780,   781,   782,     0,     0,     0,   783,   784,
     785,   786,     0,   787,     0,     0,     0,     0,     0,   788,
     789,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     790,     0,     0,     0,     0,     0,     0,     0,   791,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   792,     0,     0,
       0,     0,   793,     0,     0,   794,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   795,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2067,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   796,     0,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     408,   409,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   410,
     411,   412,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   413,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   414,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   415,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   416,
     304,   305,   306,   307,   308,   309,   310,   311,   417,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   418,   419,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   167,     0,
       0,     0,     0,     0,     0,  2138,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   408,   409,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     410,   411,   412,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   413,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   414,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   415,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     416,   304,   305,   306,   307,   308,   309,   310,   311,   417,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   418,
     419,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   167,
       0,   770,     0,     0,   771,  2302,   772,   773,   774,   775,
     776,   777,   778,   779,   780,   781,   782,     0,     0,     0,
     783,   784,   785,   786,     0,   787,     0,     0,     0,     0,
       0,   788,   789,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   790,     0,     0,     0,     0,     0,     0,  2070,
     791,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   792,
       0,     0,     0,     0,   793,     0,     0,   794,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   795,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   796,
       0,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   408,   409,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   410,   411,   412,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     413,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     414,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   415,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   416,   304,   305,   306,   307,   308,   309,   310,   311,
     417,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     418,   419,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     167,   770,     0,     0,   771,  2128,   772,   773,   774,   775,
     776,   777,   778,   779,   780,   781,   782,     0,     0,     0,
     783,   784,   785,   786,     0,   787,     0,     0,     0,     0,
       0,   788,   789,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   790,     0,     0,     0,     0,     0,  2560,     0,
     791,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   792,
       0,     0,     0,     0,   793,     0,     0,   794,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   795,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   796,
       0,     0,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   408,   409,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   410,   411,   412,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   413,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   414,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   415,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
    2561,   302,   416,   304,   305,   306,   307,   308,   309,   310,
     311,   417,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   418,   419,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   167,   770,     0,     0,   771,     0,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,     0,     0,
       0,   783,   784,   785,   786,     0,   787,     0,     0,     0,
       0,     0,   788,   789,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   790,     0,     0,     0,  2184,     0,     0,
       0,   791,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     792,     0,     0,     0,     0,   793,     0,     0,   794,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     796,     0,     0,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   408,   409,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   410,   411,   412,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   413,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   414,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   415,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   416,   304,   305,   306,   307,   308,   309,
     310,   311,   417,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   418,   419,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   167,   770,     0,     0,   771,  2290,   772,   773,
     774,   775,   776,   777,   778,   779,   780,   781,   782,     0,
       0,     0,   783,   784,   785,   786,     0,   787,     0,     0,
       0,     0,     0,   788,   789,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   790,     0,     0,     0,     0,     0,
       0,     0,   791,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   792,     0,     0,     0,     0,   793,     0,     0,   794,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     795,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   796,     0,     0,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   408,   409,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   410,   411,   412,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   413,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   414,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   509,   273,   274,   275,   276,   277,   415,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   416,   304,   305,   306,   307,   308,
     309,   310,   311,   417,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   418,   419,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   167,   770,     0,     0,   771,  2429,   772,
     773,   774,   775,   776,   777,   778,   779,   780,   781,   782,
       0,     0,     0,   783,   784,   785,   786,     0,   787,     0,
       0,     0,     0,     0,   788,   789,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   790,     0,     0,     0,     0,
       0,     0,     0,   791,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   792,     0,     0,     0,     0,   793,     0,     0,
     794,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   795,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   796,     0,     0,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   408,   409,   206,   207,
     208,  1667,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   410,   411,   412,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   413,   243,   244,  1668,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   414,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     415,   279,   280,   281,   282,   283,   284,   285,   286,   287,
    1669,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   416,   304,   305,   306,   307,
     308,   309,   310,   311,   417,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   418,   419,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   770,     0,     0,   771,  2530,   772,
     773,   774,   775,   776,   777,   778,   779,   780,   781,   782,
       0,     0,     0,   783,   784,   785,   786,     0,   787,     0,
       0,     0,     0,     0,   788,   789,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   790,     0,     0,     0,     0,
       0,     0,     0,   791,   770,     0,     0,   771,  2532,   772,
     773,   774,   775,   776,   777,   778,   779,   780,   781,   782,
       0,     0,     0,   783,   784,   785,   786,     0,   787,     0,
       0,     0,   792,     0,   788,   789,     0,   793,     0,     0,
     794,     0,     0,     0,     0,   790,     0,     0,     0,     0,
       0,   795,     0,   791,   770,     0,     0,   771,     0,   772,
     773,   774,   775,   776,   777,   778,   779,   780,   781,   782,
       0,     0,     0,   783,   784,   785,   786,     0,   787,     0,
       0,     0,   792,     0,   788,   789,     0,   793,     0,     0,
     794,     0,   796,     0,     0,   790,     0,     0,     0,     0,
       0,   795,     0,   791,   770,     0,     0,   771,     0,   772,
     773,   774,   775,   776,   777,   778,   779,   780,   781,   782,
       0,     0,     0,   783,   784,   785,   786,     0,   787,     0,
       0,     0,   792,     0,   788,   789,     0,   793,     0,     0,
     794,     0,   796,     0,     0,   790,     0,     0,     0,     0,
       0,   795,     0,   791,   770,     0,     0,   771,     0,   772,
     773,   774,   775,   776,   777,   778,   779,   780,   781,   782,
       0,     0,     0,   783,   784,   785,   786,     0,   787,     0,
       0,     0,  2440,     0,   788,   789,     0,   793,     0,     0,
     794,     0,   796,     0,     0,   790,     0,     0,     0,   770,
       0,   795,   771,   791, -1396, -1396, -1396, -1396, -1396, -1396,
   -1396,   779,   780,   781,   782,     0,     0,     0,   783,   784,
     785,   786,     0,   787,     0,     0,     0,     0,     0,   788,
     789,     0,   792,     0,     0,     0,     0,   793,     0,     0,
     794,     0,   796,     0,     0,     0,     0,     0, -1396,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1396,     0,     0,
       0,     0, -1396,     0,     0, -1396,     0,     0,     0,     0,
       0,     0,   796,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1396
  };

  const short
  BisonParserImpl::yycheck_[] =
  {
      11,     7,    17,   357,    10,     9,   558,   857,   879,     5,
     102,    17,    18,   102,   880,     7,   926,     7,    24,   923,
      16,   587,   125,     7,   127,   539,  1127,    33,  1221,   168,
     998,    37,    38,    39,   962,   168,    42,    16,    29,    45,
     168,  1595,   551,  1285,   121,  1473,   123,   124,   914,   444,
    1782,  1266,  1469,   380,   912,   909,   968,    99,    29,  1429,
    1283,    29,    17,  1228,    92,  1436,   977,  1436,    45,  1651,
     877,   135,   952,  1448,  1884,  2077,  1883,  1486,   805,   546,
     862,   915,  1759,  1675,   857,   469,   470,  1965,   535,     7,
    1557,     7,  1582,    99,    34,  2212,   102,  1127,   102,    34,
    1004,   876,   486,   487,   488,  2099,  2116,    34,     3,     4,
       5,     6,   118,  2082,   120,   121,   122,   123,   124,    14,
      14,   903,  2160,     3,     4,     5,     6,     3,   442,   643,
     857,    34,    50,   115,    50,    81,    34,    75,  2220,  1863,
    1650,   115,    13,  1871,   103,  1840,  1883,    88,   502,  1956,
    1505,    87,  2310,  1615,  2236,    55,    55,   158,   472,    55,
     103,  1073,  2115,    11,   170,   171,   133,    67,   184,    34,
       2,   153,     4,    34,    55,   236,   449,    92,    34,   153,
    1734,   187,    34,    78,   180,    34,    67,    34,    74,   103,
      34,   481,  1883,   175,    88,  2237,   165,    34,    78,    59,
     514,   180,   148,    11,    90,   200,  1927,    11,  1929,  1763,
      12,    84,  2294,   195,     3,    11,     0,   176,   121,    15,
     102,   195,    26,     5,    13,    98,   221,    88,    88,    37,
      67,   126,   201,    80,  1146,  1042,    96,   153,  1666,   121,
     504,  2048,   128,   304,  2326,     3,   126,  2257,   207,   152,
     232,   154,  1680,    55,   106,    13,    13,   106,   232,   175,
     178,  2230,   178,   553,    86,   538,   248,   138,   133,   125,
     197,   133,   213,   187,   248,   113,  1377,   119,   205,   195,
     296,   125,   164,   140,   227,   244,   189,   203,  2098,   290,
     257,  2449,   140,  2410,   253,   209,   212,   238,  1760,  2252,
     103,   283,   159,   135,   204,   204,   133,  1984,  2115,   283,
     228,  2048,   228,  1823,  2042,  2039,   232,  1167,   300,   213,
     258,   835,   258,  2018,   239,   260,   300,   273,   255,  2411,
    2332,  2448,   248,  2371,   229,  1705,  2330,   264,  2307,   237,
     211,   237,   218,  1925,   238,   285,  2356,  1377,   266,   229,
     266,   269,   255,   269,   270,  1710,   237,  2048,   274,  2401,
     296,   205,   120,   277,   140,   283,  2408,   283,   225,  2090,
      13,    13,  2104,   176,   380,   133,  1968,   134,   260,    11,
      13,   203,   300,   159,   300,   299,   382,   190,   121,  2267,
    1857,  2393,   254,   220,  1167,   233,   164,    13,   240,   256,
    1175,    34,    11,   382,   207,  1180,  1998,    13,  1183,    86,
    1185,  1186,  1187,  1903,   104,  2092,   863,     7,  1827,   152,
    2012,   154,    55,   177,    55,   147,    11,   254,    14,    34,
    2240,  1213,   438,  2243,   440,   512,   442,   184,   444,    55,
    1167,   244,  1300,   449,  2446,  2252,   303,  1359,   439,   225,
     253,    34,   184,   962,   111,    87,   189,    11,   103,    13,
      13,    56,   121,   103,   965,   170,   472,   214,   177,    79,
     283,   176,    58,  1844,    69,   481,   121,   120,   120,  1854,
     256,    34,   214,   237,   116,   138,   492,   458,   107,   165,
     133,   133,   260,   888,  1328,    80,   502,   106,   129,   505,
     190,   134,   112,   857,   481,  2087,   512,   549,   514,   573,
     649,  1391,   979,  1347,   120,   842,   173,   133,   134,  1326,
     125,     1,   255,   232,     7,   201,   203,   303,   250,   535,
     189,   527,   538,   917,   918,   541,   551,   533,   534,   244,
     551,  1911,   125,   549,   550,   190,   550,   553,   527,   296,
     190,    71,    55,    70,   533,   534,   910,     0,   211,   178,
     566,  1489,   107,  1077,   296,  1340,   120,    50,   244,    12,
     217,    14,   165,   579,  1075,  1076,   553,   170,    92,  1272,
    1273,   177,  1493,   176,    15,   600,   103,   579,   902,   579,
     158,    55,    72,    82,   600,   579,    85,    13,  1969,   913,
    1969,   865,  2019,    34,  1769,   252,    78,   921,   201,  1719,
     130,  1721,    55,   604,    57,   197,  1482,   645,   121,   647,
      50,    34,   212,   205,   615,   939,  1585,   125,    92,  1852,
     133,   148,   104,   178,    50,  1410,   232,  1412,   228,   237,
      70,   175,   131,  1418,   615,   600,  1421,   615,  1423,  1424,
    1425,   244,     5,     6,   126,   245,   246,  1616,   147,   249,
    1518,   925,   266,  1575,  1357,  1358,  1776,    80,  1975,   203,
     153,  2041,   170,   255,    27,    28,   266,  1004,     5,   269,
     270,   124,   264,    11,   274,    38,    14,   290,   131,    65,
     133,     3,   175,   832,   298,   178,   286,   287,   241,   832,
      27,    28,  2009,   293,   832,    81,    15,   250,   183,    62,
       5,    38,   195,    89,   106,    27,    28,    79,   114,    95,
     203,    11,     1,   119,     3,    34,    38,    55,   170,   212,
      20,   177,    27,    28,   176,    62,    13,   129,  2155,  1932,
     215,   117,  2159,    38,  2476,   228,  1617,   753,   752,   232,
     112,   294,    31,    10,   760,    13,    13,    34,   764,    50,
      80,   753,    14,   753,    14,   248,   177,    25,    25,   753,
    1279,    13,   764,    13,   764,    32,    34,    34,  2510,    70,
     764,   787,    34,   266,    34,    25,   269,   270,  2216,   208,
      10,   274,    34,    13,    34,     7,    14,    11,    13,  2564,
     283,    26,    13,  2045,    14,    25,   812,  1890,   804,    29,
      30,    31,    32,  1167,    34,    40,    34,   300,  2583,    34,
     812,  1205,   812,    34,    34,   804,    13,  1910,   812,    31,
      32,   283,    25,    15,  1229,  2263,   842,  2265,    50,  1223,
    1808,    34,    44,    25,  1619,  1620,   857,    34,   158,    13,
     856,    65,    34,   275,    18,     7,   862,   863,    13,    25,
    1714,    25,   284,    18,    25,  1004,    12,    81,    34,    11,
      84,  1004,    24,    34,    11,    89,  1004,   229,    20,   231,
      94,    95,   888,    20,    98,    37,   100,    36,  1402,    11,
      39,  2128,  1246,    15,   900,   901,   902,   903,  1752,  2453,
    2137,  1215,   944,   117,   108,    11,   912,   913,    14,    11,
     129,  1225,    14,   919,   920,   921,    12,  1020,    11,  1773,
       3,    14,     5,   929,   930,   931,     7,   130,  1031,    11,
    1194,    11,    14,   939,    14,   120,   942,    11,   944,    44,
      14,   153,   948,   949,   950,    11,   952,   962,    14,   955,
     956,   962,    11,    13,  1463,    14,  1033,  1034,  1035,  1036,
    1037,    12,    11,   175,  1473,    14,   178,  2286,    12,  2288,
    1234,   977,   978,    13,  2402,    11,  1240,  1486,    14,    11,
    1489,    11,    14,   195,    14,    11,    11,     3,    14,    14,
     996,   203,    11,    11,    11,    14,    14,    14,  1004,     3,
     212,  1007,    10,  1009,  1010,    13,   309,   310,   311,   312,
     313,   314,   315,  1879,  1880,     3,   228,    25,  1024,   171,
     232,    29,    30,    31,    32,     3,    34,  1033,  1034,  1035,
    1036,  1037,    40,    41,    11,   187,   248,    14,    11,  1045,
      11,    14,     3,    14,    11,    10,     3,    14,    13,    13,
    1041,  1140,  1141,    11,   266,     3,    14,   269,    23,    24,
      25,    71,    72,    13,    29,    30,    31,    32,    13,    34,
      11,   283,     3,    14,    11,    40,    41,    14,    11,    11,
      10,    14,    14,    13,  1088,  1637,    25,    11,   300,  1095,
      14,    11,     3,    11,    14,    25,    14,   281,   282,    29,
    1106,  1415,    32,  1095,    34,  1095,     3,    11,  1422,  1463,
      14,  1095,    13,    30,    31,  1208,  1209,  2248,  2249,  1473,
      13,   130,     3,   130,     3,    34,  1132,  1123,    18,    18,
      13,   212,  1486,  1447,  1140,  1141,    14,  2238,    36,    10,
     258,   133,    13,    15,  1123,    15,   266,   228,    55,  1155,
     203,   283,  1416,    24,    25,   300,  1167,  1666,    29,    30,
      31,    32,   203,    34,   245,   246,   150,    86,   249,    40,
      41,  1680,    13,  1179,   266,  1181,    92,   212,   150,   283,
     133,   106,   247,    11,    13,   266,   301,    31,   269,   270,
     223,   106,    80,   274,    34,    31,  2062,  2063,    11,  1203,
      11,    97,  1305,  2418,    34,   286,   287,  1213,    13,  1215,
      57,   124,   293,    88,  2182,   306,   130,    72,  1224,  1225,
     295,    86,   283,  1229,   230,  1231,   177,   208,  1542,  2422,
    1236,  2097,  1238,  1239,   177,   158,  1242,   158,  1244,  2340,
    1379,  1625,  1626,  1627,  1628,  1251,  1379,  1631,   158,  1255,
      44,  1379,  1258,    14,  2469,    13,   120,    13,  1264,   288,
      70,  1615,    43,    42,  1279,    85,   105,  1581,  1279,  1275,
     105,   133,   115,   150,   261,   270,    13,  1591,    86,   155,
     283,   150,    11,  1597,   243,    76,   438,   243,   440,   173,
      96,  1297,    60,   131,  1300,    13,   133,    11,   227,   262,
      51,    13,  1391,    13,   130,  1309,    72,    67,    15,    72,
      15,    15,  1666,   225,    15,   300,   150,   266,  1827,   266,
     212,   283,  1586,  2189,  2190,    14,  1680,    20,  2194,   125,
      80,    70,   206,   166,   110,   305,    15,   243,   103,   283,
     492,   129,   203,    15,   212,   300,   300,    55,   242,    15,
     502,   242,    80,   505,    13,  1921,   129,    55,    13,  1365,
      60,    14,  1368,    14,   121,   124,  1372,    14,   235,   235,
      14,    13,   191,  1365,   256,  1365,    72,  2305,    72,  1385,
    1372,  1365,  1372,   283,   243,  1391,   203,  1901,  1372,    14,
      80,    13,    59,    34,  1483,   300,   150,    14,  1404,   307,
      13,    76,    14,   106,   106,    11,  1760,   106,  2279,  1415,
    2281,  1417,    11,  1419,  1420,    63,  1422,  1801,  1521,    55,
    1426,  2325,  1428,    11,   151,  2335,    61,   579,  1434,   191,
      14,    71,   124,   202,   243,   212,   167,    55,   242,   242,
     303,  1447,   300,   106,  1450,  1759,    80,  1453,  1463,   106,
      13,   128,   219,   140,   106,  2305,    18,  1461,  1473,    55,
      11,    11,  1468,  1453,   219,   111,   219,   105,    13,  1453,
      13,  1486,   258,  1827,  1489,  1481,  2342,  1483,  1489,  2031,
      14,   124,   121,    14,    14,    14,  1492,  1493,   111,    13,
     106,   188,    96,   263,    14,    13,    13,  1503,   131,    18,
    1577,  1765,    50,   103,  1768,    18,  1583,    13,    55,    11,
      14,  2382,  1518,   169,    60,    13,   124,    13,   123,    11,
    1516,    82,    55,  1519,   276,    11,    85,   159,   129,   132,
     167,   125,   125,   253,   125,   104,  1542,  1516,    80,   288,
    1519,    55,   153,   219,  2415,    67,    11,    14,    60,    11,
     105,   105,    13,   288,   271,    60,    72,    67,    14,   168,
     100,    14,    11,    60,   190,    13,    13,    11,   199,   237,
      55,  1577,  1576,   143,    20,  1581,  1582,  1583,   103,    80,
      13,   305,   140,    14,   125,  1591,    14,   197,  1594,   133,
    1596,  1597,  1598,    13,   109,  1599,   134,   187,    55,   279,
    2528,   753,   129,   103,   292,  1601,   143,  1613,   140,  1923,
     104,   196,   764,    13,    13,    94,   266,   299,   129,   226,
    1723,    14,  1601,   220,  1630,    52,  1729,    13,    94,    55,
     106,   280,  1638,    13,  1640,   171,    55,  1643,    13,    13,
      70,   302,   106,  1907,    13,  1651,  1652,   106,   171,    14,
      14,  1666,    13,   104,    14,   257,   184,  2523,   151,    14,
     812,  1651,  1652,  1755,    96,  1680,   296,  1651,  1652,  1675,
    1984,  1677,  1632,  1215,   959,    43,  1682,  1042,  2154,  1652,
    1919,   445,  1772,  2336,  1922,  2411,  2465,  2080,  2294,  1760,
    1677,  1793,  1698,  2012,  2017,  2288,  2009,  2484,  2483,  2011,
    2514,  1820,  1708,  1795,  2499,    39,  1698,  2216,  1698,   930,
    1903,  1717,  1796,  1719,  1698,  1721,  2069,  2203,    97,  1707,
    1706,   649,  2555,  2102,  1279,  2447,  2299,  2552,  2197,  2557,
    1426,  1004,  1004,  1426,  1717,  1010,  2537,  2242,  2544,  2346,
    1690,  2409,  1783,  2251,  1953,  1783,  2010,  2112,   900,   901,
    2261,  1783,  1377,  1759,  2263,   845,  2265,  2340,   187,  1275,
     812,  1167,  2026,  1839,  1853,   842,  1141,   919,   920,  1371,
    1776,   818,  2313,  1370,  1780,  2361,  1782,   929,  2092,  1785,
     850,   805,   171,  1886,  1873,  1888,  1041,  1793,  1794,   161,
     942,  1797,  1798,  1799,  1800,   595,  2305,  1803,  1041,   161,
    1333,  1213,  1685,  1853,  1810,  1873,     2,  1826,  1527,  1993,
     594,    -1,  1827,  1819,  1820,   587,   587,   565,    -1,  1825,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1819,  1820,  1819,
    1820,    -1,  2096,    -1,    -1,  1819,  1820,    -1,    -1,    -1,
     587,   587,    -1,    -1,    -1,    -1,    -1,  1853,    -1,    -1,
      -1,    -1,  1858,    -1,  1860,  1007,    -1,  1009,  1010,  1865,
      -1,    -1,  2216,    -1,    -1,    -1,    -1,  1873,    -1,  1875,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2142,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2402,    -1,    -1,    -1,  1903,  1904,    -1,
    1906,    -1,    -1,  1899,    -1,    -1,    -1,    -1,    -1,  2263,
      -1,  2265,  1918,    -1,    -1,  2229,    -1,  1923,    -1,  1925,
    1899,    -1,    -1,    -1,  1930,  1931,    -1,    -1,    -1,    -1,
    1936,    -1,  1936,    -1,    -1,  1925,    -1,    -1,    -1,    -1,
      -1,  1925,    -1,  1095,    -1,    -1,    -1,    -1,    -1,    -1,
    1946,    -1,    -1,    -1,  1106,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1968,  2227,  2067,  1971,    -1,  1946,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1984,    -1,
      -1,    -1,    -1,  1989,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1997,  1998,    -1,    -1,  2001,    -1,  1989,    -1,  1989,
      -1,    -1,    -1,    -1,  2268,  1989,  2012,    -1,    -1,    -1,
      -1,  2275,    -1,    -1,    -1,    -1,    -1,    -1,     6,  2528,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1179,    -1,  1181,
      -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2402,    -1,
    2056,    -1,    -1,    -1,    -1,  2319,    -1,    -1,    -1,    -1,
    2414,    -1,    -1,    -1,  2328,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1224,    -1,    -1,    -1,    -1,    -1,    -1,  1231,
    2084,  2087,    -1,    -1,  1236,    -1,  2092,    -1,    -1,    -1,
    1242,    -1,  1244,    -1,  2100,    -1,  2100,  2087,  2104,    -1,
      -1,  2455,    -1,  2087,    -1,    -1,  1258,    -1,    -1,    -1,
      -1,    -1,    -1,  2119,  2378,    -1,    -1,    -1,  2124,    -1,
      -1,    -1,    -1,  2129,  2130,    -1,    -1,    -1,   116,   117,
    2136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   129,  2148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2416,    -1,  2160,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2184,    -1,
     168,    -1,  2274,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,  2197,    -1,    -1,    -1,  2459,    -1,   185,    -1,    -1,
     188,  2216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2473,
      -1,    -1,    -1,  1365,    -1,    -1,    -1,    -1,    -1,    -1,
    1372,    -1,    -1,  2229,    -1,    -1,  2580,    -1,    -1,  2493,
      -1,    -1,    10,  1385,    -1,    13,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,  2263,    -1,
    2265,    29,    30,    31,    32,  2261,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,  1417,    -1,  1419,  1420,    -1,
      -1,    -1,    -1,    51,  1426,    -1,  1428,    -1,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2305,    -1,    -1,    -1,  2305,    -1,  2302,    -1,    -1,    -1,
      -1,  1453,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2334,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,    -1,
      -1,    -1,    -1,    -1,    -1,  2361,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   352,  2371,   354,    -1,    -1,    -1,
     148,    36,    -1,    -1,    39,    -1,    -1,   365,    -1,    -1,
      -1,    -1,  2388,    -1,    -1,    -1,    -1,  2402,    -1,    -1,
      -1,    -1,   380,    -1,    -1,    -1,    -1,   385,    -1,    64,
      -1,  2407,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,
     188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2424,    -1,
      -1,    -1,    -1,    -1,    99,  2441,    -1,    -1,    -1,    -1,
      -1,    -1,  1594,    -1,  1596,  2424,  1598,    -1,    -1,    -1,
      -1,  2455,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
      -1,  1613,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,
    2476,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1630,  2475,
      -1,    -1,    -1,    -1,   149,    -1,  1638,    -1,  1640,   154,
      -1,   156,   157,    -1,   159,    -1,  2475,    -1,   163,  1651,
    1652,   489,   167,    -1,  2510,    -1,    -1,   172,    -1,    -1,
      -1,    -1,    -1,  2528,    -1,    -1,    -1,  2528,  2524,   184,
     185,  2527,    -1,  1675,   189,    -1,    -1,   192,   193,   194,
    1682,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,    -1,   210,  1698,    -1,    -1,   214,
      -1,  2557,    -1,    -1,  2560,    -1,    -1,    -1,    -1,   224,
      -1,    -1,    -1,    -1,    -1,    -1,  2572,  2573,   233,  2580,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   566,    -1,
      -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     255,    -1,    11,    12,    13,    14,    -1,    -1,    -1,   264,
     265,    -1,   267,    -1,    -1,    -1,    -1,   272,    -1,    -1,
      -1,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   291,    -1,    -1,    -1,
    1782,   296,    -1,  1785,    -1,    -1,    55,    -1,    57,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,  1810,    -1,
      -1,   649,    81,    82,    -1,    84,    85,  1819,  1820,    -1,
      89,    90,    -1,    -1,    -1,    94,    95,    -1,    97,    98,
      -1,   100,    -1,    -1,    -1,    -1,    -1,   106,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    -1,   121,    -1,   123,   124,    -1,    -1,    -1,   128,
     129,    -1,   131,   132,    -1,   134,    -1,    -1,    -1,    -1,
      -1,   140,    -1,    -1,    -1,    -1,    -1,    -1,   147,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1904,    -1,  1906,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   755,    -1,   757,
      -1,   759,    -1,  1925,    -1,    -1,    -1,   765,  1930,   767,
     768,    -1,    -1,    -1,  1936,    -1,    -1,    -1,    -1,    -1,
      -1,   779,   780,   781,   782,   783,    -1,    -1,    -1,    -1,
      -1,    -1,   790,    -1,    -1,    -1,    -1,   795,    -1,   797,
     798,   799,   800,   801,   802,   803,  1968,    -1,    -1,    -1,
     808,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     818,    -1,   820,   821,   822,    -1,    -1,  1989,   826,    -1,
      -1,    -1,    -1,    -1,   832,  1997,  1998,     8,    -1,    -1,
      -1,    -1,    13,    -1,   842,    -1,    -1,    -1,    -1,    -1,
    2012,    -1,   850,    -1,   852,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   861,    -1,    36,    -1,    -1,    39,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   887,
      61,   889,   890,    64,    -1,    -1,    -1,    68,    69,    -1,
      -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   912,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2087,    -1,    -1,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2100,    -1,
      -1,    -1,  2104,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,   951,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,   961,    -1,    -1,    -1,    -1,    -1,   140,
      -1,    -1,    -1,    -1,  2136,    -1,    -1,    -1,   149,    -1,
      -1,    -1,    -1,   154,    -1,   156,   157,    -1,   159,    -1,
      -1,   162,   163,    -1,   992,    -1,   167,    -1,  2160,    -1,
      -1,   172,    -1,   174,    -1,    -1,  1004,    -1,    -1,    -1,
      -1,   182,    -1,   184,   185,    -1,    -1,    -1,   189,    -1,
    1018,   192,   193,   194,    -1,    -1,    -1,  1025,    -1,    -1,
      -1,  1029,    -1,    -1,   205,  2197,    -1,    -1,    -1,   210,
      -1,    -1,    -1,   214,    -1,   216,    -1,    -1,    -1,    -1,
      -1,   222,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     251,    -1,  1080,    -1,   255,   256,    -1,  1085,    -1,    -1,
      -1,   262,    -1,   264,   265,    -1,   267,    -1,    -1,    -1,
      -1,   272,    -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,    -1,    -1,    -1,   296,    -1,    -1,    -1,    -1,
      -1,    -1,   303,    -1,    -1,   306,    -1,    -1,    -1,    -1,
    2302,    -1,    -1,    -1,    -1,    -1,  1144,  1145,    -1,  1147,
    1148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      39,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2371,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    -1,    -1,    64,  2388,    -1,    -1,    68,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    -1,    -1,
    1248,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1266,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2441,
      -1,   120,   121,    -1,    -1,  1283,    -1,    -1,    -1,    -1,
      -1,    -1,  1290,    -1,   133,    -1,    -1,    -1,    -1,    -1,
      -1,   140,  1300,    -1,    -1,    -1,    -1,    -1,  1306,    -1,
     149,    -1,    -1,    -1,  2476,   154,  1314,   156,   157,  1317,
     159,    -1,    -1,   162,   163,    -1,    -1,    -1,   167,    -1,
      -1,    -1,    -1,   172,    -1,   174,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   182,    -1,   184,   185,    -1,  2510,    -1,
     189,    -1,    -1,   192,   193,   194,    -1,    -1,    -1,    -1,
      -1,    -1,  2524,    -1,    -1,  1363,   205,    -1,    -1,  1367,
      -1,   210,    -1,  1371,    -1,   214,    -1,   216,    -1,    -1,
    1378,  1379,    -1,   222,    -1,   224,   225,    -1,    -1,  1387,
    1388,    -1,  1390,    -1,   233,  2557,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,  1409,   251,    -1,    13,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,    -1,
      -1,    -1,  1430,   272,    -1,    -1,    -1,    -1,    -1,   278,
      -1,    -1,    -1,    -1,    -1,    -1,  1444,    -1,    -1,    -1,
      -1,    -1,   291,    -1,    -1,    -1,    -1,   296,    -1,    -1,
      -1,  1459,    -1,    -1,   303,    64,    -1,    -1,    -1,    68,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1518,   120,   121,    -1,    -1,    -1,    -1,  1525,    -1,    -1,
      -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,
      -1,   140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,    -1,  1550,    -1,    -1,   154,    -1,   156,   157,    -1,
     159,    -1,    -1,   162,   163,    -1,  1564,  1565,   167,    -1,
      -1,    -1,    -1,   172,    -1,   174,  1574,    -1,    -1,    -1,
      -1,    -1,    -1,   182,    -1,   184,   185,    -1,    -1,    -1,
     189,    -1,    -1,   192,   193,   194,    -1,    -1,    13,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
      -1,   210,    -1,    -1,    -1,   214,    -1,   216,    -1,    -1,
      -1,    -1,    -1,   222,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    64,
      -1,    -1,   251,    68,    69,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,   262,    -1,   264,   265,    -1,   267,    -1,
      -1,    -1,    -1,   272,    -1,    -1,    -1,    -1,    -1,   278,
      -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   291,    -1,    -1,    -1,    -1,   296,    -1,    -1,
      -1,    -1,    -1,    -1,   303,   120,   121,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1726,    -1,
      -1,    -1,    -1,    -1,   149,    -1,    -1,    -1,    -1,   154,
    1738,   156,   157,  1741,   159,    -1,    -1,    -1,   163,    -1,
      -1,    -1,   167,    -1,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,    -1,    -1,  1762,    -1,    -1,    -1,    -1,   184,
     185,    -1,    -1,    -1,   189,    -1,    -1,   192,   193,   194,
      -1,    -1,    -1,  1781,    -1,    -1,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,  1792,   210,    -1,    -1,    -1,   214,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   224,
      -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,   233,    -1,
      -1,    -1,    -1,    11,    12,    -1,    14,    -1,  1826,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     255,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,    -1,   267,    -1,  1852,    -1,    -1,   272,    -1,    -1,
      -1,  1859,    -1,   278,    -1,  1863,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,   291,    65,    -1,  1877,
      -1,   296,    -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    81,    82,    -1,    84,    85,  1896,    -1,
      -1,    89,    90,    -1,    -1,    -1,    94,    95,    -1,    97,
      98,    -1,   100,    -1,    -1,    -1,    -1,    -1,   106,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
     128,   129,    -1,   131,   132,   133,    -1,    -1,    -1,  1947,
    1948,  1949,   140,    -1,    -1,    -1,    -1,    10,    11,   147,
      13,    -1,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2015,    -1,    -1,
      -1,    -1,  2020,    -1,  2022,  2023,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,
      93,  2039,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2049,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,
      10,    11,  2060,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,  2074,    -1,    -1,    29,
      30,    31,    32,    -1,    34,    -1,    -1,   140,    -1,    -1,
      40,    41,    -1,    -1,    -1,   148,    -1,    -1,    -1,    -1,
      -1,    51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    59,
      -1,    -1,    -1,    -1,    -1,  2113,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    10,    11,   107,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,
      -1,  2179,  2180,    -1,    -1,    40,    41,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,   148,    -1,
      -1,    -1,    -1,    -1,    59,    -1,    -1,  2205,    -1,    -1,
      -1,  2209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,  2251,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2262,    -1,    -1,    -1,    10,    11,
      -1,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,  2284,    29,    30,    31,
      32,    -1,    34,   148,    -1,    -1,    -1,    -1,    40,    41,
      -1,  2299,  2300,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    2308,    -1,  2310,    -1,    -1,    -1,    -1,    59,    10,    -1,
      -1,    13,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    88,    -1,    40,    41,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,  2357,
    2358,    -1,    -1,    -1,    -1,   107,    -1,    59,    -1,    -1,
    2368,    -1,    -1,    -1,    -1,    -1,    -1,  2375,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,   148,    -1,    -1,     3,
       4,     5,     6,     7,    -1,    -1,    10,    -1,    -1,    13,
    2418,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,  2449,    -1,    -1,  2452,    -1,   148,    -1,    -1,    -1,
      54,    -1,    -1,    -1,  2462,    -1,    -1,    61,    62,    63,
      -1,  2469,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,  2485,    -1,    83,
      -1,    85,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,  2506,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,  2535,    -1,    -1,
    2538,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2552,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    -1,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   144,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,
      14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    14,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,
      14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      59,    -1,    61,    62,    63,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,   126,   127,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    11,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
       4,     5,     6,     7,    -1,    -1,    10,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    10,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    80,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
       4,     5,     6,     7,    -1,    -1,    10,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    55,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,   126,   127,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,   130,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    26,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,
      14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    14,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    67,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    10,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,   118,    -1,    -1,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    28,    -1,    30,    31,    -1,    33,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    83,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    95,    -1,    -1,    -1,    -1,    -1,   101,    -1,   103,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,
      -1,    30,    31,    -1,    33,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,   101,    -1,   103,   104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     3,
      -1,    10,    -1,     7,    13,    -1,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
      -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,   112,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     5,     6,     7,     8,    10,    -1,
      -1,    13,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      -1,    -1,    -1,    55,    -1,    -1,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,     5,    10,     7,
       8,    13,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,    -1,    -1,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
       5,     6,     7,    10,    -1,    -1,    13,    -1,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   148,    -1,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,     5,     6,     7,    10,    -1,    -1,    13,
      -1,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   148,    -1,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,     7,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,     7,    -1,    -1,
      10,    -1,    -1,    13,    -1,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    -1,    -1,    29,
      30,    31,    32,    -1,    34,    35,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,     7,    -1,
      -1,    10,    -1,    -1,    13,    -1,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
      -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     7,
      -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    87,
      -1,    -1,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
       7,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      27,    28,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,     7,    -1,    10,    -1,    -1,    13,    13,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    32,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,   134,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   148,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,     7,    -1,    -1,    -1,    11,    -1,    -1,
      14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     7,    -1,    10,    -1,    11,    13,
      -1,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      -1,    54,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    91,    93,
      -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   148,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,     7,    -1,    -1,    -1,    -1,
      -1,    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,     7,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,     7,    -1,    -1,
      -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,     7,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     7,
      10,    -1,    -1,    13,    -1,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    -1,    -1,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    51,    -1,    -1,    -1,    55,    54,    -1,    -1,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
       7,    -1,    10,    -1,    -1,    13,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    53,    54,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    91,    93,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     148,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,     7,    -1,    10,    11,    -1,    13,    -1,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    54,    55,
      -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    88,    -1,    -1,    -1,    91,    93,    -1,    -1,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   148,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,     7,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,     7,    -1,    10,    -1,    -1,    13,    13,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    30,    31,    32,    32,    34,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    88,    -1,    -1,    -1,    92,    93,    -1,
      -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   148,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     7,    -1,    10,    11,    -1,    13,
      -1,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      -1,    54,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    91,    93,
      -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   148,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,     7,    10,    -1,    -1,    13,
      -1,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      -1,    55,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    88,    -1,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   148,    -1,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,     7,    -1,    -1,    -1,
      -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    27,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,     7,    -1,    10,
      -1,    -1,    13,    13,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      51,    -1,    -1,    -1,    55,    -1,    -1,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,     7,    -1,
      -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    27,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     7,
      -1,    10,    -1,    -1,    13,    13,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    -1,
      29,    30,    31,    32,    32,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
      -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
       7,    -1,    10,    -1,    -1,    13,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    -1,    54,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    91,    93,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     148,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,     7,    10,    -1,    -1,    13,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   120,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     148,    -1,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,     7,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,     7,    10,    -1,    -1,    13,    -1,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   148,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     7,    -1,    10,    -1,    -1,    13,
      -1,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    32,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   148,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,     7,    -1,    10,    -1,    -1,
      13,    -1,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,
      -1,    -1,    55,    -1,    -1,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    91,
      93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   148,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,     7,    -1,    -1,    -1,
      -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,     7,    -1,    10,
      -1,    -1,    13,    13,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    -1,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,     7,    10,
      -1,    -1,    13,    -1,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,
      -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     7,
      -1,    10,    -1,    -1,    13,    13,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
      -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
       7,    -1,    10,    -1,    -1,    13,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     148,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,     7,    -1,    10,    -1,    -1,    13,    13,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   148,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,     7,    -1,    10,    -1,    -1,    13,    13,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    55,
      -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   148,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,     7,    10,    -1,    -1,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   148,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,     7,    -1,    10,    -1,    -1,    13,
      13,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   148,    -1,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,     7,    -1,    10,    -1,    -1,
      13,    13,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   148,    -1,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,     7,    10,    -1,    -1,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,
      93,    -1,    -1,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   148,    -1,    -1,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,     7,    -1,    10,
      -1,    -1,    13,    13,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,     7,    -1,
      -1,    -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,     7,
      -1,    10,    -1,    -1,    13,    13,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    58,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
      -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,
      -1,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
       7,    10,    -1,    -1,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
      -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,
      -1,    -1,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,     7,    10,    -1,    -1,    13,    -1,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    -1,    55,    -1,    -1,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     148,    -1,    -1,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,     7,    10,    -1,    -1,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    96,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   148,    -1,    -1,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,     7,    10,    -1,    -1,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   148,    -1,    -1,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    10,    -1,    -1,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    10,    -1,    -1,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    88,    -1,    40,    41,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    59,    10,    -1,    -1,    13,    -1,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    88,    -1,    40,    41,    -1,    93,    -1,    -1,
      96,    -1,   148,    -1,    -1,    51,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    59,    10,    -1,    -1,    13,    -1,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    88,    -1,    40,    41,    -1,    93,    -1,    -1,
      96,    -1,   148,    -1,    -1,    51,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    59,    10,    -1,    -1,    13,    -1,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      -1,    -1,    -1,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    88,    -1,    40,    41,    -1,    93,    -1,    -1,
      96,    -1,   148,    -1,    -1,    51,    -1,    -1,    -1,    10,
      -1,   107,    13,    59,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,
      96,    -1,   148,    -1,    -1,    -1,    -1,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,    -1,
      -1,    -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   148
  };

  const short
  BisonParserImpl::yystos_[] =
  {
       0,   309,   310,   311,   312,   313,   314,   315,   317,    13,
      36,    39,    64,    68,    69,    99,   120,   121,   133,   149,
     154,   156,   157,   159,   163,   167,   172,   184,   185,   189,
     192,   193,   194,   205,   210,   214,   224,   233,   255,   264,
     265,   267,   272,   278,   291,   296,   319,   323,   326,   327,
     333,   335,   337,   344,   345,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   363,   389,   390,   394,   395,   396,
     397,   398,   399,   400,   403,   407,   408,   463,   468,   471,
     472,   473,   474,   475,   483,   484,   485,   500,   508,   510,
     512,   513,   516,   518,   524,   525,   526,   618,   620,   748,
     754,   755,   761,   762,   766,   771,   773,   774,   790,   791,
     792,   793,   797,   801,   808,     8,    61,    86,   140,   159,
     162,   174,   182,   216,   222,   225,   251,   256,   262,   303,
     322,   323,   324,   325,   740,   802,   803,   809,   814,   815,
     818,   819,   820,   824,   825,   826,   827,   828,   830,   831,
     832,   833,   834,   835,   836,   837,   321,   323,   320,   322,
     526,   749,   838,     3,     4,     5,     6,     7,    13,    25,
      27,    28,    30,    31,    33,    38,    54,    61,    62,    63,
      76,    77,    78,    83,    86,    91,    95,   101,   103,   104,
     117,   122,   126,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   645,   646,   656,   657,   658,   659,   660,   661,
     662,   663,   665,   667,   668,   677,   679,   680,   681,   682,
     683,   684,   687,   688,   689,   691,   692,   695,   696,   697,
     698,   703,   704,   717,   720,   721,   722,   724,   725,   726,
     727,   728,   729,   730,   731,   732,   733,   734,   735,   736,
     737,   738,   739,   741,   743,    54,    91,   122,   160,   161,
     179,   180,   181,   198,   218,   234,   259,   268,   288,   289,
     647,   664,   665,   668,   669,   673,   739,     0,   510,    84,
     111,   113,   521,   522,   523,   739,   732,   107,   178,   744,
     283,    92,   782,   749,    13,   290,   663,   739,   741,   115,
     617,   739,   158,     7,    50,   153,   175,   178,   195,   203,
     212,   228,   232,   248,   266,   269,   283,   300,   332,   404,
     458,   237,   753,   646,   290,   346,   347,   647,   177,   347,
      80,   756,    50,   266,   270,   274,   332,   404,   458,   208,
     323,   177,   232,    50,   120,   476,   478,   480,   482,   739,
     113,   233,   638,   177,   647,   739,   476,   347,   158,   228,
     501,   739,   158,   346,   283,   648,   649,   739,   776,   777,
      12,   318,   217,   252,   341,   342,   343,   108,   628,   629,
      74,    90,   128,   507,   507,    11,    37,   326,    11,   508,
     120,    32,   469,   647,   649,   650,   651,   654,   655,   739,
      13,    57,    87,    92,   107,   298,   495,   496,   510,   739,
     758,   760,   776,   130,   787,   788,    11,    14,   646,   817,
     646,   739,   322,   802,   810,   705,   739,   705,   739,   823,
     705,   705,   810,   129,   810,   646,    12,    44,   322,   325,
       1,    72,    12,    12,    13,    64,    68,    86,    99,   120,
     121,   133,   140,   149,   154,   156,   157,   159,   162,   163,
     167,   172,   174,   182,   184,   189,   192,   193,   194,   205,
     210,   214,   216,   222,   224,   225,   233,   251,   255,   256,
     262,   264,   265,   267,   272,   278,   291,   296,   303,   740,
     748,   839,   843,   509,   511,   514,   515,   517,   518,   618,
     620,   646,    50,    51,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   739,   742,
     647,   742,    13,    18,    25,   130,   646,    13,   749,    13,
     646,   664,   646,    13,    18,    13,     3,    13,    13,   646,
      10,    13,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    29,    30,    31,    32,    34,    40,    41,
      51,    59,    88,    93,    96,   107,   148,   634,   635,   636,
     637,   640,   641,   642,   643,   644,    26,   646,    11,    26,
     730,    25,    11,    20,    13,    14,   646,   678,    11,    14,
     130,   130,    71,    72,    14,    58,    11,    14,    11,    14,
      13,    10,    13,    85,   120,   614,   646,   699,   700,   701,
     702,   739,    11,    87,   116,   616,   749,    14,   646,   723,
      11,    14,    11,    14,     3,     3,    34,    13,   671,   672,
      14,    15,    34,    36,   258,   647,   228,   245,   246,   249,
     266,   269,   274,   286,   287,   293,   404,   745,   746,   647,
     650,   739,   133,   519,    14,   823,   342,    15,    11,    15,
      15,   617,    55,   266,   203,   458,   300,   150,   203,    86,
     795,   795,   795,    13,   751,   752,   338,   339,   340,   650,
      55,   336,    13,    92,   777,   266,   150,   212,   283,   795,
     795,   795,   646,   133,   392,   619,   647,   247,   477,   106,
      11,    13,   496,   497,   380,   647,   730,    92,   239,   401,
     753,   647,   106,   301,    80,   470,   705,   650,    31,    34,
      31,    25,    34,    55,   536,   539,   223,   236,   304,    11,
     749,    11,    97,   613,   749,   749,   523,   617,   629,     5,
       8,   653,   739,   470,    31,    32,    44,   652,    34,   651,
     739,    62,   542,   543,   544,   662,   732,   741,   777,    87,
     258,   296,    13,   768,   769,   770,    11,    14,   758,   124,
     759,   103,   227,   787,    13,   120,   133,   173,   186,   232,
     283,   568,   569,   570,   573,   574,   646,   700,   130,   816,
     124,    88,   306,   821,    11,    67,   673,    72,   230,   295,
     829,   188,   159,   819,   825,   827,   830,   832,    86,   839,
     178,   744,   842,   283,    13,   290,   663,   739,   741,   158,
      50,   178,   228,   266,   269,   283,   300,   404,   177,    50,
     266,   270,   274,   332,   404,   458,   208,   177,   232,   177,
     158,   158,    44,   629,    14,   507,   507,   509,   646,   120,
      11,    14,   510,   673,   646,   130,   120,   646,    13,   646,
     739,    13,    20,   666,   673,   739,   646,   646,   120,   646,
      70,   646,   646,   646,   646,   646,    13,   739,   646,    70,
     103,   148,   646,    59,    88,    96,   646,   646,   646,   646,
      50,    53,   144,   639,   646,   646,   646,   749,   728,   729,
     646,   666,    55,   678,   646,   646,   646,   288,   646,   690,
      30,    31,   694,    14,   229,   231,   629,    43,    42,   699,
     105,   105,   614,   133,   718,    55,   537,   723,   646,   739,
     229,   670,   729,   730,   731,   732,   738,    11,    14,   646,
     522,   523,   753,   115,   462,   261,   150,   796,    86,   467,
     283,   467,   153,   175,   195,   232,   248,   283,   357,   462,
     270,   747,   752,   536,   155,    50,    70,   527,    14,   646,
     823,   646,   646,    13,   150,   243,    76,   647,   647,   650,
      14,   522,   750,    11,    14,    11,   497,   730,    14,   574,
     650,   536,   796,   243,   795,   795,   647,   647,   650,    92,
     804,   173,   570,   753,   619,   647,   739,   480,    55,    92,
     538,   650,   125,   647,   739,   651,    96,   502,   131,   757,
       5,     6,   739,   739,     5,     6,   739,   646,    13,   739,
     778,   133,   772,   739,   739,   341,    60,   627,   646,   544,
      50,    70,   506,   506,   613,     6,   653,   739,   470,    13,
      67,   646,   767,    11,    14,    11,   739,   759,   262,   227,
      51,   784,   568,   569,   570,   700,   647,    13,   647,    86,
     575,   576,   577,   647,   646,    71,   130,   811,   810,    13,
     130,    72,   739,   646,    67,   822,   225,    15,   646,    72,
     810,   705,   705,   705,   705,   705,   228,   246,   266,   269,
     274,   404,   745,   746,   195,   232,   248,   283,   357,   462,
     840,   739,    15,    15,    15,   266,   300,   266,   150,   212,
     283,   140,   159,   225,   256,   303,   613,   506,   506,   629,
     646,    14,    20,   124,   646,    55,   510,    80,   125,   673,
      11,    11,    55,    26,   647,    80,    70,   749,    52,    13,
     134,   630,   631,   632,   727,    13,   739,   124,   124,    72,
     305,    55,   693,   776,   778,   693,   646,   646,   613,   646,
     646,   166,   615,   206,   110,   719,   739,    14,   670,    15,
     300,   467,   243,   103,   647,   467,   647,   467,   283,   467,
     467,   203,   467,   203,   300,   212,   129,   753,    55,   520,
      15,    15,   510,   242,   795,   121,   152,   154,   189,   255,
     328,   329,   329,   329,    15,   750,   340,    80,   772,   242,
     795,   647,   650,    13,   361,   362,   794,   794,   823,   129,
     807,    55,   753,   125,   647,   739,   739,   753,    13,   409,
     410,   411,   647,    80,   647,   730,   646,   739,   739,    26,
     647,    34,   235,   121,   739,   627,    63,   624,   625,   235,
     516,   516,    34,   652,   739,   542,   767,   769,    10,   133,
     528,   529,   535,   646,    60,   783,   646,   124,    14,    14,
      14,    14,   571,   572,   739,    13,    14,   574,    11,    14,
      13,   124,   810,   646,    72,   191,   812,   813,   510,   307,
     646,   646,   256,    72,   462,   796,   283,   747,   203,   175,
     203,   300,   467,   150,   796,   243,   516,   516,   613,   646,
     124,   673,    14,   646,   739,   694,   690,   673,    14,    80,
     630,   632,   646,   646,    13,    11,    14,   647,   646,   646,
     646,   776,   778,    14,    59,   629,    13,    13,   716,   739,
     646,   467,   106,   467,    76,    67,   626,   650,   753,   647,
     203,   467,   647,   647,   467,   650,   467,   467,   467,    13,
     567,   578,   579,   632,   647,   651,   789,   122,   647,    80,
     529,   646,    14,   106,   739,    55,    67,   237,   165,   170,
     176,   201,   244,   442,   443,   170,   176,   170,   176,   244,
     125,   170,    11,   646,   650,   764,   765,   757,   106,   739,
     106,   799,    14,    53,   283,   360,   460,   461,   673,   675,
     676,   739,    11,    14,   164,   260,   800,   646,   805,   806,
     510,   499,   623,   662,   730,   741,   125,   165,   201,   244,
     412,   413,   442,   443,   445,   739,   625,    11,    14,   499,
      80,    14,    13,   739,   536,    13,   775,   776,   779,   780,
     781,   623,    56,    69,   621,   544,   739,   653,    55,    75,
     258,   530,   531,   533,   534,   151,    11,    35,    55,   739,
     275,   284,   784,   184,   214,   296,   786,    11,    14,   749,
     574,   749,   810,   124,    61,   646,   191,   811,    14,   124,
     303,   300,   243,   212,   650,   242,   242,   646,   202,   686,
     686,    11,    14,   120,   646,   646,    14,    14,   646,   613,
     510,   705,   650,   479,   481,   482,   705,   624,   753,   167,
      55,   406,    15,   650,   285,   334,    13,   364,   365,   647,
     409,   359,   647,   650,   647,   510,   749,    25,    34,    25,
      34,   106,    80,   593,   647,   106,   218,   405,   730,   737,
     624,   752,    13,   467,   467,   219,   219,   795,   795,   795,
     795,   219,   647,   795,   328,   140,   581,   128,   758,   647,
     106,   798,   647,    54,    73,   113,   122,   674,   739,    18,
      11,    20,   537,   676,   360,    55,    11,    11,   499,    54,
      55,    91,   122,   204,   414,   415,   416,   418,   419,   420,
     421,   422,   424,   647,   739,   111,   708,   709,   412,   499,
     647,   755,    15,    11,   593,   105,   622,   673,    13,    13,
      11,    14,   258,    11,    14,    55,   529,   535,   534,   739,
     784,   124,   497,   121,   571,    55,   241,   250,   294,   557,
     565,   566,   612,   739,   566,   810,   124,   646,   188,   810,
     409,   646,    14,    14,   646,    14,    52,    14,    14,   111,
     706,   707,   497,    11,   106,   496,   106,   764,   405,   646,
     409,    13,   753,    14,    88,   213,   238,   367,   368,    11,
      14,   753,   794,    96,   503,   263,   369,   370,   362,   497,
     106,    14,   566,    13,    13,   646,    13,    27,    28,    38,
     567,   577,   579,   580,   592,   647,    82,    85,   131,   147,
     594,   595,   596,   597,   601,   602,   604,   610,   611,   197,
     205,   255,   264,   330,   384,   647,   646,   413,   739,   739,
     496,    13,   495,   498,   739,   739,   739,   739,   795,   739,
     281,   282,   597,   598,    50,   759,   647,   459,   673,   739,
     459,   103,   358,   537,   739,   805,   623,    18,    18,    55,
     103,   176,   207,   244,   430,   431,   432,   433,   434,   435,
     436,   455,    11,    20,   672,    67,   204,   424,   426,   428,
      13,   442,    60,    11,   169,   710,   711,    14,    14,   767,
     780,   757,   200,   221,   686,   739,   532,   646,   739,    13,
     532,   739,   124,   786,   266,   298,   785,   781,   739,    13,
     646,   138,   211,   564,   536,   536,   123,   551,   552,   241,
     250,   294,   557,   565,   612,   552,   810,   124,   810,   503,
      58,   685,   646,   749,    11,   629,   276,   376,   481,   647,
     647,   753,   503,   529,    55,   464,   465,   739,   367,   819,
     369,   650,   167,   504,   676,   376,   376,   647,   566,   772,
      13,   580,   590,   591,    11,   100,   540,   749,   646,   646,
     646,   602,   603,    11,   604,   605,   609,   610,   612,   132,
     607,   608,   129,   125,   125,    80,   330,   331,    14,    79,
     112,   438,   439,   442,   443,   444,   253,   446,    14,    14,
     103,   190,   456,   457,   121,   189,   121,   457,   125,   288,
      55,   764,   673,   153,   822,   421,   429,    20,   417,   421,
     739,   104,   739,   219,   103,   434,   457,   753,   446,   417,
     646,   426,   427,   424,   425,   625,   646,   646,   646,    60,
      11,   753,   758,    14,    55,   532,   529,   786,   769,   557,
     565,   612,   553,   554,   646,   105,   105,    13,   739,   536,
     536,   810,    72,   504,   288,    60,   646,   114,   119,   714,
     715,   271,   709,   260,   382,   383,   125,   384,   385,   386,
     626,    14,   510,    11,    14,   366,   676,   376,   764,   168,
     505,   103,   187,   209,   277,   299,   371,   753,   536,   552,
     581,   510,   540,    14,   580,    65,    81,    89,    95,   117,
     588,    60,   605,   118,   599,   600,   646,   609,   608,   606,
     739,    11,    13,    13,   739,    13,    50,    11,   456,   739,
     739,   199,   440,   441,   647,   456,   190,   753,   177,   237,
     103,   237,   739,    55,   143,   358,   625,    20,   625,   429,
      14,   646,   646,    80,   402,   759,   739,   536,   536,    11,
     140,   536,    13,   560,   647,    13,   140,   505,   305,   646,
      59,    66,   127,   646,   713,    14,   183,   215,   377,   711,
     125,   499,   197,   387,   388,   133,   391,   392,   393,   753,
     650,   763,   626,   187,   220,   254,   373,   375,   392,   464,
     489,   490,   632,   633,   552,    14,   588,   552,   109,   541,
     541,   541,    84,    98,   589,   600,   609,    13,    11,    14,
     608,    55,   606,   646,   499,   499,   330,   753,   129,   496,
     753,   292,   752,   104,   752,   143,   646,   433,   437,   437,
     279,   423,   196,   393,   553,   646,   559,   647,   140,   544,
     546,   548,   738,   626,   646,   713,   266,    79,   112,   712,
     712,   753,    13,   129,   111,   392,   753,   220,   372,   581,
     709,   739,   619,   372,    55,   237,   378,   633,    13,   486,
     487,   488,   536,   589,    94,   608,   646,   646,   716,    14,
      14,    14,   646,   226,   447,   429,   646,   753,   299,   752,
      88,    11,    14,   647,   119,   240,   547,    14,   709,    52,
     464,   499,    13,   171,   739,    55,   464,   466,   598,   711,
     373,   374,    13,   381,   730,   752,   753,    50,   627,    11,
      14,   280,   493,   494,   772,    94,   749,    81,   148,   273,
     448,   106,   449,   452,   453,    13,   647,    88,   709,   133,
     257,   545,   550,   711,   713,    14,   646,   409,   730,   753,
     120,   646,   378,   379,   171,   627,    13,   491,   492,   753,
     749,   580,    70,   184,   296,   106,   451,   453,   106,   450,
     452,   555,   556,   646,    13,   562,   563,   302,    13,   753,
      14,   465,    14,    14,   646,    11,    14,   580,   106,   129,
     582,   583,   584,   585,   586,   587,   102,   121,   164,   260,
     454,   454,    11,    14,   536,   560,   561,    11,    14,    14,
      55,   257,   545,   549,   739,   544,    12,    55,   841,   646,
     585,   646,    13,    11,    14,   587,   151,   104,   555,    14,
     539,   558,   561,   739,   549,    14,   739,   739,   730,   732,
     549
  };

  const short
  BisonParserImpl::yyr1_[] =
  {
       0,   316,   317,   317,   317,   317,   317,   317,   317,   318,
     318,   319,   320,   320,   321,   321,   322,   322,   323,   323,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     324,   324,   325,   326,   326,   326,   326,   326,   326,   326,
     326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
     326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
     326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
     326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
     327,   328,   328,   328,   328,   328,   328,   328,   328,   328,
     328,   328,   328,   328,   328,   328,   328,   328,   329,   329,
     330,   330,   330,   330,   330,   331,   331,   332,   332,   332,
     332,   332,   332,   332,   332,   332,   332,   332,   333,   333,
     333,   333,   333,   334,   334,   335,   336,   336,   337,   338,
     338,   339,   339,   340,   341,   341,   341,   341,   342,   342,
     343,   343,   344,   345,   345,   346,   347,   347,   348,   348,
     348,   348,   348,   348,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   356,   356,   357,   357,   358,   358,   359,
     360,   360,   361,   361,   362,   362,   363,   364,   364,   365,
     365,   366,   366,   367,   367,   368,   368,   368,   368,   369,
     369,   370,   371,   371,   371,   371,   371,   371,   372,   372,
     373,   373,   374,   374,   375,   375,   375,   376,   376,   377,
     377,   378,   378,   379,   379,   380,   380,   381,   381,   382,
     383,   383,   384,   385,   385,   386,   386,   387,   387,   388,
     389,   390,   391,   392,   393,   393,   393,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   401,   402,   403,   404,
     405,   405,   406,   406,   407,   408,   409,   409,   410,   411,
     411,   411,   412,   412,   413,   414,   414,   415,   415,   416,
     417,   417,   418,   418,   419,   419,   420,   420,   420,   421,
     422,   422,   423,   423,   423,   424,   425,   425,   426,   427,
     427,   428,   428,   428,   429,   430,   431,   432,   433,   434,
     434,   434,   434,   435,   435,   435,   436,   436,   437,   437,
     438,   438,   439,   439,   440,   441,   441,   442,   442,   443,
     444,   444,   445,   445,   445,   446,   447,   447,   448,   448,
     448,   449,   449,   449,   450,   450,   451,   451,   452,   453,
     454,   454,   454,   454,   455,   455,   456,   456,   457,   457,
     458,   458,   459,   459,   460,   460,   461,   462,   462,   463,
     463,   464,   465,   465,   466,   466,   466,   467,   467,   468,
     469,   469,   470,   470,   471,   472,   473,   474,   474,   475,
     475,   476,   476,   477,   477,   478,   478,   479,   479,   480,
     481,   482,   482,   483,   484,   485,   486,   486,   487,   488,
     488,   489,   489,   490,   490,   491,   491,   492,   493,   494,
     494,   495,   495,   496,   497,   497,   498,   498,   499,   499,
     500,   501,   501,   502,   502,   503,   503,   504,   504,   505,
     505,   506,   506,   507,   507,   507,   508,   508,   509,   509,
     510,   510,   510,   511,   511,   511,   512,   512,   513,   514,
     514,   515,   516,   516,   517,   517,   518,   518,   519,   519,
     520,   520,   520,   521,   521,   521,   522,   522,   523,   523,
     524,   524,   524,   525,   526,   526,   527,   527,   527,   528,
     528,   529,   529,   530,   530,   531,   532,   533,   533,   533,
     534,   534,   535,   535,   535,   535,   535,   535,   535,   536,
     536,   537,   537,   538,   538,   538,   539,   539,   540,   540,
     541,   541,   542,   542,   542,   543,   544,   544,   545,   546,
     546,   547,   547,   548,   549,   549,   550,   550,   550,   550,
     550,   551,   552,   552,   553,   554,   554,   555,   556,   556,
     557,   558,   558,   558,   559,   559,   560,   560,   561,   562,
     562,   563,   564,   564,   564,   565,   566,   566,   566,   566,
     566,   566,   566,   566,   566,   566,   566,   566,   567,   568,
     568,   569,   570,   571,   572,   572,   573,   574,   574,   574,
     574,   574,   574,   574,   574,   574,   574,   574,   574,   575,
     575,   576,   576,   577,   577,   578,   578,   578,   578,   578,
     578,   579,   580,   580,   580,   580,   581,   581,   581,   582,
     583,   583,   584,   585,   585,   586,   586,   587,   587,   588,
     588,   588,   588,   588,   588,   589,   589,   589,   590,   590,
     591,   592,   592,   592,   592,   592,   592,   593,   593,   594,
     594,   595,   595,   596,   596,   597,   598,   598,   599,   599,
     600,   600,   601,   601,   602,   603,   603,   604,   605,   605,
     606,   607,   607,   608,   608,   609,   609,   609,   610,   611,
     611,   612,   613,   613,   613,   614,   614,   614,   615,   615,
     616,   616,   616,   617,   618,   618,   618,   619,   619,   620,
     621,   621,   621,   622,   622,   622,   623,   623,   623,   624,
     625,   625,   626,   626,   627,   628,   628,   629,   629,   630,
     630,   630,   631,   631,   632,   632,   633,   634,   634,   634,
     634,   634,   634,   634,   635,   635,   636,   636,   637,   637,
     638,   638,   639,   639,   639,   640,   640,   641,   641,   642,
     642,   643,   643,   644,   644,   645,   645,   645,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   647,   647,   648,
     648,   648,   648,   648,   648,   649,   649,   650,   650,   651,
     651,   652,   652,   652,   653,   653,   653,   654,   654,   654,
     655,   655,   655,   655,   656,   656,   656,   657,   657,   658,
     658,   659,   659,   659,   659,   660,   661,   661,   662,   662,
     663,   663,   664,   664,   665,   666,   666,   667,   667,   668,
     668,   669,   669,   669,   670,   670,   670,   670,   670,   670,
     671,   671,   672,   672,   672,   673,   674,   674,   674,   674,
     674,   675,   676,   676,   676,   677,   678,   678,   678,   679,
     679,   680,   680,   681,   681,   682,   682,   683,   683,   684,
     684,   685,   685,   686,   686,   687,   687,   687,   687,   688,
     689,   689,   690,   690,   691,   691,   692,   693,   693,   694,
     694,   695,   695,   696,   697,   697,   697,   697,   697,   698,
     698,   698,   699,   699,   699,   699,   700,   701,   702,   702,
     703,   703,   703,   704,   704,   705,   705,   706,   706,   707,
     707,   708,   708,   709,   709,   710,   710,   711,   711,   712,
     712,   713,   713,   713,   714,   714,   715,   715,   715,   716,
     716,   717,   718,   718,   719,   719,   720,   721,   721,   722,
     722,   723,   724,   724,   725,   725,   725,   726,   726,   726,
     727,   728,   729,   729,   730,   731,   732,   733,   733,   734,
     735,   735,   736,   737,   738,   739,   739,   740,   741,   741,
     742,   742,   742,   742,   742,   742,   742,   742,   742,   742,
     742,   742,   742,   742,   742,   742,   742,   742,   742,   742,
     742,   742,   742,   742,   742,   742,   742,   742,   742,   742,
     742,   742,   742,   742,   742,   742,   742,   742,   742,   742,
     742,   742,   742,   742,   742,   742,   742,   742,   742,   742,
     742,   742,   742,   742,   742,   742,   742,   742,   742,   742,
     742,   742,   742,   742,   742,   742,   742,   742,   742,   742,
     742,   742,   742,   742,   742,   742,   742,   742,   742,   742,
     742,   742,   742,   742,   742,   742,   742,   742,   742,   742,
     742,   742,   742,   742,   742,   742,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   744,   744,   745,   745,   745,
     745,   745,   746,   746,   747,   747,   748,   748,   749,   749,
     750,   751,   751,   752,   752,   753,   753,   754,   755,   755,
     755,   756,   756,   757,   757,   758,   758,   759,   759,   759,
     759,   760,   760,   760,   760,   761,   761,   761,   761,   761,
     761,   762,   762,   763,   764,   765,   765,   766,   767,   767,
     768,   768,   769,   770,   770,   771,   772,   772,   773,   774,
     775,   776,   776,   776,   776,   777,   777,   778,   778,   778,
     779,   780,   780,   781,   781,   782,   782,   783,   783,   784,
     784,   785,   785,   786,   786,   786,   787,   787,   787,   788,
     788,   789,   789,   790,   791,   792,   792,   793,   793,   794,
     794,   795,   795,   796,   796,   797,   798,   799,   799,   800,
     800,   800,   801,   801,   801,   801,   801,   801,   802,   802,
     803,   803,   804,   804,   805,   805,   806,   806,   807,   807,
     808,   809,   809,   809,   810,   810,   811,   811,   812,   812,
     813,   813,   814,   815,   815,   816,   816,   817,   817,   818,
     819,   820,   820,   821,   821,   822,   822,   823,   823,   824,
     824,   825,   826,   826,   827,   828,   828,   829,   830,   831,
     831,   832,   833,   833,   834,   834,   835,   835,   836,   837,
     837,   838,   839,   839,   839,   840,   841,   841,   841,   842,
     843,   843,   843,   843,   843,   843,   843,   843,   843,   843,
     843,   843,   843,   843,   843,   843,   843,   843,   843,   843,
     843,   843,   843,   843,   843,   843,   843,   843,   843,   843,
     843,   843,   843,   843,   843,   843,   843,   843,   843,   843,
     843,   843,   843,   843,   843,   843,   843,   843,   843,   843,
     843,   843,   843,   843,   843,   843,   843,   843,   843,   843,
     843,   843,   843,   843,   843,   843,   843,   843,   843,   843,
     843,   843,   843,   843,   843,   843,   843,   843,   843,   843,
     843,   843,   843
  };

  const signed char
  BisonParserImpl::yyr2_[] =
  {
       0,     2,     2,     2,     2,     2,     2,     2,     2,     1,
       0,     2,     2,     1,     2,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     2,     5,     4,     4,     5,     7,
       6,     4,     6,     8,     7,     7,     3,     3,     1,     3,
       1,     5,     5,     3,     3,     1,     3,     2,     1,     1,
       2,     1,     1,     2,     1,     1,     1,     1,     5,     5,
       5,     9,     8,     4,     0,     3,     2,     0,     3,     1,
       0,     1,     3,     2,     2,     2,     3,     4,     1,     3,
       1,     0,     2,     2,     2,     1,     1,     0,     3,     4,
       4,     4,     6,     3,     5,     2,     2,     3,     2,     2,
       8,     4,    13,    14,    11,     1,     0,     2,     0,     2,
       5,     3,     2,     3,     2,     2,     9,     2,     3,     2,
       2,     1,     1,     3,     3,     1,     1,     1,     0,     2,
       0,     1,     1,     2,     1,     1,     1,     0,     2,     0,
       2,     1,     1,     0,     3,     2,     0,     3,     0,     1,
       1,     2,     2,     1,     0,     1,     1,     3,     2,     5,
       1,     0,     5,     1,     2,     1,     0,     1,     0,     5,
      10,    11,     4,     2,     2,     1,     1,     0,    12,     6,
      14,     7,     9,    13,    15,     1,     1,     3,    11,     1,
       1,     1,     2,     0,     7,     9,     1,     0,     2,     2,
       3,     2,     1,     1,     4,     3,     1,     1,     1,     4,
       3,     2,     3,     3,     3,     2,     1,     1,     1,     2,
       2,     1,     2,     1,     0,     5,     1,     0,     2,     1,
       0,     2,     2,     0,     4,     2,     2,     1,     2,     1,
       1,     1,     1,     1,     2,     2,     1,     0,     1,     0,
       2,     2,     1,     0,     3,     1,     0,     6,     6,     5,
       1,     1,     1,     1,     3,     5,     2,     0,     1,     1,
       2,     2,     2,     0,     1,     0,     1,     0,     3,     3,
       2,     1,     1,     2,     2,     0,     1,     0,     1,     2,
       2,     1,     2,     1,     3,     3,     2,     1,     0,    11,
      13,     2,     1,     0,     1,     2,     0,     3,     0,     2,
       3,     2,     2,     0,     2,     6,     5,     7,     6,     7,
       6,     2,     1,     1,     0,     1,     3,     1,     3,     2,
       2,     1,     1,     5,     5,     3,     2,     3,     4,     2,
       1,     1,     2,     1,     0,     2,     3,     2,     2,     1,
       0,     2,     3,     2,     1,     0,     2,     2,     1,     3,
       4,     2,     1,     2,     0,     2,     0,     2,     0,     2,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     2,     3,     4,     2,     3,     5,     5,     1,     4,
       4,     1,     1,     3,     1,     1,     8,     6,     3,     0,
       2,     2,     0,     1,     1,     1,     1,     1,     3,     5,
       4,     2,     3,     2,     2,     1,     1,     1,     0,     1,
       3,     1,     2,     3,     3,     2,     3,     4,     3,     3,
       1,     2,     1,     3,     2,     2,     3,     1,     2,     2,
       0,     2,     0,     2,     2,     0,     1,     0,     1,     0,
       1,     0,     1,     1,     1,     7,     1,     1,     4,     1,
       1,     1,     1,     3,     1,     0,     1,     3,     4,     5,
       0,     6,     1,     0,     2,     1,     3,     2,     1,     3,
      10,     2,     2,     0,     1,     3,     3,     1,     2,     2,
       3,     2,     2,     2,     0,     9,     2,     1,     4,     4,
       3,     3,     3,     2,     2,     2,     1,     0,     5,     2,
       2,     2,     2,     1,     1,     3,     4,     1,     1,     1,
       1,     1,     1,     3,     3,     3,     3,     1,     1,     2,
       2,     2,     3,     5,     5,     1,     1,     2,     3,     2,
       3,     6,     1,     1,     4,     1,     6,     5,     0,     2,
       3,     3,     2,     1,     0,     1,     2,     1,     1,     1,
       2,     1,     2,     2,     0,     1,     1,     0,     1,     1,
       8,     1,     3,     8,     1,     1,     1,     2,     0,     5,
       1,     4,     1,     3,     2,     2,     1,     0,     3,     3,
       1,     2,     4,     3,     1,     1,     0,     2,     1,     0,
       3,     2,     3,     1,     0,     1,     1,     0,     2,     1,
       0,     2,     4,     2,     0,     3,     3,     0,     5,     0,
       2,     2,     0,     5,     2,     3,     3,     1,     0,     2,
       1,     1,     0,     2,     2,     0,     1,     1,     1,     2,
       1,     0,     2,     0,     4,     4,     3,     1,     0,     1,
       3,     2,     4,     3,     4,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     1,     2,     3,
       4,     1,     2,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     5,     3,     3,     3,     2,     5,
       5,     3,     3,     4,     4,     5,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     2,     1,     3,     3,
       3,     3,     3,     4,     4,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     3,     5,
       1,     4,     5,     3,     2,     1,     2,     2,     3,     2,
       2,     1,     1,     1,     1,     2,     3,     5,     1,     1,
       2,     2,     1,     1,     4,     2,     1,     3,     3,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     2,     3,     0,     2,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     3,     1,     3,     5,     2,
       3,     2,     2,     5,     5,     6,     5,     1,     1,     2,
       4,     4,     0,     3,     0,     7,     3,     7,     3,     5,
       2,     6,     3,     3,     5,     3,     2,     1,     1,     2,
       2,     5,     3,     2,     1,     1,     1,     1,     1,     3,
       2,     2,     1,     1,     1,     1,     3,     3,     1,     2,
       2,     2,     3,     5,     7,     1,     0,     4,     3,     1,
       0,     3,     3,     1,     0,     3,     3,     1,     0,     1,
       1,     2,     2,     2,     1,     1,     5,     2,     0,     1,
       6,     4,     5,     0,     2,     0,     3,     2,     2,     2,
       3,     2,     4,     3,     2,     2,     2,     4,     5,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     2,     2,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     1,     1,     1,
       1,     0,     1,     0,     1,     0,     1,     1,     1,     0,
       3,     2,     3,     2,     2,     2,     0,     4,     1,     1,
       1,     1,     0,     2,     0,     2,     0,     3,     5,     7,
       0,     2,     1,     2,     2,     1,     2,     3,     2,     2,
       3,     3,     4,     3,     3,     1,     4,     6,     1,     1,
       2,     3,     2,     1,     3,     8,     3,     0,    10,     4,
       3,     1,     3,     3,     4,     1,     1,     3,     5,     3,
       3,     1,     1,     1,     3,     1,     0,     2,     0,     2,
       0,     2,     1,     3,     3,     1,     5,     7,     8,     1,
       2,     1,     1,     8,     2,     4,     3,     2,     4,     1,
       0,     2,     0,     1,     0,     7,     2,     2,     0,     1,
       1,     0,     7,     6,     5,     5,     4,     6,     1,     2,
       1,     2,     2,     0,     3,     1,     1,     3,     2,     0,
       5,     1,     1,     0,     1,     0,     2,     0,     4,     5,
       1,     0,     6,     3,     2,     4,     5,     1,     0,     6,
       4,     1,     4,     5,     0,     2,     0,     1,     3,     4,
       4,     4,     1,     4,     6,     1,     4,     2,     5,     1,
       4,    10,     1,     4,     2,     2,     2,     2,     1,     1,
       5,     2,     2,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     2,     2,     2,     2,     1,     1,     1,     1,
       2,     2,     1,     1,     5,     4,     3,     2,     3,     2,
       2,     1,     1,     1,     1,     1,     3,     3,     3,     3,
       2,     1,     1,     2,     2,     2,     2,     2,     2,     2,
       5,     2,     3,     2,     2,     4,     4,     3,     5,     3,
       3,    14,     3,     4,     3,     3,     5,     4,     5,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     3,     3
  };


#if YYDEBUG || 1
  // YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
  // First, the terminals, then, starting at \a YYNTOKENS, nonterminals.
  const char*
  const BisonParserImpl::yytname_[] =
  {
  "\"end of input\"", "error", "\"invalid token\"", "\"string literal\"",
  "\"bytes literal\"", "\"integer literal\"", "\"floating point literal\"",
  "\"identifier\"", "\"label\"", "\"comment\"", "\"*\"", "\",\"", "\";\"",
  "\"(\"", "\")\"", "\"=\"", "\"!=\"", "\"<>\"", "\"<\"", "\"<=\"",
  "\">\"", "\">=\"", "\"|\"", "\"^\"", "\"&\"", "\"[\"", "\"]\"", "\"@\"",
  "\"@@\"", "\"||\"", "\"+\"", "\"-\"", "\"/\"", "\"~\"", "\".\"",
  "\".*\"", "\"@{\"", "\"}\"", "\"?\"", "\"@n\"", "\"<<\"", "\">>\"",
  "\"=>\"", "\"->\"", "\":\"", "\"{\"", "UNARY_NOT_PRECEDENCE",
  "UNARY_PRECEDENCE", "DOUBLE_AT_PRECEDENCE", "PRIMARY_PRECEDENCE",
  "\"ALL\"", "\"AND\"", "\"AND for BETWEEN\"", "\"ANY\"", "\"ARRAY\"",
  "\"AS\"", "\"ASC\"", "\"ASSERT_ROWS_MODIFIED\"", "\"AT\"", "\"BETWEEN\"",
  "\"BY\"", "\"CASE\"", "\"CAST\"", "\"COLLATE\"", "\"CREATE\"",
  "\"CROSS\"", "\"CURRENT\"", "\"DEFAULT\"", "\"DEFINE\"", "\"DESC\"",
  "\"DISTINCT\"", "\"ELSE\"", "\"END\"", "\"ENUM\"",
  "\"EXCEPT in set operation\"", "\"EXCEPT\"", "\"EXISTS\"", "\"EXTRACT\"",
  "\"FALSE\"", "\"FOLLOWING\"", "\"FROM\"", "\"FULL\"", "\"GROUP\"",
  "\"GROUPING\"", "\"HASH\"", "\"HAVING\"", "\"IF\"", "\"IGNORE\"",
  "\"IN\"", "\"INNER\"", "\"INTERSECT\"", "\"INTERVAL\"", "\"INTO\"",
  "\"IS\"", "\"JOIN\"", "\"LEFT\"", "\"LIKE\"", "\"LIMIT\"", "\"LOOKUP\"",
  "\"MERGE\"", "\"NATURAL\"", "\"NEW\"", "\"NO\"", "\"NOT\"", "\"NULL\"",
  "\"NULLS\"", "\"ON\"", "\"OR\"", "\"ORDER\"", "\"OUTER\"", "\"OVER\"",
  "\"PARTITION\"", "\"PRECEDING\"", "\"PROTO\"", "\"RANGE\"",
  "\"RECURSIVE\"", "\"RESPECT\"", "\"RIGHT\"", "\"ROLLUP\"", "\"ROWS\"",
  "\"SELECT\"", "\"SET\"", "\"STRUCT\"", "\"TABLESAMPLE\"", "\"THEN\"",
  "\"TO\"", "\"TRUE\"", "\"UNBOUNDED\"", "\"UNION\"", "\"USING\"",
  "\"WHEN\"", "\"WHERE\"", "\"WINDOW\"", "\"WITH\"", "\"UNNEST\"",
  "\"CONTAINS\"", "\"CUBE\"", "\"ESCAPE\"", "\"EXCLUDE\"", "\"FETCH\"",
  "\"FOR\"", "\"GROUPS\"", "\"LATERAL\"", "\"OF\"", "\"SOME\"",
  "\"TREAT\"", "\"WITHIN\"", "KW_QUALIFY_RESERVED", "\"NOT_SPECIAL\"",
  "\"ABORT\"", "\"ACCESS\"", "\"ACTION\"", "\"ADD\"", "\"AGGREGATE\"",
  "\"ALTER\"", "\"ANONYMIZATION\"", "\"ANALYZE\"", "\"ASSERT\"",
  "\"BATCH\"", "\"BEGIN\"", "\"BIGDECIMAL\"", "\"BIGNUMERIC\"",
  "\"BREAK\"", "\"CALL\"", "\"CASCADE\"", "\"CHECK\"", "\"CLAMPED\"",
  "\"CLONE\"", "\"COPY\"", "\"CLUSTER\"", "\"COLUMN\"", "\"COLUMNS\"",
  "\"COMMIT\"", "\"CONNECTION\"", "\"CONTINUE\"", "\"CONSTANT\"",
  "\"CONSTRAINT\"", "\"DATA\"", "\"DATABASE\"", "\"DATE\"", "\"DATETIME\"",
  "\"DECIMAL\"", "\"DECLARE\"", "\"DEFINER\"", "\"DELETE\"",
  "\"DESCRIBE\"", "\"DESCRIPTOR\"", "\"DETERMINISTIC\"", "\"DO\"",
  "\"DROP\"", "\"ENFORCED\"", "\"ELSEIF\"", "\"EXECUTE\"", "\"EXPLAIN\"",
  "\"EXPORT\"", "\"EXTERNAL\"", "\"FILES\"", "\"FILTER\"",
  "\"FILTER_FIELDS\"", "\"FILL\"", "\"FIRST\"", "\"FOREIGN\"",
  "\"FORMAT\"", "\"FUNCTION\"", "\"GENERATED\"", "\"GRANT\"",
  "\"GROUP_ROWS\"", "\"HIDDEN\"", "\"IMMEDIATE\"", "\"IMMUTABLE\"",
  "\"IMPORT\"", "\"INCLUDE\"", "\"INDEX\"", "\"INOUT\"", "\"INSERT\"",
  "\"INVOKER\"", "\"ITERATE\"", "\"ISOLATION\"", "\"JSON\"", "\"KEY\"",
  "\"LANGUAGE\"", "\"LAST\"", "\"LEAVE\"", "\"LEVEL\"", "\"LOAD\"",
  "\"LOOP\"", "\"MATCH\"", "\"MATCHED\"", "\"MATERIALIZED\"", "\"MAX\"",
  "\"MESSAGE\"", "\"MIN\"", "\"MODEL\"", "\"MODULE\"", "\"NUMERIC\"",
  "\"OFFSET\"", "\"ONLY\"", "\"OPTIONS\"", "\"OUT\"", "\"OVERWRITE\"",
  "\"PERCENT\"", "\"PIVOT\"", "\"POLICIES\"", "\"POLICY\"", "\"PRIMARY\"",
  "\"PRIVATE\"", "\"PRIVILEGE\"", "\"PRIVILEGES\"", "\"PROCEDURE\"",
  "\"PUBLIC\"", "KW_QUALIFY_NONRESERVED", "\"RAISE\"", "\"READ\"",
  "\"REFERENCES\"", "\"REMOTE\"", "\"RENAME\"", "\"REPEAT\"",
  "\"REPEATABLE\"", "\"REPLACE\"", "\"REPLACE_FIELDS\"", "\"RESTRICT\"",
  "\"RESTRICTION\"", "\"RETURN\"", "\"RETURNS\"", "\"REVOKE\"",
  "\"ROLLBACK\"", "\"ROW\"", "\"RUN\"", "\"SAFE_CAST\"", "\"SCHEMA\"",
  "\"SEARCH\"", "\"SECURITY\"", "\"SHOW\"", "\"SIMPLE\"", "\"SNAPSHOT\"",
  "\"SOURCE\"", "\"SQL\"", "\"STABLE\"", "\"START\"", "\"STORED\"",
  "\"STORING\"", "\"SYSTEM\"", "\"SYSTEM_TIME\"", "\"TABLE\"",
  "\"TARGET\"", "\"TRANSFORM\"", "\"TEMP\"", "\"TEMPORARY\"", "\"TIME\"",
  "\"TIMESTAMP\"", "\"TRANSACTION\"", "\"TRUNCATE\"", "\"TYPE\"",
  "\"UNIQUE\"", "\"UNPIVOT\"", "\"UNTIL\"", "\"UPDATE\"", "\"VALUE\"",
  "\"VALUES\"", "\"VOLATILE\"", "\"VIEW\"", "\"VIEWS\"", "\"WEIGHT\"",
  "\"WHILE\"", "\"WRITE\"", "\"ZONE\"", "\"EXCEPTION\"", "\"ERROR\"",
  "KW_CURRENT_DATETIME_FUNCTION", "MODE_STATEMENT", "MODE_SCRIPT",
  "MODE_NEXT_STATEMENT", "MODE_NEXT_SCRIPT_STATEMENT",
  "MODE_NEXT_STATEMENT_KIND", "MODE_EXPRESSION", "MODE_TYPE", "$accept",
  "start_mode", "opt_semicolon", "sql_statement", "next_script_statement",
  "next_statement", "unterminated_statement", "unterminated_sql_statement",
  "unterminated_script_statement", "terminated_statement",
  "sql_statement_body", "query_statement", "alter_action",
  "alter_action_list", "row_access_policy_alter_action",
  "row_access_policy_alter_action_list", "schema_object_kind",
  "alter_statement", "opt_transform_clause", "assert_statement",
  "opt_description", "analyze_statement", "opt_table_and_column_info_list",
  "table_and_column_info_list", "table_and_column_info",
  "transaction_mode", "transaction_mode_list", "opt_transaction_mode_list",
  "begin_statement", "begin_transaction_keywords", "transaction_keyword",
  "opt_transaction_keyword", "set_statement", "commit_statement",
  "rollback_statement", "start_batch_statement", "run_batch_statement",
  "abort_batch_statement", "create_constant_statement",
  "create_database_statement", "create_function_statement",
  "opt_aggregate", "opt_not_aggregate", "function_declaration",
  "function_parameter", "function_parameters_prefix",
  "function_parameters", "create_procedure_statement",
  "procedure_parameters_prefix", "procedure_parameters",
  "procedure_parameter_termination", "procedure_parameter",
  "opt_procedure_parameter_mode", "opt_returns", "opt_function_returns",
  "opt_determinism_level", "opt_language", "remote_with_connection_clause",
  "opt_remote_with_connection_clause",
  "opt_language_or_remote_with_connection", "opt_sql_security_clause",
  "sql_security_clause_kind", "as_sql_function_body_or_string",
  "opt_as_sql_function_body_or_string", "path_expression_or_string",
  "sql_function_body", "restrict_to_clause", "opt_restrict_to_clause",
  "grant_to_clause", "create_row_access_policy_grant_to_clause",
  "opt_create_row_access_policy_grant_to_clause", "opt_filter",
  "filter_using_clause", "create_privilege_restriction_statement",
  "create_row_access_policy_statement", "with_partition_columns_clause",
  "with_connection_clause", "opt_external_table_with_clauses",
  "create_external_table_statement",
  "create_external_table_function_statement", "create_index_statement",
  "create_schema_statement", "create_snapshot_table_statement",
  "create_table_function_statement", "create_table_statement",
  "append_or_overwrite", "aux_load_data_from_files_options_list",
  "aux_load_data_statement", "generic_entity_type", "generic_entity_body",
  "opt_generic_entity_body", "create_entity_statement",
  "create_model_statement", "opt_table_element_list", "table_element_list",
  "table_element_list_prefix", "table_element", "table_column_definition",
  "table_column_schema", "simple_column_schema_inner",
  "array_column_schema_inner", "struct_column_field",
  "struct_column_schema_prefix", "struct_column_schema_inner",
  "raw_column_schema_inner", "column_schema_inner",
  "generated_as_keywords", "stored_mode", "generated_column_info",
  "invalid_generated_column", "default_column_info",
  "invalid_default_column", "opt_column_info", "field_schema",
  "primary_key_column_attribute", "foreign_key_column_attribute",
  "hidden_column_attribute", "not_null_column_attribute",
  "column_attribute", "column_attributes", "opt_column_attributes",
  "opt_field_attributes", "column_position", "opt_column_position",
  "fill_using_expression", "opt_fill_using_expression",
  "table_constraint_spec", "primary_key_spec",
  "primary_key_or_table_constraint_spec", "table_constraint_definition",
  "foreign_key_reference", "opt_foreign_key_match",
  "foreign_key_match_mode", "opt_foreign_key_actions",
  "opt_foreign_key_on_update", "opt_foreign_key_on_delete",
  "foreign_key_on_update", "foreign_key_on_delete", "foreign_key_action",
  "opt_constraint_identity", "opt_constraint_enforcement",
  "constraint_enforcement", "table_or_table_function", "tvf_schema_column",
  "tvf_schema_prefix", "tvf_schema", "opt_recursive",
  "create_view_statement", "as_query", "opt_as_query",
  "opt_as_query_or_string", "opt_if_not_exists", "describe_statement",
  "describe_info", "opt_from_path_expression", "explain_statement",
  "export_data_statement", "export_model_statement", "grant_statement",
  "revoke_statement", "privileges", "opt_privileges_keyword",
  "privilege_list", "column_privilege_list", "privilege",
  "column_privilege", "privilege_name", "rename_statement",
  "import_statement", "module_statement", "index_order_by_prefix",
  "index_all_columns", "index_order_by", "index_unnest_expression_list",
  "opt_index_unnest_expression_list",
  "index_storing_expression_list_prefix", "index_storing_expression_list",
  "index_storing_list", "opt_index_storing_list", "column_list_prefix",
  "column_list", "opt_column_list", "possibly_empty_column_list",
  "grantee_list", "show_statement", "show_target",
  "opt_like_string_literal", "opt_like_path_expression", "opt_clone_table",
  "opt_copy_table", "all_or_distinct", "query_set_operation_type",
  "query_primary_or_set_operation",
  "query_primary_or_set_operation_maybe_expression", "query",
  "query_maybe_expression", "query_set_operation_prefix",
  "query_set_operation", "query_set_operation_prefix_maybe_expression",
  "query_set_operation_maybe_expression", "query_primary",
  "query_primary_maybe_expression", "select", "opt_with_anonymization",
  "opt_select_as_clause", "extra_identifier_in_hints_name",
  "identifier_in_hints", "hint_entry", "hint_with_body_prefix",
  "hint_with_body", "hint", "opt_all_or_distinct", "select_list_prefix",
  "select_list", "star_except_list_prefix", "star_except_list",
  "star_replace_item", "star_modifiers_with_replace_prefix",
  "star_modifiers", "select_column", "opt_as_alias",
  "opt_as_alias_with_required_as", "opt_as_or_into_alias", "opt_as",
  "opt_natural", "opt_outer", "int_literal_or_parameter",
  "cast_int_literal_or_parameter",
  "possibly_cast_int_literal_or_parameter", "repeatable_clause",
  "sample_size_value", "sample_size_unit", "sample_size",
  "opt_repeatable_clause", "opt_sample_clause_suffix", "sample_clause",
  "opt_sample_clause", "pivot_expression", "pivot_expression_list",
  "pivot_value", "pivot_value_list", "pivot_clause",
  "opt_as_string_or_integer", "path_expression_list",
  "path_expression_list_with_opt_parens", "unpivot_in_item",
  "unpivot_in_item_list_prefix", "unpivot_in_item_list",
  "opt_unpivot_nulls_filter", "unpivot_clause",
  "opt_pivot_or_unpivot_clause_and_alias", "table_subquery",
  "table_clause", "model_clause", "connection_clause", "descriptor_column",
  "descriptor_column_list", "descriptor_argument", "tvf_argument",
  "tvf_prefix_no_args", "tvf_prefix", "tvf", "table_path_expression_base",
  "table_path_expression", "table_primary", "opt_at_system_time",
  "on_clause", "using_clause_prefix", "using_clause",
  "opt_on_or_using_clause_list", "on_or_using_clause_list",
  "on_or_using_clause", "join_type", "join_hint", "join_input", "join",
  "from_clause_contents", "opt_from_clause", "opt_clauses_following_from",
  "opt_clauses_following_where", "opt_clauses_following_group_by",
  "where_clause", "opt_where_clause", "rollup_list", "grouping_item",
  "group_by_clause_prefix", "group_by_clause", "opt_group_by_clause",
  "having_clause", "opt_having_clause", "window_definition",
  "window_clause_prefix", "opt_window_clause", "opt_qualify_clause",
  "qualify_clause_reserved", "opt_qualify_clause_reserved",
  "qualify_clause_nonreserved", "opt_limit_offset_clause",
  "opt_having_modifier", "opt_clamped_between_modifier",
  "opt_null_handling_modifier", "with_clause_entry", "with_clause",
  "opt_with_connection_clause", "with_clause_with_trailing_comma",
  "opt_asc_or_desc", "opt_null_order", "string_literal_or_parameter",
  "collate_clause", "opt_collate_clause", "opt_default_collate_clause",
  "ordering_expression", "order_by_clause_prefix", "opt_order_by_clause",
  "parenthesized_in_rhs", "in_list_two_or_more_prefix",
  "unnest_expression", "unnest_expression_with_opt_alias_and_offset",
  "comparative_operator", "additive_operator", "multiplicative_operator",
  "shift_operator", "import_type", "any_some_all", "like_operator",
  "between_operator", "distinct_operator", "in_operator", "is_operator",
  "unary_operator", "expression", "path_expression", "dashed_identifier",
  "dashed_path_expression", "maybe_dashed_path_expression",
  "maybe_slashed_or_dashed_path_expression",
  "slashed_identifier_separator", "identifier_or_integer",
  "slashed_identifier", "slashed_path_expression",
  "array_constructor_prefix_no_expressions", "array_constructor_prefix",
  "array_constructor", "date_or_time_literal_kind", "date_or_time_literal",
  "interval_expression", "parameter_expression",
  "named_parameter_expression", "type_name", "array_type", "struct_field",
  "struct_type_prefix", "struct_type", "raw_type", "type_parameter",
  "type_parameters_prefix", "opt_type_parameters", "type",
  "templated_parameter_kind", "templated_parameter_type",
  "type_or_tvf_schema", "new_constructor_prefix_no_arg",
  "new_constructor_arg", "new_constructor_prefix", "new_constructor",
  "case_no_value_expression_prefix", "case_value_expression_prefix",
  "case_expression_prefix", "case_expression", "opt_at_time_zone",
  "opt_format", "cast_expression", "extract_expression_base",
  "extract_expression", "replace_fields_arg", "replace_fields_prefix",
  "replace_fields_expression", "filter_fields_path_expression",
  "filter_fields_arg", "filter_fields_prefix", "filter_fields_expression",
  "function_name_from_keyword", "function_call_expression_base",
  "function_call_argument", "named_argument", "lambda_argument",
  "lambda_argument_list", "function_call_expression_with_args_prefix",
  "function_call_expression", "opt_identifier",
  "partition_by_clause_prefix", "opt_partition_by_clause",
  "partition_by_clause_prefix_no_hint", "opt_partition_by_clause_no_hint",
  "cluster_by_clause_prefix_no_hint", "opt_cluster_by_clause_no_hint",
  "preceding_or_following", "window_frame_bound", "frame_unit",
  "opt_window_frame_clause", "window_specification",
  "function_call_expression_with_clauses", "opt_with_group_rows",
  "opt_over_clause", "parenthesized_expression",
  "struct_constructor_prefix_with_keyword_no_arg",
  "struct_constructor_prefix_with_keyword", "struct_constructor_arg",
  "struct_constructor_prefix_without_keyword", "struct_constructor",
  "expression_subquery", "bare_expression_subquery", "null_literal",
  "boolean_literal", "string_literal", "bytes_literal", "integer_literal",
  "numeric_literal_prefix", "numeric_literal", "bignumeric_literal_prefix",
  "bignumeric_literal", "json_literal", "floating_point_literal",
  "identifier", "label", "system_variable_expression",
  "reserved_keyword_rule", "keyword_as_identifier", "opt_or_replace",
  "opt_create_scope", "opt_unique", "opt_search", "describe_keyword",
  "opt_hint", "options_entry", "options_list_prefix", "options_list",
  "opt_options_list", "define_table_statement", "dml_statement",
  "opt_from_keyword", "opt_where_expression", "opt_assert_rows_modified",
  "opt_returning_clause", "unambiguous_or_ignore_replace_update",
  "insert_statement_prefix", "insert_statement", "copy_data_source",
  "clone_data_source", "clone_data_source_list", "clone_data_statement",
  "expression_or_default", "insert_values_row_prefix", "insert_values_row",
  "insert_values_list", "delete_statement", "opt_with_offset_and_alias",
  "update_statement", "truncate_statement", "nested_dml_statement",
  "generalized_path_expression",
  "maybe_dashed_generalized_path_expression", "generalized_extension_path",
  "update_set_value", "update_item", "update_item_list", "opt_into",
  "opt_by_target", "opt_and_expression",
  "merge_insert_value_list_or_source_row", "merge_action",
  "merge_when_clause", "merge_when_clause_list", "merge_source",
  "merge_statement_prefix", "merge_statement",
  "call_statement_with_args_prefix", "call_statement",
  "opt_function_parameters", "opt_if_exists", "opt_access",
  "drop_all_row_access_policies_statement", "on_path_expression",
  "opt_on_path_expression", "opt_drop_mode", "drop_statement",
  "non_empty_statement_list", "unterminated_non_empty_statement_list",
  "opt_execute_into_clause", "execute_using_argument",
  "execute_using_argument_list", "opt_execute_using_clause",
  "execute_immediate", "script", "statement_list", "opt_else",
  "elseif_clauses", "opt_elseif_clauses", "if_statement_unclosed",
  "if_statement", "when_then_clauses", "opt_expression", "case_statement",
  "unlabeled_begin_end_block", "begin_end_block", "opt_exception_handler",
  "opt_default_expression", "identifier_list", "variable_declaration",
  "unlabeled_loop_statement", "loop_statement",
  "unlabeled_while_statement", "while_statement", "until_clause",
  "unlabeled_repeat_statement", "repeat_statement",
  "unlabeled_for_in_statement", "for_in_statement", "break_statement",
  "continue_statement", "return_statement", "raise_statement",
  "next_statement_kind", "next_statement_kind_parenthesized_select",
  "next_statement_kind_table",
  "next_statement_kind_create_table_opt_as_or_semicolon",
  "next_statement_kind_create_modifiers",
  "next_statement_kind_without_hint", YY_NULLPTR
  };
#endif


#if YYDEBUG
  const short
  BisonParserImpl::yyrline_[] =
  {
       0,  1549,  1549,  1550,  1551,  1552,  1553,  1555,  1556,  1560,
    1560,  1563,  1570,  1577,  1586,  1593,  1602,  1603,  1607,  1608,
    1615,  1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,
    1625,  1626,  1630,  1637,  1638,  1639,  1640,  1641,  1642,  1643,
    1644,  1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,
    1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,
    1664,  1665,  1666,  1667,  1668,  1669,  1670,  1671,  1672,  1673,
    1674,  1675,  1676,  1677,  1678,  1679,  1680,  1681,  1682,  1683,
    1687,  1694,  1698,  1703,  1707,  1711,  1721,  1728,  1734,  1742,
    1749,  1756,  1762,  1768,  1775,  1781,  1787,  1791,  1798,  1802,
    1809,  1810,  1817,  1821,  1828,  1839,  1843,  1858,  1860,  1862,
    1864,  1872,  1874,  1876,  1878,  1880,  1882,  1884,  1889,  1901,
    1923,  1930,  1938,  1946,  1950,  1954,  1961,  1966,  1972,  1979,
    1980,  1984,  1988,  1995,  2002,  2008,  2014,  2018,  2025,  2029,
    2036,  2038,  2044,  2051,  2052,  2056,  2060,  2061,  2065,  2069,
    2073,  2077,  2081,  2085,  2091,  2102,  2109,  2116,  2123,  2130,
    2137,  2149,  2156,  2175,  2194,  2216,  2217,  2222,  2223,  2227,
    2234,  2241,  2250,  2254,  2261,  2265,  2272,  2289,  2293,  2300,
    2304,  2311,  2312,  2316,  2322,  2340,  2341,  2343,  2346,  2350,
    2364,  2370,  2381,  2382,  2384,  2386,  2388,  2391,  2396,  2401,
    2407,  2424,  2436,  2441,  2450,  2455,  2461,  2470,  2472,  2478,
    2479,  2482,  2486,  2493,  2495,  2501,  2505,  2512,  2516,  2530,
    2539,  2544,  2550,  2559,  2560,  2569,  2574,  2581,  2586,  2592,
    2601,  2614,  2631,  2640,  2656,  2662,  2667,  2672,  2679,  2707,
    2716,  2730,  2741,  2758,  2789,  2805,  2808,  2814,  2821,  2841,
    2858,  2862,  2869,  2873,  2877,  2896,  2909,  2910,  2914,  2921,
    2925,  2929,  2968,  2969,  2973,  2982,  2998,  3005,  3010,  3019,
    3043,  3049,  3056,  3060,  3069,  3073,  3077,  3078,  3079,  3083,
    3089,  3090,  3094,  3098,  3103,  3109,  3118,  3123,  3129,  3142,
    3147,  3153,  3163,  3173,  3180,  3187,  3194,  3202,  3209,  3216,
    3217,  3218,  3219,  3239,  3243,  3247,  3278,  3279,  3283,  3287,
    3291,  3297,  3306,  3307,  3311,  3318,  3319,  3323,  3329,  3339,
    3349,  3350,  3356,  3357,  3358,  3385,  3395,  3396,  3400,  3401,
    3402,  3408,  3415,  3423,  3429,  3430,  3434,  3435,  3439,  3443,
    3447,  3448,  3449,  3450,  3454,  3455,  3459,  3460,  3464,  3465,
    3471,  3475,  3482,  3486,  3493,  3498,  3505,  3511,  3512,  3516,
    3531,  3548,  3551,  3552,  3556,  3557,  3558,  3562,  3563,  3567,
    3574,  3578,  3585,  3589,  3593,  3600,  3607,  3614,  3618,  3625,
    3629,  3636,  3640,  3647,  3648,  3652,  3656,  3663,  3667,  3674,
    3681,  3688,  3692,  3700,  3707,  3724,  3731,  3735,  3742,  3755,
    3759,  3766,  3771,  3778,  3779,  3783,  3787,  3794,  3801,  3807,
    3808,  3812,  3816,  3823,  3830,  3831,  3835,  3839,  3846,  3850,
    3857,  3864,  3868,  3875,  3879,  3883,  3887,  3891,  3895,  3899,
    3903,  3908,  3909,  3915,  3919,  3923,  3931,  3932,  3943,  3944,
    3952,  3957,  3965,  3979,  3984,  3992,  4008,  4016,  4039,  4053,
    4061,  4083,  4091,  4092,  4108,  4109,  4139,  4150,  4162,  4172,
    4178,  4184,  4205,  4209,  4210,  4211,  4215,  4216,  4223,  4227,
    4234,  4238,  4242,  4249,  4259,  4263,  4268,  4269,  4270,  4274,
    4278,  4285,  4290,  4297,  4301,  4308,  4315,  4322,  4326,  4330,
    4337,  4341,  4348,  4352,  4357,  4362,  4367,  4373,  4379,  4387,
    4391,  4395,  4399,  4403,  4407,  4411,  4415,  4416,  4421,  4422,
    4425,  4425,  4428,  4429,  4430,  4433,  4442,  4443,  4447,  4454,
    4455,  4460,  4461,  4465,  4474,  4475,  4481,  4485,  4490,  4496,
    4502,  4506,  4513,  4514,  4518,  4524,  4527,  4533,  4538,  4541,
    4546,  4556,  4559,  4562,  4565,  4569,  4575,  4579,  4584,  4589,
    4592,  4597,  4602,  4603,  4604,  4608,  4629,  4634,  4639,  4646,
    4653,  4659,  4665,  4671,  4677,  4683,  4689,  4695,  4703,  4717,
    4721,  4728,  4735,  4742,  4749,  4753,  4760,  4767,  4771,  4775,
    4779,  4783,  4787,  4791,  4799,  4807,  4816,  4825,  4833,  4844,
    4848,  4857,  4861,  4868,  4874,  4883,  4884,  4885,  4892,  4899,
    4906,  4916,  4962,  4963,  4964,  4975,  4979,  4983,  4988,  4992,
    4999,  5003,  5010,  5017,  5019,  5025,  5029,  5047,  5048,  5052,
    5053,  5054,  5055,  5056,  5057,  5062,  5063,  5064,  5067,  5067,
    5077,  5093,  5094,  5105,  5149,  5154,  5159,  5167,  5178,  5192,
    5197,  5203,  5207,  5214,  5218,  5225,  5228,  5229,  5233,  5237,
    5244,  5248,  5256,  5260,  5267,  5273,  5274,  5278,  5284,  5285,
    5289,  5296,  5300,  5307,  5311,  5315,  5316,  5317,  5321,  5333,
    5334,  5337,  5349,  5354,  5358,  5362,  5369,  5376,  5380,  5384,
    5388,  5392,  5397,  5403,  5410,  5415,  5423,  5430,  5431,  5435,
    5443,  5444,  5445,  5449,  5455,  5461,  5465,  5466,  5467,  5470,
    5476,  5477,  5481,  5485,  5489,  5499,  5503,  5510,  5514,  5524,
    5536,  5571,  5580,  5586,  5593,  5597,  5608,  5617,  5618,  5619,
    5620,  5621,  5622,  5623,  5626,  5627,  5631,  5632,  5637,  5638,
    5643,  5644,  5649,  5661,  5673,  5689,  5690,  5699,  5703,  5711,
    5715,  5724,  5725,  5734,  5735,  5739,  5743,  5747,  5756,  5757,
    5758,  5759,  5760,  5761,  5762,  5763,  5764,  5765,  5766,  5767,
    5768,  5769,  5770,  5771,  5772,  5773,  5774,  5775,  5776,  5777,
    5803,  5804,  5805,  5809,  5813,  5817,  5834,  5844,  5854,  5860,
    5878,  5901,  5922,  5938,  5956,  5983,  6014,  6030,  6046,  6069,
    6084,  6099,  6114,  6129,  6143,  6157,  6171,  6192,  6196,  6203,
    6218,  6236,  6251,  6265,  6285,  6309,  6319,  6326,  6327,  6345,
    6346,  6364,  6364,  6364,  6369,  6369,  6369,  6374,  6389,  6413,
    6466,  6477,  6530,  6576,  6583,  6584,  6585,  6592,  6596,  6603,
    6607,  6614,  6615,  6616,  6617,  6621,  6630,  6634,  6641,  6642,
    6654,  6658,  6667,  6672,  6681,  6688,  6692,  6699,  6703,  6710,
    6714,  6721,  6721,  6721,  6724,  6725,  6726,  6727,  6728,  6732,
    6739,  6743,  6750,  6751,  6757,  6760,  6766,  6770,  6774,  6778,
    6782,  6797,  6806,  6806,  6806,  6809,  6816,  6820,  6824,  6833,
    6837,  6844,  6848,  6855,  6859,  6866,  6870,  6877,  6878,  6882,
    6886,  6893,  6897,  6902,  6906,  6910,  6916,  6926,  6932,  6943,
    6950,  6954,  6961,  6965,  6972,  6976,  6983,  6990,  6991,  6996,
    7004,  7015,  7019,  7026,  7033,  7037,  7041,  7045,  7049,  7070,
    7108,  7145,  7158,  7159,  7167,  7168,  7172,  7179,  7198,  7209,
    7216,  7224,  7230,  7238,  7247,  7262,  7263,  7267,  7271,  7278,
    7279,  7283,  7287,  7294,  7295,  7299,  7303,  7310,  7311,  7316,
    7317,  7321,  7330,  7337,  7349,  7350,  7354,  7360,  7366,  7369,
    7373,  7381,  7404,  7408,  7412,  7416,  7420,  7431,  7435,  7442,
    7446,  7453,  7462,  7466,  7473,  7477,  7481,  7488,  7494,  7500,
    7504,  7511,  7522,  7531,  7543,  7574,  7608,  7617,  7618,  7622,
    7631,  7632,  7636,  7645,  7654,  7663,  7693,  7700,  7733,  7737,
    7753,  7754,  7755,  7756,  7757,  7758,  7759,  7760,  7761,  7762,
    7763,  7764,  7765,  7766,  7767,  7768,  7769,  7770,  7771,  7772,
    7773,  7774,  7775,  7776,  7777,  7778,  7779,  7780,  7781,  7782,
    7783,  7784,  7785,  7786,  7787,  7788,  7789,  7790,  7791,  7792,
    7793,  7794,  7795,  7796,  7797,  7798,  7799,  7800,  7801,  7802,
    7803,  7804,  7805,  7806,  7807,  7808,  7809,  7810,  7811,  7812,
    7813,  7814,  7815,  7816,  7817,  7818,  7819,  7820,  7821,  7822,
    7823,  7824,  7825,  7826,  7827,  7828,  7829,  7830,  7831,  7832,
    7833,  7834,  7835,  7836,  7837,  7838,  7839,  7840,  7841,  7842,
    7843,  7844,  7845,  7846,  7847,  7848,  7859,  7860,  7861,  7862,
    7863,  7864,  7865,  7866,  7867,  7868,  7869,  7870,  7871,  7872,
    7873,  7874,  7875,  7876,  7877,  7878,  7879,  7880,  7881,  7882,
    7883,  7884,  7885,  7886,  7887,  7888,  7889,  7890,  7891,  7892,
    7893,  7894,  7895,  7896,  7897,  7898,  7899,  7900,  7901,  7902,
    7903,  7904,  7905,  7906,  7907,  7908,  7909,  7910,  7911,  7912,
    7913,  7914,  7915,  7916,  7917,  7918,  7919,  7920,  7921,  7922,
    7923,  7924,  7925,  7926,  7927,  7928,  7929,  7930,  7931,  7932,
    7933,  7934,  7935,  7936,  7937,  7938,  7939,  7940,  7941,  7942,
    7943,  7944,  7945,  7946,  7947,  7948,  7949,  7950,  7951,  7952,
    7953,  7954,  7955,  7956,  7957,  7958,  7959,  7960,  7961,  7962,
    7963,  7964,  7965,  7966,  7967,  7968,  7969,  7970,  7971,  7972,
    7973,  7974,  7975,  7976,  7977,  7978,  7979,  7980,  7981,  7982,
    7983,  7984,  7985,  7986,  7987,  7988,  7989,  7990,  7991,  7992,
    7993,  7994,  7995,  7996,  7997,  7998,  7999,  8000,  8001,  8002,
    8003,  8004,  8005,  8006,  8007,  8008,  8009,  8010,  8011,  8012,
    8013,  8014,  8015,  8016,  8017,  8021,  8021,  8024,  8025,  8026,
    8027,  8028,  8031,  8031,  8033,  8033,  8035,  8035,  8038,  8039,
    8043,  8050,  8054,  8061,  8065,  8072,  8073,  8077,  8084,  8085,
    8086,  8089,  8089,  8092,  8097,  8103,  8108,  8114,  8118,  8125,
    8130,  8140,  8141,  8142,  8146,  8154,  8158,  8170,  8181,  8218,
    8239,  8368,  8381,  8397,  8404,  8411,  8415,  8422,  8430,  8431,
    8438,  8442,  8449,  8456,  8460,  8467,  8476,  8480,  8484,  8493,
    8500,  8512,  8516,  8526,  8534,  8541,  8546,  8571,  8576,  8580,
    8587,  8594,  8598,  8605,  8609,  8616,  8617,  8621,  8622,  8626,
    8631,  8637,  8641,  8648,  8654,  8660,  8669,  8675,  8683,  8694,
    8698,  8707,  8708,  8712,  8720,  8727,  8731,  8738,  8742,  8749,
    8751,  8758,  8763,  8770,  8775,  8782,  8792,  8799,  8804,  8810,
    8811,  8813,  8817,  8828,  8836,  8866,  8872,  8878,  8932,  8936,
    8942,  8946,  8952,  8957,  8963,  8968,  8977,  8981,  8988,  8993,
    8999,  9007,  9012,  9018,  9027,  9032,  9039,  9044,  9050,  9056,
    9065,  9070,  9076,  9083,  9089,  9099,  9105,  9114,  9119,  9125,
    9137,  9144,  9146,  9157,  9163,  9169,  9174,  9180,  9184,  9191,
    9196,  9203,  9210,  9212,  9223,  9230,  9232,  9243,  9250,  9262,
    9264,  9275,  9287,  9289,  9300,  9313,  9329,  9342,  9360,  9367,
    9371,  9377,  9389,  9390,  9391,  9395,  9406,  9407,  9408,  9412,
    9418,  9419,  9420,  9422,  9424,  9426,  9428,  9429,  9430,  9431,
    9432,  9434,  9436,  9438,  9439,  9443,  9445,  9447,  9455,  9457,
    9459,  9473,  9474,  9475,  9476,  9477,  9478,  9480,  9482,  9484,
    9486,  9488,  9489,  9490,  9492,  9493,  9495,  9497,  9499,  9501,
    9503,  9506,  9508,  9510,  9512,  9514,  9519,  9524,  9528,  9530,
    9532,  9534,  9545,  9549,  9554,  9558,  9562,  9564,  9568,  9570,
    9572,  9574,  9576,  9578,  9580,  9582,  9584,  9586,  9588,  9590,
    9592,  9594,  9596,  9598,  9600,  9602,  9604,  9606,  9608,  9610,
    9612,  9614,  9616
  };

  void
  BisonParserImpl::yy_stack_print_ () const
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << int (i->state);
    *yycdebug_ << '\n';
  }

  void
  BisonParserImpl::yy_reduce_print_ (int yyrule) const
  {
    int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):\n";
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG

  BisonParserImpl::symbol_kind_type
  BisonParserImpl::yytranslate_ (int t)
  {
    // YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to
    // TOKEN-NUM as returned by yylex.
    static
    const short
    translate_table[] =
    {
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    24,     2,
      13,    14,    10,    30,    11,    31,    34,    32,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    44,    12,
      18,    15,    20,    38,    27,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    25,     2,    26,    23,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    45,    22,    37,    33,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    16,    17,    19,    21,    28,
      29,    35,    36,    39,    40,    41,    42,    43,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315
    };
    const int user_token_number_max_ = 547;

    if (t <= 0)
      return symbol_kind::S_YYEOF;
    else if (t <= user_token_number_max_)
      return YY_CAST (symbol_kind_type, translate_table[t]);
    else
      return symbol_kind::S_YYUNDEF;
  }

} // zetasql_bison_parser
#line 19820 "bazel-out/k8-fastbuild/bin/zetasql/parser/bison_parser.bison.cc"

#line 9620 "zetasql/parser/bison_parser.y"


void zetasql_bison_parser::BisonParserImpl::error(
    const zetasql_bison_parser::location& loc,
    const std::string& msg) {
  *error_message = msg;
  *error_location = zetasql::ParseLocationPoint::FromByteOffset(
      parser->filename().ToStringView(), loc.begin.column);
}
