#line 1 "bazel-out/k8-fastbuild/bin/zetasql/parser/flex_tokenizer.flex.cc"

#line 3 "bazel-out/k8-fastbuild/bin/zetasql/parser/flex_tokenizer.flex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer ZetaSqlFlexLexer

#ifdef yyalloc
#define ZetaSqlalloc_ALREADY_DEFINED
#else
#define yyalloc ZetaSqlalloc
#endif

#ifdef yyrealloc
#define ZetaSqlrealloc_ALREADY_DEFINED
#else
#define yyrealloc ZetaSqlrealloc
#endif

#ifdef yyfree
#define ZetaSqlfree_ALREADY_DEFINED
#else
#define yyfree ZetaSqlfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexTokenizer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 315
#define YY_END_OF_BUFFER 316
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1464] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      316,  314,  310,  310,  314,  260,  314,  297,  260,  278,
      279,  281,  298,  282,  299,  307,  300,  274,  274,  308,
      309,  291,  283,  292,  302,  305,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  296,  270,  295,  301,  314,  314,  314,  313,  310,
      313,  313,  313,  312,  313,  313,  313,  313,  292,  314,
      314,  310,    0,    0,    0,  284,  260,  259,    0,    0,
      311,  311,  260,  259,    0,    0,  290,    0,    0,  280,

        0,    0,  276,    0,    0,    0,  277,  276,  274,  271,
      271,  271,  309,    0,    0,    0,    0,    0,    0,  288,
      285,  286,  289,  293,  287,    0,    0,    0,    0,  304,
      304,  306,  303,    0,    0,    0,    0,    0,    0,    0,
      269,    0,  269,  269,  269,  269,  269,  269,  269,   14,
       18,    0,    0,    0,  265,  265,  269,  269,  269,  269,
       25,  269,  269,  269,  269,  269,  269,  269,  269,  269,
       63,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  106,  269,  269,
      111,  122,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  149,  269,  155,  157,
      269,  160,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  262,  262,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  231,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  270,    0,  269,
      294,    0,    0,    0,    0,  312,    0,    0,  312,  259,
      261,  260,  261,  260,    0,  311,  311,    0,    0,    0,
        0,    0,  273,  273,    0,    0,    0,  277,  277,  276,
      273,    0,  276,  275,    0,  309,  309,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  269,  269,
      269,    5,  269,    7,  269,  269,   10,  269,   12,  269,
       15,  269,    0,    0,    0,  265,  264,    0,  265,  264,
        0,  269,  269,  269,  269,  267,  267,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,   67,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,   91,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      126,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  141,  269,  269,  144,  269,  269,  148,  150,
      269,  269,  269,  269,  269,  269,  162,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  262,  259,    0,
      262,  259,    0,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  199,  201,  269,  269,
      269,  269,  269,  207,  269,  269,  269,  269,  269,  213,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      270,    0,    0,    0,  261,    0,    0,  261,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  276,  277,    0,
      276,  276,  272,  309,    0,  309,  309,    0,    0,    0,
        0,    0,    0,    0,    0,  304,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  264,  266,  265,  266,  265,  269,
      269,  269,  269,  269,  267,  264,    0,  267,  264,    0,

      269,   26,  269,   28,   29,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,   33,  269,  269,   46,  269,
       48,   50,  269,  269,  269,  269,  269,   58,  269,  269,
       64,   65,  269,   69,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,   86,  269,  269,
      269,  269,  269,   94,   95,  269,  269,  269,  269,  103,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  120,  269,  269,  269,  124,  125,  269,  128,
      269,  269,  131,  269,  133,  269,  135,  269,  137,  269,
      269,  269,  269,  269,  269,  269,    0,    0,    0,    0,

        0,    0,    0,  152,  269,  269,  158,  269,  269,  269,
      164,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  263,  262,  263,  262,  269,  269,  181,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  200,  269,  269,  269,  269,  269,  208,  269,  269,
      210,  269,  269,  269,  269,  269,  269,  269,  269,  226,
      228,  229,  269,  269,  235,  269,  237,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  247,  269,  269,  251,
      269,  269,  269,  255,  269,  258,    0,    0,  261,    0,
      261,    0,    0,  276,  276,  309,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
        0,    0,    2,  269,  269,  269,    8,  269,  269,   13,
      269,  266,    0,    0,  266,    0,    0,   19,   20,  269,
      269,  269,  268,  267,  268,  267,   24,  269,   30,  269,
       32,  269,  269,  269,  269,  269,  269,  269,  269,  269,
       45,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,   70,  269,  269,  269,  269,  269,
      269,  269,  269,  269,   83,   84,   85,  269,   89,  269,
      269,  269,  269,  269,   98,   99,  269,  269,  269,  269,
      269,  269,  269,  114,  115,  113,  269,  269,  269,  269,

      269,  269,  269,  130,  132,  134,  269,  138,  269,  142,
      269,  145,  269,  269,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  153,  269,  269,  269,
      161,  163,  269,  269,  269,  223,  269,  269,  269,  269,
      269,  269,  176,  269,  269,  263,    0,    0,  263,    0,
        0,  179,  180,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  196,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  215,  269,  269,  269,  269,
      221,  269,  269,  269,  269,  234,  269,  269,  239,  269,
      269,  269,  242,  269,  244,  245,  248,  269,  269,  252,

      253,  269,  269,  257,  261,  261,    0,    0,    0,    1,
        0,    0,    3,    4,  269,  269,  269,   16,    0,  266,
        0,  266,  269,  269,  269,  268,    0,    0,  268,    0,
        0,  269,  269,  269,  269,   36,   38,  269,  269,  269,
      269,  269,   44,  269,  269,  269,  269,  269,  269,   55,
       57,  269,  269,  269,   66,  269,   71,   74,  269,  269,
       78,  269,   80,  269,  269,   87,  269,  269,   93,  269,
      269,  269,  102,  269,  104,  105,  107,  269,  269,  110,
      269,  116,  269,  269,  269,  269,  269,  269,  269,  136,
      269,  269,  269,  146,  269,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  269,  156,  269,  269,  269,
      269,  269,  169,  269,  269,  269,  269,  269,  177,  269,
        0,  263,    0,  263,  269,  269,  184,  185,  186,  269,
      269,  269,  193,  195,  269,  198,  269,  203,  204,  269,
      206,  209,  269,  211,  214,  216,  269,  218,  219,  269,
      225,  269,  269,  269,  269,  269,  269,  241,  240,  269,
      243,  246,  269,  250,  254,  256,    1,    0,    1,  269,
        9,  269,  269,  266,  266,   21,  269,  269,    0,  268,
        0,  268,   27,   31,   34,   35,   37,  269,  269,  269,
      269,  269,   47,  269,  269,   52,   53,   54,   56,  269,

      269,  269,  269,  269,    0,    0,   72,    0,    0,  269,
        0,    0,    0,   76,   77,   79,  269,   82,  269,  269,
       92,  269,  269,  269,  269,  269,  269,  112,  269,  269,
      121,  269,  119,  269,  129,  139,  269,  143,  147,    0,
        0,  151,    0,    0,    0,  154,  159,  269,  269,  167,
      269,  269,  172,  173,  269,  269,  178,  263,  263,  269,
      269,  269,  188,  190,  269,  194,  269,  269,  269,  269,
      217,  269,  269,  269,  269,  269,  269,  269,  269,  224,
      269,    1,  269,  269,  269,  269,  269,  268,  268,  269,
       40,  269,   43,   42,   49,   51,   60,  269,  269,   62,

       68,   73,    0,    0,    0,    0,    0,    0,    0,  269,
        0,    0,    0,   81,  269,  269,   96,  269,  101,  269,
      269,  269,  269,  118,  269,  127,  269,    0,    0,    0,
      269,  269,  168,  269,  269,  269,  269,  269,  269,  269,
      191,  197,  269,  205,  212,  269,  269,  269,  269,  269,
      269,  236,  269,  249,    6,  269,  269,  269,  269,  269,
      269,  269,  269,    0,    0,    0,    0,    0,    0,    0,
        0,   75,  269,   90,   97,  269,  108,  109,  117,  123,
      269,    0,    0,  165,  166,  170,  174,  171,  182,  269,
      269,  269,  269,  202,  269,  269,  227,  230,  269,  233,

      238,  269,  269,   22,   23,   39,   41,   59,  269,    0,
        0,    0,  269,  100,  269,    0,    0,  175,  183,  187,
      269,  269,  269,  269,  269,  269,  269,  269,    0,  269,
      269,    0,    0,  269,  192,  220,  222,  232,  269,  269,
      269,    0,  269,  140,    0,  269,   11,  269,   61,    0,
       88,  269,  269,    0,  189,  269,   73,  269,  269,  269,
      269,   17,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   87,   88,    1,   89,   90,   91,
       92,   93,   94,   95,   96,   97,   98,   99,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,  100,  101,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,  102,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,  103,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,  104,  105,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[106] =
    {   0,
        1,    2,    3,    4,    1,    1,    2,    1,    1,    1,
        1,    1,    1,    1,    2,    5,    2,    6,    6,    2,
        1,    1,    1,    1,    1,    1,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    1,    6,    1,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    2,    2,    2
    } ;

static const flex_int16_t yy_base[1582] =
    {   0,
        0,    0,  105,    0, 2351, 2335,    0,    0,  209,  215,
     2353, 9394,  225,  231, 2290,  208,  217, 9394,  206, 9394,
     9394, 9394, 9394, 9394,  216,  234, 2300,  226,  240, 9394,
      262,  250, 2287,  224, 9394,  278,  382,  482,  560,  526,
      617,  587,  637,  638,  683,  694,  742,  747,  754,  781,
      829,  831,  885,  959, 1012,  887,  897,  824,  954, 1013,
     1033, 9394,  185, 2224, 9394, 2170,  165, 2169, 9394,  288,
      264, 2237, 2235,    0,  229, 2144,  209, 2146, 2210, 2174,
     2161,  303, 2058,  211, 2067, 9394,  255, 2144,  307,  312,
     9394, 2131,  216, 2101,  318,  320, 9394,  477,  322, 9394,

     2092, 2086,  313, 1992,  251, 1988, 2042,  324,  331, 9394,
      333, 1083, 1101,  350, 2003, 2003, 1912,  267, 1922, 9394,
     9394, 9394, 9394, 9394, 9394, 1117,  355, 1992, 1981,  353,
      342, 9394, 9394, 1818,  279, 1818, 1146,  370, 1871, 1866,
     1124, 1250, 1140, 1197,  468,  473,  470, 1239,  527,  663,
      554, 1738,  288, 1689,  321,  279,  592,  642,  697,  953,
      613, 1021,  888, 1245, 1140, 1198,  947,  690, 1287,  758,
      765,  951, 1111, 1298, 1201,  778, 1321, 1147,  803, 1337,
     1341, 1300, 1351, 1363, 1379, 1385,  894,  824, 1376, 1397,
     1437, 1403, 1131, 1426, 1445, 1444, 1467, 1492, 1496, 1502,

     1491, 1533, 1520, 1525, 1112, 1539, 1340, 1566, 1561, 1553,
     1381, 1567, 1555, 1595, 1586, 1605, 1560, 1614, 1624, 1640,
     1621,  382,  336, 1669, 1665, 1721, 1660, 1674, 1667, 1676,
     1722, 1735, 1729, 1745, 1781, 1775, 1774, 1788, 1780, 1827,
     1799, 1802, 1833, 1617, 1854, 1847, 1894, 1866, 1863, 1897,
     1853, 1910, 1916, 1918, 1917, 1930, 1944,  413,  376, 1997,
     9394, 1934, 1634, 1630, 1704,    0,  414,  392, 9394, 9394,
      464,  467,  428,  429,  401, 9394, 1676,  471, 2035, 2041,
      473, 1649, 9394,  622, 1970, 1557, 1565, 1623,  478,  505,
     1110,  482,  485, 2052,  559, 2071, 2088,  571, 1590, 2028,

     1483, 1487,  575, 2145, 2151,  593, 1552, 2153, 2105, 1458,
     1461,  609, 2217, 2224,  613, 1524, 2328,  621, 1515, 1491,
      462,  464,  466,  545,  611, 1396,  596, 1391, 2258, 2277,
     2334, 2286, 2403, 2409, 2438, 2447, 2469, 2516, 2542, 2551,
     2577, 2596, 2401, 1353, 1358,  566, 1439,  714,  575, 1387,
      742, 2622, 2669, 2688, 2713,  641,  597, 1275, 1880, 2237,
     2546, 1430, 1021, 2242, 2355, 2286, 2667, 2293, 1687, 2561,
     2498, 1328, 2647, 2716, 2069, 2717, 2736, 2737, 1454, 2406,
     2764, 1930, 2223, 2766, 2475, 2312, 2772, 2784, 2572, 2781,
     2817, 2810, 2801, 2828, 2830, 2846, 2864, 2871, 2875, 2890,

     2891, 1979, 2894, 2898, 2909, 2613, 2918, 2937, 2942, 2948,
     2962, 2965, 2982, 2977, 3001, 3005, 2949, 3003, 2809, 2837,
     2996, 3020, 3026, 3040, 3046, 3051, 3053, 3059, 3065, 3066,
     3077, 3080, 3094, 3100, 3105, 3114, 3117, 3123, 3128, 3190,
     3161, 3173, 3176, 3158, 3182, 3184, 3188, 3199, 3212, 3236,
     3227, 3197, 3243, 3240, 3277, 3284, 3288,  677, 1365,  746,
      703, 1340,  776, 3289, 3297, 3273, 3301, 3302, 3327, 3313,
     3346, 3341, 3348, 3352, 3364, 3367, 3361, 3372, 3391, 3410,
     3402, 3405, 3417, 3419, 3421, 3426, 3445, 3464, 3446, 3466,
     3469, 3471, 3490, 3494, 3519, 3502, 3518, 3514, 3547, 3521,

     3523, 3566, 3568, 3564, 3571, 3585, 3583, 3587, 3594, 3602,
     3611, 3622, 3638, 3630, 3637, 3642, 3639, 3685, 3645, 3658,
      532, 1324,  538,  644,  736,  746, 1293,  775,  783, 1236,
     3724,  793, 3731, 3751, 1225,  821,  823,  827, 1203,  870,
      877,  959, 9394, 3757,  998, 3773, 3779, 1152,  835, 3795,
     1001, 3801, 3905, 1142,  913, 3898, 3929, 1006, 3935, 3961,
     1140, 1016, 1033, 4065, 1130, 1066, 1115,  766,  758,  809,
      871,  948, 3748, 1017,  976, 3980, 4071, 4040, 4103, 4135,
     4178, 4184, 4211, 4230, 9394, 1043, 1116, 1053, 1072, 4239,
     4305, 4334, 4353, 4372, 1192, 1039, 1127, 1085, 1033, 1134,

     4378, 4397, 4425, 4446, 4488, 4507, 4516, 4539, 4558, 4579,
     4620, 4611, 4649, 4672, 4702, 1196, 3908, 3836, 1254, 1276,
     2151, 3939, 3830, 1730, 3944, 2569, 3953, 2635, 3969, 1752,
     2555, 2696, 4035, 2723, 4060, 3758, 3987, 4130, 4217, 4105,
     2971, 4251, 4359, 3852, 4095, 4231, 4294, 3989, 4190, 4233,
     4305, 3992, 4157, 4264, 4395, 4486, 4513, 4520, 4542, 4406,
     4445, 4614, 4667, 4668, 4661, 4705, 4711, 4706, 4724, 4720,
     4736, 4757, 4536, 4759, 4598, 4758, 4762, 4775, 4784, 4787,
     4788, 4809, 4800, 4803, 4810, 4825, 4821, 4831, 4822, 4848,
     4852, 4864, 4826, 4859, 4874, 4873, 4948, 1192, 1019,  999,

      895, 1144,  868, 4889, 4878, 4908, 4903, 4946, 4945, 4947,
     4950, 4934, 4957, 4976, 4967, 4998, 5003, 5005, 5010, 5009,
     5012, 5021, 1229, 1230, 1165, 1233, 5028, 5054, 5031, 5040,
     5059, 5065, 5066, 5069, 5075, 5088, 5085, 5087, 5103, 5114,
     5129, 5118, 5123, 5132, 5139, 5151, 5178, 5152, 5166, 5167,
     5182, 5187, 5193, 5194, 5216, 5203, 5238, 5247, 5249, 5250,
     5231, 5254, 5259, 5261, 5260, 5295, 5276, 5298, 5302, 5305,
     5314, 5320, 5340, 5336, 5353, 5358, 5331, 5367, 5370, 5374,
     5384, 5396, 5389, 5405, 5411, 5417,  931, 1242, 1505, 1284,
     1425, 5478,  924, 1290, 1375, 5484,  921, 5500,  915, 5506,

      903, 5610, 1447,    0,  889,  874, 1660, 1307, 9394, 1414,
     1679, 1748, 5430, 5471, 5433, 5487, 5497, 5506, 5500, 5501,
     5572, 1636, 1670,  880, 1286, 1480,  876, 5502, 5507, 5565,
     5594, 5606, 1723, 1770, 1679, 1821, 5535, 5616, 5549, 5599,
     5609, 5625, 5644, 5658, 5660, 5667, 5672, 5622, 5670, 5673,
     5674, 5716, 5685, 5718, 5719, 5720, 5722, 5731, 5732, 5734,
     5741, 5770, 5779, 5780, 5786, 5789, 5790, 5792, 5823, 5828,
     5805, 5835, 5839, 5848, 5849, 5851, 5853, 5887, 5858, 5892,
     5897, 5894, 5869, 5899, 5908, 5912, 5915, 5925, 5950, 5941,
     5943, 5959, 5960, 5956, 5961, 5966, 5989, 5994, 6003, 6005,

     6009, 6014, 6019, 6023, 6025, 6030, 6053, 6067, 6042, 6058,
     6072, 6069, 6079, 6073, 1806, 1839, 1897, 1939, 1543, 6145,
      860, 1615,  781, 6095,  672,  674, 6076, 6086, 6136, 6137,
     6139, 6141, 6175, 6186, 6193, 6195, 6196, 6208, 6202, 6231,
     6245, 6209, 6246, 6257, 6261, 1837, 1884,  752, 2001, 2031,
      733, 6247, 6260, 6262, 6295, 6305, 6306, 6264, 6316, 6317,
     6320, 6321, 6322, 6332, 6336, 6355, 6365, 6339, 6374, 6369,
     6375, 6380, 6378, 6392, 6419, 6390, 6431, 6425, 6421, 6435,
     6436, 6437, 6441, 6474, 6484, 6483, 6487, 6494, 6496, 6497,
     6503, 6530, 6500, 6509, 6510, 6547, 6548, 6551, 6552, 6553,

     6558, 6564, 6569, 6567, 1980, 2040,    0,  713, 1963, 9394,
     2030, 2045, 6573, 6594, 6600, 6611, 6612, 6616, 1992, 2184,
     2078, 2134, 6617, 6621, 6623, 2123, 2151,  702, 2088, 2097,
      652, 6633, 6642, 6658, 6660, 6670, 6671, 6672, 6676, 6685,
     6686, 6714, 6687, 6705, 6730, 6728, 6733, 6735, 6742, 6747,
     6749, 6777, 6751, 6786, 6790, 6795, 6797, 6863, 6828, 6841,
     6815, 6844, 6834, 6848, 6850, 6862, 6859, 6885, 6875, 6896,
     6897, 6906, 6912, 6918, 6913, 6923, 6924, 6949, 6960, 6954,
     6965, 6966, 6971, 6970, 6982, 6972, 6983, 7018, 6977, 6976,
     7025, 7013, 7030, 7027, 7029, 2087, 2090,    0, 2171,    0,

     1728,    0,  646,  598, 1885, 7039, 7036, 7046, 7043, 7055,
     7074, 7077, 7080, 7084, 7091, 7090, 7097, 7119, 7100, 7110,
     2155, 2361, 2197, 2220, 7103, 7128, 7138, 7144, 7145, 7154,
     7148, 7155, 7161, 7164, 7198, 7175, 7197, 7202, 7208, 7209,
     7212, 7213, 7219, 7214, 7218, 7223, 7256, 7235, 7239, 7266,
     7268, 7270, 7272, 7281, 7277, 7282, 7284, 7295, 7297, 7299,
     7320, 7326, 7330, 7332, 7336, 7343, 9394, 2179, 9394, 7346,
     7345, 7349, 7363, 2216, 2237, 7347, 7382, 7384, 2253, 2367,
     2296, 2405, 7359, 7388, 7400, 7402, 7405, 7407, 7411, 7409,
     7436, 7421, 7423, 7448, 7465, 7427, 7438, 7450, 7464, 7471,

     7466, 7481, 7483, 7492, 7560, 1768, 9394,  577,  552, 7525,
      395, 1761,  389, 7512, 7514, 7530, 7547, 7541, 7556, 7567,
     7566, 7569, 7568, 7578, 7583, 7594, 7611, 7617, 7631, 7624,
     7620, 7647, 7640, 7642, 7658, 7662, 7673, 7668, 7669, 2237,
     2300, 9394, 2316,    0,  457, 7675, 7688, 7691, 7689, 7704,
     7706, 7717, 7711, 7718, 7733, 7737, 7732, 2263, 2374, 7747,
     7759, 7752, 7766, 7770, 7775, 7780, 7795, 7801, 7789, 7817,
     7782, 7823, 7816, 7830, 7832, 7846, 7850, 7869, 7880, 7853,
     7883, 9394, 7892, 7881, 7894, 7895, 7898, 2270, 2390, 7917,
     7910, 7933, 7929, 7936, 7939, 7943, 7945, 7948, 7952, 7958,

     7959, 9394, 2330, 2352, 1864,    0,  437, 2017,  386, 7974,
     7958,  270,  275, 7964, 8000, 8003, 8002, 8036, 8005, 8038,
     8047, 8048, 8050, 8049, 8053, 8054, 8059, 2372, 2408,    0,
     8096, 8095, 8065, 8106, 8107, 8109, 8116, 8118, 8123, 8125,
     8121, 8151, 8160, 8164, 8167, 8169, 8170, 8173, 8174, 8176,
     8186, 8180, 8187, 8215, 8224, 8225, 8228, 8231, 8235, 8238,
     8240, 8241, 8277, 2418, 2425,    0, 2239,    0,  314,  290,
     1970, 8254, 8284, 8279, 8289, 8296, 8293, 8298, 8299, 8300,
     8310, 2446, 2492, 8305, 8315, 8326, 8341, 8343, 8344, 8353,
     8356, 8354, 8387, 8357, 8370, 8398, 8372, 8399, 8408, 8405,

     8415, 8417, 8418, 8420, 8421, 8424, 8434, 8435, 8451, 2489,
        0,  282, 8465, 8463, 8477, 2523, 2554, 8472, 8478, 8479,
     8484, 8493, 8490, 8523, 8521, 8528, 8507, 8532, 2596, 8541,
     8543,    0, 2586, 8554, 8548, 8550, 8569, 8571, 8585, 8584,
     8587, 2595, 8600, 8591,    0, 8602, 8604, 8606, 8607, 2632,
     8633, 8635, 8648, 2620, 8649, 8654, 9394, 8655, 8658, 8664,
     8671, 8661, 9394, 8738, 8744, 8750, 8756, 8758, 8764,  280,
     8770, 8776, 8782,  278, 8788, 8790, 8796, 8802, 8808, 8814,
     8820, 8826, 8832, 8838, 8844,  272, 8850, 8856, 8862, 8868,
     8874, 8880, 8886, 8892, 8898, 8904, 8910,  269,  257, 8916,

     8922, 8928, 8934, 8940, 8946, 8952, 8958, 8964, 8970, 8975,
     8981, 8987, 8993, 8999, 9005, 9011, 9017, 9023, 9029, 9035,
     9041, 9047, 9053, 9059, 9065,  244, 9071, 9077, 9083, 9089,
     9095, 9101, 9107, 9113, 9119, 9125, 9131, 9137, 9143, 9148,
     9154, 9160, 9166, 9172, 9178, 9184, 9190, 9196, 9202, 9208,
     9214, 9220, 9226, 9232, 9238,  217, 9244, 9250, 9256, 9262,
     9268, 9274, 9280, 9286, 9292, 9298, 9304, 9310, 9316, 9322,
     9328, 9334, 9340, 9346, 9352, 9358, 9363, 9369, 9375, 9381,
     9387
    } ;

static const flex_int16_t yy_def[1582] =
    {   0,
     1463,    1, 1463,    3,    1,    1,    1,    1, 1464, 1464,
     1463, 1463, 1463, 1463, 1463, 1465, 1466, 1463, 1467, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1468, 1468, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463,   37,   38,   38,
       40,   40,   40,   40,   41,   41,   40,   40,   40,   40,
       41,   40,   40,   40,   40,   40,   41,   40,   40,   40,
       40, 1463, 1469, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1466, 1463, 1463, 1470, 1471, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1465, 1463, 1465, 1466,
     1463, 1463, 1467, 1463, 1467, 1472, 1463, 1463, 1473, 1463,

     1463, 1463, 1474, 1463, 1463, 1463, 1475, 1474, 1476, 1463,
     1463, 1463, 1463, 1477, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1478, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1479, 1463, 1463,
       40, 1463,   40,   40,  144,  144,  144,  144,  144,  144,
      144, 1463, 1463, 1463, 1480, 1481,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,

      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144, 1482, 1483,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144, 1484, 1484, 1463,
     1463, 1463, 1463, 1463, 1485, 1486, 1487, 1487, 1463, 1463,
     1488, 1489, 1490, 1491, 1492, 1463, 1463, 1493, 1463, 1463,
     1494, 1495, 1463, 1463, 1463, 1463, 1463, 1496, 1497, 1498,
     1463, 1463, 1498, 1499, 1500, 1463, 1463, 1501, 1502, 1463,

     1463, 1463, 1503, 1463, 1463, 1504, 1505, 1463, 1463, 1463,
     1463, 1506, 1463, 1463, 1507, 1508, 1463, 1509, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1510, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,
     1510, 1510, 1463, 1463, 1463, 1511, 1463, 1511, 1512, 1463,
     1512, 1510, 1510, 1510, 1510, 1513, 1514,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,

      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355, 1510,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355, 1515, 1463, 1515,
     1516, 1463, 1516,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,

      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
     1517, 1518, 1519, 1520, 1521, 1521, 1521, 1522, 1522, 1522,
     1463, 1523, 1463, 1463, 1524, 1525, 1463, 1526, 1527, 1463,
     1526, 1526, 1463, 1463, 1528, 1463, 1463, 1529, 1530, 1463,
     1531, 1463, 1463, 1532, 1533, 1463, 1463, 1534, 1463, 1463,
     1535, 1536, 1537, 1463,  564, 1538, 1539, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1463, 1541, 1542, 1543, 1544, 1540,
     1540, 1540, 1540, 1540, 1545, 1463, 1545, 1546, 1463, 1546,

     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615, 1463, 1547, 1463, 1463,

     1463, 1463, 1463,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615, 1548, 1549, 1550, 1551,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615, 1552, 1553, 1553, 1554,
     1554, 1463, 1555, 1556, 1556, 1463, 1557, 1463, 1558, 1463,

     1559, 1463, 1560,  802,  802, 1561, 1562, 1463, 1463, 1463,
     1463, 1463,  615,  615,  615,  615,  615,  615,  615,  615,
      615, 1563, 1563, 1563, 1564, 1564, 1564,  615,  615,  615,
      615,  615, 1565, 1566, 1567, 1568,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,

      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615, 1463, 1463, 1463, 1463, 1569, 1463,
      920, 1570, 1571, 1463, 1463, 1463,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615, 1572, 1572, 1572, 1573, 1573,
     1573,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,

      615,  615,  615,  615, 1574, 1575,  802, 1561, 1463, 1463,
     1463, 1463,  615,  615,  615,  615,  615,  615, 1563, 1563,
     1564, 1564,  615,  615,  615, 1565, 1565, 1565, 1567, 1567,
     1567,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615, 1463, 1463, 1576, 1463,  920,

     1570,  920,  920, 1571, 1577,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
     1572, 1572, 1573, 1573,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615, 1463, 1463, 1463,  615,
      615,  615,  615, 1563, 1564,  615,  615,  615, 1565, 1565,
     1567, 1567,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,

      615,  615,  615,  615, 1463, 1578, 1463, 1463, 1463,  615,
     1463, 1463, 1463,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615, 1463,
     1463, 1463, 1463,  920, 1571,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615, 1572, 1573,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615, 1463,  615,  615,  615,  615,  615, 1565, 1567,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,

      615, 1463, 1463, 1463, 1578, 1205, 1205, 1579, 1580,  615,
     1463, 1463, 1463,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615, 1463, 1463, 1576,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615, 1463, 1463, 1205, 1579, 1205, 1205, 1580,
     1581,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615, 1463, 1463,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,

      615,  615,  615,  615,  615,  615,  615,  615,  615, 1463,
     1205, 1580,  615,  615,  615, 1463, 1463,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615, 1463,  615,
      615, 1576, 1463,  615,  615,  615,  615,  615,  615,  615,
      615, 1463,  615,  615, 1576,  615,  615,  615,  615, 1463,
      615,  615,  615, 1463,  615,  615, 1463,  615,  615,  615,
      615,  615,    0, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,

     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463
    } ;

static const flex_int16_t yy_nxt[9500] =
    {   0,
       12,   13,   14,   13,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       60,   61,   20,   12,   21,   62,   60,   63,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   60,   61,   20,   64,   21,   65,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   66,   67,   68,   69,   70,   14,   70,   69,
       69,   71,   69,   69,   69,   69,   69,   69,   69,   72,
       69,   73,   74,   74,   69,   69,   69,   69,   69,   69,
       69,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   69,   69,   69,
       69,   74,   75,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   76,   77,   78,
       13,   14,   13,   88,   94,   17,   13,   14,   13,   91,
       92,   17,  283,   80,  270,   81,   82,   82,   82,   80,
       96,   81,   82,   82,   82,   98,   98,   98,  259,   97,
       99,  108,  260,  109,  109,  100,  124,  125,  101,  283,
      102,  103,  103,  262,  263,  108,  111,  109,  109,   95,
      270,   89,  543,  113,  113,  113,   91,   92,  114,   95,
      111,  120,  121,  122,  283,  112,  115,  266,  116,  126,
      126,  126,  268,  283,  127,  266,  269,  350,  111,   82,
       82,   82,  128, 1371,  129,  130,  131,  262,  263,  262,

      263, 1371,  111,  132,   82,   82,   82,  112,   89,   87,
      272,   66,   67,   68,   91,   92, 1411,   66,   67,   68,
       93,  274,  276,  277,  279,  280,  347,   83,   84,   85,
      103,  103,  351,   83,   84,   85,  104,  105,  106,  285,
      286,  290,  290,  284,  462,  292,  108,  292,  109,  109,
      293,  293,  296,  297,  291,  300,  301,  304,  305,  131,
      131,  111,  133, 1205,  117,  118,  119,  309,  310, 1205,
      131,  131,  313,  314,  348,  284,  343,  344,  258,  521,
      134,  135,  136,  137,  137,  137,  291,  459,  138,  463,
       83,   84,   85,  111,  267,  524,  139, 1371,  140,  141,

      141,  142,  308,  276,  277,   83,   84,   85,  141,  143,
      144,  145,  141,  141,  146,  141,  141,  141,  141,  147,
      141,  148,  141,  141,  141,  149,  150,  151,  141,  141,
      141,  141,  141,  141,  308,  460,  529,  270,  141, 1366,
      141,  143,  144,  145,  141,  141,  146,  141,  141,  141,
      141,  147,  141,  148,  141,  141,  141,  149,  150,  151,
      141,  141,  141,  141,  141,  141,  259,  268, 1105,  526,
      260,  269,  270,  279,  280,  533,  534, 1313,   98,   98,
       98,  530,   95,   99,  152,  153,  154,  155,  100,  289,
      156,  101,  568,  102,  276, 1205,  141,  332,  141,  542,

      542,  141,  293,  293,  569,  333,  570,  334,  157,  141,
      141,  141,  158,  141,  141,  335,  159,  527,  141,  141,
       89,  141,  290,  290,  568,  160,  141,  141,  141,  332,
      141, 1463,  161,  141, 1463,  291,  569,  333,  570,  334,
      157,  141,  141,  141,  158,  141,  141,  335,  159,  523,
      141,  141,  168,  141,  276,  141,  169,  160,  141,  141,
      170,  296,  297, 1309,  161, 1463,  171,  291, 1463,  172,
      340,  585,  141,  546,  547,  571,  141,  304,  305,  104,
      105,  106,  141,  585,  168,  259,  162,  141,  169,  260,
      141, 1308,  170,  163,  141,  552,  553,  164,  171,  141,

      165,  172,  340,  166,  141,  599,  167,  571,  141, 1105,
      141,  313,  314,  178,  141,  559,  560,  179,  162,  348,
      141,  180,  141,  564,  565,  163,  141,  181,  351,  164,
      182,  141,  165,  183,  537,  166,  537,  352,  167,  538,
      538,  141,  141,  141,  572,  178,  596,  141, 1244,  179,
      600,  141,  141,  180,  173, 1182,  174,  141,  141,  181,
      175,  176,  182,  141,  186,  183,  177,  184,  141,  352,
      141,  141,  187,  141,  353,  141,  572,  141,  141,  141,
      185,  141,  270,  141,  573,  574,  173,  354,  174,  141,
      141,  341,  175,  176,  597,  141,  186,  268,  177,  184,

      141,  269,  141,  141,  187, 1180,  353,  342,  141,  141,
      141,  270,  185,  141,  188,  189,  346,  587,  141,  354,
      141,  190,  191,  341,  807,  141,  141,  192,  193,  355,
      460,  141,  141,  141,  194,  373, 1124,  141,  195,  342,
      141,  526,  141,  141,  349,  589,  188,  189,  458,  724,
      141,  788,  141,  190,  191, 1122,  463,  141,  141,  192,
      193,  355,  697,  141,  141,  141,  194,  373,  141,  141,
      195,  697,  196,  197,  141,  141,  141,  198,  461,  726,
      201,  199,  141,  529,  202,  141,  141,  200,  203,  527,
      141,  790, 1105,  141,  204,  533,  534,  141,  808,  527,

      141,  809,  379,  141,  196,  197,  386,  205,  141,  198,
      141,  206,  201,  199,  141,  141,  202,  141,  141,  200,
      203,  207,  141,  141,  141,  141,  204,  208,  530,  141,
      808,  141,  536,  809,  379,  141,  530,  533,  386,  205,
      794,  794,  141,  206,  538,  538,  549,  141,  393,  810,
      250,  546,  141,  207,  141,  141,  141,  215,  251,  208,
      209,  216, 1100,  141,  252,  217,  141,  141,  210,  141,
      211,  218,  212,  141,  219,  213,  214,  220,  141, 1022,
      393,  810,  250, 1020,  141,  807,  141,  795,  795,  215,
      251, 1007,  209,  216,  541,  541,  252,  217,  141,  141,

      210,  141,  211,  218,  212,  141,  219,  213,  214,  220,
      141,  141,  811,  240,  562,  141,  141,  241,  361,  141,
      242,  243,  141,  406,  555,  141,  555,  244,  141,  552,
      245,  221,  549,  141,  141,  536,  247,  246,  248,  141,
      141,  249,  523,  141,  811,  240,  141,  141,  141,  241,
      361,  141,  242,  243,  141,  406,  926,  141,  356,  244,
      141,  357,  245,  221,  222,  141,  141,  223,  247,  246,
      248,  141,  141,  249,  371,  141,  542,  542,  141,  141,
      141,  141,  812,  358,  253,  224,  225,  254,  255,  226,
      372,  380,  141,  227,  141,  697,  141,  256,  141,  228,

      546,  547,  141,  552,  553,  229,  371,  141,  559,  560,
      923,  141,  141,  141,  812,  358,  253,  224,  225,  254,
      255,  226,  372,  380,  141,  227,  141,  562,  141,  256,
      141,  228,  559,  922,  141,  564,  565,  229,  230,  141,
      231,  835,  232,  141,  833,  233,  234,  141,  823,  141,
      141,  235,  236,  141,  237,  141,  141,  238,  359,  141,
      608,  826,  239,  141,  317,  360,  141,  141,  804,  805,
      230,  141,  231,  257,  232,  141,  141,  233,  234,  141,
      585,  141,  141,  235,  236,  141,  237,  141,  141,  238,
      359,  141,  608,  585,  239,  141,  824,  360,  141,  141,

      294,  294,  113,  113,  113,  257,  827,  114,  141,  294,
      294,  294,  294,  294,  294,  115,  317,  116,  126,  126,
      126,  585,  540,  127,  540,  351,  807,  541,  541,  595,
      834,  128,  802,  129,  130,  131,  598,  836,  600,  141,
      141,  294,  294,  294,  294,  294,  294,  137,  137,  137,
      141,  562,  138,  555,  141,  381,  141,  438,  141,  141,
      139,  418,  140,  549,  141,  142,  141,  141,  141,  348,
      141,  141,  141,  950,  141,  141,  141,  365,  366,  367,
      329,  368,  141,  141,  392,  141,  141,  381,  141,  438,
      141,  141,  141,  418,  920,  921,  141,  585,  141,  141,

      141,  133,  141,  117,  118,  119,  141,  141,  141,  365,
      366,  367,  329,  368,  289,  141,  392,  141,  951,  134,
      135,  136,  141,  141,  141,  330,  141,  141,  369,  141,
      141,  141,  924,  925,  947,  270,  536,  141,  370,  791,
      141,  270,  331,  141,  385,  597,  141,  270,  152,  153,
      154,  317,  317,  317,  141,  141,  318,  330,  141,  141,
      369,  141,  141,  141,  319,  336,  320,  141,  337,  141,
      370,  362,  141,  141,  331,  141,  385,  321,  141,  338,
      141,  322,  948,  460,  141,  363,  463,  323,  141,  339,
      141,  364,  270,  324,  826,  527,  789,  336,  325,  141,

      337,  601,  141,  362,  141,  141,  852,  794,  794,  321,
      141,  338,  141,  322,  141,  374,  141,  363,  375,  323,
      141,  339,  141,  364,  376,  324,  141,  382,  141,  383,
      325,  377,  378,  601,  141,  523,  141,  530,  852,  827,
      398, 1009,  141,  141,  384,  141,  141,  374,  725,  387,
      375,  388,  326,  327,  328,  389,  376,  141,  141,  382,
      141,  383,  390,  377,  378,  141,  391,  141,  141,  141,
      723,  620,  398, 1009,  394,  141,  384,  141,  396,  141,
      395,  387,  141,  388,  397,  440,  141,  389,  399,  141,
      400,  141,  795,  795,  390,  588,  141,  141,  391,  141,

      141,  141,  401,  620,  141,  402,  394,  141,  141,  141,
      396,  141,  395,  141,  141,  407,  397,  440,  141,  403,
      399,  141,  400,  141,  141,  141,  445, 1006,  141,  404,
      141,  141,  405,  529,  401,  408,  141,  402,  409,  141,
      141,  141,  141,  417,  586,  141,  137,  407,  141,  804,
      805,  403,  137,  141,  141, 1010,  141,  141,  445,  141,
      419,  404,  141,  141,  405,  410,  411,  408,  607,  141,
      409,  141,  141,  141,  141,  417,  412,  413,  530,  575,
      141,  414,  415,  141,  416,  420,  141, 1010, 1021,  141,
      141,  141,  419,  141,  421,  141,  317,  410,  411,  630,

      607,  141,  567,  141,  141,  141,  422, 1005,  412,  413,
      526,  423,  424,  414,  415,  141,  416,  420,  425,  141,
      141,  141,  141,  426,  141,  141,  421,  141,  430,  566,
      141,  630,  428,  827,  429,  562,  432,  141,  422,  427,
      433,  141,  431,  423,  424,  920,  921,  141,  141,  126,
      425,  141,  141,  141,  437,  426,  141,  126,  527,  436,
      430,  141,  141,  555,  428,  141,  429,  141,  432,  141,
      141,  427,  433,  141,  431,  113,  434,  435,  141,  141,
      141,  141,  113,  141,  141,  141,  437,  439,  141,  141,
      444,  436,  443,  141,  141,  141,  446,  141,  141,  141,

      447,  549,  141,  441,  442,  141,  141,  451,  434,  435,
      141,  141,  141,  141,  141,  141,  141, 1102, 1103,  439,
      141,  141,  444,  141,  443,  448,  141,  141,  446,  449,
      141,  141,  447,  141,  289,  441,  442,  141,  141,  451,
      141,  823,  141,  141,  141,  141,  141,  457,  450,  141,
      141,  452,  141,   98,  453,  141,   98,  448,  454,  141,
      536,  449,  141,  141,  455,  141,  141,  456,  141,  141,
      356,  807,  141,  357,  141, 1019,  804,  141,  276,  457,
      450,  141,  141,  452,  141,  141,  453, 1030,  141,  824,
      454,  141,  475,  141,  141,  141,  455,  141,  141,  456,

      141,  141,  141,  464,  141,  141,  478,  479,  465, 1011,
      141,  476,  141,  617,  141,  523,  141,  141,   82,  141,
      141,  141,  477,  824,  475,  141,  141,  141, 1027,  141,
     1102, 1103, 1031,   82,  141,  464,  141,  141,  478,  479,
      465, 1011,  141,  476,  141,  617,  141,  466,  141,  467,
      141,  141,  468,  141,  477,  480,  856,  141,  141,  469,
      470,  481,  471,  482,  141,  472,  473,  141,  474,  485,
     1306, 1307,  483,  141,  141,  585, 1028,  345,  141,  466,
      484,  467,  141,  486,  468, 1012,  862,  480,  856,  141,
      141,  469,  470,  481,  471,  482,  141,  472,  473,  141,

      474,  485,  141,  141,  483,  141,  141,  487,  141,  141,
      141,  490,  484,  488,  491,  486,  141, 1012,  862,  141,
      141,  489,  141,  597,  494,  141,  141,  141,  492,  585,
      141,  493,  498,  141,  141,  141, 1096,  497,  137,  487,
      141,  141,  947,  490,  141,  488,  491,  141,  141, 1311,
     1312,  141,  141,  489,  495,  141,  494,  141,  141,  141,
      492,  141,  141,  493,  498,  141, 1306, 1307, 1096,  497,
      496,  499,  141, 1097,  600,  141,  141,  316,  141,  141,
      500,  141,  141,  512,  501,  315,  495,  141,  503, 1121,
      948,  141,  141,  141,  141,  509, 1105,  510,  141,  141,

      502, 1102,  496,  499,  141, 1097,  311,  141,  141,  141,
      141,  141,  500,  141,  141,  512,  501,  602,  126,  141,
      503,  504,  141,  141,  141,  141,  141,  509,  505,  510,
      141,  141,  502,  506,  511,  507, 1098,  948,  141,  508,
      141,  141,  141,  141,  141,  141,  141,  513,  515,  602,
      514,  141,  516,  504,  141,  141,  517,  141,  141,  141,
      505,  141,  518,  141,  519,  506,  511,  507, 1098,  141,
      141,  508,  141, 1099,  141,  141,  141,  141,  141,  513,
      515, 1371,  514,  520,  516,  526, 1368,  141,  517,  141,
      141,  141,  307,  141,  518,  141,  519,  585,  137,  137,

      137,  141, 1167,  138,  141, 1099,  306,  141,  141,  950,
      302,  139,  113,  140,  299,  520,  142,  298,  658, 1368,
     1369,  141,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,  527, 1167,   82,   98,   98,   98, 1123,
      141,   99,   98,  531,   98,  824,  100,   99,  529,  101,
      658,  102,  100,  289,  951,  101, 1168,  102,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  294,
      294,   98,  113,  113,  113, 1169,  287,  114,  294,  294,
      294,  294,  294,  294,  951,  115,  585,  116, 1168,  113,
      544,  113,   98,  530,  114,  625, 1030,  282,  141,  152,

      153,  154,  115,  626,  116, 1181,  281, 1169,  141,  273,
      294,  294,  294,  294,  294,  294,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  625, 1027,  113,
      141,  827, 1240,   91, 1241,  626, 1175,  104,  105,  106,
      141, 1031,  826,  104,  105,  106,  126,  126,  126,  271,
     1031,  127,  126,  550,  126,  264, 1179,  127,   82,  128,
      270,  129,  130,  131, 1240,  128, 1241,  129,  130,  131,
      556,  556,  265,  117,  118,  119, 1028,  141,  853,  556,
      556,  556,  556,  556,  556,  141, 1174,  827,   96,  823,
      117,  118,  119,  126,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  126, 1028,  270,  126, 1243,  948,  141,
      853,  556,  556,  556,  556,  556,  556,  141,  137,  137,
      137,  823, 1259,  138, 1282,  137,  557,  137,  950,  133,
      138,  139,  124,  140,  264,  133,  142,  824,  139, 1243,
      140, 1368, 1369,  142,   82,  826,  265,  134,  135,  136,
      951,   96,  141,  134,  135,  136, 1282,  264,  585,  137,
      137,  137,  141,  633,  138,  603,  141,  604,  947,  824,
       82,  141,  139,  951,  140, 1027,  141,  142,  137,  137,
      137,  141,  605,  138,  141, 1328,  609,  137,  137,  137,
      827,  139,  138,  140,  141,  633,  142,  603,  141,  604,

      139,  576,  140,  141,  585,  142, 1028,  577,  141,  261,
      123,  107,   86,  141,  605,  141,  948, 1328,  609,  152,
      153,  154,  141, 1028,  612,  141,  152,  153,  154,  317,
      317,  317,  141,  576,  318,  137,  137,  137,  636,  577,
      138,  141,  319,  616,  320, 1329, 1330,  141,  139, 1031,
      140,  141, 1463,  142,  141,  321,  612,  141,   79,  322,
      152,  153,  154, 1258,  141,  323,  947, 1364,  578, 1288,
      636,  324, 1027,  141,   79,  616,  325, 1329, 1330,  152,
      153,  154,  950,  141,  141, 1463, 1365,  321,  152,  153,
      154,  322,  610, 1463,  141, 1463, 1463,  323, 1030, 1364,

      578,  611, 1382,  324,  137,  137,  137, 1289,  325,  138,
      137,  137,  137, 1030,  948,  138,  141,  139, 1365,  140,
     1028, 1463,  142,  139,  610,  140,  141,  951,  142, 1463,
      326,  327,  328,  611, 1382,  141,  152,  153,  154,  137,
      137,  137, 1383, 1031,  138,  141,  579,  631,  137,  137,
      137, 1463,  139,  138,  140, 1302, 1463,  142, 1031, 1463,
     1463,  139, 1463,  140, 1463, 1463,  142,  141,  580, 1410,
      137,  137,  137, 1463, 1383,  138, 1416,  141,  579,  631,
     1463, 1463, 1463,  139,  581,  140, 1463, 1302,  142,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      580, 1410,  137, 1463,  141,  152,  153,  154, 1416, 1463,
     1463,  152,  153,  154,  141,  635,  581,  137,  137,  137,
     1463, 1463,  138, 1463, 1463, 1463, 1463,  141,  619, 1463,
      139, 1417,  140, 1463, 1429,  142,  141,  141, 1463, 1463,
      152,  153,  154,  137,  137,  137,  141,  635,  138,  152,
      153,  154,  137,  137,  137,  582,  139,  138,  140,  141,
      619,  142, 1432, 1417, 1463,  139, 1429,  140, 1463,  141,
      142,  152,  153,  154,  606,  141, 1463,  583,  137,  137,
      137,  141, 1433,  138, 1463,  141, 1463,  582, 1463,  141,
      141,  139, 1463,  140, 1432,  141,  142,  137,  137,  137,

      141,  141,  138,  141, 1463,  618,  606,  141,  858,  583,
      139,  141,  140,  141, 1433,  142,  640,  141,  152,  153,
      154,  141,  141,  137,  137,  137,  584,  141,  138, 1463,
     1442, 1445,  141,  141, 1450,  141,  139,  618,  140, 1463,
      858,  142,  662,  141,  152,  153,  154, 1463,  640, 1463,
      590, 1463,  141,  152,  153,  154, 1463, 1463,  584, 1463,
     1454,  141, 1442, 1445, 1463, 1457, 1450, 1463, 1463,  141,
      137,  137,  137,  621,  662,  138,  141,  622,  860,  152,
      153,  154,  590,  139,  141,  140,  141, 1463,  142,  137,
      137,  137, 1454,  141,  138, 1463,  141, 1457,  152,  153,

      154,  141,  139,  591,  140,  621,  613,  142,  141,  622,
      860,  614,  615, 1463,  137,  137,  137, 1463,  141,  138,
     1463, 1463,  141, 1463,  152,  153,  154,  139,  141,  140,
      863, 1463,  142, 1463, 1463,  591,  592, 1463,  613, 1463,
     1463, 1463,  593,  614,  615,  141,  141,  627, 1463,  141,
      623, 1463,  594,  624,  141,  141,  141,  141, 1463, 1463,
     1463, 1463,  863, 1463,  628,  141,  141,  629,  592, 1463,
     1463,  152,  153,  154,  593,  141,  141,  141,  141,  627,
     1463,  141,  623, 1463,  594,  624, 1463,  141,  141,  141,
      152,  153,  154,  141,  632,  141,  628,  141,  141,  629,

     1463,  141,  637,  141,  634,  141, 1463,  141,  141,  638,
      141,  141,  639,  141, 1463,  152,  153,  154,  641, 1463,
      141,  642, 1463,  141, 1463,  141,  632,  141, 1463,  646,
      141, 1463, 1463,  141,  637,  141,  634,  141,  141,  141,
      141,  638,  141,  141,  639,  141,  141,  643,  677,  141,
      641, 1463,  141,  642,  645,  141,  141,  141,  647,  141,
      644,  646,  141, 1463, 1463,  648,  141,  141, 1463,  141,
      141,  141,  141,  649,  650,  141,  678, 1463,  141,  643,
      677,  141, 1463,  651, 1463,  141,  645, 1463,  141,  141,
      647,  141,  644,  141,  652, 1463, 1463,  648,  141,  141,

      141,  141,  653,  141,  141,  649,  650,  141,  678,  654,
      141, 1463,  655, 1463,  141,  651, 1463,  141,  656,  141,
      141,  657, 1463,  141, 1463,  141,  652,  141, 1463,  141,
      141,  660,  141,  141,  653,  141,  141,  141,  141, 1463,
      659,  654,  141,  661,  655, 1463,  141,  141,  141, 1463,
      656,  141,  141,  657, 1463,  141, 1463,  141,  663,  141,
     1463,  141,  141,  660, 1463,  141,  141,  664, 1463,  141,
      141,  141,  659, 1463, 1463,  661,  141,  141,  141,  141,
      141,  141,  666,  665, 1463,  667,  675,  141,  141,  141,
      663,  141,  668, 1463,  141,  669, 1463,  871,  141,  664,

     1463,  141, 1463,  141,  141,  141,  141,  671,  141,  141,
      141,  141, 1463,  141,  666,  665,  141,  667,  675,  141,
      141,  141, 1463,  141,  668,  141,  141,  669,  670,  871,
      141,  672,  141,  141,  141,  141,  141,  141,  141,  671,
      141,  673,  141,  141,  141,  674,  676, 1463,  141,  141,
     1463, 1463,  679,  141, 1463,  141, 1463,  141, 1463,  141,
      670, 1463,  141,  672,  141,  141,  141,  141, 1463,  141,
      681,  680,  141,  673,  141,  141,  141,  674,  676,  141,
      141,  141,  141,  684,  679,  141, 1463,  141,  141,  685,
      141,  141,  141,  682,  141,  687,  683,  141,  141,  686,

     1463,  141,  681,  680,  141,  141,  141,  141,  690,  141,
      691,  141,  141,  688,  141,  684,  141,  141,  689,  141,
      141,  685,  141,  141,  141,  682,  141,  687,  683,  141,
      141,  686,  692,  141,  141, 1463,  141,  141,  141,  141,
      690,  141,  691,  141,  141,  688,  141,  694,  141,  693,
      689,  141,  141,  141, 1463,  141,  141,  141, 1463, 1463,
     1463,  141,  141,  695,  692,  141,  141,  141, 1463,  696,
     1463,  141, 1463, 1463, 1463,  141,  141, 1463,  141,  694,
     1463,  693, 1463, 1463,  141,  141, 1463,  141,  141,  141,
      141,  697,  697,  697,  141,  695,  698,  141,  704,  141,

      141,  696,  141,  705,  699,  141,  700, 1463,  707,  142,
     1463,  141,  141,  141,  709,  141,  708,  141,  710,  141,
      706,  141,  141,  141, 1463, 1463,  141,  141,  141,  141,
      704,  715,  141, 1463,  141,  705,  141,  141,  141, 1463,
      707,  141,  711,  141,  141,  141,  709,  141,  708,  141,
      710,  141,  706,  141, 1463,  141,  141,  712,  141,  141,
      141, 1463, 1463,  715,  713,  141,  141,  714,  141,  141,
      141,  716,  141,  141,  711,  141, 1463, 1463,  717,  141,
     1463, 1463,  141,  141, 1463, 1463, 1463,  718,  141,  712,
     1463, 1463,  701,  702,  703, 1463,  713,  141,  141,  714,

     1463,  141,  729,  716,  141,  719,  141,  141, 1463, 1463,
      717,  141,  141,  141,  141, 1463,  141,  141,  141,  718,
     1463,  721,  720,  141, 1463,  722,  141,  141,  141,  728,
      141,  141,  731,  727,  729, 1463,  141,  719,  141,  733,
      141,  141,  141, 1463,  141,  141, 1463,  730,  141,  141,
      141, 1463,  141,  721,  720,  141,  141,  722,  141,  141,
      141,  728,  141,  141,  731,  727,  141,  732,  141, 1463,
      141,  733,  141,  141,  141,  141,  734,  141, 1463,  730,
      141,  141,  736,  735,  141,  141,  737,  141,  141, 1463,
      141,  141,  739,  141,  738, 1463,  141,  740,  141,  732,

      141,  141,  141,  141,  741,  742,  141,  141,  734,  141,
     1463,  141,  141,  141,  736,  735, 1463,  141,  737,  141,
      141,  743,  141,  141,  739,  141,  738, 1463,  141,  740,
      141,  141,  141,  141,  141,  141,  741,  742,  141,  141,
      744,  141, 1463,  141,  141,  745,  141,  747,  141,  141,
      141,  746,  141,  743, 1463,  141,  141, 1463,  141, 1463,
      141, 1463,  141,  141, 1463,  141,  141,  749, 1463,  748,
     1463,  141,  744,  141,  141,  141,  141,  745,  141,  747,
      141,  141,  141,  746,  141,  141,  750,  141,  141,  752,
      141, 1463,  141,  141,  751,  141,  753,  141,  141,  749,

      141,  748, 1463,  141, 1463,  141,  141,  141,  141, 1463,
      141, 1463,  754, 1463,  755, 1463,  141,  141,  750,  141,
     1463,  752, 1463,  141, 1463,  141,  751,  141,  753,  141,
      141,  141,  141,  141,  759,  141,  756,  141, 1463,  757,
      141,  141,  141,  141,  754, 1463,  755,  141,  141,  764,
      141,  141,  141,  761, 1463,  141,  758,  141,  141,  760,
      763,  141,  141,  141, 1463,  141,  759, 1463,  756, 1463,
     1463,  757, 1463,  141, 1463,  141,  141,  762, 1463,  141,
      141,  764,  141, 1463,  141,  761,  141, 1463,  758,  141,
      141,  760,  763,  141,  141,  141,  765,  141,  767, 1463,

      141, 1463, 1463,  141,  768,  766, 1463,  141,  141,  762,
      141,  769,  141,  770,  141,  771,  141,  772,  141, 1463,
      774,  773,  141,  141,  141,  141,  141,  141,  765,  141,
      767,  141,  141,  141, 1463,  141,  768,  766, 1463,  141,
      141,  775,  141,  769,  141,  770,  141,  771,  141,  772,
      141,  141,  774,  773,  141,  141,  141,  776,  141,  141,
     1463,  141,  779,  141,  778,  141,  141,  141,  783,  141,
      777,  141,  141,  775,  141, 1463,  780,  141,  141,  782,
      781,  141,  141,  141,  141, 1463, 1463,  141,  786,  776,
      785,  141, 1463,  141,  779, 1463,  778,  141,  141,  141,

      783,  141,  777,  141, 1463, 1463,  141, 1463,  780,  141,
      141,  782,  781,  141,  141, 1463,  141, 1463,  784,  141,
      786, 1463,  785, 1463,  141,   98,   98,   98, 1463,  141,
       99, 1463,   98,   98,   98,  100, 1463,   99,  101, 1463,
      102, 1463,  100, 1463, 1463,  101,  141,  102, 1463, 1463,
      784, 1463,   98,  792,   98, 1463,  141,   99,  113,  113,
      113, 1463,  100,  114, 1463,  101, 1463,  102, 1463, 1463,
     1463,  115, 1463,  116,  113,  113,  113, 1463, 1463,  114,
      113,  796,  113, 1463,  141,  114, 1463,  115, 1463,  116,
     1463, 1463,  141,  115, 1463,  116,  126,  126,  126,  866,

     1463,  127,  126,  126,  126, 1463, 1463,  127, 1463,  128,
     1463,  129,  130,  131, 1463,  128,  141,  129,  130,  131,
     1463, 1463, 1463, 1463,  141, 1463,  104,  105,  106, 1463,
     1463,  866, 1463,  104,  105,  106,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317, 1463, 1463,  317,
     1463, 1463, 1463,  104,  105,  106,  141, 1463, 1463,  117,
      118,  119,  141, 1463,  141, 1463, 1463, 1463,  855, 1463,
      141, 1463, 1463, 1463, 1463,  117,  118,  119,  874,  133,
      851,  117,  118,  119, 1463,  133,  141, 1463,  141, 1463,
     1463, 1463, 1463, 1463,  141, 1463,  141,  134,  135,  136,

      855, 1463,  141,  134,  135,  136,  126,  798,  126, 1463,
      874,  127,  851, 1463, 1463,  556,  556, 1463,  141,  128,
     1463,  129,  130,  131,  556,  556,  556,  556,  556,  556,
      137,  137,  137, 1463,  141,  138,  137,  137,  137, 1463,
     1463,  138,  141,  139, 1463,  140, 1463, 1463,  142,  139,
     1463,  140, 1463,  850,  142, 1463,  556,  556,  556,  556,
      556,  556,  137,  800,  137,  141,  141,  138, 1463, 1463,
      141, 1463, 1463,  141,  141,  139, 1463,  140,  141,  141,
      142,  137,  137,  137,  854,  850,  138,  141, 1463,  133,
      857, 1463, 1463, 1463,  139,  141,  140,  141,  859,  142,

     1463, 1463,  141,  141, 1463,  141, 1463,  134,  135,  136,
      141,  141,  861,  141, 1463,  141,  854, 1463,  141,  141,
     1463,  141,  857,  141, 1463,  813,  881,  141,  867, 1463,
      859,  152,  153,  154, 1463,  141, 1463,  152,  153,  154,
     1463,  137,  137,  137,  861,  141,  138,  141, 1463, 1463,
      141, 1463, 1463,  141,  139,  141,  140,  813,  881,  142,
      867,  141, 1463,  152,  153,  154,  317,  317,  317,  141,
     1463,  318,  137,  137,  137, 1463, 1463,  138,  864,  319,
      815,  320,  152,  153,  154,  139,  141,  140, 1463, 1463,
      142, 1463,  321,  141,  141, 1463,  322, 1463, 1463, 1463,

     1463,  141,  323,  865,  137,  137,  137, 1463,  324,  138,
      864, 1463,  815,  325, 1463,  814, 1463,  139,  141,  140,
     1463,  141,  142, 1463,  321,  875,  141, 1463,  322,  141,
     1463,  141, 1463,  816,  323,  865,  137,  137,  137,  141,
      324,  138,  152,  153,  154,  325, 1463,  814, 1463,  139,
      870,  140, 1463,  141,  142, 1463,  141,  875, 1463, 1463,
     1463,  141, 1463,  141,  141,  816, 1463,  326,  327,  328,
     1463,  141, 1463,  152,  153,  154,  868, 1463,  817,  137,
      137,  137,  870,  882,  138,  137,  137,  137,  141, 1463,
      138,  141,  139, 1463,  140, 1463,  141,  142,  139, 1463,

      140, 1463, 1463,  142, 1463,  152,  153,  154,  868, 1463,
      817, 1463,  137,  137,  137,  882,  141,  138, 1463, 1463,
      878, 1463, 1463,  141,  141,  139, 1463,  140,  818, 1463,
      142,  137,  137,  137,  819, 1463,  138,  152,  153,  154,
      137,  137,  137,  141,  139,  138,  140, 1463,  141,  142,
     1463,  141,  878,  139, 1463,  140,  141,  141,  142,  141,
      818,  820, 1463,  869,  876,  141,  819,  141, 1463, 1463,
     1463, 1463,  828,  821, 1463,  141, 1463,  141,  879, 1463,
      152,  153,  154,  141, 1463,  141,  152,  153,  154,  141,
      141,  141, 1463,  820,  872,  869,  876,  141,  141,  141,

     1463, 1463, 1463, 1463,  828,  821,  137,  137,  137,  141,
      879,  138, 1463,  152,  153,  154, 1463,  141, 1463,  139,
      141,  140,  141, 1463,  142, 1463,  872, 1463,  141, 1463,
      141,  141,  152,  153,  154,  137,  137,  137,  877,  141,
      138,  152,  153,  154,  829,  880, 1463, 1463,  139, 1463,
      140, 1463,  141,  142,  137,  137,  137, 1463, 1463,  138,
      141, 1463, 1463,  141,  830, 1463, 1463,  139, 1463,  140,
      877,  141,  142,  137,  137,  137,  829,  880,  138,  137,
      137,  137, 1463,  831,  138,  141,  139, 1463,  140, 1463,
     1463,  142,  139,  141,  140, 1463,  830,  142,  137,  137,

      137, 1463,  873,  138, 1463, 1463, 1463,  152,  153,  154,
     1463,  139, 1463,  140,  837,  831,  142,  141,  832, 1463,
     1463,  141, 1463, 1463, 1463,  141,  137,  137,  137,  141,
     1463,  138,  141, 1463,  873, 1463,  152,  153,  154,  139,
      141,  140, 1463, 1463,  142, 1463,  837,  137,  137,  137,
      832,  838,  138,  141, 1463,  152,  153,  154, 1463, 1463,
      139,  141,  140, 1463,  141,  142, 1463, 1463, 1463, 1463,
     1463,  141,  141, 1463,  152,  153,  154, 1463, 1463,  141,
      152,  153,  154,  838,  887, 1463, 1463, 1463, 1463,  137,
      137,  137, 1463, 1463,  138, 1463, 1463, 1463, 1463,  152,

      153,  154,  139,  141,  140, 1463, 1463,  142,  137,  137,
      137,  141,  141,  138, 1463, 1463,  887,  137,  137,  137,
      141,  139,  138,  140, 1463, 1463,  142,  152,  153,  154,
      139,  883,  140, 1463, 1463,  142, 1463, 1463, 1463,  141,
      137,  137,  137,  839,  141,  138,  141,  141,  152,  153,
      154, 1463,  141,  139,  141,  140,  884,  840,  142,  137,
      137,  137,  141,  883,  138,  885, 1463, 1463,  141,  841,
      141,  141,  139, 1463,  140,  839,  141,  142,  141,  141,
      137,  137,  137,  886, 1463,  138,  141, 1463,  884,  840,
      152,  153,  154,  139,  141,  140, 1463,  885,  142, 1463,

      141,  841,  141,  842, 1463,  843, 1463, 1463,  141,  152,
      153,  154,  137,  137,  137,  886, 1463,  138,  152,  153,
      154,  137,  137,  137,  900,  139,  138,  140, 1463, 1463,
      142, 1463,  141, 1463,  139,  842,  140,  843, 1463,  142,
      141,  152,  153,  154,  888,  845, 1463, 1463,  141, 1463,
      137,  137,  137, 1463, 1463,  138,  900, 1463,  844, 1463,
      152,  153,  154,  139,  141,  140, 1463, 1463,  142, 1463,
     1463, 1463,  141,  137,  137,  137,  888,  845,  138,  846,
      141,  152,  153,  154, 1463, 1463,  139,  141,  140, 1463,
      844,  142, 1463,  141,  141,  141, 1463,  890, 1463, 1463,

     1463,  141,  141,  137,  137,  137,  891, 1463,  138, 1463,
      889,  846, 1463,  152,  153,  154,  139,  847,  140,  141,
     1463,  142,  152,  153,  154,  141,  141,  141,  848,  890,
     1463,  141,  141,  141,  141, 1463,  849,  141,  891,  141,
      141, 1463,  889, 1463, 1463,  141,  141, 1463,  892,  847,
      141,  152,  153,  154,  141,  894, 1463,  893,  141, 1463,
      848, 1463,  141,  141,  141,  896, 1463,  895,  849,  141,
      141,  141,  141, 1463,  152,  153,  154,  141,  141,  897,
      892, 1463,  141,  141,  901,  141,  141,  894,  141,  893,
      141,  141,  141,  141,  141,  899,  141,  896, 1463,  895,

      898,  141,  141, 1463,  152,  153,  154, 1463, 1463,  141,
      141,  897, 1463,  141,  141,  141,  901,  141,  141, 1463,
      141,  141,  141,  141,  141,  141,  141,  899,  141,  141,
      902,  903,  898,  141,  141,  141,  141,  141, 1463,  904,
      905,  141,  141,  141,  141,  141,  141,  141,  141, 1463,
      141,  141,  911,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  902,  903, 1463,  141,  141,  141,  141,  141,
      906,  904,  905, 1463,  141,  141,  141,  907,  141,  141,
      141,  908,  141,  141,  911,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  910,  909,  912,  141,  141,  141,

      141, 1463,  906, 1463,  141, 1463,  141,  141,  141,  907,
      141,  913,  141,  908,  141,  141,  914,  141,  141, 1463,
     1463,  928,  141,  141, 1463,  141,  910,  909,  912,  141,
      141,  141,  141,  927,  141, 1463,  141,  141,  929,  141,
      141, 1463,  141,  913,  141, 1463, 1463,  141,  914,  697,
      697,  697, 1463,  928,  698,  141, 1463, 1463, 1463, 1463,
      141,  141,  699, 1463,  700,  927,  141,  142,  934,  141,
      929,  141,  141,  141,  141,  915,  141,  916, 1463,  141,
      141,  141,  917,  141,  141,  918,  930,  935,  931, 1463,
      932,  141,  141,  141, 1463,  937, 1463, 1463,  933, 1463,

      934,  141,  141,  141,  141,  141, 1463,  915,  141,  916,
      141,  141,  141,  141,  917,  141,  141,  918,  930,  935,
      931,  936,  932,  141,  141,  141, 1463,  937,  938,  939,
      933,  940,  141,  141,  141,  141,  141,  141,  141,  941,
      942, 1463,  141,  141,  141, 1463,  944,  141, 1463,  943,
      701,  702,  703,  936,  141,  945,  141,  141,  952, 1463,
      938,  939,  141,  940,  141,  141,  141,  141,  141,  141,
      141,  941,  942, 1463,  141,  141,  141, 1463,  944,  141,
      141,  943, 1463,  954,  953,  141,  141,  945,  141,  141,
      952,  141,  141,  141,  141,  958, 1463,  141,  141,  141,

      141,  959,  955,  141,  957, 1463,  141, 1463, 1463,  141,
      956,  141,  141,  141,  141,  954,  953,  141,  960,  141,
      141,  141,  141,  141,  141,  141, 1463,  958,  961,  141,
      962,  141,  141,  959,  955,  141,  957,  141, 1463,  963,
      141,  141,  956,  141,  141,  141,  141, 1463,  141,  141,
      960,  141,  141,  141,  141,  141,  965,  141,  141,  964,
      961,  141,  962,  141, 1463,  141,  141,  969, 1463,  141,
      968,  963,  141,  141, 1463,  966,  141,  141,  141,  967,
      141,  141, 1463, 1463,  141,  141,  141,  141,  965,  141,
      141,  964,  141,  141,  970,  141, 1463,  141,  141,  969,

      141,  141,  968,  972,  141,  141,  971,  966,  141,  141,
      141,  973,  141,  141, 1463,  974,  141,  141,  141,  141,
      141,  141, 1463, 1463,  141,  141,  970,  141,  141,  141,
      975,  979,  141,  141, 1463,  972,  141,  141,  971,  976,
      141, 1463,  141,  973,  141,  141,  977,  974,  141, 1463,
      978,  141,  141,  141, 1463, 1463, 1463,  141, 1463,  141,
      141,  141,  975,  979,  141,  141, 1463, 1463,  980,  141,
     1463,  976,  141,  141,  141,  141,  141,  981,  977,  982,
      141,  141,  978,  141,  141,  141,  141,  141,  141,  141,
      983, 1463, 1463,  141,  141,  141,  141,  141,  984, 1463,

      980, 1463,  141,  985,  141,  141,  986,  141,  141,  981,
      141,  982,  141,  141, 1463,  141,  141,  141,  141,  141,
      141,  141,  983,  987,  141,  141,  141,  141,  141,  141,
      984,  141,  141, 1463,  141,  985,  141, 1463,  986,  141,
      141,  989,  141, 1463,  988, 1463,  141, 1463,  141, 1463,
     1463,  990, 1463,  141,  141,  987,  141,  141,  991, 1463,
      141,  141,  141,  141,  141,  141,  141,  992,  141, 1463,
      141,  141,  141,  989,  141,  997,  988,  993,  141,  141,
      141,  994, 1463,  990,  141,  995,  141,  141,  996,  141,
      991, 1463,  141,  141,  141, 1463,  141,  141,  141,  992,

      141,  141,  141,  999,  141, 1463,  141,  997,  141,  993,
      141,  141,  998,  994, 1000,  141,  141,  995,  141,  141,
      996, 1463,  141,  141,  141,  141, 1001, 1463,  141, 1002,
      141,  141,  141,  141, 1463,  999,  141,  141, 1463, 1003,
      141, 1004,  141,  141,  998,  141, 1000,  141, 1463, 1463,
      141,  141, 1463, 1463,  141,  141,  141, 1463, 1001,  141,
     1463, 1002,  141,  141,  141, 1463, 1463,  141, 1463,  141,
     1463, 1003, 1014, 1004, 1463,  141, 1463,  141, 1463,   98,
       98,   98, 1463,  141,   99,  113,  113,  113,  141,  100,
      114,  141,  101, 1463,  102, 1463,  141,  141,  115,  141,

      116,  126,  126,  126, 1014,  141,  127,  137,  137,  137,
     1463, 1463,  138,  141,  128, 1013,  129,  130,  131, 1015,
      139,  141,  140,  141, 1463,  142,  141,  141,  141,  141,
     1463,  141,  141,  141,  141,  141,  141,  141, 1017, 1463,
      141,  141, 1463, 1463, 1463,  141, 1463, 1013, 1463, 1463,
     1463, 1015, 1463,  141, 1463,  141, 1463, 1016,  141,  141,
      141,  141, 1463,  141,  141,  141,  141,  141,  141,  141,
     1017, 1463,  141,  141, 1463,  141, 1463, 1463, 1463, 1463,
      104,  105,  106,  141,  133, 1463,  117,  118,  119, 1016,
     1463,  141, 1463,  141, 1463, 1023, 1463, 1463,  141,  141,

     1463,  141,  134,  135,  136, 1463,  141,  141,  152,  153,
      154,  317,  317,  317, 1463,  141,  318, 1018, 1463, 1463,
      141, 1463, 1024,  141,  319,  141,  320, 1023,  141, 1033,
      141,  141,  141,  141, 1463,  141, 1463,  321,  141, 1463,
      141,  322,  141,  141, 1025, 1032, 1463,  323,  141, 1018,
      141,  141,  141,  324, 1024, 1034, 1041,  141,  325,  141,
      141, 1033, 1463, 1463,  141,  141, 1463,  141, 1463,  321,
      141, 1463,  141,  322,  141,  141, 1025, 1032,  141,  323,
      141, 1463,  141,  141,  141,  324,  141, 1034, 1041, 1035,
      325,  141,  141,  141,  141, 1038,  141, 1036, 1039,  141,

      141,  141,  141, 1043,  141, 1037,  141,  141,  141, 1042,
      141, 1045,  326,  327,  328, 1040,  141, 1463,  141,  141,
     1463, 1035, 1463, 1463,  141,  141,  141, 1038,  141, 1036,
     1039,  141,  141,  141, 1463, 1043,  141, 1037,  141,  141,
      141, 1042,  141, 1045,  141, 1047,  141, 1040,  141, 1463,
      141,  141, 1046,  141,  141, 1044,  141,  141,  141, 1049,
      141, 1050, 1051, 1048, 1463,  141,  141,  141, 1052, 1463,
     1463, 1463, 1463, 1463,  141,  141,  141, 1047,  141, 1053,
      141, 1463,  141, 1463, 1046,  141,  141, 1044,  141,  141,
      141, 1049,  141, 1050, 1051, 1048,  141,  141,  141,  141,

     1052, 1463, 1463, 1463,  141,  141,  141,  141, 1056, 1054,
     1055, 1053,  141,  141,  141,  141,  141, 1463,  141, 1057,
      141, 1059, 1463,  141,  141, 1463,  141, 1463,  141, 1463,
     1463,  141, 1463, 1463, 1463, 1058,  141,  141,  141, 1062,
     1056, 1054, 1055, 1463,  141,  141,  141,  141,  141,  141,
      141, 1057,  141, 1059,  141,  141,  141,  141,  141, 1463,
     1463,  141,  141,  141, 1463,  141, 1463, 1058, 1060,  141,
     1463, 1062, 1061,  141,  141,  141, 1065,  141, 1064,  141,
     1063,  141,  141,  141,  141,  141,  141,  141, 1463,  141,
     1463, 1463,  141,  141,  141,  141, 1463,  141, 1463, 1463,

     1060,  141, 1463, 1070, 1061,  141,  141,  141, 1065,  141,
     1064,  141, 1063,  141,  141,  141,  141,  141,  141,  141,
      141,  141, 1463,  141,  141, 1071,  141,  141,  141, 1068,
     1066,  141, 1463,  141,  141, 1070, 1463, 1463,  141, 1069,
     1067,  141,  141, 1463, 1463,  141, 1072, 1075, 1463,  141,
      141,  141,  141,  141, 1463,  141, 1073, 1071,  141,  141,
      141, 1068, 1066,  141, 1076,  141,  141,  141, 1074, 1079,
      141, 1069, 1067,  141,  141, 1078,  141,  141, 1072, 1075,
     1077,  141,  141,  141,  141,  141,  141,  141, 1073, 1081,
      141,  141,  141,  141,  141,  141, 1076, 1463, 1463,  141,

      141, 1079, 1463, 1463, 1080, 1463, 1463, 1078,  141,  141,
     1463, 1463, 1077, 1463,  141,  141,  141,  141,  141,  141,
      141, 1081,  141,  141,  141,  141,  141,  141,  141,  141,
     1463,  141,  141, 1085, 1082,  141, 1080,  141, 1083,  141,
     1088, 1084, 1463,  141, 1463, 1089, 1463,  141,  141,  141,
     1086,  141,  141,  141, 1087,  141,  141,  141, 1463,  141,
      141,  141, 1463,  141,  141, 1085, 1082,  141,  141,  141,
     1083,  141, 1088, 1084, 1463,  141, 1092, 1089, 1463,  141,
      141,  141, 1086,  141,  141,  141, 1087,  141,  141,  141,
     1463,  141,  141,  141, 1090,  141,  141, 1091,  141, 1095,

      141,  141,  141,  141, 1093,  141,  141,  141, 1092, 1094,
      141,  141,  141,  141, 1463, 1463,  141, 1463, 1463,  141,
     1106, 1463, 1463, 1463,  141,  141, 1090,  141, 1463, 1091,
      141, 1095, 1463,  141,  141,  141, 1093,  141,  141,  141,
     1463, 1094,  141, 1463,  141,  141,  697,  697,  697, 1463,
     1463,  698, 1106, 1463, 1463, 1463, 1463, 1463, 1463,  699,
     1463,  700,  141,  141,  142,  141, 1463,  141, 1463, 1463,
      141,  141,  915,  141,  916,  141, 1108, 1463, 1463,  917,
     1463, 1107,  918,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  141,  141,  697,  141, 1463,  141,

     1463,  141,  141,  141,  915,  141,  916,  141, 1108,  141,
     1463,  917,  141, 1107,  918, 1463, 1463, 1463, 1109,  141,
      141,  141,  141, 1463, 1463, 1463, 1463,  141,  141,  141,
     1112, 1110, 1111,  141,  141,  141,  141, 1114, 1118, 1463,
     1463,  141,  141,  141,  141, 1115, 1113,  701,  702,  703,
     1109,  141,  141,  141,  141, 1463, 1463,  141, 1463,  141,
      141,  141, 1112, 1110, 1111,  141,  141,  141,  141, 1114,
     1118,  141,  141,  141,  141,  141, 1116, 1115, 1113,  141,
      141,  141, 1117,  141, 1463, 1119,  141,  141,  141,  141,
      141,  141, 1120, 1463,  141,  141,  141,  141,  141, 1463,

     1463, 1463, 1463,  141,  141,  141, 1125, 1463, 1116, 1129,
     1463,  141,  141,  141, 1117,  141, 1463, 1119,  141,  141,
      141,  141,  141,  141, 1120, 1126,  141,  141,  141,  141,
      141,  141,  141, 1463, 1463, 1127, 1128, 1463, 1125,  141,
      141, 1129,  141,  141, 1130, 1131,  141,  141,  141, 1463,
      141,  141, 1134,  141, 1132,  141,  141, 1126,  141, 1463,
     1133,  141, 1135,  141,  141, 1138,  141, 1127, 1128, 1463,
      141,  141,  141,  141,  141,  141, 1130, 1131,  141,  141,
      141,  141,  141,  141, 1134, 1463, 1132,  141,  141,  141,
      141,  141, 1133, 1137, 1135,  141, 1136, 1138,  141,  141,

      141,  141,  141, 1140,  141,  141,  141, 1139,  141,  141,
     1142, 1143,  141,  141,  141, 1463,  141, 1463,  141, 1463,
     1141,  141, 1144,  141,  141, 1137,  141,  141, 1136, 1463,
     1463,  141,  141,  141, 1463, 1140,  141, 1463,  141, 1139,
      141,  141, 1142, 1143,  141,  141,  141,  141,  141, 1145,
      141,  141, 1141,  141, 1144,  141,  141,  141,  141,  141,
     1146,  141,  141,  141, 1147,  141, 1148,  141, 1463,  141,
      141,  141, 1463, 1149, 1463,  141, 1463,  141, 1463,  141,
     1150, 1145, 1151,  141, 1152,  141, 1463,  141, 1463,  141,
     1463,  141, 1146,  141,  141,  141, 1147,  141, 1148,  141,

      141,  141,  141,  141, 1463, 1149, 1463,  141,  141,  141,
     1154, 1463, 1150, 1156, 1151, 1155, 1152,  141,  141, 1153,
      141,  141,  141,  141, 1463, 1463,  141, 1158,  141,  141,
      141,  141,  141, 1157,  141,  141,  141,  141, 1463, 1161,
      141,  141, 1154,  141,  141, 1156, 1463, 1155, 1159,  141,
      141, 1153,  141,  141,  141,  141,  141, 1463,  141, 1158,
      141,  141,  141,  141,  141, 1157,  141,  141,  141,  141,
     1160, 1161, 1463,  141,  141,  141,  141,  141,  141,  141,
     1159,  141,  141, 1463,  141, 1163,  141,  141,  141, 1463,
      141, 1162,  141,  141, 1463,  141,  141, 1164,  141,  141,

     1463,  141, 1160,  141, 1463,  141,  141,  141, 1166,  141,
      141,  141, 1165,  141,  141, 1463,  141, 1163,  141,  141,
      141, 1463,  141, 1162,  141,  141, 1170,  141,  141, 1164,
      141,  141, 1463,  141,  141,  141, 1463,  141,  141,  141,
     1166, 1171,  141,  141, 1165,  141, 1172,  141, 1463,  141,
      141,  141,  141, 1178, 1463, 1177, 1176,  141, 1170,  141,
      141, 1463, 1463, 1183, 1463, 1463,  141,  141,  141,  141,
      141, 1184, 1173, 1171,  141,  141,  141,  141, 1172,  141,
     1463,  141,  141,  141,  141, 1178,  141, 1177, 1176,  141,
     1186,  141,  141, 1463,  141, 1183,  141,  141,  141,  141,

      141, 1185,  141, 1184,  141,  141,  141, 1463,  141, 1463,
      141, 1190,  141,  141, 1187, 1189,  141, 1188,  141,  141,
      141,  141, 1186, 1463,  141, 1191,  141, 1463,  141,  141,
      141,  141, 1463, 1185,  141, 1463,  141,  141,  141,  141,
      141, 1463,  141, 1190,  141,  141, 1187, 1189,  141, 1188,
     1193,  141,  141,  141,  141, 1463,  141, 1191, 1463,  141,
     1192,  141,  141,  141,  141, 1197, 1195,  141,  141,  141,
     1196,  141,  141,  141, 1194,  141,  141,  141, 1463, 1463,
      141,  141, 1193,  141, 1463, 1202,  141, 1198,  141, 1463,
     1199,  141, 1192,  141,  141, 1463,  141, 1197, 1195,  141,

      141,  141, 1196,  141, 1200,  141, 1194,  141,  141,  141,
     1463,  141,  141,  141, 1203,  141,  141, 1202, 1201, 1198,
      141,  141, 1199,  141,  141, 1204, 1463, 1463, 1463,  141,
     1463,  141, 1463, 1463, 1463,  141, 1200, 1463, 1463, 1463,
     1463,  141, 1463,  141,  141, 1463, 1203, 1463,  141,  141,
     1201, 1463,  141,  141,  141,  141,  141, 1204, 1214, 1463,
      141,  141,  141,  141, 1205, 1205, 1205,  141,  141, 1206,
      141, 1215, 1207,  141, 1217,  141,  141, 1208,  141, 1209,
     1463,  141,  141, 1216,  141,  141,  141, 1463,  141,  141,
     1214, 1463,  141, 1220,  141, 1218,  141, 1210, 1463,  141,

      141,  141,  141, 1215, 1463, 1463, 1217,  141,  141,  141,
      141,  141, 1463, 1463,  141, 1216,  141,  141, 1219,  141,
      141,  141,  141,  141, 1221, 1220, 1463, 1218,  141, 1210,
      141,  141,  141,  141, 1463, 1463, 1222, 1463,  141,  141,
      141,  141, 1223,  141,  141, 1224,  141,  141, 1463,  141,
      141,  141,  141, 1463,  141,  141, 1221,  141,  141, 1463,
     1463, 1225,  141,  141,  141, 1211, 1212, 1213, 1222, 1463,
      141,  141,  141, 1463, 1223, 1226,  141, 1224,  141,  141,
      141,  141,  141,  141,  141, 1463,  141, 1227,  141,  141,
      141,  141,  141, 1225,  141, 1228, 1230,  141,  141,  141,

      141, 1229,  141,  141,  141,  141, 1232, 1226,  141,  141,
      141,  141,  141, 1233, 1235,  141,  141,  141,  141, 1227,
      141, 1463, 1463,  141,  141, 1231,  141, 1228, 1230,  141,
      141,  141,  141, 1229,  141,  141,  141,  141, 1232, 1237,
      141,  141,  141,  141,  141, 1233, 1235,  141,  141,  141,
     1234,  141,  141,  141, 1236,  141,  141, 1231, 1463,  141,
     1238,  141,  141,  141,  141,  141, 1239, 1246, 1463,  141,
      141, 1237,  141,  141, 1463, 1463,  141, 1248, 1463,  141,
      141,  141, 1234,  141,  141,  141, 1236,  141,  141, 1249,
     1247,  141, 1238,  141,  141,  141,  141,  141, 1239, 1246,

      141,  141,  141,  141,  141,  141,  141, 1251,  141, 1248,
      141,  141,  141,  141,  141, 1463,  141,  141, 1252, 1250,
     1254, 1249, 1247,  141,  141,  141,  141, 1255, 1463,  141,
     1463,  141,  141, 1463,  141,  141,  141, 1260,  141, 1251,
      141, 1253,  141,  141,  141,  141,  141, 1463,  141,  141,
     1252, 1250, 1254,  141,  141,  141,  141,  141,  141, 1255,
     1257,  141,  141,  141,  141, 1256,  141, 1261,  141, 1260,
      141, 1262,  141, 1253,  141, 1463,  141,  141,  141,  141,
      141,  141,  141, 1265, 1263,  141,  141,  141,  141,  141,
      141, 1463, 1257, 1264,  141,  141,  141, 1256,  141, 1261,

     1463,  141,  141, 1262,  141, 1266,  141, 1463, 1463,  141,
      141,  141,  141,  141,  141, 1265, 1263, 1463, 1463,  141,
      141,  141,  141, 1268,  141, 1264, 1267,  141,  141, 1463,
      141,  141,  141,  141,  141,  141,  141, 1266,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
     1463, 1463,  141,  141, 1269, 1268,  141,  141, 1267, 1270,
      141,  141, 1463,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141, 1463,  141,  141, 1269, 1463, 1271,  141,
      141, 1270, 1273,  141,  141, 1272, 1274,  141, 1275, 1463,

      141,  141,  141,  141,  141,  141,  141,  141,  141, 1276,
      141,  141, 1463, 1279,  141,  141,  141, 1277,  141, 1463,
     1271,  141,  141,  141, 1273,  141,  141, 1278, 1274,  141,
     1275,  141,  141,  141,  141,  141,  141, 1463,  141,  141,
      141, 1276,  141,  141, 1280, 1279,  141,  141,  141, 1277,
      141, 1463,  141,  141,  141,  141,  141,  141,  141, 1278,
      141,  141,  141,  141,  141,  141,  141, 1281, 1463,  141,
      141,  141,  141,  141, 1463,  141, 1280,  141,  141,  141,
      141,  141, 1463,  141,  141,  141,  141, 1463,  141,  141,
      141, 1283,  141,  141,  141, 1463,  141,  141,  141, 1281,

     1284,  141,  141,  141,  141,  141, 1285,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141, 1463,
     1286,  141,  141, 1283, 1463,  141,  141, 1287,  141,  141,
     1463,  141, 1284,  141,  141,  141,  141,  141, 1285,  141,
      141, 1290,  141, 1292, 1463,  141,  141,  141,  141,  141,
      141, 1294, 1286,  141,  141,  141, 1291,  141,  141, 1287,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141, 1290,  141, 1292,  141,  141, 1295,  141,
     1293,  141,  141, 1294,  141,  141, 1463,  141, 1291,  141,
      141,  141,  141,  141,  141, 1296,  141,  141,  141,  141,

      141, 1297,  141, 1463,  141,  141,  141,  141,  141,  141,
     1295, 1298, 1293, 1463,  141,  141,  141,  141,  141, 1463,
     1299, 1301,  141,  141,  141, 1463,  141, 1296, 1300,  141,
      141,  141,  141, 1297, 1463, 1463, 1463,  141,  141,  141,
      141,  141, 1463, 1298, 1463, 1463,  141,  141,  141,  141,
      141,  141, 1299, 1301, 1463, 1463,  141, 1463,  141,  141,
     1300, 1205, 1205, 1205,  141, 1310, 1206,  141, 1463, 1207,
      141, 1463,  141,  141, 1208,  141, 1209, 1463,  141,  142,
      141,  141,  141,  141, 1314, 1302, 1303, 1315,  141, 1304,
      141,  141,  141,  141,  141,  141,  141, 1310, 1318,  141,

      141,  141,  141,  141,  141,  141, 1316,  141, 1317,  141,
     1319, 1463,  141,  141,  141, 1463, 1314,  141, 1303, 1315,
      141, 1304,  141, 1320,  141,  141,  141,  141,  141, 1463,
     1318, 1463,  141,  141,  141,  141,  141,  141, 1316, 1321,
     1317,  141, 1319,  141,  141,  141,  141, 1463, 1322,  141,
      141,  141,  141, 1463,  141, 1320, 1463,  141,  141, 1323,
      141, 1324, 1211, 1212, 1213,  141,  141, 1463,  141,  141,
     1463, 1321, 1326,  141,  141,  141,  141,  141,  141, 1463,
     1322,  141,  141,  141,  141, 1463,  141, 1325,  141,  141,
      141, 1323,  141, 1324,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141, 1326,  141,  141,  141,  141,  141,
     1327, 1463, 1463,  141,  141,  141,  141,  141, 1463, 1325,
      141, 1463,  141,  141,  141,  141,  141,  141,  141, 1332,
      141,  141,  141,  141,  141,  141, 1331,  141,  141,  141,
      141,  141, 1327,  141,  141,  141,  141,  141, 1463,  141,
     1333,  141,  141, 1463,  141,  141, 1334,  141,  141,  141,
     1463, 1332,  141,  141,  141, 1335,  141,  141, 1331,  141,
      141,  141,  141,  141, 1463,  141,  141,  141,  141, 1339,
     1336,  141, 1333,  141,  141,  141,  141, 1338, 1334, 1463,
      141,  141,  141,  141, 1337,  141,  141, 1335,  141,  141,

      141,  141, 1463,  141,  141,  141,  141, 1463,  141,  141,
      141, 1339, 1336,  141,  141,  141,  141,  141,  141, 1338,
     1341,  141, 1340,  141,  141,  141, 1337,  141,  141,  141,
     1463, 1342,  141,  141, 1463,  141,  141, 1463,  141, 1344,
      141,  141,  141,  141, 1463, 1343,  141,  141,  141,  141,
      141,  141, 1341,  141, 1347,  141,  141,  141,  141,  141,
     1463,  141, 1345, 1342,  141, 1463,  141,  141, 1346, 1463,
     1349, 1344,  141, 1348,  141,  141,  141, 1343, 1463,  141,
      141,  141,  141,  141,  141, 1463, 1347,  141,  141,  141,
      141, 1350, 1463, 1351, 1345,  141,  141, 1463,  141, 1352,

     1346, 1463, 1349,  141,  141, 1348,  141, 1356,  141,  141,
     1353,  141,  141, 1354,  141,  141,  141,  141,  141,  141,
      141, 1358, 1355, 1350,  141, 1351,  141,  141,  141,  141,
     1463, 1352, 1359, 1463, 1357,  141,  141, 1463,  141, 1356,
     1463,  141, 1353,  141,  141, 1354,  141,  141, 1463,  141,
      141,  141,  141, 1358, 1355,  141,  141, 1360,  141,  141,
      141,  141,  141,  141, 1359,  141, 1357,  141,  141,  141,
      141,  141, 1361,  141,  141,  141,  141,  141,  141,  141,
     1463, 1463,  141,  141,  141,  141, 1363,  141, 1362, 1360,
      141,  141,  141,  141,  141,  141, 1463,  141,  141,  141,

      141,  141,  141,  141, 1361,  141,  141, 1463,  141,  141,
      141,  141, 1463, 1372,  141, 1463,  141,  141, 1363, 1463,
     1362, 1463,  141, 1463,  141,  141,  141, 1463,  141,  141,
      141,  141,  141, 1463, 1373, 1374,  141,  141, 1463,  141,
      141, 1463, 1463, 1463, 1463, 1372, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1463,  141, 1205,
      141,  141,  141,  141,  141, 1375, 1373, 1374,  141,  141,
      141,  141,  141,  141,  141,  141,  141, 1377, 1378,  141,
      141,  141,  141,  141,  141,  141, 1376,  141,  141, 1463,
     1463,  141, 1380, 1381,  141, 1379,  141, 1375, 1463,  141,

     1463, 1463,  141, 1463,  141,  141,  141,  141,  141, 1377,
     1378,  141,  141,  141,  141,  141,  141,  141, 1376,  141,
      141,  141,  141,  141, 1380, 1381, 1384, 1379, 1463,  141,
      141,  141,  141,  141, 1385,  141, 1463, 1387, 1386, 1388,
      141,  141,  141,  141,  141, 1463, 1389,  141, 1390,  141,
      141,  141,  141,  141,  141, 1393, 1392,  141, 1384,  141,
     1391,  141,  141, 1463,  141,  141, 1385,  141, 1463, 1387,
     1386, 1388,  141,  141,  141,  141,  141,  141, 1389,  141,
     1390,  141,  141,  141,  141,  141,  141, 1393, 1392,  141,
      141,  141, 1391,  141,  141,  141,  141, 1463,  141,  141,

      141,  141,  141, 1395,  141, 1394,  141,  141,  141,  141,
     1399, 1396,  141,  141,  141, 1398, 1401,  141,  141, 1463,
      141,  141,  141, 1397, 1400,  141,  141,  141,  141, 1463,
      141,  141,  141,  141,  141, 1395,  141, 1394,  141,  141,
      141,  141, 1399, 1396,  141,  141,  141, 1398, 1401,  141,
      141,  141,  141,  141,  141, 1397, 1400,  141,  141,  141,
     1463,  141,  141, 1405,  141,  141,  141,  141, 1404,  141,
     1402, 1463,  141,  141,  141,  141, 1403, 1406, 1463, 1463,
      141,  141,  141,  141, 1408, 1407,  141, 1463,  141,  141,
      141,  141, 1463,  141,  141, 1405,  141,  141,  141,  141,

     1404,  141, 1402,  141,  141,  141,  141,  141, 1403, 1406,
      141,  141,  141,  141, 1413,  141, 1408, 1407,  141,  141,
      141, 1409,  141,  141,  141,  141,  141,  141, 1463, 1463,
      141,  141,  141,  141,  141,  141,  141,  141, 1463,  141,
     1414,  141,  141,  141,  141,  141, 1413,  141, 1463,  141,
      141,  141,  141, 1409,  141,  141,  141,  141,  141,  141,
      141, 1415,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141, 1414,  141, 1463,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141, 1418, 1420,  141, 1421, 1463,
      141,  141,  141, 1415, 1463, 1463,  141, 1419,  141,  141,

     1463,  141,  141, 1463,  141, 1463,  141,  141, 1423,  141,
      141,  141,  141,  141,  141,  141, 1463, 1418, 1420,  141,
     1421,  141,  141,  141,  141,  141, 1463, 1422,  141, 1419,
      141,  141,  141,  141,  141, 1424,  141, 1463,  141,  141,
     1423,  141,  141,  141,  141,  141,  141,  141, 1425,  141,
      141, 1426,  141,  141,  141,  141,  141,  141,  141, 1422,
      141,  141, 1427,  141,  141,  141,  141, 1424,  141,  141,
     1463,  141, 1463,  141,  141,  141,  141,  141,  141,  141,
     1425,  141,  141, 1426,  141,  141,  141,  141, 1463,  141,
      141,  141,  141,  141, 1427, 1463, 1428,  141,  141,  141,

      141,  141, 1430,  141,  141,  141,  141, 1431, 1463,  141,
      141,  141,  141,  141, 1434, 1463,  141,  141,  141,  141,
     1436,  141, 1463,  141,  141, 1463, 1463,  141, 1428,  141,
      141,  141, 1435,  141, 1430,  141,  141,  141,  141, 1431,
     1463,  141,  141,  141,  141,  141, 1434,  141,  141,  141,
      141,  141, 1436, 1437,  141,  141,  141,  141,  141,  141,
     1438, 1463,  141, 1440, 1435,  141, 1441,  141, 1439,  141,
     1443, 1463, 1444,  141,  141,  141,  141,  141, 1463,  141,
      141,  141,  141, 1463,  141, 1437,  141,  141,  141,  141,
      141, 1446, 1438, 1463,  141,  141, 1463,  141, 1441,  141,

     1439,  141, 1443,  141, 1444,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141, 1449,  141,  141,  141,  141,
      141,  141, 1448, 1446, 1447,  141,  141,  141,  141,  141,
      141, 1452,  141,  141,  141,  141,  141,  141,  141, 1463,
      141,  141,  141,  141, 1451,  141, 1453, 1449, 1463,  141,
      141,  141, 1463,  141, 1448, 1463, 1447,  141,  141,  141,
      141,  141,  141, 1452,  141,  141,  141,  141,  141,  141,
      141, 1463,  141,  141,  141,  141, 1451, 1456, 1453, 1455,
      141,  141,  141,  141,  141, 1463, 1459,  141, 1458,  141,
      141,  141, 1460,  141, 1461,  141, 1463,  141,  141,  141,

     1462,  141, 1463, 1463, 1463,  141,  141,  141, 1463, 1456,
     1463, 1455,  141,  141,  141,  141,  141, 1463, 1459,  141,
     1458,  141,  141, 1463, 1460, 1463, 1461,  141, 1463,  141,
      141, 1463, 1462, 1463, 1463, 1463, 1463,  141,   12,   12,
       12,   12,   12,   12,   87,   87, 1463, 1463,   87,   87,
       90,   90,   90,   90,   90,   90,   93,   93, 1463, 1463,
       93,   93,  110,  110,  258,  258, 1463, 1463,  258,  258,
      267,  267, 1463, 1463,  267,  267,  275,  275,  275,  275,
      275,  275,  278,  278,  278,  278,  278,  278,  288,  288,
      288,  288,  288,  288,  110,  110,  295,  295,  295,  295,

      295,  295,  303,  303,  303,  303,  303,  303,  312,  312,
      312,  312,  312,  312,  346,  346, 1463, 1463,  346,  346,
      349,  349, 1463, 1463,  349,  349,  458,  458, 1463, 1463,
      458,  458,  461,  461, 1463, 1463,  461,  461,  258,  258,
     1463, 1463,  258,  258,  522,  522,  522,  522,  522,  522,
      267,  267, 1463, 1463,  267,  267,  525,  525,  525,  525,
      525,  525,   87,   87,   87, 1463,   87,   87,  528,  528,
      528,  528,  528,  528,   93,   93,   93, 1463,   93,   93,
      275,  275,  275,  275,  275,  275,  278,  278,  278,  278,
      278,  278,  532,  532,  532,  532,  532,  532,  535,  535,

      535,  535,  535,  535,  288,  288,  288,  288,  288,  288,
      539,  539,  539,  539,  539,  539,  295,  295,  295,  295,
      295,  295,  545,  545,  545,  545,  545,  545,  548,  548,
      548,  548,  548,  548,  303,  303,  303,  303,  303,  303,
      551,  551,  551,  551,  551,  551,  554,  554,  554,  554,
      554,  554,  312,  312,  312,  312,  312,  312,  558,  558,
      558,  558,  558,  558,  561,  561,  561,  561,  561,  561,
      563,  563,  563,  563,  563,  563,  141,  141,  141, 1463,
      141,  346,  346, 1463, 1463,  346,  346,  349,  349, 1463,
     1463,  349,  349,  595,  595, 1463, 1463,  595,  595,  598,

      598, 1463, 1463,  598,  598,  458,  458, 1463, 1463,  458,
      458,  461,  461, 1463, 1463,  461,  461,  258,  258,  258,
     1463,  258,  258,  522,  522,  522,  522,  522,  522,  787,
      787,  787,  787,  787,  787,  267,  267,  267, 1463,  267,
      267,  525,  525,  525,  525,  525,  525,  528,  528,  528,
      528,  528,  528,  532,  532,  532,  532,  532,  532,  535,
      535,  535,  535,  535,  535,  793,  793,  793,  793,  793,
      793,  288,  288,  288,  288,  288,  288,  545,  545,  545,
      545,  545,  545,  548,  548,  548,  548,  548,  548,  797,
      797,  797,  797,  797,  797,  551,  551,  551,  551,  551,

      551,  554,  554,  554,  554,  554,  554,  799,  799,  799,
      799,  799,  799,  558,  558,  558,  558,  558,  558,  561,
      561,  561,  561,  561,  561,  801,  801,  801,  801,  801,
      801,  563,  563,  563,  563,  563,  563,  803,  803,  803,
      803,  803,  803,  806,  806,  806,  806,  806,  806,  141,
      141,  141, 1463,  141,  822,  822,  822,  822,  822,  822,
      346,  346,  346, 1463,  346,  346,  825,  825,  825,  825,
      825,  825,  349,  349,  349, 1463,  349,  349,  595,  595,
     1463, 1463,  595,  595,  598,  598, 1463, 1463,  598,  598,
      919,  919,  919,  919,  919,  919,  946,  946,  946,  946,

      946,  946,  458,  458,  458, 1463,  458,  458,  949,  949,
      949,  949,  949,  949,  461,  461,  461, 1463,  461,  461,
      522,  522,  522,  522,  522,  522,  525,  525,  525,  525,
      525,  525,  528,  528,  528,  528,  528,  528,  535,  535,
      535,  535,  535,  535,  548,  548,  548,  548,  548,  548,
      554,  554,  554,  554,  554,  554,  561,  561,  561,  561,
      561,  561,  803,  803,  803,  803,  803,  803,  806,  806,
      806,  806,  806,  806, 1008, 1008, 1008, 1008, 1008, 1008,
      822,  822,  822,  822,  822,  822,  825,  825,  825,  825,
      825,  825, 1026, 1026, 1026, 1026, 1026, 1026,  595,  595,

      595, 1463,  595,  595, 1029, 1029, 1029, 1029, 1029, 1029,
      598,  598,  598, 1463,  598,  598,  919,  919,  919,  919,
      919,  919, 1101, 1101, 1101, 1101, 1101, 1101, 1104, 1104,
     1104, 1104, 1104, 1104,  946,  946,  946,  946,  946,  946,
      949,  949,  949,  949,  949,  949,  525,  525,  525,  525,
      525,  525,  528,  528,  528,  528,  528,  528, 1242, 1242,
     1242, 1242, 1242, 1245, 1245, 1245, 1245, 1245, 1245, 1305,
     1305, 1305, 1305, 1305, 1305, 1367, 1367, 1367, 1367, 1367,
     1367, 1370, 1370, 1370, 1370, 1370, 1370, 1412, 1412, 1412,
     1412, 1412, 1412,   11, 1463, 1463, 1463, 1463, 1463, 1463,

     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463

    } ;

static const flex_int16_t yy_chk[9500] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        9,    9,    9,   16,   19,    9,   10,   10,   10,   17,
       17,   10, 1556,    9,   93,    9,   13,   13,   13,   10,
       25,   10,   14,   14,   14,   26,   26,   26,   63,   25,
       26,   28,   63,   28,   28,   26,   34,   34,   26, 1526,
       26,   26,   26,   67,   67,   29,   28,   29,   29,   19,
       87,   16, 1499,   31,   31,   31,   71,   71,   31,   93,
       29,   32,   32,   32, 1498,   28,   31, 1486,   31,   36,
       36,   36,   75, 1474,   36, 1470,   75,  156,   28,   70,
       70,   70,   36, 1412,   36,   36,   36,   77,   77,   84,

       84, 1370,   29,   36,   82,   82,   82,   28,   87,   89,
       89,    9,    9,    9,   90,   90, 1369,   10,   10,   10,
       95,   95,   96,   96,   99,   99,  155,   13,   13,   13,
      103,  103,  156,   14,   14,   14,   26,   26,   26,  105,
      105,  108,  108,  103,  223,  111,  109,  111,  109,  109,
      111,  111,  114,  114,  108,  118,  118,  127,  127,  131,
      131,  109,   36, 1313,   31,   31,   31,  135,  135, 1312,
      130,  130,  138,  138,  155,  103,  153,  153,  259,  259,
       36,   36,   36,   37,   37,   37,  108,  222,   37,  223,
       70,   70,   70,  109,  268,  268,   37, 1309,   37,   37,

       37,   37,  130,  275,  275,   82,   82,   82,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,  130,  222,  273,  274,   37, 1307,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,  258,  267, 1245,  271,
      258,  267,  272,  278,  278,  281,  281, 1213,   98,   98,
       98,  273,  274,   98,   37,   37,   37,   38,   98,  289,
       38,   98,  321,   98,  289, 1211,  145,  145,  147,  292,

      292,  146,  293,  293,  322,  146,  323,  147,   38,   38,
       38,   38,   38,  145,   38,  147,   38,  271,  146,   38,
      272,   38,  290,  290,  321,   38,   38,   38,  145,  145,
      147,   40,   38,  146,   40,  290,  322,  146,  323,  147,
       38,   38,   38,   38,   38,  145,   38,  147,   38,  523,
      146,   38,   40,   38,  523,  149,   40,   38,   38,   38,
       40,  295,  295, 1209,   38,   39,   40,  290,   39,   40,
      149,  346,  149,  298,  298,  324,   40,  303,  303,   98,
       98,   98,  151,  349,   40,  521,   39,  149,   40,  521,
       39, 1208,   40,   39,   39,  306,  306,   39,   40,  151,

       39,   40,  149,   39,  149,  357,   39,  324,   40, 1104,
       39,  312,  312,   42,  151,  315,  315,   42,   39,  346,
      157,   42,   39,  318,  318,   39,   39,   42,  349,   39,
       42,  151,   39,   42,  284,   39,  284,  157,   39,  284,
      284,  161,   39,   41,  325,   42,  356,   41, 1103,   42,
      357,   41,  157,   42,   41, 1031,   41,   41,  161,   42,
       41,   41,   42,   43,   44,   42,   41,   43,   44,  157,
      158,   43,   44,  161,  158,   41,  325,   43,   44,   41,
       43,   44,  458,   41,  327,  327,   41,  158,   41,   41,
      161,  150,   41,   41,  356,   43,   44,  524,   41,   43,

       44,  524,  158,   43,   44, 1028,  158,  150,  150,   43,
       44,  461,   43,   44,   45,   45,  348,  348,  168,  158,
       45,   45,   45,  150, 1008,  159,   45,   45,   45,  159,
      458,   46,   45,   46,   46,  168,  951,   46,   46,  150,
      150,  525,  159,   46,  351,  351,   45,   45,  460,  460,
      168,  526,   45,   45,   45,  948,  461,  159,   45,   45,
       45,  159,  926,   46,   45,   46,   46,  168,   47,   46,
       46,  925,   47,   48,  159,   46,   47,   48,  463,  463,
       49,   48,   47,  528,   49,   47,  170,   48,   49,  525,
       48,  529,  923,  171,   49,  532,  532,   49,  568,  526,

       47,  569,  170,  170,   47,   48,  176,   50,   47,   48,
      171,   50,   49,   48,   47,   50,   49,   47,  170,   48,
       49,   50,   48,  176,   50,  171,   49,   50,  528,   49,
      568,  179,  536,  569,  170,  170,  529,  536,  176,   50,
      537,  537,  171,   50,  538,  538,  549,   50,  179,  570,
       58,  549,  188,   50,   58,  176,   50,   52,   58,   50,
       51,   52,  921,  179,   58,   52,   51,   58,   51,  188,
       51,   52,   51,   51,   52,   51,   51,   52,   51,  827,
      179,  570,   58,  824,  188,  806,   58,  540,  540,   52,
       58,  805,   51,   52,  541,  541,   58,   52,   51,   58,

       51,  188,   51,   52,   51,   51,   52,   51,   51,   52,
       51,   53,  571,   56,  801,   53,  163,   56,  163,   53,
       56,   56,  187,  187,  555,   53,  799,   56,   53,  555,
       56,   53,  797,  163,   57,  793,   57,   56,   57,  187,
       57,   57,  787,   53,  571,   56,   57,   53,  163,   56,
      163,   53,   56,   56,  187,  187,  703,   53,  160,   56,
       53,  160,   56,   53,   54,  163,   57,   54,   57,   56,
       57,  187,   57,   57,  167,  167,  542,  542,   57,  172,
       59,  160,  572,  160,   59,   54,   54,   59,   59,   54,
      167,  172,  167,   54,   59,  701,  172,   59,  160,   54,

      545,  545,   54,  551,  551,   54,  167,  167,  558,  558,
      700,  172,   59,  160,  572,  160,   59,   54,   54,   59,
       59,   54,  167,  172,  167,   54,   59,  562,  172,   59,
      160,   54,  562,  699,   54,  563,  563,   54,   55,   60,
       55,  599,   55,   60,  596,   55,   55,   60,  586,  162,
      363,   55,   55,   60,   55,   55,   60,   55,  162,   61,
      363,  588,   55,   61,  575,  162,  162,   61,  566,  566,
       55,   60,   55,   61,   55,   60,   61,   55,   55,   60,
      589,  162,  363,   55,   55,   60,   55,   55,   60,   55,
      162,   61,  363,  598,   55,   61,  586,  162,  162,   61,

      112,  112,  113,  113,  113,   61,  588,  113,   61,  112,
      112,  112,  112,  112,  112,  113,  574,  113,  126,  126,
      126,  587,  291,  126,  291,  589,  567,  291,  291,  597,
      597,  126,  565,  126,  126,  126,  600,  600,  598,  173,
      205,  112,  112,  112,  112,  112,  112,  137,  137,  137,
      141,  561,  137,  554,  141,  173,  173,  205,  141,  193,
      137,  193,  137,  548,  141,  137,  143,  141,  165,  587,
      143,  173,  205,  725,  143,  178,  193,  165,  165,  165,
      143,  165,  141,  143,  178,  165,  141,  173,  173,  205,
      141,  193,  178,  193,  698,  698,  141,  595,  143,  141,

      165,  126,  143,  113,  113,  113,  143,  178,  193,  165,
      165,  165,  143,  165,  539,  143,  178,  165,  725,  126,
      126,  126,  616,  144,  178,  144,  166,  144,  166,  175,
      616,  144,  702,  702,  723,  724,  535,  144,  166,  530,
      144,  726,  144,  166,  175,  595,  175,  788,  137,  137,
      137,  142,  142,  142,  616,  144,  142,  144,  166,  144,
      166,  175,  616,  144,  142,  148,  142,  148,  148,  144,
      166,  164,  144,  164,  144,  166,  175,  142,  175,  148,
      619,  142,  723,  724,  148,  164,  726,  142,  619,  148,
      164,  164,  790,  142,  825,  788,  527,  148,  142,  148,

      148,  358,  620,  164,  358,  164,  620,  794,  794,  142,
      620,  148,  619,  142,  358,  169,  148,  164,  169,  142,
      619,  148,  164,  164,  169,  142,  174,  174,  182,  174,
      142,  169,  169,  358,  620,  522,  358,  790,  620,  825,
      182,  808,  620,  174,  174,  182,  358,  169,  462,  177,
      169,  177,  142,  142,  142,  177,  169,  372,  174,  174,
      182,  174,  177,  169,  169,  180,  177,  372,  207,  181,
      459,  372,  182,  808,  180,  174,  174,  182,  181,  183,
      180,  177,  180,  177,  181,  207,  181,  177,  183,  372,
      183,  184,  795,  795,  177,  350,  183,  180,  177,  372,

      207,  181,  184,  372,  189,  185,  180,  185,  184,  211,
      181,  183,  180,  186,  180,  189,  181,  207,  181,  185,
      183,  189,  183,  184,  185,  190,  211,  791,  183,  186,
      186,  192,  186,  791,  184,  190,  189,  185,  190,  185,
      184,  211,  190,  192,  347,  186,  345,  189,  192,  803,
      803,  185,  344,  189,  194,  810,  185,  190,  211,  362,
      194,  186,  186,  192,  186,  191,  191,  190,  362,  362,
      190,  194,  196,  195,  190,  192,  191,  191,  791,  328,
      192,  191,  191,  379,  191,  195,  194,  810,  826,  196,
      195,  362,  194,  379,  196,  197,  326,  191,  191,  379,

      362,  362,  320,  194,  196,  195,  197,  789,  191,  191,
      789,  197,  197,  191,  191,  379,  191,  195,  198,  201,
      198,  196,  195,  198,  199,  379,  196,  197,  200,  319,
      200,  379,  199,  826,  199,  316,  201,  198,  197,  198,
      201,  199,  200,  197,  197,  919,  919,  200,  203,  311,
      198,  201,  198,  204,  204,  198,  199,  310,  789,  203,
      200,  202,  200,  307,  199,  203,  199,  206,  201,  198,
      204,  198,  201,  199,  200,  302,  202,  202,  202,  200,
      203,  210,  301,  213,  206,  204,  204,  206,  217,  209,
      210,  203,  209,  202,  208,  212,  212,  203,  210,  206,

      213,  299,  204,  208,  208,  217,  209,  217,  202,  202,
      202,  208,  212,  210,  215,  213,  206,  922,  922,  206,
      217,  209,  210,  214,  209,  214,  208,  212,  212,  215,
      210,  215,  213,  216,  288,  208,  208,  217,  209,  217,
      214,  822,  218,  208,  212,  244,  215,  221,  216,  221,
      216,  218,  219,  287,  219,  214,  286,  214,  219,  218,
      282,  215,  244,  215,  219,  216,  221,  220,  220,  219,
      225,  807,  214,  225,  218,  823,  807,  244,  277,  221,
      216,  221,  216,  218,  219,  220,  219,  835,  227,  822,
      219,  218,  227,  225,  244,  229,  219,  224,  221,  220,

      220,  219,  228,  224,  230,  227,  229,  230,  224,  811,
      225,  228,  229,  369,  224,  265,  369,  220,  264,  228,
      227,  230,  228,  823,  227,  225,  369,  229,  833,  224,
     1101, 1101,  835,  263,  228,  224,  230,  227,  229,  230,
      224,  811,  225,  228,  229,  369,  224,  226,  369,  226,
      231,  228,  226,  230,  228,  231,  624,  233,  369,  226,
      226,  232,  226,  232,  624,  226,  226,  231,  226,  233,
     1206, 1206,  232,  234,  233,  834,  833,  154,  630,  226,
      232,  226,  231,  234,  226,  812,  630,  231,  624,  233,
      234,  226,  226,  232,  226,  232,  624,  226,  226,  231,

      226,  233,  237,  236,  232,  234,  233,  235,  239,  235,
      630,  237,  232,  236,  238,  234,  238,  812,  630,  237,
      236,  236,  234,  834,  239,  239,  235,  241,  238,  836,
      242,  238,  242,  238,  237,  236,  915,  241,  152,  235,
      239,  235,  946,  237,  241,  236,  238,  242,  238, 1212,
     1212,  237,  236,  236,  240,  240,  239,  239,  235,  241,
      238,  243,  242,  238,  242,  238, 1305, 1305,  915,  241,
      240,  243,  240,  916,  836,  246,  241,  140,  243,  242,
      245,  251,  245,  251,  245,  139,  240,  240,  246,  947,
      946,  249,  246,  243,  248,  248, 1105,  249,  251,  245,

      245, 1105,  240,  243,  240,  916,  136,  246,  249,  359,
      243,  248,  245,  251,  245,  251,  245,  359,  134,  359,
      246,  247,  247,  249,  246,  250,  248,  248,  247,  249,
      251,  245,  245,  247,  250,  247,  917,  947,  252,  247,
      249,  359,  250,  248,  253,  255,  254,  252,  254,  359,
      253,  359,  254,  247,  247,  252,  255,  250,  256,  382,
      247,  253,  255,  254,  256,  247,  250,  247,  917,  382,
      252,  247,  257,  918,  250,  256,  253,  255,  254,  252,
      254, 1371,  253,  257,  254, 1005, 1371,  252,  255,  257,
      256,  382,  129,  253,  255,  254,  256, 1019,  260,  260,

      260,  382, 1009,  260,  257,  918,  128,  256,  402,  949,
      119,  260,  117,  260,  116,  257,  260,  115,  402, 1308,
     1308,  257,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262, 1005, 1009,  262,  279,  279,  279,  950,
      402,  279,  280,  280,  280, 1019,  279,  280, 1006,  279,
      402,  279,  280,  107,  949,  280, 1011,  280,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  294,
      294,  285,  296,  296,  296, 1012,  106,  296,  294,  294,
      294,  294,  294,  294,  950,  296, 1021,  296, 1011,  297,
      297,  297,  104, 1006,  297,  375, 1029,  102,  375,  260,

      260,  260,  297,  375,  297, 1030,  101, 1012,  375,   94,
      294,  294,  294,  294,  294,  294,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  375, 1026,  300,
      375, 1021, 1096,   92, 1097,  375, 1022,  279,  279,  279,
      375, 1029, 1022,  280,  280,  280,  304,  304,  304,   88,
     1030,  304,  305,  305,  305,   85, 1027,  305,   83,  304,
     1121,  304,  304,  304, 1096,  305, 1097,  305,  305,  305,
      308,  308,   81,  296,  296,  296, 1026,  621,  621,  308,
      308,  308,  308,  308,  308,  621, 1020, 1022,   80, 1020,
      297,  297,  297,  309,  309,  309,  309,  309,  309,  309,

      309,  309,  309,  309, 1027, 1123,  309, 1099, 1121,  621,
      621,  308,  308,  308,  308,  308,  308,  621,  313,  313,
      313, 1174, 1124,  313, 1168,  314,  314,  314, 1124,  304,
      314,  313,   79,  313,   78,  305,  313, 1020,  314, 1099,
      314, 1367, 1367,  314,   76, 1175,   73,  304,  304,  304,
     1123,   72,  383,  305,  305,  305, 1168,   68, 1179,  329,
      329,  329,  383,  383,  329,  360,  360,  360, 1258, 1174,
       66,  364,  329, 1124,  329, 1288,  360,  329,  330,  330,
      330,  364,  360,  330,  383, 1240,  364,  332,  332,  332,
     1175,  330,  332,  330,  383,  383,  330,  360,  360,  360,

      332,  329,  332,  364, 1181,  332, 1179,  330,  360,   64,
       33,   27,   15,  364,  360,  366, 1258, 1240,  364,  313,
      313,  313,  368, 1288,  366,  366,  314,  314,  314,  317,
      317,  317,  368,  329,  317,  331,  331,  331,  386,  330,
      331,  386,  317,  368,  317, 1241, 1243,  366,  331, 1181,
      331,  386,   11,  331,  368,  317,  366,  366,    6,  317,
      329,  329,  329, 1122,  368,  317, 1122, 1303,  331, 1180,
      386,  317, 1180,  386,    5,  368,  317, 1241, 1243,  330,
      330,  330, 1259,  386,  365,    0, 1304,  317,  332,  332,
      332,  317,  365,    0,  365,    0,    0,  317, 1289, 1303,

      331,  365, 1328,  317,  333,  333,  333, 1182,  317,  333,
      334,  334,  334, 1182, 1122,  334,  365,  333, 1304,  333,
     1180,    0,  333,  334,  365,  334,  365, 1259,  334,    0,
      317,  317,  317,  365, 1328,  380,  331,  331,  331,  335,
      335,  335, 1329, 1289,  335,  380,  333,  380,  336,  336,
      336,    0,  335,  336,  335, 1364,    0,  335, 1182,    0,
        0,  336,    0,  336,    0,    0,  336,  380,  335, 1365,
      337,  337,  337,    0, 1329,  337, 1382,  380,  333,  380,
        0,    0,    0,  337,  336,  337,    0, 1364,  337,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,

      335, 1365,  343,    0,  385,  333,  333,  333, 1382,    0,
        0,  334,  334,  334,  385,  385,  336,  338,  338,  338,
        0,    0,  338,    0,    0,    0,    0,  371,  371,    0,
      338, 1383,  338,    0, 1410,  338,  385,  371,    0,    0,
      335,  335,  335,  339,  339,  339,  385,  385,  339,  336,
      336,  336,  340,  340,  340,  338,  339,  340,  339,  371,
      371,  339, 1416, 1383,    0,  340, 1410,  340,    0,  371,
      340,  337,  337,  337,  361,  361,    0,  340,  341,  341,
      341,  631, 1417,  341,    0,  361,    0,  338,    0,  631,
      370,  341,    0,  341, 1416,  626,  341,  342,  342,  342,

      370,  389,  342,  626,    0,  370,  361,  361,  626,  340,
      342,  389,  342,  631, 1417,  342,  389,  361,  338,  338,
      338,  631,  370,  352,  352,  352,  342,  626,  352,    0,
     1429, 1433,  370,  389, 1442,  626,  352,  370,  352,    0,
      626,  352,  406,  389,  339,  339,  339,    0,  389,    0,
      352,    0,  406,  340,  340,  340,    0,    0,  342,    0,
     1450,  628, 1429, 1433,    0, 1454, 1442,    0,    0,  628,
      353,  353,  353,  373,  406,  353,  373,  373,  628,  341,
      341,  341,  352,  353,  406,  353,  373,    0,  353,  354,
      354,  354, 1450,  628,  354,    0,  367, 1454,  342,  342,

      342,  628,  354,  353,  354,  373,  367,  354,  373,  373,
      628,  367,  367,    0,  355,  355,  355,    0,  373,  355,
        0,    0,  632,    0,  352,  352,  352,  355,  367,  355,
      632,    0,  355,    0,    0,  353,  354,    0,  367,    0,
        0,    0,  355,  367,  367,  374,  376,  376,    0,  634,
      374,    0,  355,  374,  632,  374,  376,  634,    0,    0,
        0,    0,  632,    0,  377,  377,  378,  378,  354,    0,
        0,  353,  353,  353,  355,  377,  378,  374,  376,  376,
        0,  634,  374,    0,  355,  374,    0,  374,  376,  634,
      354,  354,  354,  381,  381,  384,  377,  377,  378,  378,

        0,  387,  387,  381,  384,  384,    0,  377,  378,  387,
      390,  387,  388,  388,    0,  355,  355,  355,  390,    0,
      390,  390,    0,  388,    0,  381,  381,  384,    0,  393,
      393,    0,    0,  387,  387,  381,  384,  384,  419,  392,
      393,  387,  390,  387,  388,  388,  391,  391,  419,  392,
      390,    0,  390,  390,  392,  388,  391,  394,  394,  395,
      391,  393,  393,    0,    0,  394,  420,  394,    0,  395,
      419,  392,  393,  394,  395,  396,  420,    0,  391,  391,
      419,  392,    0,  396,    0,  396,  392,    0,  391,  394,
      394,  395,  391,  397,  397,    0,    0,  394,  420,  394,

      398,  395,  397,  397,  399,  394,  395,  396,  420,  398,
      398,    0,  399,    0,  399,  396,    0,  396,  400,  400,
      401,  401,    0,  403,    0,  397,  397,  404,    0,  400,
      401,  404,  398,  403,  397,  397,  399,  404,  405,    0,
      403,  398,  398,  405,  399,    0,  399,  407,  405,    0,
      400,  400,  401,  401,    0,  403,    0,  407,  407,  404,
        0,  400,  401,  404,    0,  403,  408,  408,    0,  404,
      405,  409,  403,    0,    0,  405,  408,  410,  417,  407,
      405,  409,  409,  408,    0,  410,  417,  410,  417,  407,
      407,  411,  411,    0,  412,  412,    0,  641,  408,  408,

        0,  411,    0,  409,  412,  641,  414,  414,  408,  410,
      417,  413,    0,  409,  409,  408,  414,  410,  417,  410,
      417,  413,    0,  411,  411,  421,  412,  412,  413,  641,
      415,  415,  418,  411,  416,  421,  412,  641,  414,  414,
      415,  415,  418,  413,  416,  416,  418,    0,  414,  422,
        0,    0,  422,  413,    0,  423,    0,  421,    0,  422,
      413,    0,  415,  415,  418,  423,  416,  421,    0,  424,
      424,  423,  415,  415,  418,  425,  416,  416,  418,  424,
      426,  422,  427,  427,  422,  425,    0,  423,  428,  428,
      426,  422,  427,  425,  429,  430,  426,  423,  428,  429,

        0,  424,  424,  423,  429,  430,  431,  425,  432,  432,
      432,  424,  426,  431,  427,  427,  431,  425,  431,  432,
      428,  428,  426,  433,  427,  425,  429,  430,  426,  434,
      428,  429,  434,  433,  435,    0,  429,  430,  431,  434,
      432,  432,  432,  436,  435,  431,  437,  437,  431,  435,
      431,  432,  438,  436,    0,  433,  437,  439,    0,    0,
        0,  434,  438,  437,  434,  433,  435,  439,    0,  438,
        0,  434,    0,    0,    0,  436,  435,    0,  437,  437,
        0,  435,    0,    0,  438,  436,    0,  444,  437,  439,
      441,  440,  440,  440,  438,  437,  440,  444,  441,  439,

      441,  438,  442,  442,  440,  443,  440,    0,  444,  440,
        0,  445,  442,  446,  446,  443,  445,  447,  447,  444,
      443,  445,  441,  446,    0,    0,  452,  447,  448,  444,
      441,  452,  441,    0,  442,  442,  452,  443,  448,    0,
      444,  449,  448,  445,  442,  446,  446,  443,  445,  447,
      447,  449,  443,  445,    0,  446,  451,  449,  452,  447,
      448,    0,    0,  452,  450,  450,  451,  451,  452,  454,
      448,  453,  453,  449,  448,  450,    0,    0,  454,  454,
        0,    0,  453,  449,    0,    0,    0,  454,  451,  449,
        0,    0,  440,  440,  440,    0,  450,  450,  451,  451,

        0,  454,  466,  453,  453,  455,  455,  450,    0,    0,
      454,  454,  466,  456,  453,    0,  455,  457,  464,  454,
        0,  456,  455,  456,    0,  457,  465,  457,  464,  465,
      467,  468,  468,  464,  466,    0,  465,  455,  455,  470,
      467,  468,  470,    0,  466,  456,    0,  467,  455,  457,
      464,    0,  470,  456,  455,  456,  469,  457,  465,  457,
      464,  465,  467,  468,  468,  464,  469,  469,  465,    0,
      472,  470,  467,  468,  470,  471,  471,  473,    0,  467,
      472,  474,  472,  471,  470,  471,  472,  473,  469,    0,
      477,  474,  474,  475,  473,    0,  476,  475,  469,  469,

      477,  478,  472,  475,  476,  477,  476,  471,  471,  473,
        0,  478,  472,  474,  472,  471,    0,  471,  472,  473,
      479,  479,  477,  474,  474,  475,  473,    0,  476,  475,
      479,  481,  477,  478,  482,  475,  476,  477,  476,  480,
      480,  481,    0,  478,  482,  481,  483,  483,  484,  480,
      485,  482,  479,  479,    0,  486,  483,    0,  484,    0,
      485,    0,  479,  481,    0,  486,  482,  486,    0,  485,
        0,  480,  480,  481,  487,  489,  482,  481,  483,  483,
      484,  480,  485,  482,  487,  489,  487,  486,  483,  489,
      484,    0,  485,  488,  488,  490,  491,  486,  491,  486,

      492,  485,    0,  488,    0,  490,  487,  489,  491,    0,
      492,    0,  491,    0,  492,    0,  487,  489,  487,  493,
        0,  489,    0,  494,    0,  488,  488,  490,  491,  493,
      491,  496,  492,  494,  496,  488,  493,  490,    0,  494,
      491,  496,  492,  498,  491,    0,  492,  497,  495,  501,
      500,  493,  501,  498,    0,  494,  495,  497,  495,  497,
      500,  493,  501,  496,    0,  494,  496,    0,  493,    0,
        0,  494,    0,  496,    0,  498,  499,  499,    0,  497,
      495,  501,  500,    0,  501,  498,  499,    0,  495,  497,
      495,  497,  500,  504,  501,  502,  502,  503,  503,    0,

      505,    0,    0,  504,  504,  502,    0,  503,  499,  499,
      505,  505,  507,  505,  506,  506,  508,  507,  499,    0,
      509,  508,  507,  509,  506,  504,  508,  502,  502,  503,
      503,  510,  505,  509,    0,  504,  504,  502,    0,  503,
      511,  510,  505,  505,  507,  505,  506,  506,  508,  507,
      511,  512,  509,  508,  507,  509,  506,  511,  508,  514,
        0,  512,  514,  510,  513,  509,  515,  513,  517,  514,
      512,  516,  511,  510,  519,    0,  515,  513,  517,  516,
      515,  516,  511,  512,  519,    0,    0,  520,  520,  511,
      519,  514,    0,  512,  514,    0,  513,  520,  515,  513,

      517,  514,  512,  516,    0,    0,  519,    0,  515,  513,
      517,  516,  515,  516,  518,    0,  519,    0,  518,  520,
      520,    0,  519,    0,  518,  531,  531,  531,    0,  520,
      531,    0,  533,  533,  533,  531,    0,  533,  531,    0,
      531,    0,  533,    0,    0,  533,  518,  533,    0,    0,
      518,    0,  534,  534,  534,    0,  518,  534,  544,  544,
      544,    0,  534,  544,    0,  534,    0,  534,    0,    0,
        0,  544,    0,  544,  546,  546,  546,    0,    0,  546,
      547,  547,  547,    0,  636,  547,    0,  546,    0,  546,
        0,    0,  636,  547,    0,  547,  550,  550,  550,  636,

        0,  550,  552,  552,  552,    0,    0,  552,    0,  550,
        0,  550,  550,  550,    0,  552,  636,  552,  552,  552,
        0,    0,    0,    0,  636,    0,  531,  531,  531,    0,
        0,  636,    0,  533,  533,  533,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,    0,    0,  573,
        0,    0,    0,  534,  534,  534,  623,    0,    0,  544,
      544,  544,  618,    0,  623,    0,    0,    0,  623,    0,
      618,    0,    0,    0,    0,  546,  546,  546,  644,  550,
      618,  547,  547,  547,    0,  552,  644,    0,  623,    0,
        0,    0,    0,    0,  618,    0,  623,  550,  550,  550,

      623,    0,  618,  552,  552,  552,  553,  553,  553,    0,
      644,  553,  618,    0,    0,  556,  556,    0,  644,  553,
        0,  553,  553,  553,  556,  556,  556,  556,  556,  556,
      557,  557,  557,    0,  617,  557,  559,  559,  559,    0,
        0,  559,  617,  557,    0,  557,    0,    0,  557,  559,
        0,  559,    0,  617,  559,    0,  556,  556,  556,  556,
      556,  556,  560,  560,  560,  622,  617,  560,    0,    0,
      625,    0,    0,  622,  617,  560,    0,  560,  625,  627,
      560,  576,  576,  576,  622,  617,  576,  627,    0,  553,
      625,    0,    0,    0,  576,  629,  576,  622,  627,  576,

        0,    0,  625,  629,    0,  622,    0,  553,  553,  553,
      625,  627,  629,  637,    0,  648,  622,    0,  652,  627,
        0,  637,  625,  648,    0,  576,  652,  629,  637,    0,
      627,  557,  557,  557,    0,  629,    0,  559,  559,  559,
        0,  578,  578,  578,  629,  637,  578,  648,    0,    0,
      652,    0,    0,  637,  578,  648,  578,  576,  652,  578,
      637,  633,    0,  560,  560,  560,  564,  564,  564,  633,
        0,  564,  577,  577,  577,    0,    0,  577,  633,  564,
      578,  564,  576,  576,  576,  577,  635,  577,    0,    0,
      577,    0,  564,  633,  635,    0,  564,    0,    0,    0,

        0,  633,  564,  635,  579,  579,  579,    0,  564,  579,
      633,    0,  578,  564,    0,  577,    0,  579,  635,  579,
        0,  645,  579,    0,  564,  645,  635,    0,  564,  645,
        0,  640,    0,  579,  564,  635,  580,  580,  580,  640,
      564,  580,  578,  578,  578,  564,    0,  577,    0,  580,
      640,  580,    0,  645,  580,    0,  638,  645,    0,    0,
        0,  645,    0,  640,  638,  579,    0,  564,  564,  564,
        0,  640,    0,  577,  577,  577,  638,    0,  580,  581,
      581,  581,  640,  653,  581,  582,  582,  582,  638,    0,
      582,  653,  581,    0,  581,    0,  638,  581,  582,    0,

      582,    0,    0,  582,    0,  579,  579,  579,  638,    0,
      580,    0,  583,  583,  583,  653,  649,  583,    0,    0,
      649,    0,    0,  653,  649,  583,    0,  583,  581,    0,
      583,  584,  584,  584,  582,    0,  584,  580,  580,  580,
      590,  590,  590,  639,  584,  590,  584,    0,  649,  584,
        0,  639,  649,  590,    0,  590,  649,  646,  590,  650,
      581,  583,    0,  639,  646,  646,  582,  650,    0,    0,
        0,    0,  590,  584,    0,  639,    0,  642,  650,    0,
      581,  581,  581,  639,    0,  642,  582,  582,  582,  646,
      654,  650,    0,  583,  642,  639,  646,  646,  654,  650,

        0,    0,    0,    0,  590,  584,  591,  591,  591,  642,
      650,  591,    0,  583,  583,  583,    0,  642,    0,  591,
      647,  591,  654,    0,  591,    0,  642,    0,  647,    0,
      654,  651,  584,  584,  584,  592,  592,  592,  647,  651,
      592,  590,  590,  590,  591,  651,    0,    0,  592,    0,
      592,    0,  647,  592,  593,  593,  593,    0,    0,  593,
      647,    0,    0,  651,  592,    0,    0,  593,    0,  593,
      647,  651,  593,  594,  594,  594,  591,  651,  594,  601,
      601,  601,    0,  593,  601,  643,  594,    0,  594,    0,
        0,  594,  601,  643,  601,    0,  592,  601,  602,  602,

      602,    0,  643,  602,    0,    0,    0,  591,  591,  591,
        0,  602,    0,  602,  601,  593,  602,  643,  594,    0,
        0,  655,    0,    0,    0,  643,  603,  603,  603,  655,
        0,  603,  660,    0,  643,    0,  592,  592,  592,  603,
      660,  603,    0,    0,  603,    0,  601,  604,  604,  604,
      594,  603,  604,  655,    0,  593,  593,  593,    0,    0,
      604,  655,  604,    0,  660,  604,    0,    0,    0,    0,
        0,  661,  660,    0,  594,  594,  594,    0,    0,  661,
      601,  601,  601,  603,  661,    0,    0,    0,    0,  605,
      605,  605,    0,    0,  605,    0,    0,    0,    0,  602,

      602,  602,  605,  661,  605,    0,    0,  605,  606,  606,
      606,  661,  656,  606,    0,    0,  661,  607,  607,  607,
      656,  606,  607,  606,    0,    0,  606,  603,  603,  603,
      607,  656,  607,    0,    0,  607,    0,    0,    0,  657,
      608,  608,  608,  606,  656,  608,  658,  657,  604,  604,
      604,    0,  656,  608,  658,  608,  657,  607,  608,  609,
      609,  609,  673,  656,  609,  658,    0,    0,  659,  608,
      673,  657,  609,    0,  609,  606,  659,  609,  658,  657,
      610,  610,  610,  659,    0,  610,  658,    0,  657,  607,
      605,  605,  605,  610,  673,  610,    0,  658,  610,    0,

      659,  608,  673,  609,    0,  610,    0,    0,  659,  606,
      606,  606,  612,  612,  612,  659,    0,  612,  607,  607,
      607,  611,  611,  611,  675,  612,  611,  612,    0,    0,
      612,    0,  675,    0,  611,  609,  611,  610,    0,  611,
      662,  608,  608,  608,  662,  612,    0,    0,  662,    0,
      613,  613,  613,    0,    0,  613,  675,    0,  611,    0,
      609,  609,  609,  613,  675,  613,    0,    0,  613,    0,
        0,    0,  662,  614,  614,  614,  662,  612,  614,  613,
      662,  610,  610,  610,    0,    0,  614,  665,  614,    0,
      611,  614,    0,  663,  664,  665,    0,  664,    0,    0,

        0,  663,  664,  615,  615,  615,  665,    0,  615,    0,
      663,  613,    0,  612,  612,  612,  615,  614,  615,  665,
        0,  615,  611,  611,  611,  663,  664,  665,  615,  664,
        0,  666,  668,  663,  664,    0,  615,  667,  665,  666,
      668,    0,  663,    0,    0,  667,  670,    0,  666,  614,
      669,  613,  613,  613,  670,  668,    0,  667,  669,    0,
      615,    0,  671,  666,  668,  670,    0,  669,  615,  667,
      671,  666,  668,    0,  614,  614,  614,  667,  670,  671,
      666,    0,  669,  672,  676,  674,  670,  668,  677,  667,
      669,  672,  676,  674,  671,  674,  677,  670,    0,  669,

      672,  678,  671,    0,  615,  615,  615,    0,    0,  678,
      679,  671,    0,  680,  681,  672,  676,  674,  679,    0,
      677,  680,  681,  672,  676,  674,  683,  674,  677,  684,
      679,  681,  672,  678,  683,  682,  685,  684,    0,  682,
      684,  678,  679,  682,  685,  680,  681,  687,  689,    0,
      679,  686,  693,  680,  681,  687,  689,  688,  683,  686,
      693,  684,  679,  681,    0,  688,  683,  682,  685,  684,
      686,  682,  684,    0,  690,  682,  685,  688,  691,  687,
      689,  690,  690,  686,  693,  694,  691,  687,  689,  688,
      692,  686,  693,  694,  692,  691,  694,  688,  692,  696,

      695,    0,  686,    0,  705,    0,  690,  696,  695,  688,
      691,  695,  705,  690,  690,  704,  696,  694,  691,    0,
        0,  705,  692,  704,    0,  694,  692,  691,  694,  707,
      692,  696,  695,  704,  706,    0,  705,  707,  706,  696,
      695,    0,  706,  695,  705,    0,    0,  704,  696,  697,
      697,  697,    0,  705,  697,  704,    0,    0,    0,    0,
      712,  707,  697,    0,  697,  704,  706,  697,  712,  707,
      706,  709,  708,  710,  706,  697,  711,  697,    0,  709,
      708,  710,  697,  713,  711,  697,  708,  713,  709,    0,
      710,  713,  712,  715,    0,  715,    0,    0,  711,    0,

      712,  715,  714,  709,  708,  710,    0,  697,  711,  697,
      714,  709,  708,  710,  697,  713,  711,  697,  708,  713,
      709,  714,  710,  713,  716,  715,    0,  715,  716,  717,
      711,  718,  716,  715,  714,  720,  719,  717,  721,  718,
      719,    0,  714,  720,  719,    0,  721,  722,    0,  720,
      697,  697,  697,  714,  727,  722,  716,  729,  727,    0,
      716,  717,  727,  718,  716,  729,  730,  720,  719,  717,
      721,  718,  719,    0,  730,  720,  719,    0,  721,  722,
      728,  720,    0,  730,  728,  731,  727,  722,  728,  729,
      727,  732,  733,  731,  727,  734,    0,  729,  730,  732,

      733,  735,  731,  734,  733,    0,  730,    0,    0,  735,
      732,  737,  728,  738,  736,  730,  728,  731,  736,  737,
      728,  738,  736,  732,  733,  731,    0,  734,  737,  739,
      738,  732,  733,  735,  731,  734,  733,  739,    0,  739,
      740,  735,  732,  737,  742,  738,  736,    0,  740,  743,
      736,  737,  742,  738,  736,  741,  741,  743,  744,  740,
      737,  739,  738,  741,    0,  745,  744,  745,    0,  739,
      744,  739,  740,  745,    0,  741,  742,  746,  748,  743,
      740,  743,    0,    0,  742,  746,  748,  741,  741,  743,
      744,  740,  749,  750,  746,  741,    0,  745,  744,  745,

      749,  750,  744,  749,  747,  745,  747,  741,  751,  746,
      748,  750,  747,  752,    0,  752,  751,  746,  748,  753,
      754,  752,    0,    0,  749,  750,  746,  753,  754,  756,
      753,  756,  749,  750,    0,  749,  747,  756,  747,  754,
      751,    0,  755,  750,  747,  752,  755,  752,  751,    0,
      755,  753,  754,  752,    0,    0,    0,  761,    0,  753,
      754,  756,  753,  756,  757,  761,    0,    0,  757,  756,
        0,  754,  757,  758,  755,  759,  760,  758,  755,  759,
      762,  758,  755,  759,  760,  763,  765,  764,  762,  761,
      760,    0,    0,  763,  765,  764,  757,  761,  762,    0,

      757,    0,  767,  763,  757,  758,  764,  759,  760,  758,
      767,  759,  762,  758,    0,  759,  760,  763,  765,  764,
      762,  766,  760,  766,  768,  763,  765,  764,  769,  766,
      762,  770,  768,    0,  767,  763,  769,    0,  764,  770,
      771,  769,  767,    0,  768,    0,  772,    0,  771,    0,
        0,  770,    0,  766,  772,  766,  768,  777,  771,    0,
      769,  766,  774,  770,  768,  777,  773,  772,  769,    0,
      774,  770,  771,  769,  773,  777,  768,  773,  772,  775,
      771,  774,    0,  770,  776,  775,  772,  775,  776,  777,
      771,    0,  776,  778,  774,    0,  779,  777,  773,  772,

      780,  778,  774,  779,  779,    0,  773,  777,  780,  773,
      781,  775,  778,  774,  781,  783,  776,  775,  781,  775,
      776,    0,  782,  783,  776,  778,  782,    0,  779,  783,
      782,  784,  780,  778,    0,  779,  779,  785,    0,  784,
      780,  785,  781,  786,  778,  785,  781,  783,    0,    0,
      781,  786,    0,    0,  782,  783,  813,    0,  782,  815,
        0,  783,  782,  784,  813,    0,    0,  815,    0,  785,
        0,  784,  815,  785,    0,  786,    0,  785,    0,  792,
      792,  792,    0,  786,  792,  796,  796,  796,  813,  792,
      796,  815,  792,    0,  792,    0,  813,  814,  796,  815,

      796,  798,  798,  798,  815,  814,  798,  800,  800,  800,
        0,    0,  800,  816,  798,  814,  798,  798,  798,  816,
      800,  816,  800,  817,    0,  800,  819,  820,  828,  814,
        0,  817,  818,  829,  819,  820,  828,  814,  819,    0,
      818,  829,    0,    0,    0,  816,    0,  814,    0,    0,
        0,  816,    0,  816,    0,  817,    0,  818,  819,  820,
      828,  837,    0,  817,  818,  829,  819,  820,  828,  837,
      819,    0,  818,  829,    0,  839,    0,    0,    0,    0,
      792,  792,  792,  839,  798,    0,  796,  796,  796,  818,
        0,  830,    0,  837,    0,  830,    0,    0,  821,  830,

        0,  837,  798,  798,  798,    0,  821,  839,  800,  800,
      800,  802,  802,  802,    0,  839,  802,  821,    0,    0,
      831,    0,  831,  830,  802,  840,  802,  830,  831,  840,
      821,  830,  832,  840,    0,  841,    0,  802,  821,    0,
      832,  802,  838,  841,  832,  838,    0,  802,  848,  821,
      838,  842,  831,  802,  831,  842,  848,  840,  802,  842,
      831,  840,    0,    0,  832,  840,    0,  841,    0,  802,
      843,    0,  832,  802,  838,  841,  832,  838,  843,  802,
      848,    0,  838,  842,  844,  802,  845,  842,  848,  843,
      802,  842,  844,  846,  845,  846,  849,  844,  847,  850,

      851,  846,  843,  850,  849,  845,  847,  850,  851,  849,
      843,  853,  802,  802,  802,  847,  844,    0,  845,  853,
        0,  843,    0,    0,  844,  846,  845,  846,  849,  844,
      847,  850,  851,  846,    0,  850,  849,  845,  847,  850,
      851,  849,  852,  853,  854,  855,  856,  847,  857,    0,
      852,  853,  854,  855,  856,  852,  857,  858,  859,  857,
      860,  858,  859,  856,    0,  858,  859,  861,  860,    0,
        0,    0,    0,    0,  852,  861,  854,  855,  856,  861,
      857,    0,  852,    0,  854,  855,  856,  852,  857,  858,
      859,  857,  860,  858,  859,  856,  862,  858,  859,  861,

      860,    0,    0,    0,  862,  863,  864,  861,  864,  862,
      863,  861,  865,  863,  864,  866,  867,    0,  868,  866,
      865,  868,    0,  866,  867,    0,  868,    0,  862,    0,
        0,  871,    0,    0,    0,  867,  862,  863,  864,  871,
      864,  862,  863,    0,  865,  863,  864,  866,  867,  869,
      868,  866,  865,  868,  870,  866,  867,  869,  868,    0,
        0,  872,  870,  871,    0,  873,    0,  867,  869,  872,
        0,  871,  870,  873,  874,  875,  874,  876,  873,  877,
      872,  869,  874,  875,  879,  876,  870,  877,    0,  869,
        0,    0,  879,  872,  870,  883,    0,  873,    0,    0,

      869,  872,    0,  883,  870,  873,  874,  875,  874,  876,
      873,  877,  872,  878,  874,  875,  879,  876,  880,  877,
      882,  878,    0,  881,  879,  884,  880,  883,  882,  881,
      878,  881,    0,  884,  885,  883,    0,    0,  886,  882,
      880,  887,  885,    0,    0,  878,  886,  887,    0,  887,
      880,  888,  882,  878,    0,  881,  886,  884,  880,  888,
      882,  881,  878,  881,  888,  884,  885,  890,  886,  891,
      886,  882,  880,  887,  885,  890,  889,  891,  886,  887,
      889,  887,  894,  888,  889,  892,  893,  895,  886,  893,
      894,  888,  896,  892,  893,  895,  888,    0,    0,  890,

      896,  891,    0,    0,  892,    0,    0,  890,  889,  891,
        0,    0,  889,    0,  894,  897,  889,  892,  893,  895,
      898,  893,  894,  897,  896,  892,  893,  895,  898,  899,
        0,  900,  896,  899,  897,  901,  892,  899,  898,  900,
      902,  898,    0,  901,    0,  903,    0,  897,  902,  904,
      900,  905,  898,  903,  901,  897,  906,  904,    0,  905,
      898,  899,    0,  900,  906,  899,  897,  901,  909,  899,
      898,  900,  902,  898,    0,  901,  909,  903,    0,  907,
      902,  904,  900,  905,  910,  903,  901,  907,  906,  904,
        0,  905,  910,  908,  907,  912,  906,  908,  911,  914,

      909,  908,  927,  912,  911,  913,  911,  914,  909,  913,
      927,  907,  928,  913,    0,    0,  910,    0,    0,  907,
      928,    0,    0,    0,  910,  908,  907,  912,    0,  908,
      911,  914,    0,  908,  927,  912,  911,  913,  911,  914,
        0,  913,  927,    0,  928,  913,  920,  920,  920,    0,
        0,  920,  928,    0,    0,    0,    0,    0,    0,  920,
        0,  920,  929,  930,  920,  931,    0,  932,    0,    0,
      929,  930,  920,  931,  920,  932,  930,    0,    0,  920,
        0,  929,  920,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  929,  930,  924,  931,    0,  932,

        0,  933,  929,  930,  920,  931,  920,  932,  930,  933,
        0,  920,  934,  929,  920,    0,    0,    0,  933,  935,
      934,  936,  937,    0,    0,    0,    0,  935,  939,  936,
      937,  934,  935,  933,  938,  942,  939,  938,  942,    0,
        0,  933,  938,  942,  934,  939,  937,  920,  920,  920,
      933,  935,  934,  936,  937,    0,    0,  940,    0,  935,
      939,  936,  937,  934,  935,  940,  938,  942,  939,  938,
      942,  941,  943,  952,  938,  942,  940,  939,  937,  941,
      943,  952,  941,  944,    0,  944,  953,  945,  954,  940,
      958,  944,  945,    0,  953,  945,  954,  940,  958,    0,

        0,    0,    0,  941,  943,  952,  954,    0,  940,  958,
        0,  941,  943,  952,  941,  944,    0,  944,  953,  945,
      954,  955,  958,  944,  945,  955,  953,  945,  954,  955,
      958,  956,  957,    0,    0,  956,  957,    0,  954,  956,
      957,  958,  959,  960,  959,  960,  961,  962,  963,    0,
      959,  960,  963,  955,  961,  962,  963,  955,  964,    0,
      962,  955,  965,  956,  957,  968,  964,  956,  957,    0,
      965,  956,  957,  968,  959,  960,  959,  960,  961,  962,
      963,  966,  959,  960,  963,    0,  961,  962,  963,  966,
      964,  967,  962,  967,  965,  970,  966,  968,  964,  967,

      969,  971,  965,  970,  973,  968,  972,  969,  969,  971,
      972,  973,  973,  966,  972,    0,  976,    0,  974,    0,
      971,  966,  974,  967,  976,  967,  974,  970,  966,    0,
        0,  967,  969,  971,    0,  970,  973,    0,  972,  969,
      969,  971,  972,  973,  973,  975,  972,  979,  976,  975,
      974,  978,  971,  975,  974,  979,  976,  977,  974,  978,
      977,  980,  981,  982,  978,  977,  979,  983,    0,  980,
      981,  982,    0,  980,    0,  983,    0,  975,    0,  979,
      981,  975,  982,  978,  983,  975,    0,  979,    0,  977,
        0,  978,  977,  980,  981,  982,  978,  977,  979,  983,

      984,  980,  981,  982,    0,  980,    0,  983,  984,  986,
      985,    0,  981,  987,  982,  985,  983,  986,  985,  984,
      988,  987,  989,  990,    0,    0,  993,  990,  988,  991,
      989,  990,  984,  988,  993,  994,  995,  991,    0,  994,
      984,  986,  985,  994,  995,  987,    0,  985,  991,  986,
      985,  984,  988,  987,  989,  990,  992,    0,  993,  990,
      988,  991,  989,  990,  992,  988,  993,  994,  995,  991,
      992,  994,    0,  996,  997,  994,  995,  998,  999, 1000,
      991,  996,  997,    0, 1001,  998,  999, 1000,  992,    0,
     1002,  996, 1001, 1004,    0, 1003,  992,  999, 1002, 1013,

        0, 1004,  992, 1003,    0,  996,  997, 1013, 1003,  998,
      999, 1000, 1002,  996,  997,    0, 1001,  998,  999, 1000,
     1014,    0, 1002,  996, 1001, 1004, 1015, 1003, 1014,  999,
     1002, 1013,    0, 1004, 1015, 1003,    0, 1016, 1017, 1013,
     1003, 1016, 1018, 1023, 1002, 1016, 1017, 1024,    0, 1025,
     1018, 1023, 1014, 1025,    0, 1024, 1023, 1025, 1015, 1032,
     1014,    0,    0, 1032,    0,    0, 1015, 1032, 1033, 1016,
     1017, 1033, 1018, 1016, 1018, 1023, 1033, 1016, 1017, 1024,
        0, 1025, 1018, 1023, 1034, 1025, 1035, 1024, 1023, 1025,
     1035, 1032, 1034,    0, 1035, 1032, 1036, 1037, 1038, 1032,

     1033, 1034, 1039, 1033, 1036, 1037, 1038,    0, 1033,    0,
     1039, 1040, 1041, 1043, 1036, 1039, 1034, 1038, 1035, 1040,
     1041, 1043, 1035,    0, 1034, 1041, 1035,    0, 1036, 1037,
     1038, 1044,    0, 1034, 1039,    0, 1036, 1037, 1038, 1044,
     1042,    0, 1039, 1040, 1041, 1043, 1036, 1039, 1042, 1038,
     1044, 1040, 1041, 1043, 1046,    0, 1045, 1041,    0, 1047,
     1042, 1048, 1046, 1044, 1045, 1048, 1046, 1047, 1049, 1048,
     1047, 1044, 1042, 1050, 1045, 1051, 1049, 1053,    0,    0,
     1042, 1050, 1044, 1051,    0, 1053, 1046, 1049, 1045,    0,
     1050, 1047, 1042, 1048, 1046,    0, 1045, 1048, 1046, 1047,

     1049, 1048, 1047, 1052, 1052, 1050, 1045, 1051, 1049, 1053,
        0, 1052, 1054, 1050, 1054, 1051, 1055, 1053, 1052, 1049,
     1054, 1056, 1050, 1057, 1055, 1056,    0,    0,    0, 1056,
        0, 1057,    0,    0,    0, 1052, 1052,    0,    0,    0,
        0, 1061,    0, 1052, 1054,    0, 1054,    0, 1055, 1061,
     1052,    0, 1054, 1056, 1059, 1057, 1055, 1056, 1059,    0,
     1063, 1056, 1059, 1057, 1058, 1058, 1058, 1060, 1063, 1058,
     1062, 1060, 1058, 1061, 1064, 1060, 1065, 1058, 1062, 1058,
        0, 1061, 1064, 1062, 1065, 1067, 1059,    0, 1066, 1058,
     1059,    0, 1063, 1067, 1059, 1065, 1066, 1058,    0, 1060,

     1063, 1069, 1062, 1060,    0,    0, 1064, 1060, 1065, 1069,
     1062, 1068,    0,    0, 1064, 1062, 1065, 1067, 1066, 1068,
     1066, 1058, 1070, 1071, 1068, 1067,    0, 1065, 1066, 1058,
     1070, 1071, 1072, 1069,    0,    0, 1070,    0, 1073, 1075,
     1072, 1069, 1071, 1068, 1074, 1072, 1073, 1075,    0, 1076,
     1077, 1068, 1074,    0, 1070, 1071, 1068, 1076, 1077,    0,
        0, 1074, 1070, 1071, 1072, 1058, 1058, 1058, 1070,    0,
     1073, 1075, 1072,    0, 1071, 1078, 1074, 1072, 1073, 1075,
     1080, 1076, 1077, 1078, 1074,    0, 1079, 1079, 1080, 1076,
     1077, 1081, 1082, 1074, 1079, 1081, 1084, 1083, 1086, 1081,

     1082, 1083, 1090, 1089, 1084, 1083, 1086, 1078, 1085, 1087,
     1090, 1089, 1080, 1087, 1089, 1078, 1085, 1087, 1079, 1079,
     1080,    0,    0, 1081, 1082, 1085, 1079, 1081, 1084, 1083,
     1086, 1081, 1082, 1083, 1090, 1089, 1084, 1083, 1086, 1092,
     1085, 1087, 1090, 1089, 1088, 1087, 1089, 1092, 1085, 1087,
     1088, 1091, 1088, 1094, 1091, 1095, 1093, 1085,    0, 1091,
     1093, 1094, 1107, 1095, 1093, 1106, 1095, 1106,    0, 1109,
     1107, 1092, 1108, 1106,    0,    0, 1088, 1109,    0, 1092,
     1108, 1110, 1088, 1091, 1088, 1094, 1091, 1095, 1093, 1110,
     1108, 1091, 1093, 1094, 1107, 1095, 1093, 1106, 1095, 1106,

     1111, 1109, 1107, 1112, 1108, 1106, 1113, 1112, 1111, 1109,
     1114, 1112, 1108, 1110, 1113,    0, 1116, 1115, 1114, 1111,
     1116, 1110, 1108, 1117, 1116, 1115, 1119, 1117,    0, 1125,
        0, 1117, 1111,    0, 1119, 1112, 1120, 1125, 1113, 1112,
     1111, 1115, 1114, 1112, 1120, 1118, 1113,    0, 1116, 1115,
     1114, 1111, 1116, 1118, 1126, 1117, 1116, 1115, 1119, 1117,
     1120, 1125, 1126, 1117, 1127, 1118, 1119, 1126, 1120, 1125,
     1128, 1129, 1127, 1115, 1131,    0, 1120, 1118, 1128, 1129,
     1130, 1132, 1131, 1132, 1130, 1118, 1126, 1133, 1130, 1132,
     1134,    0, 1120, 1131, 1126, 1133, 1127, 1118, 1134, 1126,

        0, 1136, 1128, 1129, 1127, 1133, 1131,    0,    0, 1136,
     1128, 1129, 1130, 1132, 1131, 1132, 1130,    0,    0, 1133,
     1130, 1132, 1134, 1137, 1135, 1131, 1135, 1133, 1138,    0,
     1134, 1137, 1135, 1136, 1139, 1140, 1138, 1133, 1141, 1142,
     1144, 1136, 1139, 1140, 1145, 1143, 1141, 1142, 1144, 1146,
        0,    0, 1145, 1143, 1140, 1137, 1135, 1146, 1135, 1143,
     1138, 1148,    0, 1137, 1135, 1149, 1139, 1140, 1138, 1148,
     1141, 1142, 1144, 1149, 1139, 1140, 1145, 1143, 1141, 1142,
     1144, 1146, 1147,    0, 1145, 1143, 1140,    0, 1147, 1146,
     1147, 1143, 1150, 1148, 1151, 1149, 1152, 1149, 1153,    0,

     1150, 1148, 1151, 1155, 1152, 1149, 1153, 1154, 1156, 1154,
     1157, 1155,    0, 1157, 1147, 1154, 1156, 1155, 1157,    0,
     1147, 1158, 1147, 1159, 1150, 1160, 1151, 1156, 1152, 1158,
     1153, 1159, 1150, 1160, 1151, 1155, 1152,    0, 1153, 1154,
     1156, 1154, 1157, 1155, 1160, 1157, 1161, 1154, 1156, 1155,
     1157,    0, 1162, 1158, 1161, 1159, 1163, 1160, 1164, 1156,
     1162, 1158, 1165, 1159, 1163, 1160, 1164, 1163,    0, 1166,
     1165, 1171, 1170, 1176,    0, 1172, 1160, 1166, 1161, 1171,
     1170, 1176,    0, 1172, 1162, 1183, 1161,    0, 1163, 1173,
     1164, 1170, 1162, 1183, 1165,    0, 1163, 1173, 1164, 1163,

     1172, 1166, 1165, 1171, 1170, 1176, 1173, 1172, 1177, 1166,
     1178, 1171, 1170, 1176, 1184, 1172, 1177, 1183, 1178,    0,
     1177, 1173, 1184, 1170,    0, 1183, 1185, 1178, 1186, 1173,
        0, 1187, 1172, 1188, 1185, 1190, 1186, 1189, 1173, 1187,
     1177, 1188, 1178, 1190,    0, 1189, 1184, 1192, 1177, 1193,
     1178, 1192, 1177, 1196, 1184, 1192, 1189, 1193, 1185, 1178,
     1186, 1196, 1191, 1187, 1197, 1188, 1185, 1190, 1186, 1189,
     1191, 1187, 1197, 1188, 1194, 1190, 1198, 1189, 1194, 1192,
     1191, 1193, 1194, 1192, 1198, 1196,    0, 1192, 1189, 1193,
     1199, 1195, 1201, 1196, 1191, 1195, 1197, 1200, 1199, 1195,

     1201, 1200, 1191,    0, 1197, 1200, 1194, 1202, 1198, 1203,
     1194, 1201, 1191,    0, 1194, 1202, 1198, 1203, 1204,    0,
     1202, 1204, 1199, 1195, 1201,    0, 1204, 1195, 1203, 1200,
     1199, 1195, 1201, 1200,    0,    0,    0, 1200, 1214, 1202,
     1215, 1203,    0, 1201,    0,    0, 1214, 1202, 1215, 1203,
     1204, 1210, 1202, 1204,    0,    0, 1216,    0, 1204, 1210,
     1203, 1205, 1205, 1205, 1216, 1210, 1205, 1218,    0, 1205,
     1214,    0, 1215, 1217, 1205, 1218, 1205,    0, 1214, 1205,
     1215, 1217, 1219, 1210, 1217, 1205, 1205, 1219, 1216, 1205,
     1219, 1210, 1221, 1220, 1223, 1222, 1216, 1210, 1223, 1218,

     1221, 1220, 1223, 1222, 1224, 1217, 1220, 1218, 1222, 1225,
     1224,    0, 1224, 1217, 1219,    0, 1217, 1225, 1205, 1219,
     1226, 1205, 1219, 1225, 1221, 1220, 1223, 1222, 1226,    0,
     1223,    0, 1221, 1220, 1223, 1222, 1224, 1227, 1220, 1226,
     1222, 1225, 1224, 1228, 1224, 1227, 1231,    0, 1227, 1225,
     1230, 1228, 1226,    0, 1231, 1225,    0, 1229, 1230, 1229,
     1226, 1230, 1205, 1205, 1205, 1229, 1233,    0, 1234, 1227,
        0, 1226, 1234, 1232, 1233, 1228, 1234, 1227, 1231,    0,
     1227, 1232, 1230, 1228, 1235,    0, 1231, 1232, 1236, 1229,
     1230, 1229, 1235, 1230, 1238, 1239, 1236, 1229, 1233, 1237,

     1234, 1246, 1238, 1239, 1234, 1232, 1233, 1237, 1234, 1246,
     1237,    0,    0, 1232, 1247, 1249, 1235, 1248,    0, 1232,
     1236,    0, 1247, 1249, 1235, 1248, 1238, 1239, 1236, 1249,
     1250, 1237, 1251, 1246, 1238, 1239, 1248, 1253, 1250, 1237,
     1251, 1246, 1237, 1252, 1254, 1253, 1247, 1249,    0, 1248,
     1251, 1252, 1254,    0, 1247, 1249, 1252, 1248, 1257, 1255,
        0, 1249, 1250, 1256, 1251, 1255, 1257, 1255, 1248, 1253,
     1250, 1256, 1251, 1260,    0, 1252, 1254, 1253, 1262, 1262,
     1256, 1260, 1251, 1252, 1254, 1261, 1262, 1261, 1252,    0,
     1257, 1255, 1263, 1261, 1260, 1256, 1264, 1255, 1257, 1255,

     1263, 1265,    0, 1256, 1264, 1260, 1266,    0, 1271, 1265,
     1262, 1262, 1256, 1260, 1266, 1269, 1271, 1261, 1262, 1261,
     1265, 1267, 1263, 1269, 1263, 1261, 1260, 1268, 1264, 1267,
        0, 1267, 1263, 1265,    0, 1268, 1264,    0, 1266, 1269,
     1271, 1265, 1273, 1270,    0, 1268, 1266, 1269, 1271, 1272,
     1273, 1270, 1265, 1267, 1273, 1269, 1274, 1272, 1275, 1268,
        0, 1267, 1270, 1267, 1274,    0, 1275, 1268, 1272,    0,
     1275, 1269, 1276, 1274, 1273, 1270, 1277, 1268,    0, 1280,
     1276, 1272, 1273, 1270, 1277,    0, 1273, 1280, 1274, 1272,
     1275, 1276,    0, 1277, 1270, 1278, 1274,    0, 1275, 1278,

     1272,    0, 1275, 1278, 1276, 1274, 1279, 1284, 1277, 1281,
     1279, 1280, 1276, 1281, 1279, 1284, 1277, 1281, 1283, 1280,
     1285, 1286, 1283, 1276, 1287, 1277, 1283, 1278, 1285, 1286,
        0, 1278, 1287,    0, 1285, 1278, 1291,    0, 1279, 1284,
        0, 1281, 1279, 1290, 1291, 1281, 1279, 1284,    0, 1281,
     1283, 1290, 1285, 1286, 1283, 1293, 1287, 1290, 1283, 1292,
     1285, 1286, 1294, 1293, 1287, 1295, 1285, 1292, 1291, 1296,
     1294, 1297, 1292, 1295, 1298, 1290, 1291, 1296, 1299, 1297,
        0,    0, 1298, 1290, 1300, 1301, 1299, 1293, 1298, 1290,
     1314, 1292, 1300, 1301, 1294, 1293,    0, 1295, 1314, 1292,

     1310, 1296, 1294, 1297, 1292, 1295, 1298,    0, 1310, 1296,
     1299, 1297,    0, 1310, 1298,    0, 1300, 1301, 1299,    0,
     1298,    0, 1314,    0, 1300, 1301, 1315,    0, 1317, 1316,
     1314, 1319, 1310,    0, 1315, 1316, 1317, 1316,    0, 1319,
     1310,    0,    0,    0,    0, 1310, 1311, 1311, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311,    0, 1315, 1311,
     1317, 1316, 1318, 1319, 1320, 1318, 1315, 1316, 1317, 1316,
     1318, 1319, 1320, 1321, 1322, 1324, 1323, 1321, 1322, 1325,
     1326, 1321, 1322, 1324, 1323, 1327, 1320, 1325, 1326,    0,
        0, 1333, 1325, 1327, 1318, 1323, 1320, 1318,    0, 1333,

        0,    0, 1318,    0, 1320, 1321, 1322, 1324, 1323, 1321,
     1322, 1325, 1326, 1321, 1322, 1324, 1323, 1327, 1320, 1325,
     1326, 1332, 1331, 1333, 1325, 1327, 1331, 1323,    0, 1332,
     1331, 1333, 1334, 1335, 1332, 1336,    0, 1335, 1334, 1336,
     1334, 1335, 1337, 1336, 1338,    0, 1337, 1341, 1338, 1339,
     1337, 1340, 1338, 1332, 1331, 1341, 1340, 1339, 1331, 1340,
     1339, 1332, 1331,    0, 1334, 1335, 1332, 1336,    0, 1335,
     1334, 1336, 1334, 1335, 1337, 1336, 1338, 1342, 1337, 1341,
     1338, 1339, 1337, 1340, 1338, 1342, 1343, 1341, 1340, 1339,
     1344, 1340, 1339, 1345, 1343, 1346, 1347,    0, 1344, 1348,

     1349, 1345, 1350, 1346, 1347, 1343, 1352, 1348, 1349, 1342,
     1350, 1347, 1351, 1353, 1352, 1349, 1353, 1342, 1343,    0,
     1351, 1353, 1344, 1348, 1351, 1345, 1343, 1346, 1347,    0,
     1344, 1348, 1349, 1345, 1350, 1346, 1347, 1343, 1352, 1348,
     1349, 1354, 1350, 1347, 1351, 1353, 1352, 1349, 1353, 1354,
     1355, 1356, 1351, 1353, 1357, 1348, 1351, 1358, 1355, 1356,
        0, 1359, 1357, 1359, 1360, 1358, 1361, 1362, 1358, 1359,
     1356,    0, 1360, 1354, 1361, 1362, 1357, 1360,    0,    0,
     1372, 1354, 1355, 1356, 1362, 1361, 1357,    0, 1372, 1358,
     1355, 1356,    0, 1359, 1357, 1359, 1360, 1358, 1361, 1362,

     1358, 1359, 1356, 1363, 1360, 1374, 1361, 1362, 1357, 1360,
     1373, 1363, 1372, 1374, 1373, 1375, 1362, 1361, 1373, 1377,
     1372, 1363, 1376, 1375, 1378, 1379, 1380, 1377,    0,    0,
     1376, 1384, 1378, 1379, 1380, 1363, 1381, 1374,    0, 1384,
     1376, 1385, 1373, 1363, 1381, 1374, 1373, 1375,    0, 1385,
     1373, 1377, 1386, 1363, 1376, 1375, 1378, 1379, 1380, 1377,
     1386, 1381, 1376, 1384, 1378, 1379, 1380, 1387, 1381, 1388,
     1389, 1384, 1376, 1385,    0, 1387, 1381, 1388, 1389, 1390,
     1392, 1385, 1391, 1394, 1386, 1387, 1391, 1390, 1392,    0,
     1391, 1394, 1386, 1381,    0,    0, 1395, 1390, 1397, 1387,

        0, 1388, 1389,    0, 1395,    0, 1397, 1387, 1395, 1388,
     1389, 1390, 1392, 1393, 1391, 1394,    0, 1387, 1391, 1390,
     1392, 1393, 1391, 1394, 1396, 1398,    0, 1393, 1395, 1390,
     1397, 1400, 1396, 1398, 1399, 1396, 1395,    0, 1397, 1400,
     1395, 1401, 1399, 1402, 1403, 1393, 1404, 1405, 1399, 1401,
     1406, 1402, 1403, 1393, 1404, 1405, 1396, 1398, 1406, 1393,
     1407, 1408, 1403, 1400, 1396, 1398, 1399, 1396, 1407, 1408,
        0, 1400,    0, 1401, 1399, 1402, 1403, 1409, 1404, 1405,
     1399, 1401, 1406, 1402, 1403, 1409, 1404, 1405,    0, 1414,
     1406, 1413, 1407, 1408, 1403,    0, 1409, 1414, 1418, 1413,

     1407, 1408, 1413, 1415, 1419, 1420, 1418, 1415,    0, 1409,
     1421, 1415, 1419, 1420, 1421,    0, 1423, 1409, 1421, 1422,
     1423, 1414,    0, 1413, 1423,    0,    0, 1422, 1409, 1414,
     1418, 1413, 1422, 1427, 1413, 1415, 1419, 1420, 1418, 1415,
        0, 1427, 1421, 1415, 1419, 1420, 1421, 1425, 1423, 1424,
     1421, 1422, 1423, 1424, 1426, 1425, 1423, 1424, 1428, 1422,
     1425,    0, 1426, 1427, 1422, 1427, 1428, 1430, 1426, 1431,
     1430,    0, 1431, 1427, 1435, 1430, 1436, 1431,    0, 1425,
     1434, 1424, 1435,    0, 1436, 1424, 1426, 1425, 1434, 1424,
     1428, 1434, 1425,    0, 1426, 1437,    0, 1438, 1428, 1430,

     1426, 1431, 1430, 1437, 1431, 1438, 1435, 1430, 1436, 1431,
     1440, 1439, 1434, 1441, 1435, 1441, 1436, 1444, 1440, 1439,
     1434, 1441, 1440, 1434, 1439, 1444, 1443, 1437, 1446, 1438,
     1447, 1446, 1448, 1449, 1443, 1437, 1446, 1438, 1447,    0,
     1448, 1449, 1440, 1439, 1443, 1441, 1448, 1441,    0, 1444,
     1440, 1439,    0, 1441, 1440,    0, 1439, 1444, 1443, 1451,
     1446, 1452, 1447, 1446, 1448, 1449, 1443, 1451, 1446, 1452,
     1447,    0, 1448, 1449, 1453, 1455, 1443, 1453, 1448, 1452,
     1456, 1458, 1453, 1455, 1459,    0, 1458, 1462, 1456, 1458,
     1460, 1451, 1459, 1452, 1460, 1462,    0, 1461, 1460, 1451,

     1461, 1452,    0,    0,    0, 1461, 1453, 1455,    0, 1453,
        0, 1452, 1456, 1458, 1453, 1455, 1459,    0, 1458, 1462,
     1456, 1458, 1460,    0, 1459,    0, 1460, 1462,    0, 1461,
     1460,    0, 1461,    0,    0,    0,    0, 1461, 1464, 1464,
     1464, 1464, 1464, 1464, 1465, 1465,    0,    0, 1465, 1465,
     1466, 1466, 1466, 1466, 1466, 1466, 1467, 1467,    0,    0,
     1467, 1467, 1468, 1468, 1469, 1469,    0,    0, 1469, 1469,
     1471, 1471,    0,    0, 1471, 1471, 1472, 1472, 1472, 1472,
     1472, 1472, 1473, 1473, 1473, 1473, 1473, 1473, 1475, 1475,
     1475, 1475, 1475, 1475, 1476, 1476, 1477, 1477, 1477, 1477,

     1477, 1477, 1478, 1478, 1478, 1478, 1478, 1478, 1479, 1479,
     1479, 1479, 1479, 1479, 1480, 1480,    0,    0, 1480, 1480,
     1481, 1481,    0,    0, 1481, 1481, 1482, 1482,    0,    0,
     1482, 1482, 1483, 1483,    0,    0, 1483, 1483, 1484, 1484,
        0,    0, 1484, 1484, 1485, 1485, 1485, 1485, 1485, 1485,
     1487, 1487,    0,    0, 1487, 1487, 1488, 1488, 1488, 1488,
     1488, 1488, 1489, 1489, 1489,    0, 1489, 1489, 1490, 1490,
     1490, 1490, 1490, 1490, 1491, 1491, 1491,    0, 1491, 1491,
     1492, 1492, 1492, 1492, 1492, 1492, 1493, 1493, 1493, 1493,
     1493, 1493, 1494, 1494, 1494, 1494, 1494, 1494, 1495, 1495,

     1495, 1495, 1495, 1495, 1496, 1496, 1496, 1496, 1496, 1496,
     1497, 1497, 1497, 1497, 1497, 1497, 1500, 1500, 1500, 1500,
     1500, 1500, 1501, 1501, 1501, 1501, 1501, 1501, 1502, 1502,
     1502, 1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503, 1503,
     1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505, 1505,
     1505, 1505, 1506, 1506, 1506, 1506, 1506, 1506, 1507, 1507,
     1507, 1507, 1507, 1507, 1508, 1508, 1508, 1508, 1508, 1508,
     1509, 1509, 1509, 1509, 1509, 1509, 1510, 1510, 1510,    0,
     1510, 1511, 1511,    0,    0, 1511, 1511, 1512, 1512,    0,
        0, 1512, 1512, 1513, 1513,    0,    0, 1513, 1513, 1514,

     1514,    0,    0, 1514, 1514, 1515, 1515,    0,    0, 1515,
     1515, 1516, 1516,    0,    0, 1516, 1516, 1517, 1517, 1517,
        0, 1517, 1517, 1518, 1518, 1518, 1518, 1518, 1518, 1519,
     1519, 1519, 1519, 1519, 1519, 1520, 1520, 1520,    0, 1520,
     1520, 1521, 1521, 1521, 1521, 1521, 1521, 1522, 1522, 1522,
     1522, 1522, 1522, 1523, 1523, 1523, 1523, 1523, 1523, 1524,
     1524, 1524, 1524, 1524, 1524, 1525, 1525, 1525, 1525, 1525,
     1525, 1527, 1527, 1527, 1527, 1527, 1527, 1528, 1528, 1528,
     1528, 1528, 1528, 1529, 1529, 1529, 1529, 1529, 1529, 1530,
     1530, 1530, 1530, 1530, 1530, 1531, 1531, 1531, 1531, 1531,

     1531, 1532, 1532, 1532, 1532, 1532, 1532, 1533, 1533, 1533,
     1533, 1533, 1533, 1534, 1534, 1534, 1534, 1534, 1534, 1535,
     1535, 1535, 1535, 1535, 1535, 1536, 1536, 1536, 1536, 1536,
     1536, 1537, 1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538,
     1538, 1538, 1538, 1539, 1539, 1539, 1539, 1539, 1539, 1540,
     1540, 1540,    0, 1540, 1541, 1541, 1541, 1541, 1541, 1541,
     1542, 1542, 1542,    0, 1542, 1542, 1543, 1543, 1543, 1543,
     1543, 1543, 1544, 1544, 1544,    0, 1544, 1544, 1545, 1545,
        0,    0, 1545, 1545, 1546, 1546,    0,    0, 1546, 1546,
     1547, 1547, 1547, 1547, 1547, 1547, 1548, 1548, 1548, 1548,

     1548, 1548, 1549, 1549, 1549,    0, 1549, 1549, 1550, 1550,
     1550, 1550, 1550, 1550, 1551, 1551, 1551,    0, 1551, 1551,
     1552, 1552, 1552, 1552, 1552, 1552, 1553, 1553, 1553, 1553,
     1553, 1553, 1554, 1554, 1554, 1554, 1554, 1554, 1555, 1555,
     1555, 1555, 1555, 1555, 1557, 1557, 1557, 1557, 1557, 1557,
     1558, 1558, 1558, 1558, 1558, 1558, 1559, 1559, 1559, 1559,
     1559, 1559, 1560, 1560, 1560, 1560, 1560, 1560, 1561, 1561,
     1561, 1561, 1561, 1561, 1562, 1562, 1562, 1562, 1562, 1562,
     1563, 1563, 1563, 1563, 1563, 1563, 1564, 1564, 1564, 1564,
     1564, 1564, 1565, 1565, 1565, 1565, 1565, 1565, 1566, 1566,

     1566,    0, 1566, 1566, 1567, 1567, 1567, 1567, 1567, 1567,
     1568, 1568, 1568,    0, 1568, 1568, 1569, 1569, 1569, 1569,
     1569, 1569, 1570, 1570, 1570, 1570, 1570, 1570, 1571, 1571,
     1571, 1571, 1571, 1571, 1572, 1572, 1572, 1572, 1572, 1572,
     1573, 1573, 1573, 1573, 1573, 1573, 1574, 1574, 1574, 1574,
     1574, 1574, 1575, 1575, 1575, 1575, 1575, 1575, 1576, 1576,
     1576, 1576, 1576, 1577, 1577, 1577, 1577, 1577, 1577, 1578,
     1578, 1578, 1578, 1578, 1578, 1579, 1579, 1579, 1579, 1579,
     1579, 1580, 1580, 1580, 1580, 1580, 1580, 1581, 1581, 1581,
     1581, 1581, 1581, 1463, 1463, 1463, 1463, 1463, 1463, 1463,

     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "zetasql/parser/flex_tokenizer.l"
/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
/* Tokenize the SQL input stream into a series of tokens to feed into the
   parser.
*/
/* Flex will generate ZetaSqlFlexTokenizer::GetNextTokenFlexImpl(). The
   remainder of the class definition is controlled by us, in
   flex_tokenizer.h. */
/* After "." we allow more things, including all keywords and all
   integers, to be returned as identifiers. This state is initiated when we
   recognize an identifier followed by a ".". It is also initiated after a
   closing parenthesis, square bracket, or "?" (positional parameter) followed
   by a ".", to handle cases like foo[3].array. See the "." rule and the
   <DOT_IDENTIFIER>{generalized_identifier}.

   The %x means that in this state, the only rules that are active are the ones
   that are explicitly marked with <DOT_IDENTIFIER> or <*>. It is essentially a
   small separate tokenizer. The tokenizer only has rules to recognize
   {generalized_identifier}, and a catchall rule that falls back to the regular
   tokenizer state. This fallback ensures that things like ".(" are parsed using
   the normal rules. */

/* This inclusive state is for in ARRAY<...> and STRUCT<...>. It turns off the
   parsing of <<, >>, and <>, but leaves everything else the same. Doing this in
   the tokenizer avoids complicated rules and duplication at the parser level.

   This state is marked %s, which means that all rules are active unless they
   provide an explicit list of states that do not include
   IN_ARRAY_OR_STRUCT_TYPE.
*/

/* This inclusive state is for BETWEEN...AND. In this state, everything works
   as normal, but the "AND" keyword is returned as KW_AND_FOR_BETWEEN instead of
   KW_AND. This resolves what would otherwise be ambiguous in the bison grammar.
   Note that this state is automatically turned off within parentheses and
   square brackets, using yy_push_state() and yy_pop_state(). That ensures that
   something like BETWEEN (a AND b) AND c still parses.

   This state is marked %s, which means that all rules are active unless they
   provide an explicit list of states that do not include IN_BETWEEN. No rules
   are actually disabled or added for IN_BETWEEN -- we only check the state at
   the top of the stack in the "and" keyword rule, but that doesn't require a
   separate rule.
*/

/* This state is pushed onto the bottom of the stack at initialization time.
   This ensures that the yy_pop_state() called in the rules for ), ] and } can
   recognize when they have reached the bottom of the stack and when they should
   not pop another state. The state is marked as %x, which means that only rules
   marked <*> or <STACK_BOTTOM> will be active in this mode. In practice this
   means that only the whitespace and catchall error rules will be active.
*/

#line 78 "zetasql/parser/flex_tokenizer.l"
#include <algorithm>
#include <string>
#include <string.h>

#include "zetasql/parser/bison_parser.bison.h"
#include "zetasql/parser/flex_tokenizer.h"
#include "zetasql/parser/keywords.h"
#include "zetasql/public/parse_location.h"
#include "zetasql/public/strings.h"
#include "absl/strings/escaping.h"
#include "absl/strings/string_view.h"

using zetasql_bison_parser::BisonParserImpl;

#undef YY_DECL
#define YY_DECL \
    int zetasql::parser::ZetaSqlFlexTokenizer::GetNextTokenFlexImpl( \
        zetasql_bison_parser::location* yylloc)

// This action is executed for every token that is matched, before the defined
// actions are executed. We use this to:
// - Keep location up to date. We abuse the column value and treat it as a byte
//   offset.
// - Support forcible termination. This is used by the parser to terminate
//   the parsing process when it has read enough of a prefix, e.g. for
//   multi-statement parsing or for determining the next statement kind.
#define YY_USER_ACTION \
  if (force_terminate_) yyterminate(); \
  /* Note that we store byte offsets in the 'column' field. */ \
  yylloc->begin.column = yylloc->end.column; \
  yylloc->end.column += yyleng;

// Call this in an action to return only a prefix of the match of
// 'prefix_length' bytes.
#define SET_RETURN_PREFIX_LENGTH(prefix_length) \
  do { \
    const int prefix_length_result = (prefix_length); \
    yyless(prefix_length_result); \
    yylloc->end.column = yylloc->begin.column + prefix_length_result; \
  } while (0)

constexpr char ::zetasql::parser::ZetaSqlFlexTokenizer::kEofSentinelInput[];

#line 3135 "bazel-out/k8-fastbuild/bin/zetasql/parser/flex_tokenizer.flex.cc"
/* These are some basic regex definitions that are used in the lexer rules
   below.
*/
/* Floating point formats are identified by the presence of a dot and/or an
   exponent. If there's a dot, there has to be at least one digit either before
   or after the dot. This is covered by the first two regexes. The third regex
   covers digits with an exponent but without a dot. */
/* Whitespace, including Unicode whitespace characters encoded as UTF-8, as well
   as all comments.
   https://www.cs.tut.fi/~jkorpela/chars/spaces.html

   OGHAM SPACE MARK (U+1680) is omitted because it looks like "-".
   MONGOLIAN VOWEL SEPARATOR (U+180E) is omitted because it has no width.
   ZERO WIDTH SPACE (U+200B) is omitted because it has no width.
   ZERO WIDTH NO-BREAK SPACE (U+FEFF) is omitted because it has no width.

   The whitespace rule has a "*" so that we match all consecutive whitespace
   without running YY_USER_ACTION.
*/
/* String/bytes literals and identifiers.

   The abbreviations here:
     sq = single quote(d)
     dq = double quote(d)
     bq = back quote(d)
     3 = triple quoted
     r = raw
     _0 = unterminated versions. They are used to return better error
          messages for unterminated strings.

   For instance, rsq3 means "raw triple single-quoted", or r'''...'''.

   The regexes accept arbitrary escapes instead of trying to narrow it down to
   just the valid set. This is safe because in valid strings the character after
   the escape is *always* eaten, even in raw strings. The actual validation of
   the escapes, and of things like UTF-8 structure, is done in the parser.
   This also allows us to use the same regex for raw strings that we use for any
   other string. Raw strings interpret the escapes differently (they allow all
   escapes and pass them through verbatim), but the termination condition is
   the same: escaped quotes don't count.

   In single quoted strings/bytes we don't accept \n so that a single-line
   unterminated string literal is recognized as an unterminated string literal
   at that point, instead of being bogusly matched up with another quote on a
   subsequent line. However, we do accept escaped newlines. These get a separate
   and nicer error message pointing directly at the escaped newline.
*/
/* Strings and bytes: */
/* Identifiers: */
/* C-style comments using slash+star.
   cs_ prefix is for "c-style comment", shortened to avoid long lines.
   For more information about how this works, see
   "Using one, even more complicated, pattern" from
   http://www.cs.man.ac.uk/~pjj/cs212/ex2_str_comm.html
*/
/* Contents of a C-style comment that may embed a * (or a sequence of stars)
   followed by not-a-slash. */
/* Matches the beginning of a comment, to detect unterminated comments. */
/* Requiring a newline at the end of dash_coment and pound_comment does not
   cause an error even if the comment comes in the last line of a query,
   thanks to the newline sentinel input (See:
   https://github.com/google/zetasql/blob/master/zetasql/parser/flex_tokenizer.h?l=128).
*/
/* Dash comments using -- */
/* # comment ignores anything from # to the end of the line. */
#line 3201 "bazel-out/k8-fastbuild/bin/zetasql/parser/flex_tokenizer.flex.cc"

#define INITIAL 0
#define DOT_IDENTIFIER 1
#define IN_ARRAY_OR_STRUCT_TYPE 2
#define IN_BETWEEN 3
#define STACK_BOTTOM 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 284 "zetasql/parser/flex_tokenizer.l"

#line 286 "zetasql/parser/flex_tokenizer.l"
 /* RULES SECTION

    This is a list of lexer rules, where the left side is the token and the
    right side is a return that yields the enum for the token.
    bison_parser.y refers to the token enums.
 */


    // Has to be first in 'rules' section, do not move it.
    // We use this code to support multiple start-symbols in bison.
    // For more information see section 11.5 of bison manual.
    // gnu.org/software/bison/manual/html_node/Multiple-start_002dsymbols.html
    if (is_first_token_) {
      // TODO: See if we can do this with YY_USER_INIT instead.
      is_first_token_ = false;
      // Because (), [] and {} push INITIAL, a rogue ), ] or } could pop beyond
      // the bottom of the stack, which would normally crash. Instead, put an
      // extra mode at the bottom of the stack that catches this case and
      // that generates an error instead. (In practice the parser will reject
      // the unbalanced ) or ] so this should never happen unless there is a
      // bug in the grammar.)
      yy_push_state(STACK_BOTTOM);
      yy_push_state(INITIAL);
      // Note that we store byte offsets in the 'column' field.
      yylloc->begin.column = yylloc->end.column = start_offset_;
      switch (mode_) {
        case BisonParserMode::kStatement:
          return BisonParserImpl::token::MODE_STATEMENT;
        case BisonParserMode::kScript:
          return BisonParserImpl::token::MODE_SCRIPT;
        case BisonParserMode::kNextStatement:
          return BisonParserImpl::token::MODE_NEXT_STATEMENT;
        case BisonParserMode::kNextScriptStatement:
          return BisonParserImpl::token::MODE_NEXT_SCRIPT_STATEMENT;
        case BisonParserMode::kNextStatementKind:
          return BisonParserImpl::token::MODE_NEXT_STATEMENT_KIND;
        case BisonParserMode::kExpression:
          return BisonParserImpl::token::MODE_EXPRESSION;
        case BisonParserMode::kType:
          return BisonParserImpl::token::MODE_TYPE;
        case BisonParserMode::kTokenizer:
        case BisonParserMode::kTokenizerPreserveComments:
          // Don't generate a mode token when we are doing raw tokenization.
          // With or without comments.
          break;
      }
    }
    yylloc->begin = yylloc->end;


 /* IMPORTANT: This rule must come before keywords, since it conditionally
  *   force-emits the IDENTIFIER token, even if a keyword is present.
 */
#line 3393 "bazel-out/k8-fastbuild/bin/zetasql/parser/flex_tokenizer.flex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1464 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1463 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 339 "zetasql/parser/flex_tokenizer.l"
{
  // We have a label declaration, so force a LABEL token even if it
  // matches a non-reserved keyword. Note that label names cannot be handled in
  // the grammar via the keyword_as_identifier rule, due to reduce/reduce
  // conflicts.
  SET_RETURN_PREFIX_LENGTH(GetIdentifierLength(YYText()));

  if (IsReservedKeyword(YYText())) {
    SetOverrideError(*yylloc,
                     absl::StrCat("Reserved keyword '", YYText(),
                     "' may not be used as a label name without backquotes"));
    yyterminate();
  } else {
    return zetasql_bison_parser::BisonParserImpl::token::LABEL;
  }
}
	YY_BREAK
/* All keywords (used, reserved, and usable-as-identifiers). These are
    ambiguous with the identifier rule, but they win because they are
    specified before the identifier rule.

    IMPORTANT:
    All these keywords MUST be listed in GetAllKeywords() in keywords.cc as
    well. We have tried removing the keyword rules and instead using the
    keyword functions in the {identifier} production, but that was significantly
    slower.
 */
/* BEGIN_KEYWORDS -- Do not remove! */
case 2:
YY_RULE_SETUP
#line 367 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ABORT; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 368 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ACCESS; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 369 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ACTION; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 370 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ADD; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 371 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_AGGREGATE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 372 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ALL; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 373 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ALTER; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 374 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ANALYZE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 375 "zetasql/parser/flex_tokenizer.l"
{
  if (YY_START == IN_BETWEEN) {
    // See IN_BETWEEN tokenizer mode description.
    yy_pop_state();
    if (mode_ == BisonParserMode::kTokenizer) {
      return BisonParserImpl::token::KW_AND;
    }
    return BisonParserImpl::token::KW_AND_FOR_BETWEEN;
  }
  return BisonParserImpl::token::KW_AND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 386 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ANONYMIZATION; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 387 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ANY; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 388 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ARRAY; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 389 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_AS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 390 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ASC; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 391 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ASSERT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 392 "zetasql/parser/flex_tokenizer.l"
{
  return BisonParserImpl::token::KW_ASSERT_ROWS_MODIFIED;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 395 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_AT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 396 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_BATCH; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 397 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_BEGIN; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 398 "zetasql/parser/flex_tokenizer.l"
{
  // See IN_BETWEEN tokenizer mode description.
  yy_push_state(IN_BETWEEN);
  return BisonParserImpl::token::KW_BETWEEN;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 403 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_BIGDECIMAL; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 404 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_BIGNUMERIC; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 405 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_BREAK; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 406 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_BY; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 407 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CALL; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 408 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CASCADE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 409 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CASE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 410 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CAST; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 411 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CHECK; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 412 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CLAMPED; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 413 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CLONE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 414 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_COPY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 415 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CLUSTER; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 416 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_COLLATE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 417 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_COLUMN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 418 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_COLUMNS; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 419 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_COMMIT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 420 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CONNECTION; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 421 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CONSTANT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 422 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CONSTRAINT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 423 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CONTINUE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 424 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CONTAINS; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 425 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CREATE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 426 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CROSS; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 427 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CUBE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 428 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CURRENT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 429 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DATA; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 430 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DATABASE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 431 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DATE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 432 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DATETIME; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 433 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DECIMAL; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 434 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DECLARE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 435 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DEFAULT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 436 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DEFINE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 437 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DEFINER; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 438 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DELETE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 439 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DESC; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 440 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DESCRIPTOR; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 441 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DESCRIBE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 442 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DETERMINISTIC; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 443 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DISTINCT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 444 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DO; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 445 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DROP; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 446 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ELSE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 447 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ELSEIF; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 448 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_END; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 449 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ENFORCED; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 450 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ENUM; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 451 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ERROR; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 452 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ESCAPE; }
	YY_BREAK
case 72:
/* rule 72 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 453 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_EXCEPT; }
	YY_BREAK
case 73:
/* rule 73 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 454 "zetasql/parser/flex_tokenizer.l"
{
  if (mode_ == BisonParserMode::kTokenizer) {
    return BisonParserImpl::token::KW_EXCEPT;
  }
  return BisonParserImpl::token::KW_EXCEPT_IN_SET_OP;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 460 "zetasql/parser/flex_tokenizer.l"
{
  if (mode_ == BisonParserMode::kTokenizer ||
      mode_ == BisonParserMode::kTokenizerPreserveComments) {
    // In raw tokenization mode, this may be legal.
    return BisonParserImpl::token::KW_EXCEPT;
  }
  SetOverrideError(*yylloc,
                   "EXCEPT must be followed by ALL, DISTINCT, or \"(\"");
  yyterminate();
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 470 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_EXCEPTION; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 471 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_EXCLUDE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 472 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_EXECUTE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 473 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_EXISTS; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 474 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_EXPLAIN; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 475 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_EXPORT; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 476 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_EXTERNAL; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 477 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_EXTRACT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 478 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FALSE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 479 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FETCH; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 480 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FILES; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 481 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FILL; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 482 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FILTER; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 483 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FILTER_FIELDS; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 484 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FIRST; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 485 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FOLLOWING; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 486 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FOR; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 487 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FOREIGN; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 488 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FORMAT; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 489 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FROM; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 490 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FULL; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 491 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_FUNCTION; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 492 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_GENERATED; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 493 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_GRANT; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 494 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_GROUP; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 495 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_GROUP_ROWS; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 496 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_GROUPING; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 497 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_GROUPS; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 498 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_HASH; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 499 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_HAVING; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 500 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_HIDDEN; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 501 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_IF; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 502 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_IGNORE; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 503 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_IMMEDIATE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 504 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_IMMUTABLE; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 505 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_IMPORT; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 506 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_IN; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 507 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_INCLUDE; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 508 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_INOUT; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 509 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_INDEX; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 510 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_INNER; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 511 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_INSERT; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 512 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_INTERSECT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 513 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_INTERVAL; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 514 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ITERATE; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 515 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_INTO; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 516 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_INVOKER; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 517 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_IS; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 518 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ISOLATION; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 519 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_JOIN; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 520 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_JSON; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 521 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_KEY; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 522 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_LANGUAGE; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 523 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_LAST; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 524 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_LATERAL; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 525 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_LEAVE; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 526 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_LEFT; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 527 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_LEVEL; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 528 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_LIKE; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 529 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_LIMIT; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 530 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_LOAD; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 531 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_LOOKUP; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 532 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_LOOP; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 533 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_MATCH; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 534 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_MATCHED; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 535 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_MATERIALIZED; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 536 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_MAX; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 537 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_MERGE; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 538 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_MESSAGE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 539 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_MIN; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 540 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_MODEL; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 541 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_MODULE; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 542 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_NATURAL; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 543 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_NEW; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 544 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_NO; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 545 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_NOT; }
	YY_BREAK
/* This returns a different token because returning KW_NOT would confuse the
    operator precedence parsing. Boolean NOT has a different precedence than
    NOT BETWEEN/IN/LIKE/DISTINCT. The final character at the end is intended to
    avoid cases like "NOT Info.foo" being interpreted as having a NOT for IN.
    This unfortunately doesn't match at EOF, so "NOT IN" at the very end of the
    file will cause bad error messages. There is no situation where that is
    valid syntax, so there will never be any rejections as a result.
 */
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 554 "zetasql/parser/flex_tokenizer.l"
{
  SET_RETURN_PREFIX_LENGTH(3);
  if (mode_ == BisonParserMode::kTokenizer) {
    return BisonParserImpl::token::KW_NOT;
  }
  return BisonParserImpl::token::KW_NOT_SPECIAL;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 561 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_NULL; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 562 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_NULLS; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 563 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_NUMERIC; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 564 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_OF; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 565 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_OFFSET; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 566 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ON; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 567 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ONLY; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 568 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_OPTIONS; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 569 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_OR; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 570 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ORDER; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 571 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_OUT; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 572 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_OUTER; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 573 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_OVER; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 574 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_OVERWRITE; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 575 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_PARTITION; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 576 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_PERCENT; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 577 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_POLICIES; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 578 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_POLICY; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 579 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_PRECEDING; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 580 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_PROCEDURE; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 581 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_PRIMARY; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 582 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_PRIVATE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 583 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_PRIVILEGE; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 584 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_PRIVILEGES; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 585 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_PROTO; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 586 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_PUBLIC; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 587 "zetasql/parser/flex_tokenizer.l"
{
  return IsReservedKeyword("QUALIFY") ?
      BisonParserImpl::token::KW_QUALIFY_RESERVED :
      BisonParserImpl::token::KW_QUALIFY_NONRESERVED;
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 592 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_RAISE; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 593 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_RANGE; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 594 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_READ; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 595 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_RECURSIVE; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 596 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_REFERENCES; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 597 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_REMOTE; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 598 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_RENAME; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 599 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_REPEAT; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 600 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_REPEATABLE; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 601 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_REPLACE; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 602 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_REPLACE_FIELDS; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 603 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_RESPECT; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 604 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_RESTRICT; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 605 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_RESTRICTION; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 606 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_RETURN; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 607 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_RETURNS; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 608 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_REVOKE; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 609 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_RIGHT; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 610 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ROLLBACK; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 611 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ROLLUP; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 612 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ROW; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 613 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ROWS; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 614 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_RUN; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 615 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SAFE_CAST; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 616 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SCHEMA; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 617 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SEARCH; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 618 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SECURITY; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 619 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SELECT; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 620 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SET; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 621 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SHOW; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 622 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SIMPLE; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 623 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SOME; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 624 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SOURCE; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 625 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SNAPSHOT; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 626 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SQL; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 627 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_STABLE; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 628 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_START; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 629 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_STORED; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 630 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_STORING; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 631 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_STRUCT; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 632 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SYSTEM; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 633 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SYSTEM_TIME; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 634 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TABLE; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 635 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TABLESAMPLE; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 636 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_PIVOT; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 637 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_UNPIVOT; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 638 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TARGET; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 639 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TEMP; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 640 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TEMPORARY; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 641 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_THEN; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 642 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TIME; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 643 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TIMESTAMP; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 644 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TO; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 645 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TRANSACTION; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 646 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TRANSFORM; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 647 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TREAT; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 648 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TRUE; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 649 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TRUNCATE; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 650 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_TYPE; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 651 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_UNBOUNDED; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 652 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_UNION; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 653 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_UNNEST; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 654 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_UNIQUE; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 655 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_UNTIL; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 656 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_UPDATE; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 657 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_USING; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 658 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_VALUE; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 659 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_VALUES; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 660 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_VIEW; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 661 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_VIEWS; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 662 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_VOLATILE; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 663 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_WEIGHT; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 664 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_WHEN; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 665 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_WHERE; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 666 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_WHILE; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 667 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_WINDOW; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 668 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_WITH; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 669 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_WITHIN; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 670 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_WRITE; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 671 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_ZONE; }
	YY_BREAK
/* END_KEYWORDS -- Do not remove! */
/* All unescaping and error checking is done in the parser. This allows us */
/* to give better error messages. */
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 676 "zetasql/parser/flex_tokenizer.l"
{
  return BisonParserImpl::token::STRING_LITERAL;
}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 679 "zetasql/parser/flex_tokenizer.l"
{
  SetOverrideError(*yylloc, "Syntax error: Unclosed string literal");
  yyterminate();
}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 683 "zetasql/parser/flex_tokenizer.l"
{
  SetOverrideError(*yylloc,
                   "Syntax error: Unclosed triple-quoted string literal");
  yyterminate();
}
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 688 "zetasql/parser/flex_tokenizer.l"
{
  SetOverrideError(*yylloc, "Syntax error: Unclosed raw string literal");
  yyterminate();
}
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 692 "zetasql/parser/flex_tokenizer.l"
{
  SetOverrideError(*yylloc,
                   "Syntax error: Unclosed triple-quoted raw string literal");
  yyterminate();
}
	YY_BREAK
case 264:
/* rule 264 can match eol */
YY_RULE_SETUP
#line 698 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::BYTES_LITERAL; }
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 699 "zetasql/parser/flex_tokenizer.l"
{
  SetOverrideError(*yylloc, "Syntax error: Unclosed bytes literal");
  yyterminate();
}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 703 "zetasql/parser/flex_tokenizer.l"
{
  SetOverrideError(*yylloc,
                   "Syntax error: Unclosed triple-quoted bytes literal");
  yyterminate();
}
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 708 "zetasql/parser/flex_tokenizer.l"
{
  SetOverrideError(*yylloc, "Syntax error: Unclosed raw bytes literal");
  yyterminate();
}
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 712 "zetasql/parser/flex_tokenizer.l"
{
  SetOverrideError(*yylloc,
                   "Syntax error: Unclosed triple-quoted raw bytes literal");
  yyterminate();
}
	YY_BREAK
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 718 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::IDENTIFIER; }
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 720 "zetasql/parser/flex_tokenizer.l"
{
  SetOverrideError(*yylloc, "Syntax error: Unclosed identifier literal");
  yyterminate();
}
	YY_BREAK
/* Error rules for a number followed by an identifier without white space in
    between. We don't want to parse the identifier as accidental alias. For
    instance, 123abc should be error, and we don't want it to be parsed as
    123 [AS] abc. */
case 271:
YY_RULE_SETUP
#line 729 "zetasql/parser/flex_tokenizer.l"
{
  yylloc->begin.column += YYLeng() - 1;
  SetOverrideError(
      *yylloc, "Syntax error: Missing whitespace between literal and alias");
  yyterminate();
}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 735 "zetasql/parser/flex_tokenizer.l"
{
  yylloc->begin.column += YYLeng() - 1;
  SetOverrideError(
      *yylloc, "Syntax error: Missing whitespace between literal and alias");
  yyterminate();
}
	YY_BREAK
case 273:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 741 "zetasql/parser/flex_tokenizer.l"
{
  // If the floating point literal starts with a ".", and the preceding token
  // is an identifier or unreserved keyword, then we should tokenize this
  // as "identifier.".
  if (YYText()[0] == '.' &&
      IsDotGeneralizedIdentifierPrefixToken(prev_token_)) {
    yy_push_state(DOT_IDENTIFIER);
    SET_RETURN_PREFIX_LENGTH(1);
    return '.';
  }
  // Trigger the missing-whitespace error, but only if the floating point
  // literal ends in a digit, e.g. "123.456abc". (Note that this rule only
  // matches the floating point literal itself, so the last character in
  // YYText() is the last character in {floating_point_literal}. We don't
  // trigger the missing whitespace error for cases that don't end in a digit,
  // e.g. "123.abc". It's a case that is less likely to be an error, and the
  // JavaCC parser doesn't trigger the missing whitespace warning in this case
  // either.
  // TODO: Consider making this an error too. It's not that likely to
  // be correct either.
  if (isdigit(YYText()[YYLeng() - 1])) {
    yylloc->begin.column += YYLeng();
    SetOverrideError(
        *yylloc, "Syntax error: Missing whitespace between literal and alias");
    yyterminate();
  }
  return BisonParserImpl::token::FLOATING_POINT_LITERAL;
}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 770 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::INTEGER_LITERAL; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 771 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::INTEGER_LITERAL; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 773 "zetasql/parser/flex_tokenizer.l"
{
  // If the floating point literal starts with a ".", and the preceding token
  // is an identifier or unreserved keyword, then we should tokenize this
  // as "identifier.".
  if (YYText()[0] == '.' &&
      IsDotGeneralizedIdentifierPrefixToken(prev_token_)) {
    yy_push_state(DOT_IDENTIFIER);
    SET_RETURN_PREFIX_LENGTH(1);
    return '.';
  }
  return BisonParserImpl::token::FLOATING_POINT_LITERAL;
}
	YY_BREAK
case 277:
/* rule 277 can match eol */
YY_RULE_SETUP
#line 786 "zetasql/parser/flex_tokenizer.l"
{
  // Unfortunately this doesn't catch all cases. We also accept whitespace
  // inside some tokens, and this rule only catches whitespace between
  // tokens. The whitespace-within-token rules are generally cases where nobody
  // would ever actually write comments, so this is not a big loss.
  SetOverrideError(*yylloc, "Syntax error: Unclosed comment");
  yyterminate();
}
	YY_BREAK
/* Open parentheses/brackets. The { rule is for parity with the JavaCC
    tokenizer and for use by clients that use the ZetaSQL tokenizer. We don't
    use it in the grammar. */
case 278:
YY_RULE_SETUP
#line 798 "zetasql/parser/flex_tokenizer.l"
{
   // These need to suspend special modes such as IN_BETWEEN. This is popped
   // again in the close rule below.
   yy_push_state(INITIAL);
   return YYText()[0];
}
	YY_BREAK
/* TODO: If a ) or a ] is followed by a dot, switch to
    DOT_IDENTIFIER mode. Do this after the JavaCC parser is retired. */
case 279:
YY_RULE_SETUP
#line 806 "zetasql/parser/flex_tokenizer.l"
{
  // The corresponding open rule always pushes INITIAL. Even if we entered extra
  // modes in the mean time (such as IN_BETWEEN), we should leave those modes
  // now and pop the INITIAL mode that was pushed by the opening rule. While
  // doing this, we make sure to never pop STACK_BOTTOM.
  while (YY_START != INITIAL && YY_START != STACK_BOTTOM) {
    yy_pop_state();
  }
  // If this triggers, then we pushed a non-INITIAL state on top of
  // STACK_BOTTOM. That should be impossible, because the only rules that are
  // active in state STACK_BOTTOM are the catch-all error rules.
  ZETASQL_DCHECK(YY_START != STACK_BOTTOM);
  if (YY_START != STACK_BOTTOM) {
    yy_pop_state();
  }
  if (YY_START == STACK_BOTTOM) {
    // Unbalanced parentheses/brackets. The grammar will catch this. We allow
    // the tokenizer to continue by pushing INITIAL back onto the stack.
    yy_push_state(INITIAL);
  }
  return YYText()[0];
}
	YY_BREAK
case 280:
/* rule 280 can match eol */
YY_RULE_SETUP
#line 829 "zetasql/parser/flex_tokenizer.l"
{
  if (mode_ == BisonParserMode::kTokenizerPreserveComments) {
    SET_RETURN_PREFIX_LENGTH(1);
    return '.';
  }
  return BisonParserImpl::token::KW_DOT_STAR;
}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 836 "zetasql/parser/flex_tokenizer.l"
{ return '*'; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 837 "zetasql/parser/flex_tokenizer.l"
{ return ','; }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 839 "zetasql/parser/flex_tokenizer.l"
{ return '='; }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 840 "zetasql/parser/flex_tokenizer.l"
{
  return BisonParserImpl::token::KW_NOT_EQUALS_C_STYLE;
}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 844 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_LESS_EQUALS; }
	YY_BREAK
/* Don't recognize these in ARRAY<> or STRUCT<> context. */
case 286:
YY_RULE_SETUP
#line 846 "zetasql/parser/flex_tokenizer.l"
{
  if (prev_token_ == BisonParserImpl::token::KW_ARRAY ||
      prev_token_ == BisonParserImpl::token::KW_STRUCT) {
    // Match only the '<', and move to the same state that that production would
    // have moved to.
    yy_push_state(IN_ARRAY_OR_STRUCT_TYPE);
    SET_RETURN_PREFIX_LENGTH(1);
    return '<';
  }
  return BisonParserImpl::token::KW_NOT_EQUALS_SQL_STYLE;
}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 857 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SHIFT_RIGHT; }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 858 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_SHIFT_LEFT; }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 859 "zetasql/parser/flex_tokenizer.l"
{
  return BisonParserImpl::token::KW_NAMED_ARGUMENT_ASSIGNMENT;
}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 862 "zetasql/parser/flex_tokenizer.l"
{
  return BisonParserImpl::token::KW_LAMBDA_ARROW;
}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 865 "zetasql/parser/flex_tokenizer.l"
{
  if (prev_token_ == BisonParserImpl::token::KW_ARRAY ||
      prev_token_ == BisonParserImpl::token::KW_STRUCT) {
    // Switch to a mode that does not recognize >>. This only works as long as
    // there are no legal "independent" < and > inside array or struct types
    // (i.e., without ARRAY or STRUCT preceding) in the grammar. If there are,
    // then the state pushes and pops would become unbalanced, because ">" pops
    // this state.
    yy_push_state(IN_ARRAY_OR_STRUCT_TYPE);
  }
  return '<';
}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 877 "zetasql/parser/flex_tokenizer.l"
{
  if (YY_START == IN_ARRAY_OR_STRUCT_TYPE) yy_pop_state();
  return '>';
}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 881 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_GREATER_EQUALS; }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 882 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_CONCAT_OP; }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 883 "zetasql/parser/flex_tokenizer.l"
{ return '|'; }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 884 "zetasql/parser/flex_tokenizer.l"
{ return '^'; }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 885 "zetasql/parser/flex_tokenizer.l"
{ return '&'; }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 886 "zetasql/parser/flex_tokenizer.l"
{ return '+'; }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 887 "zetasql/parser/flex_tokenizer.l"
{ return '-'; }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 888 "zetasql/parser/flex_tokenizer.l"
{ return '/'; }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 889 "zetasql/parser/flex_tokenizer.l"
{ return '~'; }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 890 "zetasql/parser/flex_tokenizer.l"
{ return '?'; }
	YY_BREAK
case 303:
/* rule 303 can match eol */
YY_RULE_SETUP
#line 891 "zetasql/parser/flex_tokenizer.l"
{
  // "{" needs to suspend special modes such as IN_BETWEEN. This is popped
  // again in the "}" rule.
  if (mode_ == BisonParserMode::kTokenizerPreserveComments) {
    SET_RETURN_PREFIX_LENGTH(1);
    return '@';
  }
  yy_push_state(INITIAL);
  return BisonParserImpl::token::KW_OPEN_HINT;
}
	YY_BREAK
case 304:
/* rule 304 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 901 "zetasql/parser/flex_tokenizer.l"
{
  return BisonParserImpl::token::KW_OPEN_INTEGER_HINT;
}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 904 "zetasql/parser/flex_tokenizer.l"
{ return '@'; }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 905 "zetasql/parser/flex_tokenizer.l"
{ return BisonParserImpl::token::KW_DOUBLE_AT; }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 906 "zetasql/parser/flex_tokenizer.l"
{
  if (IsDotGeneralizedIdentifierPrefixToken(prev_token_) ) {
    // When an identifier or unreserved keyword is followed by a dot, always
    // move to DOT_IDENTIFIER mode. This can recognize keywords as an
    // identifier.
    yy_push_state(DOT_IDENTIFIER);
  }
  return '.';
}
	YY_BREAK
/* The JavaCC Tokenizer recognized this as a token, even though the language
    does not use it anywhere. This is here to maintain compatibility. */
case 308:
YY_RULE_SETUP
#line 918 "zetasql/parser/flex_tokenizer.l"
{ return ':'; }
	YY_BREAK
case 309:
/* rule 309 can match eol */
YY_RULE_SETUP
#line 920 "zetasql/parser/flex_tokenizer.l"
{
  if (mode_ == BisonParserMode::kTokenizerPreserveComments) {
    SET_RETURN_PREFIX_LENGTH(1);
    return ';';
  } else if (yylloc->end.column == input_size_ + 1) {
    // Don't return the final \n. It is handled by the whitespace rule and will
    // trigger EOF.
    SET_RETURN_PREFIX_LENGTH(YYLeng() - 1);
  } else if (mode_ == BisonParserMode::kNextStatement ||
             mode_ == BisonParserMode::kNextStatementKind ||
             mode_ == BisonParserMode::kNextScriptStatement) {
    // Don't return anything more if we're just looking at a single statement.
    // Only return the semicolon, not the whitespace.
    SET_RETURN_PREFIX_LENGTH(1);
  }
  return ';';
}
	YY_BREAK
/* Whitespace and EOF rule.

    We append a \n to every input. This ensures that we will encounter a
    match for the whitespace rule at every EOF, or for a rule that eats trailing
    whitespace!

    This rule eats leading whitespace but not comments. This makes the EOF
    location reported to the parser skip the trailing whitespace, which results
    in better errors for unexpected end of input. But it doesn't skip trailing
    comments.

    See also the comment for kEofSentinelInput in flex_tokenizer.h.
 */
case 310:
/* rule 310 can match eol */
YY_RULE_SETUP
#line 951 "zetasql/parser/flex_tokenizer.l"
{
  if (yylloc->end.column == input_size_ + 1) {
    // The whitespace is adjacent to the end of the input, and includes the
    // \n that we add to the end of the input. Return EOF at the start of the
    // whitespace, with zero length. This produces better errors, because the
    // "unexpected EOF" errors will be adjacent to the last token.
    yylloc->end.column = yylloc->begin.column;
    yyterminate();
  }
  // The whitespace is not at the end of input. Just skip it.
}
	YY_BREAK
case 311:
/* rule 311 can match eol */
YY_RULE_SETUP
#line 963 "zetasql/parser/flex_tokenizer.l"
{
  if (mode_ == BisonParserMode::kTokenizerPreserveComments) {
    if (yylloc->end.column == input_size_ + 1) {
      // Don't return the final \n. It is handled by the whitespace rule and
      // will trigger EOF. If we didn't do this, the <<EOF>> rule would trigger
      // instead and return an error.
      SET_RETURN_PREFIX_LENGTH(YYLeng() - 1);
    }
    return BisonParserImpl::token::COMMENT;
  }
  if (yylloc->end.column == input_size_ + 1) {
    // The comment is adjacent to the end of the input, and includes the
    // \n that we add to the end of the input. Return EOF at the end of the
    // comment, excluding the extra \n, with zero length. This puts the
    // "unexpected EOF" errors at the line after end-of-line comments.
    yylloc->begin.column = yylloc->end.column = yylloc->end.column - 1;
    yyterminate();
  }
  // The comment is not at the end of input and we are not preserving comments.
  // Just skip it.
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DOT_IDENTIFIER):
case YY_STATE_EOF(IN_ARRAY_OR_STRUCT_TYPE):
case YY_STATE_EOF(IN_BETWEEN):
case YY_STATE_EOF(STACK_BOTTOM):
#line 985 "zetasql/parser/flex_tokenizer.l"
{
  // This shouldn't happen. Instead, the {whitespace} condition should trigger
  // at the end of the input, because we always ensure that the query ends in
  // \n.
  SetOverrideError(*yylloc, "Internal error: Encountered real EOF");
  yyterminate();
}
	YY_BREAK
/* Rules for the DOT_IDENTIFIER mini-tokenizer. This tokenizer state is
    triggered when we see "identifier.". It enables a generalized_identifier
    rule that allows things like "42" and arbitrary keywords to be treated like
    identifiers. Note that the rules marked with <*> are also active! Those
    rules take care of eating whitespace and comments, and handling EOF. */
case 312:
/* rule 312 can match eol */
YY_RULE_SETUP
#line 998 "zetasql/parser/flex_tokenizer.l"
{
  yy_pop_state();
  return BisonParserImpl::token::IDENTIFIER;
}
	YY_BREAK
/* Catchall rule for the DOT_IDENTIFIER mini-tokenizer. This catches anything
    that isn't matched above, and instead of consuming it, switches back to the
    regular tokenizer mode and tries again.
    TODO: Add a tokenizer test for this catchall rule. */
case 313:
YY_RULE_SETUP
#line 1006 "zetasql/parser/flex_tokenizer.l"
{
  yy_pop_state();
  SET_RETURN_PREFIX_LENGTH(0);
}
	YY_BREAK
/* Catchall rule. This rule should also work in exclusive tokenizer states such
    as STACK_BOTTOM. */
case 314:
YY_RULE_SETUP
#line 1013 "zetasql/parser/flex_tokenizer.l"
{
  SetOverrideError(
      *yylloc,
      absl::StrCat("Syntax error: Illegal input character \"",
                   absl::CEscape(absl::string_view(YYText(), 1)), "\""));
  yyterminate();
}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 1020 "zetasql/parser/flex_tokenizer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 5414 "bazel-out/k8-fastbuild/bin/zetasql/parser/flex_tokenizer.flex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1464 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1464 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1463);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1020 "zetasql/parser/flex_tokenizer.l"
