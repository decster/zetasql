// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/proto/options.proto

#include "zetasql/proto/options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zetasql {
constexpr ZetaSQLBuiltinFunctionOptionsProto::ZetaSQLBuiltinFunctionOptionsProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : include_function_ids_()
  , exclude_function_ids_()
  , language_options_(nullptr){}
struct ZetaSQLBuiltinFunctionOptionsProtoDefaultTypeInternal {
  constexpr ZetaSQLBuiltinFunctionOptionsProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZetaSQLBuiltinFunctionOptionsProtoDefaultTypeInternal() {}
  union {
    ZetaSQLBuiltinFunctionOptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZetaSQLBuiltinFunctionOptionsProtoDefaultTypeInternal _ZetaSQLBuiltinFunctionOptionsProto_default_instance_;
constexpr LanguageOptionsProto::LanguageOptionsProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enabled_language_features_()
  , supported_statement_kinds_()
  , supported_generic_entity_types_()
  , reserved_keywords_()
  , name_resolution_mode_(0)

  , product_mode_(0)

  , error_on_deprecated_syntax_(false){}
struct LanguageOptionsProtoDefaultTypeInternal {
  constexpr LanguageOptionsProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LanguageOptionsProtoDefaultTypeInternal() {}
  union {
    LanguageOptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LanguageOptionsProtoDefaultTypeInternal _LanguageOptionsProto_default_instance_;
constexpr AllowedHintsAndOptionsProto_HintProto::AllowedHintsAndOptionsProto_HintProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : qualifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(nullptr)
  , allow_unqualified_(false){}
struct AllowedHintsAndOptionsProto_HintProtoDefaultTypeInternal {
  constexpr AllowedHintsAndOptionsProto_HintProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AllowedHintsAndOptionsProto_HintProtoDefaultTypeInternal() {}
  union {
    AllowedHintsAndOptionsProto_HintProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AllowedHintsAndOptionsProto_HintProtoDefaultTypeInternal _AllowedHintsAndOptionsProto_HintProto_default_instance_;
constexpr AllowedHintsAndOptionsProto_OptionProto::AllowedHintsAndOptionsProto_OptionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(nullptr){}
struct AllowedHintsAndOptionsProto_OptionProtoDefaultTypeInternal {
  constexpr AllowedHintsAndOptionsProto_OptionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AllowedHintsAndOptionsProto_OptionProtoDefaultTypeInternal() {}
  union {
    AllowedHintsAndOptionsProto_OptionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AllowedHintsAndOptionsProto_OptionProtoDefaultTypeInternal _AllowedHintsAndOptionsProto_OptionProto_default_instance_;
constexpr AllowedHintsAndOptionsProto::AllowedHintsAndOptionsProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : disallow_unknown_hints_with_qualifier_()
  , hint_()
  , option_()
  , disallow_unknown_options_(false){}
struct AllowedHintsAndOptionsProtoDefaultTypeInternal {
  constexpr AllowedHintsAndOptionsProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AllowedHintsAndOptionsProtoDefaultTypeInternal() {}
  union {
    AllowedHintsAndOptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AllowedHintsAndOptionsProtoDefaultTypeInternal _AllowedHintsAndOptionsProto_default_instance_;
constexpr AnalyzerOptionsProto_QueryParameterProto::AnalyzerOptionsProto_QueryParameterProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(nullptr){}
struct AnalyzerOptionsProto_QueryParameterProtoDefaultTypeInternal {
  constexpr AnalyzerOptionsProto_QueryParameterProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnalyzerOptionsProto_QueryParameterProtoDefaultTypeInternal() {}
  union {
    AnalyzerOptionsProto_QueryParameterProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnalyzerOptionsProto_QueryParameterProtoDefaultTypeInternal _AnalyzerOptionsProto_QueryParameterProto_default_instance_;
constexpr AnalyzerOptionsProto_SystemVariableProto::AnalyzerOptionsProto_SystemVariableProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , type_(nullptr){}
struct AnalyzerOptionsProto_SystemVariableProtoDefaultTypeInternal {
  constexpr AnalyzerOptionsProto_SystemVariableProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnalyzerOptionsProto_SystemVariableProtoDefaultTypeInternal() {}
  union {
    AnalyzerOptionsProto_SystemVariableProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnalyzerOptionsProto_SystemVariableProtoDefaultTypeInternal _AnalyzerOptionsProto_SystemVariableProto_default_instance_;
constexpr AnalyzerOptionsProto::AnalyzerOptionsProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : query_parameters_()
  , expression_columns_()
  , positional_query_parameters_()
  , ddl_pseudo_columns_()
  , system_variables_()
  , target_column_types_()
  , enabled_rewrites_()
  , default_timezone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_options_(nullptr)
  , in_scope_expression_column_(nullptr)
  , allowed_hints_and_options_(nullptr)
  , error_message_mode_(0)

  , parameter_mode_(0)

  , statement_context_(0)

  , create_new_column_for_each_projected_output_(false)
  , prune_unused_columns_(false)
  , allow_undeclared_parameters_(false)
  , preserve_column_aliases_(false)
  , parse_location_record_type_(0)
{}
struct AnalyzerOptionsProtoDefaultTypeInternal {
  constexpr AnalyzerOptionsProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnalyzerOptionsProtoDefaultTypeInternal() {}
  union {
    AnalyzerOptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnalyzerOptionsProtoDefaultTypeInternal _AnalyzerOptionsProto_default_instance_;
}  // namespace zetasql
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zetasql_2fproto_2foptions_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_zetasql_2fproto_2foptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fproto_2foptions_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fproto_2foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zetasql::ZetaSQLBuiltinFunctionOptionsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ZetaSQLBuiltinFunctionOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ZetaSQLBuiltinFunctionOptionsProto, language_options_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ZetaSQLBuiltinFunctionOptionsProto, include_function_ids_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ZetaSQLBuiltinFunctionOptionsProto, exclude_function_ids_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, name_resolution_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, product_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, error_on_deprecated_syntax_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, enabled_language_features_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, supported_statement_kinds_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, supported_generic_entity_types_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageOptionsProto, reserved_keywords_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_HintProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_HintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_HintProto, qualifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_HintProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_HintProto, type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_HintProto, allow_unqualified_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_OptionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_OptionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_OptionProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto_OptionProto, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto, disallow_unknown_options_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto, disallow_unknown_hints_with_qualifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto, hint_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AllowedHintsAndOptionsProto, option_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_QueryParameterProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_QueryParameterProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_QueryParameterProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_QueryParameterProto, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_SystemVariableProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_SystemVariableProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_SystemVariableProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto_SystemVariableProto, type_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, language_options_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, query_parameters_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, positional_query_parameters_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, expression_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, in_scope_expression_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, ddl_pseudo_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, error_message_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, default_timezone_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, create_new_column_for_each_projected_output_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, prune_unused_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, allow_undeclared_parameters_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, parameter_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, allowed_hints_and_options_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, statement_context_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, preserve_column_aliases_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, system_variables_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, target_column_types_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, enabled_rewrites_),
  PROTOBUF_FIELD_OFFSET(::zetasql::AnalyzerOptionsProto, parse_location_record_type_),
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  4,
  0,
  7,
  8,
  9,
  5,
  3,
  6,
  10,
  ~0u,
  ~0u,
  ~0u,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::zetasql::ZetaSQLBuiltinFunctionOptionsProto)},
  { 12, 25, -1, sizeof(::zetasql::LanguageOptionsProto)},
  { 32, 42, -1, sizeof(::zetasql::AllowedHintsAndOptionsProto_HintProto)},
  { 46, 54, -1, sizeof(::zetasql::AllowedHintsAndOptionsProto_OptionProto)},
  { 56, 66, -1, sizeof(::zetasql::AllowedHintsAndOptionsProto)},
  { 70, 78, -1, sizeof(::zetasql::AnalyzerOptionsProto_QueryParameterProto)},
  { 80, 88, -1, sizeof(::zetasql::AnalyzerOptionsProto_SystemVariableProto)},
  { 90, 115, -1, sizeof(::zetasql::AnalyzerOptionsProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ZetaSQLBuiltinFunctionOptionsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_LanguageOptionsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AllowedHintsAndOptionsProto_HintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AllowedHintsAndOptionsProto_OptionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AllowedHintsAndOptionsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnalyzerOptionsProto_QueryParameterProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnalyzerOptionsProto_SystemVariableProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnalyzerOptionsProto_default_instance_),
};

const char descriptor_table_protodef_zetasql_2fproto_2foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033zetasql/proto/options.proto\022\007zetasql\032%"
  "zetasql/public/builtin_function.proto\032\034z"
  "etasql/public/options.proto\032\031zetasql/pub"
  "lic/type.proto\032-zetasql/resolved_ast/res"
  "olved_node_kind.proto\"\325\001\n\"ZetaSQLBuiltin"
  "FunctionOptionsProto\0227\n\020language_options"
  "\030\001 \001(\0132\035.zetasql.LanguageOptionsProto\022:\n"
  "\024include_function_ids\030\002 \003(\0162\034.zetasql.Fu"
  "nctionSignatureId\022:\n\024exclude_function_id"
  "s\030\003 \003(\0162\034.zetasql.FunctionSignatureId\"\345\002"
  "\n\024LanguageOptionsProto\0229\n\024name_resolutio"
  "n_mode\030\002 \001(\0162\033.zetasql.NameResolutionMod"
  "e\022*\n\014product_mode\030\003 \001(\0162\024.zetasql.Produc"
  "tMode\022\"\n\032error_on_deprecated_syntax\030\004 \001("
  "\010\022;\n\031enabled_language_features\030\005 \003(\0162\030.z"
  "etasql.LanguageFeature\022<\n\031supported_stat"
  "ement_kinds\030\006 \003(\0162\031.zetasql.ResolvedNode"
  "Kind\022&\n\036supported_generic_entity_types\030\007"
  " \003(\t\022\031\n\021reserved_keywords\030\010 \003(\tJ\004\010\001\020\002\"\230\003"
  "\n\033AllowedHintsAndOptionsProto\022 \n\030disallo"
  "w_unknown_options\030\001 \001(\010\022-\n%disallow_unkn"
  "own_hints_with_qualifier\030\002 \003(\t\022<\n\004hint\030\003"
  " \003(\0132..zetasql.AllowedHintsAndOptionsPro"
  "to.HintProto\022@\n\006option\030\004 \003(\01320.zetasql.A"
  "llowedHintsAndOptionsProto.OptionProto\032i"
  "\n\tHintProto\022\021\n\tqualifier\030\001 \001(\t\022\014\n\004name\030\002"
  " \001(\t\022 \n\004type\030\003 \001(\0132\022.zetasql.TypeProto\022\031"
  "\n\021allow_unqualified\030\004 \001(\010\032=\n\013OptionProto"
  "\022\014\n\004name\030\001 \001(\t\022 \n\004type\030\002 \001(\0132\022.zetasql.T"
  "ypeProto\"\203\n\n\024AnalyzerOptionsProto\0227\n\020lan"
  "guage_options\030\001 \001(\0132\035.zetasql.LanguageOp"
  "tionsProto\022K\n\020query_parameters\030\002 \003(\01321.z"
  "etasql.AnalyzerOptionsProto.QueryParamet"
  "erProto\0227\n\033positional_query_parameters\030\014"
  " \003(\0132\022.zetasql.TypeProto\022M\n\022expression_c"
  "olumns\030\003 \003(\01321.zetasql.AnalyzerOptionsPr"
  "oto.QueryParameterProto\022U\n\032in_scope_expr"
  "ession_column\030\004 \001(\01321.zetasql.AnalyzerOp"
  "tionsProto.QueryParameterProto\022M\n\022ddl_ps"
  "eudo_columns\030\017 \003(\01321.zetasql.AnalyzerOpt"
  "ionsProto.QueryParameterProto\0225\n\022error_m"
  "essage_mode\030\006 \001(\0162\031.zetasql.ErrorMessage"
  "Mode\022\030\n\020default_timezone\030\007 \001(\t\0223\n+create"
  "_new_column_for_each_projected_output\030\024 "
  "\001(\010\022\034\n\024prune_unused_columns\030\t \001(\010\022#\n\033all"
  "ow_undeclared_parameters\030\n \001(\010\022.\n\016parame"
  "ter_mode\030\r \001(\0162\026.zetasql.ParameterMode\022G"
  "\n\031allowed_hints_and_options\030\013 \001(\0132$.zeta"
  "sql.AllowedHintsAndOptionsProto\0224\n\021state"
  "ment_context\030\016 \001(\0162\031.zetasql.StatementCo"
  "ntext\022\037\n\027preserve_column_aliases\030\021 \001(\010\022K"
  "\n\020system_variables\030\022 \003(\01321.zetasql.Analy"
  "zerOptionsProto.SystemVariableProto\022/\n\023t"
  "arget_column_types\030\023 \003(\0132\022.zetasql.TypeP"
  "roto\0225\n\020enabled_rewrites\030\025 \003(\0162\033.zetasql"
  ".ResolvedASTRewrite\022D\n\032parse_location_re"
  "cord_type\030\027 \001(\0162 .zetasql.ParseLocationR"
  "ecordType\032E\n\023QueryParameterProto\022\014\n\004name"
  "\030\001 \001(\t\022 \n\004type\030\002 \001(\0132\022.zetasql.TypeProto"
  "\032J\n\023SystemVariableProto\022\021\n\tname_path\030\001 \003"
  "(\t\022 \n\004type\030\002 \001(\0132\022.zetasql.TypeProtoJ\004\010\010"
  "\020\tJ\004\010\026\020\027J\004\010\020\020\021B)\n\022com.google.zetasqlB\023Ze"
  "taSQLOptionsProto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zetasql_2fproto_2foptions_2eproto_deps[4] = {
  &::descriptor_table_zetasql_2fpublic_2fbuiltin_5ffunction_2eproto,
  &::descriptor_table_zetasql_2fpublic_2foptions_2eproto,
  &::descriptor_table_zetasql_2fpublic_2ftype_2eproto,
  &::descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zetasql_2fproto_2foptions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fproto_2foptions_2eproto = {
  false, false, 2497, descriptor_table_protodef_zetasql_2fproto_2foptions_2eproto, "zetasql/proto/options.proto", 
  &descriptor_table_zetasql_2fproto_2foptions_2eproto_once, descriptor_table_zetasql_2fproto_2foptions_2eproto_deps, 4, 8,
  schemas, file_default_instances, TableStruct_zetasql_2fproto_2foptions_2eproto::offsets,
  file_level_metadata_zetasql_2fproto_2foptions_2eproto, file_level_enum_descriptors_zetasql_2fproto_2foptions_2eproto, file_level_service_descriptors_zetasql_2fproto_2foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_zetasql_2fproto_2foptions_2eproto_getter() {
  return &descriptor_table_zetasql_2fproto_2foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fproto_2foptions_2eproto(&descriptor_table_zetasql_2fproto_2foptions_2eproto);
namespace zetasql {

// ===================================================================

class ZetaSQLBuiltinFunctionOptionsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ZetaSQLBuiltinFunctionOptionsProto>()._has_bits_);
  static const ::zetasql::LanguageOptionsProto& language_options(const ZetaSQLBuiltinFunctionOptionsProto* msg);
  static void set_has_language_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::LanguageOptionsProto&
ZetaSQLBuiltinFunctionOptionsProto::_Internal::language_options(const ZetaSQLBuiltinFunctionOptionsProto* msg) {
  return *msg->language_options_;
}
ZetaSQLBuiltinFunctionOptionsProto::ZetaSQLBuiltinFunctionOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  include_function_ids_(arena),
  exclude_function_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
}
ZetaSQLBuiltinFunctionOptionsProto::ZetaSQLBuiltinFunctionOptionsProto(const ZetaSQLBuiltinFunctionOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      include_function_ids_(from.include_function_ids_),
      exclude_function_ids_(from.exclude_function_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_language_options()) {
    language_options_ = new ::zetasql::LanguageOptionsProto(*from.language_options_);
  } else {
    language_options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
}

inline void ZetaSQLBuiltinFunctionOptionsProto::SharedCtor() {
language_options_ = nullptr;
}

ZetaSQLBuiltinFunctionOptionsProto::~ZetaSQLBuiltinFunctionOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZetaSQLBuiltinFunctionOptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete language_options_;
}

void ZetaSQLBuiltinFunctionOptionsProto::ArenaDtor(void* object) {
  ZetaSQLBuiltinFunctionOptionsProto* _this = reinterpret_cast< ZetaSQLBuiltinFunctionOptionsProto* >(object);
  (void)_this;
}
void ZetaSQLBuiltinFunctionOptionsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZetaSQLBuiltinFunctionOptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZetaSQLBuiltinFunctionOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  include_function_ids_.Clear();
  exclude_function_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(language_options_ != nullptr);
    language_options_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZetaSQLBuiltinFunctionOptionsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.LanguageOptionsProto language_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_language_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.FunctionSignatureId include_function_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::zetasql::FunctionSignatureId_IsValid(val))) {
              _internal_add_include_function_ids(static_cast<::zetasql::FunctionSignatureId>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_include_function_ids(), ptr, ctx, ::zetasql::FunctionSignatureId_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.FunctionSignatureId exclude_function_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::zetasql::FunctionSignatureId_IsValid(val))) {
              _internal_add_exclude_function_ids(static_cast<::zetasql::FunctionSignatureId>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_exclude_function_ids(), ptr, ctx, ::zetasql::FunctionSignatureId_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZetaSQLBuiltinFunctionOptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.LanguageOptionsProto language_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::language_options(this), target, stream);
  }

  // repeated .zetasql.FunctionSignatureId include_function_ids = 2;
  for (int i = 0, n = this->_internal_include_function_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        2, this->_internal_include_function_ids(i), target);
  }

  // repeated .zetasql.FunctionSignatureId exclude_function_ids = 3;
  for (int i = 0, n = this->_internal_exclude_function_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        3, this->_internal_exclude_function_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  return target;
}

size_t ZetaSQLBuiltinFunctionOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.FunctionSignatureId include_function_ids = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_include_function_ids_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_include_function_ids(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .zetasql.FunctionSignatureId exclude_function_ids = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_exclude_function_ids_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_exclude_function_ids(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .zetasql.LanguageOptionsProto language_options = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *language_options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZetaSQLBuiltinFunctionOptionsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZetaSQLBuiltinFunctionOptionsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZetaSQLBuiltinFunctionOptionsProto::GetClassData() const { return &_class_data_; }

void ZetaSQLBuiltinFunctionOptionsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ZetaSQLBuiltinFunctionOptionsProto *>(to)->MergeFrom(
      static_cast<const ZetaSQLBuiltinFunctionOptionsProto &>(from));
}


void ZetaSQLBuiltinFunctionOptionsProto::MergeFrom(const ZetaSQLBuiltinFunctionOptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  include_function_ids_.MergeFrom(from.include_function_ids_);
  exclude_function_ids_.MergeFrom(from.exclude_function_ids_);
  if (from._internal_has_language_options()) {
    _internal_mutable_language_options()->::zetasql::LanguageOptionsProto::MergeFrom(from._internal_language_options());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZetaSQLBuiltinFunctionOptionsProto::CopyFrom(const ZetaSQLBuiltinFunctionOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ZetaSQLBuiltinFunctionOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZetaSQLBuiltinFunctionOptionsProto::IsInitialized() const {
  return true;
}

void ZetaSQLBuiltinFunctionOptionsProto::InternalSwap(ZetaSQLBuiltinFunctionOptionsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  include_function_ids_.InternalSwap(&other->include_function_ids_);
  exclude_function_ids_.InternalSwap(&other->exclude_function_ids_);
  swap(language_options_, other->language_options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZetaSQLBuiltinFunctionOptionsProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[0]);
}

// ===================================================================

class LanguageOptionsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LanguageOptionsProto>()._has_bits_);
  static void set_has_name_resolution_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_product_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_on_deprecated_syntax(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LanguageOptionsProto::LanguageOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  enabled_language_features_(arena),
  supported_statement_kinds_(arena),
  supported_generic_entity_types_(arena),
  reserved_keywords_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.LanguageOptionsProto)
}
LanguageOptionsProto::LanguageOptionsProto(const LanguageOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      enabled_language_features_(from.enabled_language_features_),
      supported_statement_kinds_(from.supported_statement_kinds_),
      supported_generic_entity_types_(from.supported_generic_entity_types_),
      reserved_keywords_(from.reserved_keywords_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&name_resolution_mode_, &from.name_resolution_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_on_deprecated_syntax_) -
    reinterpret_cast<char*>(&name_resolution_mode_)) + sizeof(error_on_deprecated_syntax_));
  // @@protoc_insertion_point(copy_constructor:zetasql.LanguageOptionsProto)
}

inline void LanguageOptionsProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_resolution_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_on_deprecated_syntax_) -
    reinterpret_cast<char*>(&name_resolution_mode_)) + sizeof(error_on_deprecated_syntax_));
}

LanguageOptionsProto::~LanguageOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.LanguageOptionsProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LanguageOptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LanguageOptionsProto::ArenaDtor(void* object) {
  LanguageOptionsProto* _this = reinterpret_cast< LanguageOptionsProto* >(object);
  (void)_this;
}
void LanguageOptionsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LanguageOptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LanguageOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.LanguageOptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_language_features_.Clear();
  supported_statement_kinds_.Clear();
  supported_generic_entity_types_.Clear();
  reserved_keywords_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&name_resolution_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_on_deprecated_syntax_) -
        reinterpret_cast<char*>(&name_resolution_mode_)) + sizeof(error_on_deprecated_syntax_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LanguageOptionsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.NameResolutionMode name_resolution_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::NameResolutionMode_IsValid(val))) {
            _internal_set_name_resolution_mode(static_cast<::zetasql::NameResolutionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ProductMode product_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::ProductMode_IsValid(val))) {
            _internal_set_product_mode(static_cast<::zetasql::ProductMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool error_on_deprecated_syntax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_error_on_deprecated_syntax(&has_bits);
          error_on_deprecated_syntax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.LanguageFeature enabled_language_features = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::zetasql::LanguageFeature_IsValid(val))) {
              _internal_add_enabled_language_features(static_cast<::zetasql::LanguageFeature>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_enabled_language_features(), ptr, ctx, ::zetasql::LanguageFeature_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.ResolvedNodeKind supported_statement_kinds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::zetasql::ResolvedNodeKind_IsValid(val))) {
              _internal_add_supported_statement_kinds(static_cast<::zetasql::ResolvedNodeKind>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_supported_statement_kinds(), ptr, ctx, ::zetasql::ResolvedNodeKind_IsValid, &_internal_metadata_, 6);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string supported_generic_entity_types = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_supported_generic_entity_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.LanguageOptionsProto.supported_generic_entity_types");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string reserved_keywords = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reserved_keywords();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.LanguageOptionsProto.reserved_keywords");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LanguageOptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.LanguageOptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.NameResolutionMode name_resolution_mode = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_name_resolution_mode(), target);
  }

  // optional .zetasql.ProductMode product_mode = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_product_mode(), target);
  }

  // optional bool error_on_deprecated_syntax = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_error_on_deprecated_syntax(), target);
  }

  // repeated .zetasql.LanguageFeature enabled_language_features = 5;
  for (int i = 0, n = this->_internal_enabled_language_features_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        5, this->_internal_enabled_language_features(i), target);
  }

  // repeated .zetasql.ResolvedNodeKind supported_statement_kinds = 6;
  for (int i = 0, n = this->_internal_supported_statement_kinds_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        6, this->_internal_supported_statement_kinds(i), target);
  }

  // repeated string supported_generic_entity_types = 7;
  for (int i = 0, n = this->_internal_supported_generic_entity_types_size(); i < n; i++) {
    const auto& s = this->_internal_supported_generic_entity_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.LanguageOptionsProto.supported_generic_entity_types");
    target = stream->WriteString(7, s, target);
  }

  // repeated string reserved_keywords = 8;
  for (int i = 0, n = this->_internal_reserved_keywords_size(); i < n; i++) {
    const auto& s = this->_internal_reserved_keywords(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.LanguageOptionsProto.reserved_keywords");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.LanguageOptionsProto)
  return target;
}

size_t LanguageOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.LanguageOptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.LanguageFeature enabled_language_features = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_enabled_language_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_enabled_language_features(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .zetasql.ResolvedNodeKind supported_statement_kinds = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_supported_statement_kinds_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_supported_statement_kinds(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated string supported_generic_entity_types = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(supported_generic_entity_types_.size());
  for (int i = 0, n = supported_generic_entity_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      supported_generic_entity_types_.Get(i));
  }

  // repeated string reserved_keywords = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reserved_keywords_.size());
  for (int i = 0, n = reserved_keywords_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      reserved_keywords_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .zetasql.NameResolutionMode name_resolution_mode = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_name_resolution_mode());
    }

    // optional .zetasql.ProductMode product_mode = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_product_mode());
    }

    // optional bool error_on_deprecated_syntax = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LanguageOptionsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LanguageOptionsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LanguageOptionsProto::GetClassData() const { return &_class_data_; }

void LanguageOptionsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LanguageOptionsProto *>(to)->MergeFrom(
      static_cast<const LanguageOptionsProto &>(from));
}


void LanguageOptionsProto::MergeFrom(const LanguageOptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.LanguageOptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  enabled_language_features_.MergeFrom(from.enabled_language_features_);
  supported_statement_kinds_.MergeFrom(from.supported_statement_kinds_);
  supported_generic_entity_types_.MergeFrom(from.supported_generic_entity_types_);
  reserved_keywords_.MergeFrom(from.reserved_keywords_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_resolution_mode_ = from.name_resolution_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      product_mode_ = from.product_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      error_on_deprecated_syntax_ = from.error_on_deprecated_syntax_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LanguageOptionsProto::CopyFrom(const LanguageOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.LanguageOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanguageOptionsProto::IsInitialized() const {
  return true;
}

void LanguageOptionsProto::InternalSwap(LanguageOptionsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enabled_language_features_.InternalSwap(&other->enabled_language_features_);
  supported_statement_kinds_.InternalSwap(&other->supported_statement_kinds_);
  supported_generic_entity_types_.InternalSwap(&other->supported_generic_entity_types_);
  reserved_keywords_.InternalSwap(&other->reserved_keywords_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LanguageOptionsProto, error_on_deprecated_syntax_)
      + sizeof(LanguageOptionsProto::error_on_deprecated_syntax_)
      - PROTOBUF_FIELD_OFFSET(LanguageOptionsProto, name_resolution_mode_)>(
          reinterpret_cast<char*>(&name_resolution_mode_),
          reinterpret_cast<char*>(&other->name_resolution_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LanguageOptionsProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[1]);
}

// ===================================================================

class AllowedHintsAndOptionsProto_HintProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowedHintsAndOptionsProto_HintProto>()._has_bits_);
  static void set_has_qualifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TypeProto& type(const AllowedHintsAndOptionsProto_HintProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_allow_unqualified(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::TypeProto&
AllowedHintsAndOptionsProto_HintProto::_Internal::type(const AllowedHintsAndOptionsProto_HintProto* msg) {
  return *msg->type_;
}
void AllowedHintsAndOptionsProto_HintProto::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
AllowedHintsAndOptionsProto_HintProto::AllowedHintsAndOptionsProto_HintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AllowedHintsAndOptionsProto.HintProto)
}
AllowedHintsAndOptionsProto_HintProto::AllowedHintsAndOptionsProto_HintProto(const AllowedHintsAndOptionsProto_HintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    qualifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_qualifier()) {
    qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_qualifier(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_type()) {
    type_ = new ::zetasql::TypeProto(*from.type_);
  } else {
    type_ = nullptr;
  }
  allow_unqualified_ = from.allow_unqualified_;
  // @@protoc_insertion_point(copy_constructor:zetasql.AllowedHintsAndOptionsProto.HintProto)
}

inline void AllowedHintsAndOptionsProto_HintProto::SharedCtor() {
qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  qualifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_unqualified_) -
    reinterpret_cast<char*>(&type_)) + sizeof(allow_unqualified_));
}

AllowedHintsAndOptionsProto_HintProto::~AllowedHintsAndOptionsProto_HintProto() {
  // @@protoc_insertion_point(destructor:zetasql.AllowedHintsAndOptionsProto.HintProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AllowedHintsAndOptionsProto_HintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  qualifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void AllowedHintsAndOptionsProto_HintProto::ArenaDtor(void* object) {
  AllowedHintsAndOptionsProto_HintProto* _this = reinterpret_cast< AllowedHintsAndOptionsProto_HintProto* >(object);
  (void)_this;
}
void AllowedHintsAndOptionsProto_HintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllowedHintsAndOptionsProto_HintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllowedHintsAndOptionsProto_HintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.AllowedHintsAndOptionsProto.HintProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      qualifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  allow_unqualified_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllowedHintsAndOptionsProto_HintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string qualifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_qualifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.AllowedHintsAndOptionsProto.HintProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_unqualified = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_allow_unqualified(&has_bits);
          allow_unqualified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllowedHintsAndOptionsProto_HintProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.AllowedHintsAndOptionsProto.HintProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string qualifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_qualifier().data(), static_cast<int>(this->_internal_qualifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AllowedHintsAndOptionsProto.HintProto.qualifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_qualifier(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AllowedHintsAndOptionsProto.HintProto.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .zetasql.TypeProto type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::type(this), target, stream);
  }

  // optional bool allow_unqualified = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_unqualified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.AllowedHintsAndOptionsProto.HintProto)
  return target;
}

size_t AllowedHintsAndOptionsProto_HintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.AllowedHintsAndOptionsProto.HintProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string qualifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_qualifier());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .zetasql.TypeProto type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional bool allow_unqualified = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowedHintsAndOptionsProto_HintProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AllowedHintsAndOptionsProto_HintProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowedHintsAndOptionsProto_HintProto::GetClassData() const { return &_class_data_; }

void AllowedHintsAndOptionsProto_HintProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AllowedHintsAndOptionsProto_HintProto *>(to)->MergeFrom(
      static_cast<const AllowedHintsAndOptionsProto_HintProto &>(from));
}


void AllowedHintsAndOptionsProto_HintProto::MergeFrom(const AllowedHintsAndOptionsProto_HintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.AllowedHintsAndOptionsProto.HintProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_qualifier(from._internal_qualifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_type()->::zetasql::TypeProto::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000008u) {
      allow_unqualified_ = from.allow_unqualified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllowedHintsAndOptionsProto_HintProto::CopyFrom(const AllowedHintsAndOptionsProto_HintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.AllowedHintsAndOptionsProto.HintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowedHintsAndOptionsProto_HintProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!type_->IsInitialized()) return false;
  }
  return true;
}

void AllowedHintsAndOptionsProto_HintProto::InternalSwap(AllowedHintsAndOptionsProto_HintProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &qualifier_, lhs_arena,
      &other->qualifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllowedHintsAndOptionsProto_HintProto, allow_unqualified_)
      + sizeof(AllowedHintsAndOptionsProto_HintProto::allow_unqualified_)
      - PROTOBUF_FIELD_OFFSET(AllowedHintsAndOptionsProto_HintProto, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowedHintsAndOptionsProto_HintProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[2]);
}

// ===================================================================

class AllowedHintsAndOptionsProto_OptionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowedHintsAndOptionsProto_OptionProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& type(const AllowedHintsAndOptionsProto_OptionProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::TypeProto&
AllowedHintsAndOptionsProto_OptionProto::_Internal::type(const AllowedHintsAndOptionsProto_OptionProto* msg) {
  return *msg->type_;
}
void AllowedHintsAndOptionsProto_OptionProto::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AllowedHintsAndOptionsProto_OptionProto::AllowedHintsAndOptionsProto_OptionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AllowedHintsAndOptionsProto.OptionProto)
}
AllowedHintsAndOptionsProto_OptionProto::AllowedHintsAndOptionsProto_OptionProto(const AllowedHintsAndOptionsProto_OptionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_type()) {
    type_ = new ::zetasql::TypeProto(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AllowedHintsAndOptionsProto.OptionProto)
}

inline void AllowedHintsAndOptionsProto_OptionProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = nullptr;
}

AllowedHintsAndOptionsProto_OptionProto::~AllowedHintsAndOptionsProto_OptionProto() {
  // @@protoc_insertion_point(destructor:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AllowedHintsAndOptionsProto_OptionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void AllowedHintsAndOptionsProto_OptionProto::ArenaDtor(void* object) {
  AllowedHintsAndOptionsProto_OptionProto* _this = reinterpret_cast< AllowedHintsAndOptionsProto_OptionProto* >(object);
  (void)_this;
}
void AllowedHintsAndOptionsProto_OptionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllowedHintsAndOptionsProto_OptionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllowedHintsAndOptionsProto_OptionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllowedHintsAndOptionsProto_OptionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.AllowedHintsAndOptionsProto.OptionProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllowedHintsAndOptionsProto_OptionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AllowedHintsAndOptionsProto.OptionProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .zetasql.TypeProto type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  return target;
}

size_t AllowedHintsAndOptionsProto_OptionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .zetasql.TypeProto type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowedHintsAndOptionsProto_OptionProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AllowedHintsAndOptionsProto_OptionProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowedHintsAndOptionsProto_OptionProto::GetClassData() const { return &_class_data_; }

void AllowedHintsAndOptionsProto_OptionProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AllowedHintsAndOptionsProto_OptionProto *>(to)->MergeFrom(
      static_cast<const AllowedHintsAndOptionsProto_OptionProto &>(from));
}


void AllowedHintsAndOptionsProto_OptionProto::MergeFrom(const AllowedHintsAndOptionsProto_OptionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_type()->::zetasql::TypeProto::MergeFrom(from._internal_type());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllowedHintsAndOptionsProto_OptionProto::CopyFrom(const AllowedHintsAndOptionsProto_OptionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.AllowedHintsAndOptionsProto.OptionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowedHintsAndOptionsProto_OptionProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!type_->IsInitialized()) return false;
  }
  return true;
}

void AllowedHintsAndOptionsProto_OptionProto::InternalSwap(AllowedHintsAndOptionsProto_OptionProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowedHintsAndOptionsProto_OptionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[3]);
}

// ===================================================================

class AllowedHintsAndOptionsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowedHintsAndOptionsProto>()._has_bits_);
  static void set_has_disallow_unknown_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AllowedHintsAndOptionsProto::AllowedHintsAndOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  disallow_unknown_hints_with_qualifier_(arena),
  hint_(arena),
  option_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AllowedHintsAndOptionsProto)
}
AllowedHintsAndOptionsProto::AllowedHintsAndOptionsProto(const AllowedHintsAndOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      disallow_unknown_hints_with_qualifier_(from.disallow_unknown_hints_with_qualifier_),
      hint_(from.hint_),
      option_(from.option_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  disallow_unknown_options_ = from.disallow_unknown_options_;
  // @@protoc_insertion_point(copy_constructor:zetasql.AllowedHintsAndOptionsProto)
}

inline void AllowedHintsAndOptionsProto::SharedCtor() {
disallow_unknown_options_ = false;
}

AllowedHintsAndOptionsProto::~AllowedHintsAndOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.AllowedHintsAndOptionsProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AllowedHintsAndOptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AllowedHintsAndOptionsProto::ArenaDtor(void* object) {
  AllowedHintsAndOptionsProto* _this = reinterpret_cast< AllowedHintsAndOptionsProto* >(object);
  (void)_this;
}
void AllowedHintsAndOptionsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllowedHintsAndOptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AllowedHintsAndOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.AllowedHintsAndOptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disallow_unknown_hints_with_qualifier_.Clear();
  hint_.Clear();
  option_.Clear();
  disallow_unknown_options_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllowedHintsAndOptionsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool disallow_unknown_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_disallow_unknown_options(&has_bits);
          disallow_unknown_options_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string disallow_unknown_hints_with_qualifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_disallow_unknown_hints_with_qualifier();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.AllowedHintsAndOptionsProto.HintProto hint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.AllowedHintsAndOptionsProto.OptionProto option = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_option(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllowedHintsAndOptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.AllowedHintsAndOptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool disallow_unknown_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_disallow_unknown_options(), target);
  }

  // repeated string disallow_unknown_hints_with_qualifier = 2;
  for (int i = 0, n = this->_internal_disallow_unknown_hints_with_qualifier_size(); i < n; i++) {
    const auto& s = this->_internal_disallow_unknown_hints_with_qualifier(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AllowedHintsAndOptionsProto.disallow_unknown_hints_with_qualifier");
    target = stream->WriteString(2, s, target);
  }

  // repeated .zetasql.AllowedHintsAndOptionsProto.HintProto hint = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_hint(i), target, stream);
  }

  // repeated .zetasql.AllowedHintsAndOptionsProto.OptionProto option = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_option_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_option(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.AllowedHintsAndOptionsProto)
  return target;
}

size_t AllowedHintsAndOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.AllowedHintsAndOptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string disallow_unknown_hints_with_qualifier = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(disallow_unknown_hints_with_qualifier_.size());
  for (int i = 0, n = disallow_unknown_hints_with_qualifier_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      disallow_unknown_hints_with_qualifier_.Get(i));
  }

  // repeated .zetasql.AllowedHintsAndOptionsProto.HintProto hint = 3;
  total_size += 1UL * this->_internal_hint_size();
  for (const auto& msg : this->hint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.AllowedHintsAndOptionsProto.OptionProto option = 4;
  total_size += 1UL * this->_internal_option_size();
  for (const auto& msg : this->option_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool disallow_unknown_options = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowedHintsAndOptionsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AllowedHintsAndOptionsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowedHintsAndOptionsProto::GetClassData() const { return &_class_data_; }

void AllowedHintsAndOptionsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AllowedHintsAndOptionsProto *>(to)->MergeFrom(
      static_cast<const AllowedHintsAndOptionsProto &>(from));
}


void AllowedHintsAndOptionsProto::MergeFrom(const AllowedHintsAndOptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.AllowedHintsAndOptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  disallow_unknown_hints_with_qualifier_.MergeFrom(from.disallow_unknown_hints_with_qualifier_);
  hint_.MergeFrom(from.hint_);
  option_.MergeFrom(from.option_);
  if (from._internal_has_disallow_unknown_options()) {
    _internal_set_disallow_unknown_options(from._internal_disallow_unknown_options());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllowedHintsAndOptionsProto::CopyFrom(const AllowedHintsAndOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.AllowedHintsAndOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowedHintsAndOptionsProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(hint_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(option_))
    return false;
  return true;
}

void AllowedHintsAndOptionsProto::InternalSwap(AllowedHintsAndOptionsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  disallow_unknown_hints_with_qualifier_.InternalSwap(&other->disallow_unknown_hints_with_qualifier_);
  hint_.InternalSwap(&other->hint_);
  option_.InternalSwap(&other->option_);
  swap(disallow_unknown_options_, other->disallow_unknown_options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowedHintsAndOptionsProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[4]);
}

// ===================================================================

class AnalyzerOptionsProto_QueryParameterProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AnalyzerOptionsProto_QueryParameterProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& type(const AnalyzerOptionsProto_QueryParameterProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::TypeProto&
AnalyzerOptionsProto_QueryParameterProto::_Internal::type(const AnalyzerOptionsProto_QueryParameterProto* msg) {
  return *msg->type_;
}
void AnalyzerOptionsProto_QueryParameterProto::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AnalyzerOptionsProto_QueryParameterProto::AnalyzerOptionsProto_QueryParameterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnalyzerOptionsProto.QueryParameterProto)
}
AnalyzerOptionsProto_QueryParameterProto::AnalyzerOptionsProto_QueryParameterProto(const AnalyzerOptionsProto_QueryParameterProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_type()) {
    type_ = new ::zetasql::TypeProto(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnalyzerOptionsProto.QueryParameterProto)
}

inline void AnalyzerOptionsProto_QueryParameterProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = nullptr;
}

AnalyzerOptionsProto_QueryParameterProto::~AnalyzerOptionsProto_QueryParameterProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnalyzerOptionsProto_QueryParameterProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void AnalyzerOptionsProto_QueryParameterProto::ArenaDtor(void* object) {
  AnalyzerOptionsProto_QueryParameterProto* _this = reinterpret_cast< AnalyzerOptionsProto_QueryParameterProto* >(object);
  (void)_this;
}
void AnalyzerOptionsProto_QueryParameterProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalyzerOptionsProto_QueryParameterProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnalyzerOptionsProto_QueryParameterProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalyzerOptionsProto_QueryParameterProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.AnalyzerOptionsProto.QueryParameterProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnalyzerOptionsProto_QueryParameterProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AnalyzerOptionsProto.QueryParameterProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .zetasql.TypeProto type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  return target;
}

size_t AnalyzerOptionsProto_QueryParameterProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .zetasql.TypeProto type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnalyzerOptionsProto_QueryParameterProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnalyzerOptionsProto_QueryParameterProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnalyzerOptionsProto_QueryParameterProto::GetClassData() const { return &_class_data_; }

void AnalyzerOptionsProto_QueryParameterProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnalyzerOptionsProto_QueryParameterProto *>(to)->MergeFrom(
      static_cast<const AnalyzerOptionsProto_QueryParameterProto &>(from));
}


void AnalyzerOptionsProto_QueryParameterProto::MergeFrom(const AnalyzerOptionsProto_QueryParameterProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_type()->::zetasql::TypeProto::MergeFrom(from._internal_type());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnalyzerOptionsProto_QueryParameterProto::CopyFrom(const AnalyzerOptionsProto_QueryParameterProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.AnalyzerOptionsProto.QueryParameterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzerOptionsProto_QueryParameterProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!type_->IsInitialized()) return false;
  }
  return true;
}

void AnalyzerOptionsProto_QueryParameterProto::InternalSwap(AnalyzerOptionsProto_QueryParameterProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalyzerOptionsProto_QueryParameterProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[5]);
}

// ===================================================================

class AnalyzerOptionsProto_SystemVariableProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AnalyzerOptionsProto_SystemVariableProto>()._has_bits_);
  static const ::zetasql::TypeProto& type(const AnalyzerOptionsProto_SystemVariableProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::TypeProto&
AnalyzerOptionsProto_SystemVariableProto::_Internal::type(const AnalyzerOptionsProto_SystemVariableProto* msg) {
  return *msg->type_;
}
void AnalyzerOptionsProto_SystemVariableProto::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AnalyzerOptionsProto_SystemVariableProto::AnalyzerOptionsProto_SystemVariableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnalyzerOptionsProto.SystemVariableProto)
}
AnalyzerOptionsProto_SystemVariableProto::AnalyzerOptionsProto_SystemVariableProto(const AnalyzerOptionsProto_SystemVariableProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::zetasql::TypeProto(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnalyzerOptionsProto.SystemVariableProto)
}

inline void AnalyzerOptionsProto_SystemVariableProto::SharedCtor() {
type_ = nullptr;
}

AnalyzerOptionsProto_SystemVariableProto::~AnalyzerOptionsProto_SystemVariableProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnalyzerOptionsProto_SystemVariableProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete type_;
}

void AnalyzerOptionsProto_SystemVariableProto::ArenaDtor(void* object) {
  AnalyzerOptionsProto_SystemVariableProto* _this = reinterpret_cast< AnalyzerOptionsProto_SystemVariableProto* >(object);
  (void)_this;
}
void AnalyzerOptionsProto_SystemVariableProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalyzerOptionsProto_SystemVariableProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnalyzerOptionsProto_SystemVariableProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(type_ != nullptr);
    type_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalyzerOptionsProto_SystemVariableProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string name_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnalyzerOptionsProto_SystemVariableProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name_path = 1;
  for (int i = 0, n = this->_internal_name_path_size(); i < n; i++) {
    const auto& s = this->_internal_name_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AnalyzerOptionsProto.SystemVariableProto.name_path");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.TypeProto type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  return target;
}

size_t AnalyzerOptionsProto_SystemVariableProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name_path = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_path_.size());
  for (int i = 0, n = name_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_path_.Get(i));
  }

  // optional .zetasql.TypeProto type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnalyzerOptionsProto_SystemVariableProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnalyzerOptionsProto_SystemVariableProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnalyzerOptionsProto_SystemVariableProto::GetClassData() const { return &_class_data_; }

void AnalyzerOptionsProto_SystemVariableProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnalyzerOptionsProto_SystemVariableProto *>(to)->MergeFrom(
      static_cast<const AnalyzerOptionsProto_SystemVariableProto &>(from));
}


void AnalyzerOptionsProto_SystemVariableProto::MergeFrom(const AnalyzerOptionsProto_SystemVariableProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  name_path_.MergeFrom(from.name_path_);
  if (from._internal_has_type()) {
    _internal_mutable_type()->::zetasql::TypeProto::MergeFrom(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnalyzerOptionsProto_SystemVariableProto::CopyFrom(const AnalyzerOptionsProto_SystemVariableProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.AnalyzerOptionsProto.SystemVariableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzerOptionsProto_SystemVariableProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!type_->IsInitialized()) return false;
  }
  return true;
}

void AnalyzerOptionsProto_SystemVariableProto::InternalSwap(AnalyzerOptionsProto_SystemVariableProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_path_.InternalSwap(&other->name_path_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalyzerOptionsProto_SystemVariableProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[6]);
}

// ===================================================================

class AnalyzerOptionsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AnalyzerOptionsProto>()._has_bits_);
  static const ::zetasql::LanguageOptionsProto& language_options(const AnalyzerOptionsProto* msg);
  static void set_has_language_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnalyzerOptionsProto_QueryParameterProto& in_scope_expression_column(const AnalyzerOptionsProto* msg);
  static void set_has_in_scope_expression_column(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_message_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_default_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_create_new_column_for_each_projected_output(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_prune_unused_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_allow_undeclared_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_parameter_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zetasql::AllowedHintsAndOptionsProto& allowed_hints_and_options(const AnalyzerOptionsProto* msg);
  static void set_has_allowed_hints_and_options(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_statement_context(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_preserve_column_aliases(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_parse_location_record_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::zetasql::LanguageOptionsProto&
AnalyzerOptionsProto::_Internal::language_options(const AnalyzerOptionsProto* msg) {
  return *msg->language_options_;
}
const ::zetasql::AnalyzerOptionsProto_QueryParameterProto&
AnalyzerOptionsProto::_Internal::in_scope_expression_column(const AnalyzerOptionsProto* msg) {
  return *msg->in_scope_expression_column_;
}
const ::zetasql::AllowedHintsAndOptionsProto&
AnalyzerOptionsProto::_Internal::allowed_hints_and_options(const AnalyzerOptionsProto* msg) {
  return *msg->allowed_hints_and_options_;
}
void AnalyzerOptionsProto::clear_positional_query_parameters() {
  positional_query_parameters_.Clear();
}
void AnalyzerOptionsProto::clear_target_column_types() {
  target_column_types_.Clear();
}
AnalyzerOptionsProto::AnalyzerOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  query_parameters_(arena),
  expression_columns_(arena),
  positional_query_parameters_(arena),
  ddl_pseudo_columns_(arena),
  system_variables_(arena),
  target_column_types_(arena),
  enabled_rewrites_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnalyzerOptionsProto)
}
AnalyzerOptionsProto::AnalyzerOptionsProto(const AnalyzerOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      query_parameters_(from.query_parameters_),
      expression_columns_(from.expression_columns_),
      positional_query_parameters_(from.positional_query_parameters_),
      ddl_pseudo_columns_(from.ddl_pseudo_columns_),
      system_variables_(from.system_variables_),
      target_column_types_(from.target_column_types_),
      enabled_rewrites_(from.enabled_rewrites_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  default_timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    default_timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_default_timezone()) {
    default_timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_default_timezone(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_language_options()) {
    language_options_ = new ::zetasql::LanguageOptionsProto(*from.language_options_);
  } else {
    language_options_ = nullptr;
  }
  if (from._internal_has_in_scope_expression_column()) {
    in_scope_expression_column_ = new ::zetasql::AnalyzerOptionsProto_QueryParameterProto(*from.in_scope_expression_column_);
  } else {
    in_scope_expression_column_ = nullptr;
  }
  if (from._internal_has_allowed_hints_and_options()) {
    allowed_hints_and_options_ = new ::zetasql::AllowedHintsAndOptionsProto(*from.allowed_hints_and_options_);
  } else {
    allowed_hints_and_options_ = nullptr;
  }
  ::memcpy(&error_message_mode_, &from.error_message_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&parse_location_record_type_) -
    reinterpret_cast<char*>(&error_message_mode_)) + sizeof(parse_location_record_type_));
  // @@protoc_insertion_point(copy_constructor:zetasql.AnalyzerOptionsProto)
}

inline void AnalyzerOptionsProto::SharedCtor() {
default_timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  default_timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&language_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parse_location_record_type_) -
    reinterpret_cast<char*>(&language_options_)) + sizeof(parse_location_record_type_));
}

AnalyzerOptionsProto::~AnalyzerOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnalyzerOptionsProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnalyzerOptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  default_timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete language_options_;
  if (this != internal_default_instance()) delete in_scope_expression_column_;
  if (this != internal_default_instance()) delete allowed_hints_and_options_;
}

void AnalyzerOptionsProto::ArenaDtor(void* object) {
  AnalyzerOptionsProto* _this = reinterpret_cast< AnalyzerOptionsProto* >(object);
  (void)_this;
}
void AnalyzerOptionsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnalyzerOptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnalyzerOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.AnalyzerOptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_parameters_.Clear();
  expression_columns_.Clear();
  positional_query_parameters_.Clear();
  ddl_pseudo_columns_.Clear();
  system_variables_.Clear();
  target_column_types_.Clear();
  enabled_rewrites_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      default_timezone_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(language_options_ != nullptr);
      language_options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(in_scope_expression_column_ != nullptr);
      in_scope_expression_column_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(allowed_hints_and_options_ != nullptr);
      allowed_hints_and_options_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&error_message_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&create_new_column_for_each_projected_output_) -
        reinterpret_cast<char*>(&error_message_mode_)) + sizeof(create_new_column_for_each_projected_output_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&prune_unused_columns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parse_location_record_type_) -
        reinterpret_cast<char*>(&prune_unused_columns_)) + sizeof(parse_location_record_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalyzerOptionsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.LanguageOptionsProto language_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_language_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto query_parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_query_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto expression_columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expression_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.AnalyzerOptionsProto.QueryParameterProto in_scope_expression_column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_scope_expression_column(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ErrorMessageMode error_message_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::ErrorMessageMode_IsValid(val))) {
            _internal_set_error_message_mode(static_cast<::zetasql::ErrorMessageMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string default_timezone = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_default_timezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.AnalyzerOptionsProto.default_timezone");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool prune_unused_columns = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_prune_unused_columns(&has_bits);
          prune_unused_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_undeclared_parameters = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_allow_undeclared_parameters(&has_bits);
          allow_undeclared_parameters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.AllowedHintsAndOptionsProto allowed_hints_and_options = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_allowed_hints_and_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.TypeProto positional_query_parameters = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positional_query_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ParameterMode parameter_mode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::ParameterMode_IsValid(val))) {
            _internal_set_parameter_mode(static_cast<::zetasql::ParameterMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.StatementContext statement_context = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::StatementContext_IsValid(val))) {
            _internal_set_statement_context(static_cast<::zetasql::StatementContext>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto ddl_pseudo_columns = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ddl_pseudo_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool preserve_column_aliases = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_preserve_column_aliases(&has_bits);
          preserve_column_aliases_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.AnalyzerOptionsProto.SystemVariableProto system_variables = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_system_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.TypeProto target_column_types = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_target_column_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool create_new_column_for_each_projected_output = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_create_new_column_for_each_projected_output(&has_bits);
          create_new_column_for_each_projected_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.ResolvedASTRewrite enabled_rewrites = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::zetasql::ResolvedASTRewrite_IsValid(val))) {
              _internal_add_enabled_rewrites(static_cast<::zetasql::ResolvedASTRewrite>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<168>(ptr));
        } else if (static_cast<uint8_t>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_enabled_rewrites(), ptr, ctx, ::zetasql::ResolvedASTRewrite_IsValid, &_internal_metadata_, 21);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ParseLocationRecordType parse_location_record_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::ParseLocationRecordType_IsValid(val))) {
            _internal_set_parse_location_record_type(static_cast<::zetasql::ParseLocationRecordType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnalyzerOptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.AnalyzerOptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.LanguageOptionsProto language_options = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::language_options(this), target, stream);
  }

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto query_parameters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_query_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_query_parameters(i), target, stream);
  }

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto expression_columns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expression_columns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_expression_columns(i), target, stream);
  }

  // optional .zetasql.AnalyzerOptionsProto.QueryParameterProto in_scope_expression_column = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::in_scope_expression_column(this), target, stream);
  }

  // optional .zetasql.ErrorMessageMode error_message_mode = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_error_message_mode(), target);
  }

  // optional string default_timezone = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_timezone().data(), static_cast<int>(this->_internal_default_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.AnalyzerOptionsProto.default_timezone");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_default_timezone(), target);
  }

  // optional bool prune_unused_columns = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_prune_unused_columns(), target);
  }

  // optional bool allow_undeclared_parameters = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_allow_undeclared_parameters(), target);
  }

  // optional .zetasql.AllowedHintsAndOptionsProto allowed_hints_and_options = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::allowed_hints_and_options(this), target, stream);
  }

  // repeated .zetasql.TypeProto positional_query_parameters = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_positional_query_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_positional_query_parameters(i), target, stream);
  }

  // optional .zetasql.ParameterMode parameter_mode = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_parameter_mode(), target);
  }

  // optional .zetasql.StatementContext statement_context = 14;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_statement_context(), target);
  }

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto ddl_pseudo_columns = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ddl_pseudo_columns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_ddl_pseudo_columns(i), target, stream);
  }

  // optional bool preserve_column_aliases = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_preserve_column_aliases(), target);
  }

  // repeated .zetasql.AnalyzerOptionsProto.SystemVariableProto system_variables = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_system_variables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_system_variables(i), target, stream);
  }

  // repeated .zetasql.TypeProto target_column_types = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_column_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_target_column_types(i), target, stream);
  }

  // optional bool create_new_column_for_each_projected_output = 20;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_create_new_column_for_each_projected_output(), target);
  }

  // repeated .zetasql.ResolvedASTRewrite enabled_rewrites = 21;
  for (int i = 0, n = this->_internal_enabled_rewrites_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        21, this->_internal_enabled_rewrites(i), target);
  }

  // optional .zetasql.ParseLocationRecordType parse_location_record_type = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_parse_location_record_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.AnalyzerOptionsProto)
  return target;
}

size_t AnalyzerOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.AnalyzerOptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto query_parameters = 2;
  total_size += 1UL * this->_internal_query_parameters_size();
  for (const auto& msg : this->query_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto expression_columns = 3;
  total_size += 1UL * this->_internal_expression_columns_size();
  for (const auto& msg : this->expression_columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.TypeProto positional_query_parameters = 12;
  total_size += 1UL * this->_internal_positional_query_parameters_size();
  for (const auto& msg : this->positional_query_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.AnalyzerOptionsProto.QueryParameterProto ddl_pseudo_columns = 15;
  total_size += 1UL * this->_internal_ddl_pseudo_columns_size();
  for (const auto& msg : this->ddl_pseudo_columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.AnalyzerOptionsProto.SystemVariableProto system_variables = 18;
  total_size += 2UL * this->_internal_system_variables_size();
  for (const auto& msg : this->system_variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.TypeProto target_column_types = 19;
  total_size += 2UL * this->_internal_target_column_types_size();
  for (const auto& msg : this->target_column_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.ResolvedASTRewrite enabled_rewrites = 21;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_enabled_rewrites_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_enabled_rewrites(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string default_timezone = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_timezone());
    }

    // optional .zetasql.LanguageOptionsProto language_options = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *language_options_);
    }

    // optional .zetasql.AnalyzerOptionsProto.QueryParameterProto in_scope_expression_column = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *in_scope_expression_column_);
    }

    // optional .zetasql.AllowedHintsAndOptionsProto allowed_hints_and_options = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowed_hints_and_options_);
    }

    // optional .zetasql.ErrorMessageMode error_message_mode = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_message_mode());
    }

    // optional .zetasql.ParameterMode parameter_mode = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parameter_mode());
    }

    // optional .zetasql.StatementContext statement_context = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statement_context());
    }

    // optional bool create_new_column_for_each_projected_output = 20;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool prune_unused_columns = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool allow_undeclared_parameters = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool preserve_column_aliases = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional .zetasql.ParseLocationRecordType parse_location_record_type = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parse_location_record_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnalyzerOptionsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnalyzerOptionsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnalyzerOptionsProto::GetClassData() const { return &_class_data_; }

void AnalyzerOptionsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnalyzerOptionsProto *>(to)->MergeFrom(
      static_cast<const AnalyzerOptionsProto &>(from));
}


void AnalyzerOptionsProto::MergeFrom(const AnalyzerOptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.AnalyzerOptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  query_parameters_.MergeFrom(from.query_parameters_);
  expression_columns_.MergeFrom(from.expression_columns_);
  positional_query_parameters_.MergeFrom(from.positional_query_parameters_);
  ddl_pseudo_columns_.MergeFrom(from.ddl_pseudo_columns_);
  system_variables_.MergeFrom(from.system_variables_);
  target_column_types_.MergeFrom(from.target_column_types_);
  enabled_rewrites_.MergeFrom(from.enabled_rewrites_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_default_timezone(from._internal_default_timezone());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_language_options()->::zetasql::LanguageOptionsProto::MergeFrom(from._internal_language_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_in_scope_expression_column()->::zetasql::AnalyzerOptionsProto_QueryParameterProto::MergeFrom(from._internal_in_scope_expression_column());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_allowed_hints_and_options()->::zetasql::AllowedHintsAndOptionsProto::MergeFrom(from._internal_allowed_hints_and_options());
    }
    if (cached_has_bits & 0x00000010u) {
      error_message_mode_ = from.error_message_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      parameter_mode_ = from.parameter_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      statement_context_ = from.statement_context_;
    }
    if (cached_has_bits & 0x00000080u) {
      create_new_column_for_each_projected_output_ = from.create_new_column_for_each_projected_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      prune_unused_columns_ = from.prune_unused_columns_;
    }
    if (cached_has_bits & 0x00000200u) {
      allow_undeclared_parameters_ = from.allow_undeclared_parameters_;
    }
    if (cached_has_bits & 0x00000400u) {
      preserve_column_aliases_ = from.preserve_column_aliases_;
    }
    if (cached_has_bits & 0x00000800u) {
      parse_location_record_type_ = from.parse_location_record_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnalyzerOptionsProto::CopyFrom(const AnalyzerOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.AnalyzerOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalyzerOptionsProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(query_parameters_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(expression_columns_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(positional_query_parameters_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ddl_pseudo_columns_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(system_variables_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(target_column_types_))
    return false;
  if (_internal_has_in_scope_expression_column()) {
    if (!in_scope_expression_column_->IsInitialized()) return false;
  }
  if (_internal_has_allowed_hints_and_options()) {
    if (!allowed_hints_and_options_->IsInitialized()) return false;
  }
  return true;
}

void AnalyzerOptionsProto::InternalSwap(AnalyzerOptionsProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  query_parameters_.InternalSwap(&other->query_parameters_);
  expression_columns_.InternalSwap(&other->expression_columns_);
  positional_query_parameters_.InternalSwap(&other->positional_query_parameters_);
  ddl_pseudo_columns_.InternalSwap(&other->ddl_pseudo_columns_);
  system_variables_.InternalSwap(&other->system_variables_);
  target_column_types_.InternalSwap(&other->target_column_types_);
  enabled_rewrites_.InternalSwap(&other->enabled_rewrites_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &default_timezone_, lhs_arena,
      &other->default_timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalyzerOptionsProto, parse_location_record_type_)
      + sizeof(AnalyzerOptionsProto::parse_location_record_type_)
      - PROTOBUF_FIELD_OFFSET(AnalyzerOptionsProto, language_options_)>(
          reinterpret_cast<char*>(&language_options_),
          reinterpret_cast<char*>(&other->language_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalyzerOptionsProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2foptions_2eproto_getter, &descriptor_table_zetasql_2fproto_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fproto_2foptions_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::ZetaSQLBuiltinFunctionOptionsProto* Arena::CreateMaybeMessage< ::zetasql::ZetaSQLBuiltinFunctionOptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ZetaSQLBuiltinFunctionOptionsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::LanguageOptionsProto* Arena::CreateMaybeMessage< ::zetasql::LanguageOptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::LanguageOptionsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AllowedHintsAndOptionsProto_HintProto* Arena::CreateMaybeMessage< ::zetasql::AllowedHintsAndOptionsProto_HintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AllowedHintsAndOptionsProto_HintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AllowedHintsAndOptionsProto_OptionProto* Arena::CreateMaybeMessage< ::zetasql::AllowedHintsAndOptionsProto_OptionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AllowedHintsAndOptionsProto_OptionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AllowedHintsAndOptionsProto* Arena::CreateMaybeMessage< ::zetasql::AllowedHintsAndOptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AllowedHintsAndOptionsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnalyzerOptionsProto_QueryParameterProto* Arena::CreateMaybeMessage< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnalyzerOptionsProto_QueryParameterProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnalyzerOptionsProto_SystemVariableProto* Arena::CreateMaybeMessage< ::zetasql::AnalyzerOptionsProto_SystemVariableProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnalyzerOptionsProto_SystemVariableProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnalyzerOptionsProto* Arena::CreateMaybeMessage< ::zetasql::AnalyzerOptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnalyzerOptionsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
