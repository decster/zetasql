// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/proto/function.proto

#include "zetasql/proto/function.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zetasql {
constexpr TVFRelationColumnProto::TVFRelationColumnProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(nullptr)
  , name_parse_location_range_(nullptr)
  , type_parse_location_range_(nullptr)
  , is_pseudo_column_(false){}
struct TVFRelationColumnProtoDefaultTypeInternal {
  constexpr TVFRelationColumnProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TVFRelationColumnProtoDefaultTypeInternal() {}
  union {
    TVFRelationColumnProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TVFRelationColumnProtoDefaultTypeInternal _TVFRelationColumnProto_default_instance_;
constexpr TVFRelationProto::TVFRelationProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_()
  , is_value_table_(false){}
struct TVFRelationProtoDefaultTypeInternal {
  constexpr TVFRelationProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TVFRelationProtoDefaultTypeInternal() {}
  union {
    TVFRelationProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TVFRelationProtoDefaultTypeInternal _TVFRelationProto_default_instance_;
constexpr TVFModelProto::TVFModelProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , full_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TVFModelProtoDefaultTypeInternal {
  constexpr TVFModelProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TVFModelProtoDefaultTypeInternal() {}
  union {
    TVFModelProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TVFModelProtoDefaultTypeInternal _TVFModelProto_default_instance_;
constexpr TVFConnectionProto::TVFConnectionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , full_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TVFConnectionProtoDefaultTypeInternal {
  constexpr TVFConnectionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TVFConnectionProtoDefaultTypeInternal() {}
  union {
    TVFConnectionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TVFConnectionProtoDefaultTypeInternal _TVFConnectionProto_default_instance_;
constexpr TVFDescriptorProto::TVFDescriptorProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_name_(){}
struct TVFDescriptorProtoDefaultTypeInternal {
  constexpr TVFDescriptorProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TVFDescriptorProtoDefaultTypeInternal() {}
  union {
    TVFDescriptorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TVFDescriptorProtoDefaultTypeInternal _TVFDescriptorProto_default_instance_;
constexpr FunctionArgumentTypeOptionsProto::FunctionArgumentTypeOptionsProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argument_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , relation_input_schema_(nullptr)
  , argument_name_parse_location_(nullptr)
  , argument_type_parse_location_(nullptr)
  , default_value_(nullptr)
  , default_value_type_(nullptr)
  , cardinality_(0)

  , must_be_constant_(false)
  , must_be_non_null_(false)
  , is_not_aggregate_(false)
  , must_support_equality_(false)
  , min_value_(int64_t{0})
  , max_value_(int64_t{0})
  , must_support_ordering_(false)
  , extra_relation_input_columns_allowed_(false)
  , argument_name_is_mandatory_(false)
  , uses_array_element_for_collation_(false)
  , procedure_argument_mode_(0)

  , descriptor_resolution_table_offset_(-1)
  , argument_collation_mode_(3)
{}
struct FunctionArgumentTypeOptionsProtoDefaultTypeInternal {
  constexpr FunctionArgumentTypeOptionsProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionArgumentTypeOptionsProtoDefaultTypeInternal() {}
  union {
    FunctionArgumentTypeOptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionArgumentTypeOptionsProtoDefaultTypeInternal _FunctionArgumentTypeOptionsProto_default_instance_;
constexpr ArgumentTypeLambdaProto::ArgumentTypeLambdaProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argument_()
  , body_(nullptr){}
struct ArgumentTypeLambdaProtoDefaultTypeInternal {
  constexpr ArgumentTypeLambdaProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArgumentTypeLambdaProtoDefaultTypeInternal() {}
  union {
    ArgumentTypeLambdaProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArgumentTypeLambdaProtoDefaultTypeInternal _ArgumentTypeLambdaProto_default_instance_;
constexpr FunctionArgumentTypeProto::FunctionArgumentTypeProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(nullptr)
  , options_(nullptr)
  , lambda_(nullptr)
  , kind_(0)

  , num_occurrences_(0){}
struct FunctionArgumentTypeProtoDefaultTypeInternal {
  constexpr FunctionArgumentTypeProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionArgumentTypeProtoDefaultTypeInternal() {}
  union {
    FunctionArgumentTypeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionArgumentTypeProtoDefaultTypeInternal _FunctionArgumentTypeProto_default_instance_;
constexpr FunctionSignatureOptionsProto::FunctionSignatureOptionsProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_deprecation_warning_()
  , required_language_feature_()
  , is_deprecated_(false)
  , is_aliased_signature_(false)
  , uses_operation_collation_(false)
  , propagates_collation_(true){}
struct FunctionSignatureOptionsProtoDefaultTypeInternal {
  constexpr FunctionSignatureOptionsProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionSignatureOptionsProtoDefaultTypeInternal() {}
  union {
    FunctionSignatureOptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionSignatureOptionsProtoDefaultTypeInternal _FunctionSignatureOptionsProto_default_instance_;
constexpr FunctionSignatureProto::FunctionSignatureProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argument_()
  , return_type_(nullptr)
  , options_(nullptr)
  , context_id_(int64_t{0}){}
struct FunctionSignatureProtoDefaultTypeInternal {
  constexpr FunctionSignatureProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionSignatureProtoDefaultTypeInternal() {}
  union {
    FunctionSignatureProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionSignatureProtoDefaultTypeInternal _FunctionSignatureProto_default_instance_;
constexpr FunctionOptionsProto::FunctionOptionsProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : required_language_feature_()
  , alias_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sql_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , window_ordering_support_(0)

  , supports_over_clause_(false)
  , supports_window_framing_(false)
  , is_deprecated_(false)
  , supports_order_by_(false)
  , volatility_(0)

  , supports_limit_(false)
  , supports_null_handling_modifier_(false)
  , supports_clamped_between_modifier_(false)
  , arguments_are_coercible_(true)
  , allow_external_usage_(true)
  , supports_safe_error_mode_(true)
  , supports_having_modifier_(true)
  , uses_upper_case_sql_name_(true){}
struct FunctionOptionsProtoDefaultTypeInternal {
  constexpr FunctionOptionsProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionOptionsProtoDefaultTypeInternal() {}
  union {
    FunctionOptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionOptionsProtoDefaultTypeInternal _FunctionOptionsProto_default_instance_;
constexpr FunctionProto::FunctionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , signature_()
  , templated_sql_function_argument_name_()
  , group_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , options_(nullptr)
  , parse_resume_location_(nullptr)
  , mode_(1)
{}
struct FunctionProtoDefaultTypeInternal {
  constexpr FunctionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionProtoDefaultTypeInternal() {}
  union {
    FunctionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionProtoDefaultTypeInternal _FunctionProto_default_instance_;
constexpr ResolvedFunctionCallInfoProto::ResolvedFunctionCallInfoProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ResolvedFunctionCallInfoProtoDefaultTypeInternal {
  constexpr ResolvedFunctionCallInfoProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedFunctionCallInfoProtoDefaultTypeInternal() {}
  union {
    ResolvedFunctionCallInfoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedFunctionCallInfoProtoDefaultTypeInternal _ResolvedFunctionCallInfoProto_default_instance_;
constexpr TableValuedFunctionOptionsProto::TableValuedFunctionOptionsProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uses_upper_case_sql_name_(true){}
struct TableValuedFunctionOptionsProtoDefaultTypeInternal {
  constexpr TableValuedFunctionOptionsProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableValuedFunctionOptionsProtoDefaultTypeInternal() {}
  union {
    TableValuedFunctionOptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableValuedFunctionOptionsProtoDefaultTypeInternal _TableValuedFunctionOptionsProto_default_instance_;
constexpr TableValuedFunctionProto::TableValuedFunctionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , argument_name_()
  , custom_context_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(nullptr)
  , parse_resume_location_(nullptr)
  , options_(nullptr)
  , anonymization_info_(nullptr)
  , type_(0)

  , volatility_(0)
{}
struct TableValuedFunctionProtoDefaultTypeInternal {
  constexpr TableValuedFunctionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableValuedFunctionProtoDefaultTypeInternal() {}
  union {
    TableValuedFunctionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableValuedFunctionProtoDefaultTypeInternal _TableValuedFunctionProto_default_instance_;
constexpr TVFArgumentProto::TVFArgumentProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scalar_argument_(nullptr)
  , relation_argument_(nullptr)
  , model_argument_(nullptr)
  , connection_argument_(nullptr)
  , descriptor_argument_(nullptr){}
struct TVFArgumentProtoDefaultTypeInternal {
  constexpr TVFArgumentProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TVFArgumentProtoDefaultTypeInternal() {}
  union {
    TVFArgumentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TVFArgumentProtoDefaultTypeInternal _TVFArgumentProto_default_instance_;
constexpr TVFSignatureOptionsProto::TVFSignatureOptionsProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_deprecation_warning_(){}
struct TVFSignatureOptionsProtoDefaultTypeInternal {
  constexpr TVFSignatureOptionsProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TVFSignatureOptionsProtoDefaultTypeInternal() {}
  union {
    TVFSignatureOptionsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TVFSignatureOptionsProtoDefaultTypeInternal _TVFSignatureOptionsProto_default_instance_;
constexpr TVFSignatureProto::TVFSignatureProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argument_()
  , output_schema_(nullptr)
  , options_(nullptr){}
struct TVFSignatureProtoDefaultTypeInternal {
  constexpr TVFSignatureProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TVFSignatureProtoDefaultTypeInternal() {}
  union {
    TVFSignatureProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TVFSignatureProtoDefaultTypeInternal _TVFSignatureProto_default_instance_;
constexpr ProcedureProto::ProcedureProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , signature_(nullptr){}
struct ProcedureProtoDefaultTypeInternal {
  constexpr ProcedureProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcedureProtoDefaultTypeInternal() {}
  union {
    ProcedureProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcedureProtoDefaultTypeInternal _ProcedureProto_default_instance_;
}  // namespace zetasql
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zetasql_2fproto_2ffunction_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_zetasql_2fproto_2ffunction_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fproto_2ffunction_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fproto_2ffunction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFRelationColumnProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFRelationColumnProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFRelationColumnProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFRelationColumnProto, type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFRelationColumnProto, is_pseudo_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFRelationColumnProto, name_parse_location_range_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFRelationColumnProto, type_parse_location_range_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFRelationProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFRelationProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFRelationProto, column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFRelationProto, is_value_table_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFModelProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFModelProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFModelProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFModelProto, full_name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFConnectionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFConnectionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFConnectionProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFConnectionProto, full_name_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFDescriptorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFDescriptorProto, column_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, cardinality_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, must_be_constant_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, must_be_non_null_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, is_not_aggregate_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, must_support_equality_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, must_support_ordering_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, min_value_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, max_value_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, extra_relation_input_columns_allowed_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, relation_input_schema_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, argument_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, argument_name_parse_location_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, argument_type_parse_location_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, procedure_argument_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, argument_name_is_mandatory_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, descriptor_resolution_table_offset_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, default_value_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, default_value_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, argument_collation_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeOptionsProto, uses_array_element_for_collation_),
  6,
  7,
  8,
  9,
  10,
  13,
  11,
  12,
  14,
  1,
  0,
  2,
  3,
  17,
  15,
  18,
  4,
  5,
  19,
  16,
  PROTOBUF_FIELD_OFFSET(::zetasql::ArgumentTypeLambdaProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ArgumentTypeLambdaProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ArgumentTypeLambdaProto, argument_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ArgumentTypeLambdaProto, body_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeProto, kind_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeProto, type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeProto, num_occurrences_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeProto, options_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionArgumentTypeProto, lambda_),
  3,
  0,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureOptionsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureOptionsProto, is_deprecated_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureOptionsProto, additional_deprecation_warning_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureOptionsProto, required_language_feature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureOptionsProto, is_aliased_signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureOptionsProto, propagates_collation_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureOptionsProto, uses_operation_collation_),
  0,
  ~0u,
  ~0u,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureProto, argument_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureProto, return_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureProto, context_id_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionSignatureProto, options_),
  ~0u,
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, supports_over_clause_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, window_ordering_support_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, supports_window_framing_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, arguments_are_coercible_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, is_deprecated_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, alias_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, sql_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, allow_external_usage_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, volatility_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, supports_order_by_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, required_language_feature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, supports_limit_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, supports_null_handling_modifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, supports_safe_error_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, supports_having_modifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, supports_clamped_between_modifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionOptionsProto, uses_upper_case_sql_name_),
  3,
  2,
  4,
  11,
  5,
  0,
  1,
  12,
  7,
  6,
  ~0u,
  8,
  9,
  13,
  14,
  10,
  15,
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionProto, group_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionProto, mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionProto, signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionProto, options_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionProto, parse_resume_location_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FunctionProto, templated_sql_function_argument_name_),
  ~0u,
  0,
  3,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionOptionsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionOptionsProto, uses_upper_case_sql_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionProto, signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionProto, options_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionProto, type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionProto, volatility_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionProto, parse_resume_location_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionProto, argument_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionProto, custom_context_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TableValuedFunctionProto, anonymization_info_),
  ~0u,
  1,
  3,
  5,
  6,
  2,
  ~0u,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFArgumentProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFArgumentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFArgumentProto, scalar_argument_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFArgumentProto, relation_argument_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFArgumentProto, model_argument_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFArgumentProto, connection_argument_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFArgumentProto, descriptor_argument_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFSignatureOptionsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFSignatureOptionsProto, additional_deprecation_warning_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFSignatureProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFSignatureProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFSignatureProto, argument_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFSignatureProto, output_schema_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TVFSignatureProto, options_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ProcedureProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ProcedureProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ProcedureProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ProcedureProto, signature_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::zetasql::TVFRelationColumnProto)},
  { 16, 24, -1, sizeof(::zetasql::TVFRelationProto)},
  { 26, 34, -1, sizeof(::zetasql::TVFModelProto)},
  { 36, 44, -1, sizeof(::zetasql::TVFConnectionProto)},
  { 46, -1, -1, sizeof(::zetasql::TVFDescriptorProto)},
  { 53, 79, -1, sizeof(::zetasql::FunctionArgumentTypeOptionsProto)},
  { 99, 107, -1, sizeof(::zetasql::ArgumentTypeLambdaProto)},
  { 109, 120, -1, sizeof(::zetasql::FunctionArgumentTypeProto)},
  { 125, 137, -1, sizeof(::zetasql::FunctionSignatureOptionsProto)},
  { 143, 153, -1, sizeof(::zetasql::FunctionSignatureProto)},
  { 157, 180, -1, sizeof(::zetasql::FunctionOptionsProto)},
  { 197, 210, -1, sizeof(::zetasql::FunctionProto)},
  { 217, -1, -1, sizeof(::zetasql::ResolvedFunctionCallInfoProto)},
  { 223, 230, -1, sizeof(::zetasql::TableValuedFunctionOptionsProto)},
  { 231, 246, -1, sizeof(::zetasql::TableValuedFunctionProto)},
  { 255, 266, -1, sizeof(::zetasql::TVFArgumentProto)},
  { 271, -1, -1, sizeof(::zetasql::TVFSignatureOptionsProto)},
  { 278, 287, -1, sizeof(::zetasql::TVFSignatureProto)},
  { 290, 298, -1, sizeof(::zetasql::ProcedureProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_TVFRelationColumnProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_TVFRelationProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_TVFModelProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_TVFConnectionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_TVFDescriptorProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_FunctionArgumentTypeOptionsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ArgumentTypeLambdaProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_FunctionArgumentTypeProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_FunctionSignatureOptionsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_FunctionSignatureProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_FunctionOptionsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_FunctionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedFunctionCallInfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_TableValuedFunctionOptionsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_TableValuedFunctionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_TVFArgumentProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_TVFSignatureOptionsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_TVFSignatureProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ProcedureProto_default_instance_),
};

const char descriptor_table_protodef_zetasql_2fproto_2ffunction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034zetasql/proto/function.proto\022\007zetasql\032"
  "(zetasql/public/deprecation_warning.prot"
  "o\032\035zetasql/public/function.proto\032\034zetasq"
  "l/public/options.proto\032)zetasql/public/p"
  "arse_location_range.proto\032*zetasql/publi"
  "c/parse_resume_location.proto\032!zetasql/p"
  "ublic/simple_table.proto\032\031zetasql/public"
  "/type.proto\032\032zetasql/public/value.proto\032"
  "(zetasql/resolved_ast/serialization.prot"
  "o\"\354\001\n\026TVFRelationColumnProto\022\014\n\004name\030\001 \001"
  "(\t\022 \n\004type\030\002 \001(\0132\022.zetasql.TypeProto\022\030\n\020"
  "is_pseudo_column\030\003 \001(\010\022C\n\031name_parse_loc"
  "ation_range\030\004 \001(\0132 .zetasql.ParseLocatio"
  "nRangeProto\022C\n\031type_parse_location_range"
  "\030\005 \001(\0132 .zetasql.ParseLocationRangeProto"
  "\"b\n\020TVFRelationProto\022/\n\006column\030\001 \003(\0132\037.z"
  "etasql.TVFRelationColumnProto\022\035\n\016is_valu"
  "e_table\030\002 \001(\010:\005false\"0\n\rTVFModelProto\022\014\n"
  "\004name\030\001 \001(\t\022\021\n\tfull_name\030\002 \001(\t\"5\n\022TVFCon"
  "nectionProto\022\014\n\004name\030\001 \001(\t\022\021\n\tfull_name\030"
  "\002 \001(\t\")\n\022TVFDescriptorProto\022\023\n\013column_na"
  "me\030\001 \003(\t\"\306\007\n FunctionArgumentTypeOptions"
  "Proto\022\?\n\013cardinality\030\001 \001(\0162*.zetasql.Fun"
  "ctionEnums.ArgumentCardinality\022\030\n\020must_b"
  "e_constant\030\002 \001(\010\022\030\n\020must_be_non_null\030\003 \001"
  "(\010\022\030\n\020is_not_aggregate\030\004 \001(\010\022\035\n\025must_sup"
  "port_equality\030\005 \001(\010\022\035\n\025must_support_orde"
  "ring\030\006 \001(\010\022\021\n\tmin_value\030\007 \001(\003\022\021\n\tmax_val"
  "ue\030\010 \001(\003\022,\n$extra_relation_input_columns"
  "_allowed\030\t \001(\010\0228\n\025relation_input_schema\030"
  "\n \001(\0132\031.zetasql.TVFRelationProto\022\025\n\rargu"
  "ment_name\030\013 \001(\t\022F\n\034argument_name_parse_l"
  "ocation\030\014 \001(\0132 .zetasql.ParseLocationRan"
  "geProto\022F\n\034argument_type_parse_location\030"
  "\r \001(\0132 .zetasql.ParseLocationRangeProto\022"
  "M\n\027procedure_argument_mode\030\016 \001(\0162,.zetas"
  "ql.FunctionEnums.ProcedureArgumentMode\022)"
  "\n\032argument_name_is_mandatory\030\017 \001(\010:\005fals"
  "e\022.\n\"descriptor_resolution_table_offset\030"
  "\020 \001(\005:\002-1\022*\n\rdefault_value\030\021 \001(\0132\023.zetas"
  "ql.ValueProto\022.\n\022default_value_type\030\022 \001("
  "\0132\022.zetasql.TypeProto\022p\n\027argument_collat"
  "ion_mode\030\023 \001(\0162,.zetasql.FunctionEnums.A"
  "rgumentCollationMode:!AFFECTS_OPERATION_"
  "AND_PROPAGATION\022(\n uses_array_element_fo"
  "r_collation\030\024 \001(\010\"\201\001\n\027ArgumentTypeLambda"
  "Proto\0224\n\010argument\030\005 \003(\0132\".zetasql.Functi"
  "onArgumentTypeProto\0220\n\004body\030\006 \001(\0132\".zeta"
  "sql.FunctionArgumentTypeProto\"\362\001\n\031Functi"
  "onArgumentTypeProto\022,\n\004kind\030\001 \001(\0162\036.zeta"
  "sql.SignatureArgumentKind\022 \n\004type\030\002 \001(\0132"
  "\022.zetasql.TypeProto\022\027\n\017num_occurrences\030\004"
  " \001(\005\022:\n\007options\030\003 \001(\0132).zetasql.Function"
  "ArgumentTypeOptionsProto\0220\n\006lambda\030\005 \001(\013"
  "2 .zetasql.ArgumentTypeLambdaProto\"\275\002\n\035F"
  "unctionSignatureOptionsProto\022\034\n\ris_depre"
  "cated\030\002 \001(\010:\005false\022O\n\036additional_depreca"
  "tion_warning\030\003 \003(\0132\'.zetasql.Freestandin"
  "gDeprecationWarning\022;\n\031required_language"
  "_feature\030\004 \003(\0162\030.zetasql.LanguageFeature"
  "\022#\n\024is_aliased_signature\030\005 \001(\010:\005false\022\"\n"
  "\024propagates_collation\030\006 \001(\010:\004true\022\'\n\030use"
  "s_operation_collation\030\007 \001(\010:\005false\"\324\001\n\026F"
  "unctionSignatureProto\0224\n\010argument\030\001 \003(\0132"
  "\".zetasql.FunctionArgumentTypeProto\0227\n\013r"
  "eturn_type\030\002 \001(\0132\".zetasql.FunctionArgum"
  "entTypeProto\022\022\n\ncontext_id\030\003 \001(\003\0227\n\007opti"
  "ons\030\004 \001(\0132&.zetasql.FunctionSignatureOpt"
  "ionsProto\"\353\005\n\024FunctionOptionsProto\022#\n\024su"
  "pports_over_clause\030\001 \001(\010:\005false\022]\n\027windo"
  "w_ordering_support\030\002 \001(\0162).zetasql.Funct"
  "ionEnums.WindowOrderSupport:\021ORDER_UNSUP"
  "PORTED\022&\n\027supports_window_framing\030\003 \001(\010:"
  "\005false\022%\n\027arguments_are_coercible\030\004 \001(\010:"
  "\004true\022\034\n\ris_deprecated\030\005 \001(\010:\005false\022\022\n\na"
  "lias_name\030\006 \001(\t\022\020\n\010sql_name\030\007 \001(\t\022\"\n\024all"
  "ow_external_usage\030\010 \001(\010:\004true\022@\n\nvolatil"
  "ity\030\t \001(\0162!.zetasql.FunctionEnums.Volati"
  "lity:\tIMMUTABLE\022 \n\021supports_order_by\030\n \001"
  "(\010:\005false\022;\n\031required_language_feature\030\013"
  " \003(\0162\030.zetasql.LanguageFeature\022\035\n\016suppor"
  "ts_limit\030\014 \001(\010:\005false\022.\n\037supports_null_h"
  "andling_modifier\030\r \001(\010:\005false\022&\n\030support"
  "s_safe_error_mode\030\016 \001(\010:\004true\022&\n\030support"
  "s_having_modifier\030\017 \001(\010:\004true\0220\n!support"
  "s_clamped_between_modifier\030\020 \001(\010:\005false\022"
  "&\n\030uses_upper_case_sql_name\030\021 \001(\010:\004true\""
  "\260\002\n\rFunctionProto\022\021\n\tname_path\030\001 \003(\t\022\r\n\005"
  "group\030\002 \001(\t\022)\n\004mode\030\003 \001(\0162\033.zetasql.Func"
  "tionEnums.Mode\0222\n\tsignature\030\004 \003(\0132\037.zeta"
  "sql.FunctionSignatureProto\022.\n\007options\030\005 "
  "\001(\0132\035.zetasql.FunctionOptionsProto\022@\n\025pa"
  "rse_resume_location\030\010 \001(\0132!.zetasql.Pars"
  "eResumeLocationProto\022,\n$templated_sql_fu"
  "nction_argument_name\030\007 \003(\t\"\037\n\035ResolvedFu"
  "nctionCallInfoProto\"I\n\037TableValuedFuncti"
  "onOptionsProto\022&\n\030uses_upper_case_sql_na"
  "me\030\001 \001(\010:\004true\"\305\003\n\030TableValuedFunctionPr"
  "oto\022\021\n\tname_path\030\001 \003(\t\0222\n\tsignature\030\002 \001("
  "\0132\037.zetasql.FunctionSignatureProto\0229\n\007op"
  "tions\030\t \001(\0132(.zetasql.TableValuedFunctio"
  "nOptionsProto\022<\n\004type\030\003 \001(\0162..zetasql.Fu"
  "nctionEnums.TableValuedFunctionType\0225\n\nv"
  "olatility\030\010 \001(\0162!.zetasql.FunctionEnums."
  "Volatility\022@\n\025parse_resume_location\030\006 \001("
  "\0132!.zetasql.ParseResumeLocationProto\022\025\n\r"
  "argument_name\030\005 \003(\t\022\026\n\016custom_context\030\007 "
  "\001(\t\022A\n\022anonymization_info\030\n \001(\0132%.zetasq"
  "l.SimpleAnonymizationInfoProto\"\242\002\n\020TVFAr"
  "gumentProto\0224\n\017scalar_argument\030\001 \001(\0132\033.z"
  "etasql.ValueWithTypeProto\0224\n\021relation_ar"
  "gument\030\002 \001(\0132\031.zetasql.TVFRelationProto\022"
  ".\n\016model_argument\030\003 \001(\0132\026.zetasql.TVFMod"
  "elProto\0228\n\023connection_argument\030\004 \001(\0132\033.z"
  "etasql.TVFConnectionProto\0228\n\023descriptor_"
  "argument\030\005 \001(\0132\033.zetasql.TVFDescriptorPr"
  "oto\"k\n\030TVFSignatureOptionsProto\022O\n\036addit"
  "ional_deprecation_warning\030\001 \003(\0132\'.zetasq"
  "l.FreestandingDeprecationWarning\"\246\001\n\021TVF"
  "SignatureProto\022+\n\010argument\030\001 \003(\0132\031.zetas"
  "ql.TVFArgumentProto\0220\n\routput_schema\030\002 \001"
  "(\0132\031.zetasql.TVFRelationProto\0222\n\007options"
  "\030\003 \001(\0132!.zetasql.TVFSignatureOptionsProt"
  "o\"W\n\016ProcedureProto\022\021\n\tname_path\030\001 \003(\t\0222"
  "\n\tsignature\030\002 \001(\0132\037.zetasql.FunctionSign"
  "atureProtoB$\n\022com.google.zetasqlB\016Functi"
  "onProtos"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zetasql_2fproto_2ffunction_2eproto_deps[9] = {
  &::descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto,
  &::descriptor_table_zetasql_2fpublic_2ffunction_2eproto,
  &::descriptor_table_zetasql_2fpublic_2foptions_2eproto,
  &::descriptor_table_zetasql_2fpublic_2fparse_5flocation_5frange_2eproto,
  &::descriptor_table_zetasql_2fpublic_2fparse_5fresume_5flocation_2eproto,
  &::descriptor_table_zetasql_2fpublic_2fsimple_5ftable_2eproto,
  &::descriptor_table_zetasql_2fpublic_2ftype_2eproto,
  &::descriptor_table_zetasql_2fpublic_2fvalue_2eproto,
  &::descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zetasql_2fproto_2ffunction_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fproto_2ffunction_2eproto = {
  false, false, 5048, descriptor_table_protodef_zetasql_2fproto_2ffunction_2eproto, "zetasql/proto/function.proto", 
  &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once, descriptor_table_zetasql_2fproto_2ffunction_2eproto_deps, 9, 19,
  schemas, file_default_instances, TableStruct_zetasql_2fproto_2ffunction_2eproto::offsets,
  file_level_metadata_zetasql_2fproto_2ffunction_2eproto, file_level_enum_descriptors_zetasql_2fproto_2ffunction_2eproto, file_level_service_descriptors_zetasql_2fproto_2ffunction_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter() {
  return &descriptor_table_zetasql_2fproto_2ffunction_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fproto_2ffunction_2eproto(&descriptor_table_zetasql_2fproto_2ffunction_2eproto);
namespace zetasql {

// ===================================================================

class TVFRelationColumnProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TVFRelationColumnProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& type(const TVFRelationColumnProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_pseudo_column(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::ParseLocationRangeProto& name_parse_location_range(const TVFRelationColumnProto* msg);
  static void set_has_name_parse_location_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ParseLocationRangeProto& type_parse_location_range(const TVFRelationColumnProto* msg);
  static void set_has_type_parse_location_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::TypeProto&
TVFRelationColumnProto::_Internal::type(const TVFRelationColumnProto* msg) {
  return *msg->type_;
}
const ::zetasql::ParseLocationRangeProto&
TVFRelationColumnProto::_Internal::name_parse_location_range(const TVFRelationColumnProto* msg) {
  return *msg->name_parse_location_range_;
}
const ::zetasql::ParseLocationRangeProto&
TVFRelationColumnProto::_Internal::type_parse_location_range(const TVFRelationColumnProto* msg) {
  return *msg->type_parse_location_range_;
}
void TVFRelationColumnProto::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void TVFRelationColumnProto::clear_name_parse_location_range() {
  if (name_parse_location_range_ != nullptr) name_parse_location_range_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TVFRelationColumnProto::clear_type_parse_location_range() {
  if (type_parse_location_range_ != nullptr) type_parse_location_range_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
TVFRelationColumnProto::TVFRelationColumnProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.TVFRelationColumnProto)
}
TVFRelationColumnProto::TVFRelationColumnProto(const TVFRelationColumnProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_type()) {
    type_ = new ::zetasql::TypeProto(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_name_parse_location_range()) {
    name_parse_location_range_ = new ::zetasql::ParseLocationRangeProto(*from.name_parse_location_range_);
  } else {
    name_parse_location_range_ = nullptr;
  }
  if (from._internal_has_type_parse_location_range()) {
    type_parse_location_range_ = new ::zetasql::ParseLocationRangeProto(*from.type_parse_location_range_);
  } else {
    type_parse_location_range_ = nullptr;
  }
  is_pseudo_column_ = from.is_pseudo_column_;
  // @@protoc_insertion_point(copy_constructor:zetasql.TVFRelationColumnProto)
}

inline void TVFRelationColumnProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_pseudo_column_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_pseudo_column_));
}

TVFRelationColumnProto::~TVFRelationColumnProto() {
  // @@protoc_insertion_point(destructor:zetasql.TVFRelationColumnProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TVFRelationColumnProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete name_parse_location_range_;
  if (this != internal_default_instance()) delete type_parse_location_range_;
}

void TVFRelationColumnProto::ArenaDtor(void* object) {
  TVFRelationColumnProto* _this = reinterpret_cast< TVFRelationColumnProto* >(object);
  (void)_this;
}
void TVFRelationColumnProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TVFRelationColumnProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TVFRelationColumnProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TVFRelationColumnProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(name_parse_location_range_ != nullptr);
      name_parse_location_range_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(type_parse_location_range_ != nullptr);
      type_parse_location_range_->Clear();
    }
  }
  is_pseudo_column_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TVFRelationColumnProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.TVFRelationColumnProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_pseudo_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_pseudo_column(&has_bits);
          is_pseudo_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ParseLocationRangeProto name_parse_location_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_name_parse_location_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ParseLocationRangeProto type_parse_location_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_parse_location_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TVFRelationColumnProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TVFRelationColumnProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.TVFRelationColumnProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .zetasql.TypeProto type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  // optional bool is_pseudo_column = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_pseudo_column(), target);
  }

  // optional .zetasql.ParseLocationRangeProto name_parse_location_range = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::name_parse_location_range(this), target, stream);
  }

  // optional .zetasql.ParseLocationRangeProto type_parse_location_range = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::type_parse_location_range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TVFRelationColumnProto)
  return target;
}

size_t TVFRelationColumnProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TVFRelationColumnProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .zetasql.TypeProto type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional .zetasql.ParseLocationRangeProto name_parse_location_range = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_parse_location_range_);
    }

    // optional .zetasql.ParseLocationRangeProto type_parse_location_range = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_parse_location_range_);
    }

    // optional bool is_pseudo_column = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TVFRelationColumnProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TVFRelationColumnProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TVFRelationColumnProto::GetClassData() const { return &_class_data_; }

void TVFRelationColumnProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TVFRelationColumnProto *>(to)->MergeFrom(
      static_cast<const TVFRelationColumnProto &>(from));
}


void TVFRelationColumnProto::MergeFrom(const TVFRelationColumnProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TVFRelationColumnProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_type()->::zetasql::TypeProto::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_name_parse_location_range()->::zetasql::ParseLocationRangeProto::MergeFrom(from._internal_name_parse_location_range());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_type_parse_location_range()->::zetasql::ParseLocationRangeProto::MergeFrom(from._internal_type_parse_location_range());
    }
    if (cached_has_bits & 0x00000010u) {
      is_pseudo_column_ = from.is_pseudo_column_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TVFRelationColumnProto::CopyFrom(const TVFRelationColumnProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TVFRelationColumnProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVFRelationColumnProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!type_->IsInitialized()) return false;
  }
  return true;
}

void TVFRelationColumnProto::InternalSwap(TVFRelationColumnProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TVFRelationColumnProto, is_pseudo_column_)
      + sizeof(TVFRelationColumnProto::is_pseudo_column_)
      - PROTOBUF_FIELD_OFFSET(TVFRelationColumnProto, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TVFRelationColumnProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[0]);
}

// ===================================================================

class TVFRelationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TVFRelationProto>()._has_bits_);
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TVFRelationProto::TVFRelationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.TVFRelationProto)
}
TVFRelationProto::TVFRelationProto(const TVFRelationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      column_(from.column_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_value_table_ = from.is_value_table_;
  // @@protoc_insertion_point(copy_constructor:zetasql.TVFRelationProto)
}

inline void TVFRelationProto::SharedCtor() {
is_value_table_ = false;
}

TVFRelationProto::~TVFRelationProto() {
  // @@protoc_insertion_point(destructor:zetasql.TVFRelationProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TVFRelationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TVFRelationProto::ArenaDtor(void* object) {
  TVFRelationProto* _this = reinterpret_cast< TVFRelationProto* >(object);
  (void)_this;
}
void TVFRelationProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TVFRelationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TVFRelationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TVFRelationProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_.Clear();
  is_value_table_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TVFRelationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zetasql.TVFRelationColumnProto column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_value_table = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_value_table(&has_bits);
          is_value_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TVFRelationProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TVFRelationProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zetasql.TVFRelationColumnProto column = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_column(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_value_table = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_value_table(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TVFRelationProto)
  return target;
}

size_t TVFRelationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TVFRelationProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.TVFRelationColumnProto column = 1;
  total_size += 1UL * this->_internal_column_size();
  for (const auto& msg : this->column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_value_table = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TVFRelationProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TVFRelationProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TVFRelationProto::GetClassData() const { return &_class_data_; }

void TVFRelationProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TVFRelationProto *>(to)->MergeFrom(
      static_cast<const TVFRelationProto &>(from));
}


void TVFRelationProto::MergeFrom(const TVFRelationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TVFRelationProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  column_.MergeFrom(from.column_);
  if (from._internal_has_is_value_table()) {
    _internal_set_is_value_table(from._internal_is_value_table());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TVFRelationProto::CopyFrom(const TVFRelationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TVFRelationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVFRelationProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(column_))
    return false;
  return true;
}

void TVFRelationProto::InternalSwap(TVFRelationProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  column_.InternalSwap(&other->column_);
  swap(is_value_table_, other->is_value_table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TVFRelationProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[1]);
}

// ===================================================================

class TVFModelProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TVFModelProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TVFModelProto::TVFModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.TVFModelProto)
}
TVFModelProto::TVFModelProto(const TVFModelProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_name()) {
    full_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_full_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.TVFModelProto)
}

inline void TVFModelProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TVFModelProto::~TVFModelProto() {
  // @@protoc_insertion_point(destructor:zetasql.TVFModelProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TVFModelProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TVFModelProto::ArenaDtor(void* object) {
  TVFModelProto* _this = reinterpret_cast< TVFModelProto* >(object);
  (void)_this;
}
void TVFModelProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TVFModelProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TVFModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TVFModelProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      full_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TVFModelProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.TVFModelProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string full_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_full_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.TVFModelProto.full_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TVFModelProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TVFModelProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.TVFModelProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string full_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.TVFModelProto.full_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_full_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TVFModelProto)
  return target;
}

size_t TVFModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TVFModelProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string full_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TVFModelProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TVFModelProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TVFModelProto::GetClassData() const { return &_class_data_; }

void TVFModelProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TVFModelProto *>(to)->MergeFrom(
      static_cast<const TVFModelProto &>(from));
}


void TVFModelProto::MergeFrom(const TVFModelProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TVFModelProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_full_name(from._internal_full_name());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TVFModelProto::CopyFrom(const TVFModelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TVFModelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVFModelProto::IsInitialized() const {
  return true;
}

void TVFModelProto::InternalSwap(TVFModelProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &full_name_, lhs_arena,
      &other->full_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TVFModelProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[2]);
}

// ===================================================================

class TVFConnectionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TVFConnectionProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TVFConnectionProto::TVFConnectionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.TVFConnectionProto)
}
TVFConnectionProto::TVFConnectionProto(const TVFConnectionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_name()) {
    full_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_full_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.TVFConnectionProto)
}

inline void TVFConnectionProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TVFConnectionProto::~TVFConnectionProto() {
  // @@protoc_insertion_point(destructor:zetasql.TVFConnectionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TVFConnectionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TVFConnectionProto::ArenaDtor(void* object) {
  TVFConnectionProto* _this = reinterpret_cast< TVFConnectionProto* >(object);
  (void)_this;
}
void TVFConnectionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TVFConnectionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TVFConnectionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TVFConnectionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      full_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TVFConnectionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.TVFConnectionProto.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string full_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_full_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.TVFConnectionProto.full_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TVFConnectionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TVFConnectionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.TVFConnectionProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string full_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.TVFConnectionProto.full_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_full_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TVFConnectionProto)
  return target;
}

size_t TVFConnectionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TVFConnectionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string full_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TVFConnectionProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TVFConnectionProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TVFConnectionProto::GetClassData() const { return &_class_data_; }

void TVFConnectionProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TVFConnectionProto *>(to)->MergeFrom(
      static_cast<const TVFConnectionProto &>(from));
}


void TVFConnectionProto::MergeFrom(const TVFConnectionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TVFConnectionProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_full_name(from._internal_full_name());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TVFConnectionProto::CopyFrom(const TVFConnectionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TVFConnectionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVFConnectionProto::IsInitialized() const {
  return true;
}

void TVFConnectionProto::InternalSwap(TVFConnectionProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &full_name_, lhs_arena,
      &other->full_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TVFConnectionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[3]);
}

// ===================================================================

class TVFDescriptorProto::_Internal {
 public:
};

TVFDescriptorProto::TVFDescriptorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_name_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.TVFDescriptorProto)
}
TVFDescriptorProto::TVFDescriptorProto(const TVFDescriptorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_name_(from.column_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.TVFDescriptorProto)
}

inline void TVFDescriptorProto::SharedCtor() {
}

TVFDescriptorProto::~TVFDescriptorProto() {
  // @@protoc_insertion_point(destructor:zetasql.TVFDescriptorProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TVFDescriptorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TVFDescriptorProto::ArenaDtor(void* object) {
  TVFDescriptorProto* _this = reinterpret_cast< TVFDescriptorProto* >(object);
  (void)_this;
}
void TVFDescriptorProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TVFDescriptorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TVFDescriptorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TVFDescriptorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TVFDescriptorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string column_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.TVFDescriptorProto.column_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TVFDescriptorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TVFDescriptorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string column_name = 1;
  for (int i = 0, n = this->_internal_column_name_size(); i < n; i++) {
    const auto& s = this->_internal_column_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.TVFDescriptorProto.column_name");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TVFDescriptorProto)
  return target;
}

size_t TVFDescriptorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TVFDescriptorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_name_.size());
  for (int i = 0, n = column_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TVFDescriptorProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TVFDescriptorProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TVFDescriptorProto::GetClassData() const { return &_class_data_; }

void TVFDescriptorProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TVFDescriptorProto *>(to)->MergeFrom(
      static_cast<const TVFDescriptorProto &>(from));
}


void TVFDescriptorProto::MergeFrom(const TVFDescriptorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TVFDescriptorProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  column_name_.MergeFrom(from.column_name_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TVFDescriptorProto::CopyFrom(const TVFDescriptorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TVFDescriptorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVFDescriptorProto::IsInitialized() const {
  return true;
}

void TVFDescriptorProto::InternalSwap(TVFDescriptorProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  column_name_.InternalSwap(&other->column_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TVFDescriptorProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[4]);
}

// ===================================================================

class FunctionArgumentTypeOptionsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionArgumentTypeOptionsProto>()._has_bits_);
  static void set_has_cardinality(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_must_be_constant(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_must_be_non_null(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_not_aggregate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_must_support_equality(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_must_support_ordering(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_min_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_extra_relation_input_columns_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::zetasql::TVFRelationProto& relation_input_schema(const FunctionArgumentTypeOptionsProto* msg);
  static void set_has_relation_input_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_argument_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ParseLocationRangeProto& argument_name_parse_location(const FunctionArgumentTypeOptionsProto* msg);
  static void set_has_argument_name_parse_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ParseLocationRangeProto& argument_type_parse_location(const FunctionArgumentTypeOptionsProto* msg);
  static void set_has_argument_type_parse_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_procedure_argument_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_argument_name_is_mandatory(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_descriptor_resolution_table_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::zetasql::ValueProto& default_value(const FunctionArgumentTypeOptionsProto* msg);
  static void set_has_default_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::TypeProto& default_value_type(const FunctionArgumentTypeOptionsProto* msg);
  static void set_has_default_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_argument_collation_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_uses_array_element_for_collation(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::zetasql::TVFRelationProto&
FunctionArgumentTypeOptionsProto::_Internal::relation_input_schema(const FunctionArgumentTypeOptionsProto* msg) {
  return *msg->relation_input_schema_;
}
const ::zetasql::ParseLocationRangeProto&
FunctionArgumentTypeOptionsProto::_Internal::argument_name_parse_location(const FunctionArgumentTypeOptionsProto* msg) {
  return *msg->argument_name_parse_location_;
}
const ::zetasql::ParseLocationRangeProto&
FunctionArgumentTypeOptionsProto::_Internal::argument_type_parse_location(const FunctionArgumentTypeOptionsProto* msg) {
  return *msg->argument_type_parse_location_;
}
const ::zetasql::ValueProto&
FunctionArgumentTypeOptionsProto::_Internal::default_value(const FunctionArgumentTypeOptionsProto* msg) {
  return *msg->default_value_;
}
const ::zetasql::TypeProto&
FunctionArgumentTypeOptionsProto::_Internal::default_value_type(const FunctionArgumentTypeOptionsProto* msg) {
  return *msg->default_value_type_;
}
void FunctionArgumentTypeOptionsProto::clear_argument_name_parse_location() {
  if (argument_name_parse_location_ != nullptr) argument_name_parse_location_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void FunctionArgumentTypeOptionsProto::clear_argument_type_parse_location() {
  if (argument_type_parse_location_ != nullptr) argument_type_parse_location_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void FunctionArgumentTypeOptionsProto::clear_default_value() {
  if (default_value_ != nullptr) default_value_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void FunctionArgumentTypeOptionsProto::clear_default_value_type() {
  if (default_value_type_ != nullptr) default_value_type_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
FunctionArgumentTypeOptionsProto::FunctionArgumentTypeOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.FunctionArgumentTypeOptionsProto)
}
FunctionArgumentTypeOptionsProto::FunctionArgumentTypeOptionsProto(const FunctionArgumentTypeOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  argument_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    argument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_argument_name()) {
    argument_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_argument_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_relation_input_schema()) {
    relation_input_schema_ = new ::zetasql::TVFRelationProto(*from.relation_input_schema_);
  } else {
    relation_input_schema_ = nullptr;
  }
  if (from._internal_has_argument_name_parse_location()) {
    argument_name_parse_location_ = new ::zetasql::ParseLocationRangeProto(*from.argument_name_parse_location_);
  } else {
    argument_name_parse_location_ = nullptr;
  }
  if (from._internal_has_argument_type_parse_location()) {
    argument_type_parse_location_ = new ::zetasql::ParseLocationRangeProto(*from.argument_type_parse_location_);
  } else {
    argument_type_parse_location_ = nullptr;
  }
  if (from._internal_has_default_value()) {
    default_value_ = new ::zetasql::ValueProto(*from.default_value_);
  } else {
    default_value_ = nullptr;
  }
  if (from._internal_has_default_value_type()) {
    default_value_type_ = new ::zetasql::TypeProto(*from.default_value_type_);
  } else {
    default_value_type_ = nullptr;
  }
  ::memcpy(&cardinality_, &from.cardinality_,
    static_cast<size_t>(reinterpret_cast<char*>(&argument_collation_mode_) -
    reinterpret_cast<char*>(&cardinality_)) + sizeof(argument_collation_mode_));
  // @@protoc_insertion_point(copy_constructor:zetasql.FunctionArgumentTypeOptionsProto)
}

inline void FunctionArgumentTypeOptionsProto::SharedCtor() {
argument_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  argument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&relation_input_schema_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&procedure_argument_mode_) -
    reinterpret_cast<char*>(&relation_input_schema_)) + sizeof(procedure_argument_mode_));
descriptor_resolution_table_offset_ = -1;
argument_collation_mode_ = 3;
}

FunctionArgumentTypeOptionsProto::~FunctionArgumentTypeOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.FunctionArgumentTypeOptionsProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionArgumentTypeOptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  argument_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete relation_input_schema_;
  if (this != internal_default_instance()) delete argument_name_parse_location_;
  if (this != internal_default_instance()) delete argument_type_parse_location_;
  if (this != internal_default_instance()) delete default_value_;
  if (this != internal_default_instance()) delete default_value_type_;
}

void FunctionArgumentTypeOptionsProto::ArenaDtor(void* object) {
  FunctionArgumentTypeOptionsProto* _this = reinterpret_cast< FunctionArgumentTypeOptionsProto* >(object);
  (void)_this;
}
void FunctionArgumentTypeOptionsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionArgumentTypeOptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionArgumentTypeOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.FunctionArgumentTypeOptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      argument_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(relation_input_schema_ != nullptr);
      relation_input_schema_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(argument_name_parse_location_ != nullptr);
      argument_name_parse_location_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(argument_type_parse_location_ != nullptr);
      argument_type_parse_location_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(default_value_ != nullptr);
      default_value_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(default_value_type_ != nullptr);
      default_value_type_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&cardinality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&must_be_constant_) -
        reinterpret_cast<char*>(&cardinality_)) + sizeof(must_be_constant_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&must_be_non_null_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&argument_name_is_mandatory_) -
        reinterpret_cast<char*>(&must_be_non_null_)) + sizeof(argument_name_is_mandatory_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&uses_array_element_for_collation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&procedure_argument_mode_) -
        reinterpret_cast<char*>(&uses_array_element_for_collation_)) + sizeof(procedure_argument_mode_));
    descriptor_resolution_table_offset_ = -1;
    argument_collation_mode_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionArgumentTypeOptionsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.FunctionEnums.ArgumentCardinality cardinality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::FunctionEnums_ArgumentCardinality_IsValid(val))) {
            _internal_set_cardinality(static_cast<::zetasql::FunctionEnums_ArgumentCardinality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool must_be_constant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_must_be_constant(&has_bits);
          must_be_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool must_be_non_null = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_must_be_non_null(&has_bits);
          must_be_non_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_not_aggregate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_not_aggregate(&has_bits);
          is_not_aggregate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool must_support_equality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_must_support_equality(&has_bits);
          must_support_equality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool must_support_ordering = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_must_support_ordering(&has_bits);
          must_support_ordering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 min_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_min_value(&has_bits);
          min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 max_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_max_value(&has_bits);
          max_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool extra_relation_input_columns_allowed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_extra_relation_input_columns_allowed(&has_bits);
          extra_relation_input_columns_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TVFRelationProto relation_input_schema = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation_input_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string argument_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_argument_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.FunctionArgumentTypeOptionsProto.argument_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ParseLocationRangeProto argument_name_parse_location = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_argument_name_parse_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ParseLocationRangeProto argument_type_parse_location = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_argument_type_parse_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionEnums.ProcedureArgumentMode procedure_argument_mode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::FunctionEnums_ProcedureArgumentMode_IsValid(val))) {
            _internal_set_procedure_argument_mode(static_cast<::zetasql::FunctionEnums_ProcedureArgumentMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool argument_name_is_mandatory = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_argument_name_is_mandatory(&has_bits);
          argument_name_is_mandatory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 descriptor_resolution_table_offset = 16 [default = -1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_descriptor_resolution_table_offset(&has_bits);
          descriptor_resolution_table_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ValueProto default_value = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto default_value_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_value_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionEnums.ArgumentCollationMode argument_collation_mode = 19 [default = AFFECTS_OPERATION_AND_PROPAGATION];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::FunctionEnums_ArgumentCollationMode_IsValid(val))) {
            _internal_set_argument_collation_mode(static_cast<::zetasql::FunctionEnums_ArgumentCollationMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool uses_array_element_for_collation = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_uses_array_element_for_collation(&has_bits);
          uses_array_element_for_collation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionArgumentTypeOptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.FunctionArgumentTypeOptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.FunctionEnums.ArgumentCardinality cardinality = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cardinality(), target);
  }

  // optional bool must_be_constant = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_must_be_constant(), target);
  }

  // optional bool must_be_non_null = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_must_be_non_null(), target);
  }

  // optional bool is_not_aggregate = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_not_aggregate(), target);
  }

  // optional bool must_support_equality = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_must_support_equality(), target);
  }

  // optional bool must_support_ordering = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_must_support_ordering(), target);
  }

  // optional int64 min_value = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_min_value(), target);
  }

  // optional int64 max_value = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_max_value(), target);
  }

  // optional bool extra_relation_input_columns_allowed = 9;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_extra_relation_input_columns_allowed(), target);
  }

  // optional .zetasql.TVFRelationProto relation_input_schema = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::relation_input_schema(this), target, stream);
  }

  // optional string argument_name = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_argument_name().data(), static_cast<int>(this->_internal_argument_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.FunctionArgumentTypeOptionsProto.argument_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_argument_name(), target);
  }

  // optional .zetasql.ParseLocationRangeProto argument_name_parse_location = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::argument_name_parse_location(this), target, stream);
  }

  // optional .zetasql.ParseLocationRangeProto argument_type_parse_location = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::argument_type_parse_location(this), target, stream);
  }

  // optional .zetasql.FunctionEnums.ProcedureArgumentMode procedure_argument_mode = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_procedure_argument_mode(), target);
  }

  // optional bool argument_name_is_mandatory = 15 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_argument_name_is_mandatory(), target);
  }

  // optional int32 descriptor_resolution_table_offset = 16 [default = -1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_descriptor_resolution_table_offset(), target);
  }

  // optional .zetasql.ValueProto default_value = 17;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::default_value(this), target, stream);
  }

  // optional .zetasql.TypeProto default_value_type = 18;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::default_value_type(this), target, stream);
  }

  // optional .zetasql.FunctionEnums.ArgumentCollationMode argument_collation_mode = 19 [default = AFFECTS_OPERATION_AND_PROPAGATION];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_argument_collation_mode(), target);
  }

  // optional bool uses_array_element_for_collation = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_uses_array_element_for_collation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.FunctionArgumentTypeOptionsProto)
  return target;
}

size_t FunctionArgumentTypeOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.FunctionArgumentTypeOptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string argument_name = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_argument_name());
    }

    // optional .zetasql.TVFRelationProto relation_input_schema = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relation_input_schema_);
    }

    // optional .zetasql.ParseLocationRangeProto argument_name_parse_location = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *argument_name_parse_location_);
    }

    // optional .zetasql.ParseLocationRangeProto argument_type_parse_location = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *argument_type_parse_location_);
    }

    // optional .zetasql.ValueProto default_value = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_value_);
    }

    // optional .zetasql.TypeProto default_value_type = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_value_type_);
    }

    // optional .zetasql.FunctionEnums.ArgumentCardinality cardinality = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cardinality());
    }

    // optional bool must_be_constant = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool must_be_non_null = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_not_aggregate = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool must_support_equality = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional int64 min_value = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_min_value());
    }

    // optional int64 max_value = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_value());
    }

    // optional bool must_support_ordering = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool extra_relation_input_columns_allowed = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool argument_name_is_mandatory = 15 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional bool uses_array_element_for_collation = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional .zetasql.FunctionEnums.ProcedureArgumentMode procedure_argument_mode = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_procedure_argument_mode());
    }

    // optional int32 descriptor_resolution_table_offset = 16 [default = -1];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_descriptor_resolution_table_offset());
    }

    // optional .zetasql.FunctionEnums.ArgumentCollationMode argument_collation_mode = 19 [default = AFFECTS_OPERATION_AND_PROPAGATION];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_argument_collation_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionArgumentTypeOptionsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionArgumentTypeOptionsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionArgumentTypeOptionsProto::GetClassData() const { return &_class_data_; }

void FunctionArgumentTypeOptionsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionArgumentTypeOptionsProto *>(to)->MergeFrom(
      static_cast<const FunctionArgumentTypeOptionsProto &>(from));
}


void FunctionArgumentTypeOptionsProto::MergeFrom(const FunctionArgumentTypeOptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.FunctionArgumentTypeOptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_argument_name(from._internal_argument_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_relation_input_schema()->::zetasql::TVFRelationProto::MergeFrom(from._internal_relation_input_schema());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_argument_name_parse_location()->::zetasql::ParseLocationRangeProto::MergeFrom(from._internal_argument_name_parse_location());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_argument_type_parse_location()->::zetasql::ParseLocationRangeProto::MergeFrom(from._internal_argument_type_parse_location());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_default_value()->::zetasql::ValueProto::MergeFrom(from._internal_default_value());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_default_value_type()->::zetasql::TypeProto::MergeFrom(from._internal_default_value_type());
    }
    if (cached_has_bits & 0x00000040u) {
      cardinality_ = from.cardinality_;
    }
    if (cached_has_bits & 0x00000080u) {
      must_be_constant_ = from.must_be_constant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      must_be_non_null_ = from.must_be_non_null_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_not_aggregate_ = from.is_not_aggregate_;
    }
    if (cached_has_bits & 0x00000400u) {
      must_support_equality_ = from.must_support_equality_;
    }
    if (cached_has_bits & 0x00000800u) {
      min_value_ = from.min_value_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_value_ = from.max_value_;
    }
    if (cached_has_bits & 0x00002000u) {
      must_support_ordering_ = from.must_support_ordering_;
    }
    if (cached_has_bits & 0x00004000u) {
      extra_relation_input_columns_allowed_ = from.extra_relation_input_columns_allowed_;
    }
    if (cached_has_bits & 0x00008000u) {
      argument_name_is_mandatory_ = from.argument_name_is_mandatory_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      uses_array_element_for_collation_ = from.uses_array_element_for_collation_;
    }
    if (cached_has_bits & 0x00020000u) {
      procedure_argument_mode_ = from.procedure_argument_mode_;
    }
    if (cached_has_bits & 0x00040000u) {
      descriptor_resolution_table_offset_ = from.descriptor_resolution_table_offset_;
    }
    if (cached_has_bits & 0x00080000u) {
      argument_collation_mode_ = from.argument_collation_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionArgumentTypeOptionsProto::CopyFrom(const FunctionArgumentTypeOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.FunctionArgumentTypeOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionArgumentTypeOptionsProto::IsInitialized() const {
  if (_internal_has_relation_input_schema()) {
    if (!relation_input_schema_->IsInitialized()) return false;
  }
  if (_internal_has_default_value_type()) {
    if (!default_value_type_->IsInitialized()) return false;
  }
  return true;
}

void FunctionArgumentTypeOptionsProto::InternalSwap(FunctionArgumentTypeOptionsProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &argument_name_, lhs_arena,
      &other->argument_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionArgumentTypeOptionsProto, procedure_argument_mode_)
      + sizeof(FunctionArgumentTypeOptionsProto::procedure_argument_mode_)
      - PROTOBUF_FIELD_OFFSET(FunctionArgumentTypeOptionsProto, relation_input_schema_)>(
          reinterpret_cast<char*>(&relation_input_schema_),
          reinterpret_cast<char*>(&other->relation_input_schema_));
  swap(descriptor_resolution_table_offset_, other->descriptor_resolution_table_offset_);
  swap(argument_collation_mode_, other->argument_collation_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionArgumentTypeOptionsProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[5]);
}

// ===================================================================

class ArgumentTypeLambdaProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ArgumentTypeLambdaProto>()._has_bits_);
  static const ::zetasql::FunctionArgumentTypeProto& body(const ArgumentTypeLambdaProto* msg);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::FunctionArgumentTypeProto&
ArgumentTypeLambdaProto::_Internal::body(const ArgumentTypeLambdaProto* msg) {
  return *msg->body_;
}
ArgumentTypeLambdaProto::ArgumentTypeLambdaProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  argument_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ArgumentTypeLambdaProto)
}
ArgumentTypeLambdaProto::ArgumentTypeLambdaProto(const ArgumentTypeLambdaProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argument_(from.argument_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_body()) {
    body_ = new ::zetasql::FunctionArgumentTypeProto(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ArgumentTypeLambdaProto)
}

inline void ArgumentTypeLambdaProto::SharedCtor() {
body_ = nullptr;
}

ArgumentTypeLambdaProto::~ArgumentTypeLambdaProto() {
  // @@protoc_insertion_point(destructor:zetasql.ArgumentTypeLambdaProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ArgumentTypeLambdaProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete body_;
}

void ArgumentTypeLambdaProto::ArenaDtor(void* object) {
  ArgumentTypeLambdaProto* _this = reinterpret_cast< ArgumentTypeLambdaProto* >(object);
  (void)_this;
}
void ArgumentTypeLambdaProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArgumentTypeLambdaProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArgumentTypeLambdaProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ArgumentTypeLambdaProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  argument_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(body_ != nullptr);
    body_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArgumentTypeLambdaProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zetasql.FunctionArgumentTypeProto argument = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_argument(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionArgumentTypeProto body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArgumentTypeLambdaProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ArgumentTypeLambdaProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zetasql.FunctionArgumentTypeProto argument = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_argument_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_argument(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.FunctionArgumentTypeProto body = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ArgumentTypeLambdaProto)
  return target;
}

size_t ArgumentTypeLambdaProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ArgumentTypeLambdaProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.FunctionArgumentTypeProto argument = 5;
  total_size += 1UL * this->_internal_argument_size();
  for (const auto& msg : this->argument_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .zetasql.FunctionArgumentTypeProto body = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ArgumentTypeLambdaProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ArgumentTypeLambdaProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ArgumentTypeLambdaProto::GetClassData() const { return &_class_data_; }

void ArgumentTypeLambdaProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ArgumentTypeLambdaProto *>(to)->MergeFrom(
      static_cast<const ArgumentTypeLambdaProto &>(from));
}


void ArgumentTypeLambdaProto::MergeFrom(const ArgumentTypeLambdaProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ArgumentTypeLambdaProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  argument_.MergeFrom(from.argument_);
  if (from._internal_has_body()) {
    _internal_mutable_body()->::zetasql::FunctionArgumentTypeProto::MergeFrom(from._internal_body());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ArgumentTypeLambdaProto::CopyFrom(const ArgumentTypeLambdaProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ArgumentTypeLambdaProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArgumentTypeLambdaProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(argument_))
    return false;
  if (_internal_has_body()) {
    if (!body_->IsInitialized()) return false;
  }
  return true;
}

void ArgumentTypeLambdaProto::InternalSwap(ArgumentTypeLambdaProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  argument_.InternalSwap(&other->argument_);
  swap(body_, other->body_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArgumentTypeLambdaProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[6]);
}

// ===================================================================

class FunctionArgumentTypeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionArgumentTypeProto>()._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::TypeProto& type(const FunctionArgumentTypeProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_occurrences(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::FunctionArgumentTypeOptionsProto& options(const FunctionArgumentTypeProto* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ArgumentTypeLambdaProto& lambda(const FunctionArgumentTypeProto* msg);
  static void set_has_lambda(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::TypeProto&
FunctionArgumentTypeProto::_Internal::type(const FunctionArgumentTypeProto* msg) {
  return *msg->type_;
}
const ::zetasql::FunctionArgumentTypeOptionsProto&
FunctionArgumentTypeProto::_Internal::options(const FunctionArgumentTypeProto* msg) {
  return *msg->options_;
}
const ::zetasql::ArgumentTypeLambdaProto&
FunctionArgumentTypeProto::_Internal::lambda(const FunctionArgumentTypeProto* msg) {
  return *msg->lambda_;
}
void FunctionArgumentTypeProto::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FunctionArgumentTypeProto::FunctionArgumentTypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.FunctionArgumentTypeProto)
}
FunctionArgumentTypeProto::FunctionArgumentTypeProto(const FunctionArgumentTypeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::zetasql::TypeProto(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::zetasql::FunctionArgumentTypeOptionsProto(*from.options_);
  } else {
    options_ = nullptr;
  }
  if (from._internal_has_lambda()) {
    lambda_ = new ::zetasql::ArgumentTypeLambdaProto(*from.lambda_);
  } else {
    lambda_ = nullptr;
  }
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_occurrences_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(num_occurrences_));
  // @@protoc_insertion_point(copy_constructor:zetasql.FunctionArgumentTypeProto)
}

inline void FunctionArgumentTypeProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_occurrences_) -
    reinterpret_cast<char*>(&type_)) + sizeof(num_occurrences_));
}

FunctionArgumentTypeProto::~FunctionArgumentTypeProto() {
  // @@protoc_insertion_point(destructor:zetasql.FunctionArgumentTypeProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionArgumentTypeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete lambda_;
}

void FunctionArgumentTypeProto::ArenaDtor(void* object) {
  FunctionArgumentTypeProto* _this = reinterpret_cast< FunctionArgumentTypeProto* >(object);
  (void)_this;
}
void FunctionArgumentTypeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionArgumentTypeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionArgumentTypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.FunctionArgumentTypeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lambda_ != nullptr);
      lambda_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_occurrences_) -
        reinterpret_cast<char*>(&kind_)) + sizeof(num_occurrences_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionArgumentTypeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.SignatureArgumentKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::SignatureArgumentKind_IsValid(val))) {
            _internal_set_kind(static_cast<::zetasql::SignatureArgumentKind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TypeProto type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionArgumentTypeOptionsProto options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_occurrences = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_occurrences(&has_bits);
          num_occurrences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ArgumentTypeLambdaProto lambda = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lambda(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionArgumentTypeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.FunctionArgumentTypeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.SignatureArgumentKind kind = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // optional .zetasql.TypeProto type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  // optional .zetasql.FunctionArgumentTypeOptionsProto options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  // optional int32 num_occurrences = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_occurrences(), target);
  }

  // optional .zetasql.ArgumentTypeLambdaProto lambda = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lambda(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.FunctionArgumentTypeProto)
  return target;
}

size_t FunctionArgumentTypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.FunctionArgumentTypeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .zetasql.TypeProto type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional .zetasql.FunctionArgumentTypeOptionsProto options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional .zetasql.ArgumentTypeLambdaProto lambda = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lambda_);
    }

    // optional .zetasql.SignatureArgumentKind kind = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
    }

    // optional int32 num_occurrences = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_occurrences());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionArgumentTypeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionArgumentTypeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionArgumentTypeProto::GetClassData() const { return &_class_data_; }

void FunctionArgumentTypeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionArgumentTypeProto *>(to)->MergeFrom(
      static_cast<const FunctionArgumentTypeProto &>(from));
}


void FunctionArgumentTypeProto::MergeFrom(const FunctionArgumentTypeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.FunctionArgumentTypeProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_type()->::zetasql::TypeProto::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::zetasql::FunctionArgumentTypeOptionsProto::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lambda()->::zetasql::ArgumentTypeLambdaProto::MergeFrom(from._internal_lambda());
    }
    if (cached_has_bits & 0x00000008u) {
      kind_ = from.kind_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_occurrences_ = from.num_occurrences_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionArgumentTypeProto::CopyFrom(const FunctionArgumentTypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.FunctionArgumentTypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionArgumentTypeProto::IsInitialized() const {
  if (_internal_has_type()) {
    if (!type_->IsInitialized()) return false;
  }
  if (_internal_has_options()) {
    if (!options_->IsInitialized()) return false;
  }
  if (_internal_has_lambda()) {
    if (!lambda_->IsInitialized()) return false;
  }
  return true;
}

void FunctionArgumentTypeProto::InternalSwap(FunctionArgumentTypeProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionArgumentTypeProto, num_occurrences_)
      + sizeof(FunctionArgumentTypeProto::num_occurrences_)
      - PROTOBUF_FIELD_OFFSET(FunctionArgumentTypeProto, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionArgumentTypeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[7]);
}

// ===================================================================

class FunctionSignatureOptionsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionSignatureOptionsProto>()._has_bits_);
  static void set_has_is_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_aliased_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_propagates_collation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uses_operation_collation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void FunctionSignatureOptionsProto::clear_additional_deprecation_warning() {
  additional_deprecation_warning_.Clear();
}
FunctionSignatureOptionsProto::FunctionSignatureOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_deprecation_warning_(arena),
  required_language_feature_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.FunctionSignatureOptionsProto)
}
FunctionSignatureOptionsProto::FunctionSignatureOptionsProto(const FunctionSignatureOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_deprecation_warning_(from.additional_deprecation_warning_),
      required_language_feature_(from.required_language_feature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_deprecated_, &from.is_deprecated_,
    static_cast<size_t>(reinterpret_cast<char*>(&propagates_collation_) -
    reinterpret_cast<char*>(&is_deprecated_)) + sizeof(propagates_collation_));
  // @@protoc_insertion_point(copy_constructor:zetasql.FunctionSignatureOptionsProto)
}

inline void FunctionSignatureOptionsProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_deprecated_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uses_operation_collation_) -
    reinterpret_cast<char*>(&is_deprecated_)) + sizeof(uses_operation_collation_));
propagates_collation_ = true;
}

FunctionSignatureOptionsProto::~FunctionSignatureOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.FunctionSignatureOptionsProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionSignatureOptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionSignatureOptionsProto::ArenaDtor(void* object) {
  FunctionSignatureOptionsProto* _this = reinterpret_cast< FunctionSignatureOptionsProto* >(object);
  (void)_this;
}
void FunctionSignatureOptionsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionSignatureOptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionSignatureOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.FunctionSignatureOptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_deprecation_warning_.Clear();
  required_language_feature_.Clear();
  ::memset(&is_deprecated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uses_operation_collation_) -
      reinterpret_cast<char*>(&is_deprecated_)) + sizeof(uses_operation_collation_));
  propagates_collation_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionSignatureOptionsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_deprecated = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_deprecated(&has_bits);
          is_deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.FreestandingDeprecationWarning additional_deprecation_warning = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_deprecation_warning(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.LanguageFeature required_language_feature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::zetasql::LanguageFeature_IsValid(val))) {
              _internal_add_required_language_feature(static_cast<::zetasql::LanguageFeature>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_required_language_feature(), ptr, ctx, ::zetasql::LanguageFeature_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_aliased_signature = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_aliased_signature(&has_bits);
          is_aliased_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool propagates_collation = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_propagates_collation(&has_bits);
          propagates_collation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool uses_operation_collation = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_uses_operation_collation(&has_bits);
          uses_operation_collation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionSignatureOptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.FunctionSignatureOptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_deprecated = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_deprecated(), target);
  }

  // repeated .zetasql.FreestandingDeprecationWarning additional_deprecation_warning = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_deprecation_warning_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_additional_deprecation_warning(i), target, stream);
  }

  // repeated .zetasql.LanguageFeature required_language_feature = 4;
  for (int i = 0, n = this->_internal_required_language_feature_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        4, this->_internal_required_language_feature(i), target);
  }

  // optional bool is_aliased_signature = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_aliased_signature(), target);
  }

  // optional bool propagates_collation = 6 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_propagates_collation(), target);
  }

  // optional bool uses_operation_collation = 7 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_uses_operation_collation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.FunctionSignatureOptionsProto)
  return target;
}

size_t FunctionSignatureOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.FunctionSignatureOptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.FreestandingDeprecationWarning additional_deprecation_warning = 3;
  total_size += 1UL * this->_internal_additional_deprecation_warning_size();
  for (const auto& msg : this->additional_deprecation_warning_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .zetasql.LanguageFeature required_language_feature = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_required_language_feature_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_required_language_feature(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool is_deprecated = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_aliased_signature = 5 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool uses_operation_collation = 7 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool propagates_collation = 6 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionSignatureOptionsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionSignatureOptionsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionSignatureOptionsProto::GetClassData() const { return &_class_data_; }

void FunctionSignatureOptionsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionSignatureOptionsProto *>(to)->MergeFrom(
      static_cast<const FunctionSignatureOptionsProto &>(from));
}


void FunctionSignatureOptionsProto::MergeFrom(const FunctionSignatureOptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.FunctionSignatureOptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  additional_deprecation_warning_.MergeFrom(from.additional_deprecation_warning_);
  required_language_feature_.MergeFrom(from.required_language_feature_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      is_deprecated_ = from.is_deprecated_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_aliased_signature_ = from.is_aliased_signature_;
    }
    if (cached_has_bits & 0x00000004u) {
      uses_operation_collation_ = from.uses_operation_collation_;
    }
    if (cached_has_bits & 0x00000008u) {
      propagates_collation_ = from.propagates_collation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionSignatureOptionsProto::CopyFrom(const FunctionSignatureOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.FunctionSignatureOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionSignatureOptionsProto::IsInitialized() const {
  return true;
}

void FunctionSignatureOptionsProto::InternalSwap(FunctionSignatureOptionsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_deprecation_warning_.InternalSwap(&other->additional_deprecation_warning_);
  required_language_feature_.InternalSwap(&other->required_language_feature_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionSignatureOptionsProto, uses_operation_collation_)
      + sizeof(FunctionSignatureOptionsProto::uses_operation_collation_)
      - PROTOBUF_FIELD_OFFSET(FunctionSignatureOptionsProto, is_deprecated_)>(
          reinterpret_cast<char*>(&is_deprecated_),
          reinterpret_cast<char*>(&other->is_deprecated_));
  swap(propagates_collation_, other->propagates_collation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionSignatureOptionsProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[8]);
}

// ===================================================================

class FunctionSignatureProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionSignatureProto>()._has_bits_);
  static const ::zetasql::FunctionArgumentTypeProto& return_type(const FunctionSignatureProto* msg);
  static void set_has_return_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_context_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::FunctionSignatureOptionsProto& options(const FunctionSignatureProto* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::FunctionArgumentTypeProto&
FunctionSignatureProto::_Internal::return_type(const FunctionSignatureProto* msg) {
  return *msg->return_type_;
}
const ::zetasql::FunctionSignatureOptionsProto&
FunctionSignatureProto::_Internal::options(const FunctionSignatureProto* msg) {
  return *msg->options_;
}
FunctionSignatureProto::FunctionSignatureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  argument_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.FunctionSignatureProto)
}
FunctionSignatureProto::FunctionSignatureProto(const FunctionSignatureProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argument_(from.argument_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_return_type()) {
    return_type_ = new ::zetasql::FunctionArgumentTypeProto(*from.return_type_);
  } else {
    return_type_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::zetasql::FunctionSignatureOptionsProto(*from.options_);
  } else {
    options_ = nullptr;
  }
  context_id_ = from.context_id_;
  // @@protoc_insertion_point(copy_constructor:zetasql.FunctionSignatureProto)
}

inline void FunctionSignatureProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&return_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&context_id_) -
    reinterpret_cast<char*>(&return_type_)) + sizeof(context_id_));
}

FunctionSignatureProto::~FunctionSignatureProto() {
  // @@protoc_insertion_point(destructor:zetasql.FunctionSignatureProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionSignatureProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete return_type_;
  if (this != internal_default_instance()) delete options_;
}

void FunctionSignatureProto::ArenaDtor(void* object) {
  FunctionSignatureProto* _this = reinterpret_cast< FunctionSignatureProto* >(object);
  (void)_this;
}
void FunctionSignatureProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionSignatureProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionSignatureProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.FunctionSignatureProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  argument_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(return_type_ != nullptr);
      return_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  context_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionSignatureProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zetasql.FunctionArgumentTypeProto argument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_argument(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionArgumentTypeProto return_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_return_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 context_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_context_id(&has_bits);
          context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionSignatureOptionsProto options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionSignatureProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.FunctionSignatureProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zetasql.FunctionArgumentTypeProto argument = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_argument_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_argument(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.FunctionArgumentTypeProto return_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::return_type(this), target, stream);
  }

  // optional int64 context_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_context_id(), target);
  }

  // optional .zetasql.FunctionSignatureOptionsProto options = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.FunctionSignatureProto)
  return target;
}

size_t FunctionSignatureProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.FunctionSignatureProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.FunctionArgumentTypeProto argument = 1;
  total_size += 1UL * this->_internal_argument_size();
  for (const auto& msg : this->argument_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .zetasql.FunctionArgumentTypeProto return_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *return_type_);
    }

    // optional .zetasql.FunctionSignatureOptionsProto options = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional int64 context_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_context_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionSignatureProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionSignatureProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionSignatureProto::GetClassData() const { return &_class_data_; }

void FunctionSignatureProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionSignatureProto *>(to)->MergeFrom(
      static_cast<const FunctionSignatureProto &>(from));
}


void FunctionSignatureProto::MergeFrom(const FunctionSignatureProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.FunctionSignatureProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  argument_.MergeFrom(from.argument_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_return_type()->::zetasql::FunctionArgumentTypeProto::MergeFrom(from._internal_return_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::zetasql::FunctionSignatureOptionsProto::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      context_id_ = from.context_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionSignatureProto::CopyFrom(const FunctionSignatureProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.FunctionSignatureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionSignatureProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(argument_))
    return false;
  if (_internal_has_return_type()) {
    if (!return_type_->IsInitialized()) return false;
  }
  return true;
}

void FunctionSignatureProto::InternalSwap(FunctionSignatureProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  argument_.InternalSwap(&other->argument_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionSignatureProto, context_id_)
      + sizeof(FunctionSignatureProto::context_id_)
      - PROTOBUF_FIELD_OFFSET(FunctionSignatureProto, return_type_)>(
          reinterpret_cast<char*>(&return_type_),
          reinterpret_cast<char*>(&other->return_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionSignatureProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[9]);
}

// ===================================================================

class FunctionOptionsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionOptionsProto>()._has_bits_);
  static void set_has_supports_over_clause(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_window_ordering_support(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_supports_window_framing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_arguments_are_coercible(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_alias_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sql_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_allow_external_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_volatility(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_supports_order_by(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_supports_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_supports_null_handling_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_supports_safe_error_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_supports_having_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_supports_clamped_between_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_uses_upper_case_sql_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

FunctionOptionsProto::FunctionOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  required_language_feature_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.FunctionOptionsProto)
}
FunctionOptionsProto::FunctionOptionsProto(const FunctionOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      required_language_feature_(from.required_language_feature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alias_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    alias_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_alias_name()) {
    alias_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alias_name(), 
      GetArenaForAllocation());
  }
  sql_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sql_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sql_name()) {
    sql_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sql_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&window_ordering_support_, &from.window_ordering_support_,
    static_cast<size_t>(reinterpret_cast<char*>(&uses_upper_case_sql_name_) -
    reinterpret_cast<char*>(&window_ordering_support_)) + sizeof(uses_upper_case_sql_name_));
  // @@protoc_insertion_point(copy_constructor:zetasql.FunctionOptionsProto)
}

inline void FunctionOptionsProto::SharedCtor() {
alias_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  alias_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sql_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sql_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&window_ordering_support_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&supports_clamped_between_modifier_) -
    reinterpret_cast<char*>(&window_ordering_support_)) + sizeof(supports_clamped_between_modifier_));
arguments_are_coercible_ = true;
allow_external_usage_ = true;
supports_safe_error_mode_ = true;
supports_having_modifier_ = true;
uses_upper_case_sql_name_ = true;
}

FunctionOptionsProto::~FunctionOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.FunctionOptionsProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionOptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  alias_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sql_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FunctionOptionsProto::ArenaDtor(void* object) {
  FunctionOptionsProto* _this = reinterpret_cast< FunctionOptionsProto* >(object);
  (void)_this;
}
void FunctionOptionsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionOptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.FunctionOptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_language_feature_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      alias_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sql_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&window_ordering_support_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&volatility_) -
        reinterpret_cast<char*>(&window_ordering_support_)) + sizeof(volatility_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&supports_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&supports_clamped_between_modifier_) -
        reinterpret_cast<char*>(&supports_limit_)) + sizeof(supports_clamped_between_modifier_));
    arguments_are_coercible_ = true;
    allow_external_usage_ = true;
    supports_safe_error_mode_ = true;
    supports_having_modifier_ = true;
    uses_upper_case_sql_name_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionOptionsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool supports_over_clause = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_supports_over_clause(&has_bits);
          supports_over_clause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionEnums.WindowOrderSupport window_ordering_support = 2 [default = ORDER_UNSUPPORTED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::FunctionEnums_WindowOrderSupport_IsValid(val))) {
            _internal_set_window_ordering_support(static_cast<::zetasql::FunctionEnums_WindowOrderSupport>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool supports_window_framing = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_supports_window_framing(&has_bits);
          supports_window_framing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool arguments_are_coercible = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_arguments_are_coercible(&has_bits);
          arguments_are_coercible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_deprecated = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_deprecated(&has_bits);
          is_deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string alias_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_alias_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.FunctionOptionsProto.alias_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sql_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_sql_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.FunctionOptionsProto.sql_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_external_usage = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_allow_external_usage(&has_bits);
          allow_external_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionEnums.Volatility volatility = 9 [default = IMMUTABLE];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::FunctionEnums_Volatility_IsValid(val))) {
            _internal_set_volatility(static_cast<::zetasql::FunctionEnums_Volatility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool supports_order_by = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_supports_order_by(&has_bits);
          supports_order_by_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.LanguageFeature required_language_feature = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::zetasql::LanguageFeature_IsValid(val))) {
              _internal_add_required_language_feature(static_cast<::zetasql::LanguageFeature>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_required_language_feature(), ptr, ctx, ::zetasql::LanguageFeature_IsValid, &_internal_metadata_, 11);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supports_limit = 12 [default = false];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_supports_limit(&has_bits);
          supports_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supports_null_handling_modifier = 13 [default = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_supports_null_handling_modifier(&has_bits);
          supports_null_handling_modifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supports_safe_error_mode = 14 [default = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_supports_safe_error_mode(&has_bits);
          supports_safe_error_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supports_having_modifier = 15 [default = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_supports_having_modifier(&has_bits);
          supports_having_modifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool supports_clamped_between_modifier = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_supports_clamped_between_modifier(&has_bits);
          supports_clamped_between_modifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool uses_upper_case_sql_name = 17 [default = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_uses_upper_case_sql_name(&has_bits);
          uses_upper_case_sql_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionOptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.FunctionOptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool supports_over_clause = 1 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_supports_over_clause(), target);
  }

  // optional .zetasql.FunctionEnums.WindowOrderSupport window_ordering_support = 2 [default = ORDER_UNSUPPORTED];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_window_ordering_support(), target);
  }

  // optional bool supports_window_framing = 3 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_supports_window_framing(), target);
  }

  // optional bool arguments_are_coercible = 4 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_arguments_are_coercible(), target);
  }

  // optional bool is_deprecated = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_deprecated(), target);
  }

  // optional string alias_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_alias_name().data(), static_cast<int>(this->_internal_alias_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.FunctionOptionsProto.alias_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_alias_name(), target);
  }

  // optional string sql_name = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sql_name().data(), static_cast<int>(this->_internal_sql_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.FunctionOptionsProto.sql_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sql_name(), target);
  }

  // optional bool allow_external_usage = 8 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_allow_external_usage(), target);
  }

  // optional .zetasql.FunctionEnums.Volatility volatility = 9 [default = IMMUTABLE];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_volatility(), target);
  }

  // optional bool supports_order_by = 10 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_supports_order_by(), target);
  }

  // repeated .zetasql.LanguageFeature required_language_feature = 11;
  for (int i = 0, n = this->_internal_required_language_feature_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        11, this->_internal_required_language_feature(i), target);
  }

  // optional bool supports_limit = 12 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_supports_limit(), target);
  }

  // optional bool supports_null_handling_modifier = 13 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_supports_null_handling_modifier(), target);
  }

  // optional bool supports_safe_error_mode = 14 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_supports_safe_error_mode(), target);
  }

  // optional bool supports_having_modifier = 15 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_supports_having_modifier(), target);
  }

  // optional bool supports_clamped_between_modifier = 16 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_supports_clamped_between_modifier(), target);
  }

  // optional bool uses_upper_case_sql_name = 17 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_uses_upper_case_sql_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.FunctionOptionsProto)
  return target;
}

size_t FunctionOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.FunctionOptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.LanguageFeature required_language_feature = 11;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_required_language_feature_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_required_language_feature(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string alias_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_alias_name());
    }

    // optional string sql_name = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sql_name());
    }

    // optional .zetasql.FunctionEnums.WindowOrderSupport window_ordering_support = 2 [default = ORDER_UNSUPPORTED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_window_ordering_support());
    }

    // optional bool supports_over_clause = 1 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool supports_window_framing = 3 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_deprecated = 5 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool supports_order_by = 10 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .zetasql.FunctionEnums.Volatility volatility = 9 [default = IMMUTABLE];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_volatility());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool supports_limit = 12 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool supports_null_handling_modifier = 13 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool supports_clamped_between_modifier = 16 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool arguments_are_coercible = 4 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool allow_external_usage = 8 [default = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool supports_safe_error_mode = 14 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool supports_having_modifier = 15 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool uses_upper_case_sql_name = 17 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionOptionsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionOptionsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionOptionsProto::GetClassData() const { return &_class_data_; }

void FunctionOptionsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionOptionsProto *>(to)->MergeFrom(
      static_cast<const FunctionOptionsProto &>(from));
}


void FunctionOptionsProto::MergeFrom(const FunctionOptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.FunctionOptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  required_language_feature_.MergeFrom(from.required_language_feature_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_alias_name(from._internal_alias_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sql_name(from._internal_sql_name());
    }
    if (cached_has_bits & 0x00000004u) {
      window_ordering_support_ = from.window_ordering_support_;
    }
    if (cached_has_bits & 0x00000008u) {
      supports_over_clause_ = from.supports_over_clause_;
    }
    if (cached_has_bits & 0x00000010u) {
      supports_window_framing_ = from.supports_window_framing_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_deprecated_ = from.is_deprecated_;
    }
    if (cached_has_bits & 0x00000040u) {
      supports_order_by_ = from.supports_order_by_;
    }
    if (cached_has_bits & 0x00000080u) {
      volatility_ = from.volatility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      supports_limit_ = from.supports_limit_;
    }
    if (cached_has_bits & 0x00000200u) {
      supports_null_handling_modifier_ = from.supports_null_handling_modifier_;
    }
    if (cached_has_bits & 0x00000400u) {
      supports_clamped_between_modifier_ = from.supports_clamped_between_modifier_;
    }
    if (cached_has_bits & 0x00000800u) {
      arguments_are_coercible_ = from.arguments_are_coercible_;
    }
    if (cached_has_bits & 0x00001000u) {
      allow_external_usage_ = from.allow_external_usage_;
    }
    if (cached_has_bits & 0x00002000u) {
      supports_safe_error_mode_ = from.supports_safe_error_mode_;
    }
    if (cached_has_bits & 0x00004000u) {
      supports_having_modifier_ = from.supports_having_modifier_;
    }
    if (cached_has_bits & 0x00008000u) {
      uses_upper_case_sql_name_ = from.uses_upper_case_sql_name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionOptionsProto::CopyFrom(const FunctionOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.FunctionOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionOptionsProto::IsInitialized() const {
  return true;
}

void FunctionOptionsProto::InternalSwap(FunctionOptionsProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  required_language_feature_.InternalSwap(&other->required_language_feature_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alias_name_, lhs_arena,
      &other->alias_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sql_name_, lhs_arena,
      &other->sql_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionOptionsProto, supports_clamped_between_modifier_)
      + sizeof(FunctionOptionsProto::supports_clamped_between_modifier_)
      - PROTOBUF_FIELD_OFFSET(FunctionOptionsProto, window_ordering_support_)>(
          reinterpret_cast<char*>(&window_ordering_support_),
          reinterpret_cast<char*>(&other->window_ordering_support_));
  swap(arguments_are_coercible_, other->arguments_are_coercible_);
  swap(allow_external_usage_, other->allow_external_usage_);
  swap(supports_safe_error_mode_, other->supports_safe_error_mode_);
  swap(supports_having_modifier_, other->supports_having_modifier_);
  swap(uses_upper_case_sql_name_, other->uses_upper_case_sql_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionOptionsProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[10]);
}

// ===================================================================

class FunctionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionProto>()._has_bits_);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::FunctionOptionsProto& options(const FunctionProto* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ParseResumeLocationProto& parse_resume_location(const FunctionProto* msg);
  static void set_has_parse_resume_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::FunctionOptionsProto&
FunctionProto::_Internal::options(const FunctionProto* msg) {
  return *msg->options_;
}
const ::zetasql::ParseResumeLocationProto&
FunctionProto::_Internal::parse_resume_location(const FunctionProto* msg) {
  return *msg->parse_resume_location_;
}
void FunctionProto::clear_parse_resume_location() {
  if (parse_resume_location_ != nullptr) parse_resume_location_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
FunctionProto::FunctionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena),
  signature_(arena),
  templated_sql_function_argument_name_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.FunctionProto)
}
FunctionProto::FunctionProto(const FunctionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_),
      signature_(from.signature_),
      templated_sql_function_argument_name_(from.templated_sql_function_argument_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group()) {
    group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_options()) {
    options_ = new ::zetasql::FunctionOptionsProto(*from.options_);
  } else {
    options_ = nullptr;
  }
  if (from._internal_has_parse_resume_location()) {
    parse_resume_location_ = new ::zetasql::ParseResumeLocationProto(*from.parse_resume_location_);
  } else {
    parse_resume_location_ = nullptr;
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.FunctionProto)
}

inline void FunctionProto::SharedCtor() {
group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parse_resume_location_) -
    reinterpret_cast<char*>(&options_)) + sizeof(parse_resume_location_));
mode_ = 1;
}

FunctionProto::~FunctionProto() {
  // @@protoc_insertion_point(destructor:zetasql.FunctionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete parse_resume_location_;
}

void FunctionProto::ArenaDtor(void* object) {
  FunctionProto* _this = reinterpret_cast< FunctionProto* >(object);
  (void)_this;
}
void FunctionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.FunctionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_path_.Clear();
  signature_.Clear();
  templated_sql_function_argument_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      group_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(parse_resume_location_ != nullptr);
      parse_resume_location_->Clear();
    }
    mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string name_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.FunctionProto.name_path");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.FunctionProto.group");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionEnums.Mode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::FunctionEnums_Mode_IsValid(val))) {
            _internal_set_mode(static_cast<::zetasql::FunctionEnums_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.FunctionSignatureProto signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionOptionsProto options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string templated_sql_function_argument_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_templated_sql_function_argument_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.FunctionProto.templated_sql_function_argument_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ParseResumeLocationProto parse_resume_location = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_parse_resume_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.FunctionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name_path = 1;
  for (int i = 0, n = this->_internal_name_path_size(); i < n; i++) {
    const auto& s = this->_internal_name_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.FunctionProto.name_path");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string group = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.FunctionProto.group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group(), target);
  }

  // optional .zetasql.FunctionEnums.Mode mode = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // repeated .zetasql.FunctionSignatureProto signature = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_signature(i), target, stream);
  }

  // optional .zetasql.FunctionOptionsProto options = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::options(this), target, stream);
  }

  // repeated string templated_sql_function_argument_name = 7;
  for (int i = 0, n = this->_internal_templated_sql_function_argument_name_size(); i < n; i++) {
    const auto& s = this->_internal_templated_sql_function_argument_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.FunctionProto.templated_sql_function_argument_name");
    target = stream->WriteString(7, s, target);
  }

  // optional .zetasql.ParseResumeLocationProto parse_resume_location = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::parse_resume_location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.FunctionProto)
  return target;
}

size_t FunctionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.FunctionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name_path = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_path_.size());
  for (int i = 0, n = name_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_path_.Get(i));
  }

  // repeated .zetasql.FunctionSignatureProto signature = 4;
  total_size += 1UL * this->_internal_signature_size();
  for (const auto& msg : this->signature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string templated_sql_function_argument_name = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(templated_sql_function_argument_name_.size());
  for (int i = 0, n = templated_sql_function_argument_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      templated_sql_function_argument_name_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string group = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group());
    }

    // optional .zetasql.FunctionOptionsProto options = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional .zetasql.ParseResumeLocationProto parse_resume_location = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parse_resume_location_);
    }

    // optional .zetasql.FunctionEnums.Mode mode = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionProto::GetClassData() const { return &_class_data_; }

void FunctionProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionProto *>(to)->MergeFrom(
      static_cast<const FunctionProto &>(from));
}


void FunctionProto::MergeFrom(const FunctionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.FunctionProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  name_path_.MergeFrom(from.name_path_);
  signature_.MergeFrom(from.signature_);
  templated_sql_function_argument_name_.MergeFrom(from.templated_sql_function_argument_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_group(from._internal_group());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::zetasql::FunctionOptionsProto::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_parse_resume_location()->::zetasql::ParseResumeLocationProto::MergeFrom(from._internal_parse_resume_location());
    }
    if (cached_has_bits & 0x00000008u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionProto::CopyFrom(const FunctionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.FunctionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(signature_))
    return false;
  return true;
}

void FunctionProto::InternalSwap(FunctionProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_path_.InternalSwap(&other->name_path_);
  signature_.InternalSwap(&other->signature_);
  templated_sql_function_argument_name_.InternalSwap(&other->templated_sql_function_argument_name_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &group_, lhs_arena,
      &other->group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionProto, parse_resume_location_)
      + sizeof(FunctionProto::parse_resume_location_)
      - PROTOBUF_FIELD_OFFSET(FunctionProto, options_)>(
          reinterpret_cast<char*>(&options_),
          reinterpret_cast<char*>(&other->options_));
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[11]);
}

// ===================================================================

class ResolvedFunctionCallInfoProto::_Internal {
 public:
};

ResolvedFunctionCallInfoProto::ResolvedFunctionCallInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFunctionCallInfoProto)
}
ResolvedFunctionCallInfoProto::ResolvedFunctionCallInfoProto(const ResolvedFunctionCallInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFunctionCallInfoProto)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResolvedFunctionCallInfoProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResolvedFunctionCallInfoProto::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFunctionCallInfoProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[12]);
}

// ===================================================================

class TableValuedFunctionOptionsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TableValuedFunctionOptionsProto>()._has_bits_);
  static void set_has_uses_upper_case_sql_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TableValuedFunctionOptionsProto::TableValuedFunctionOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.TableValuedFunctionOptionsProto)
}
TableValuedFunctionOptionsProto::TableValuedFunctionOptionsProto(const TableValuedFunctionOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uses_upper_case_sql_name_ = from.uses_upper_case_sql_name_;
  // @@protoc_insertion_point(copy_constructor:zetasql.TableValuedFunctionOptionsProto)
}

inline void TableValuedFunctionOptionsProto::SharedCtor() {
uses_upper_case_sql_name_ = true;
}

TableValuedFunctionOptionsProto::~TableValuedFunctionOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.TableValuedFunctionOptionsProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableValuedFunctionOptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableValuedFunctionOptionsProto::ArenaDtor(void* object) {
  TableValuedFunctionOptionsProto* _this = reinterpret_cast< TableValuedFunctionOptionsProto* >(object);
  (void)_this;
}
void TableValuedFunctionOptionsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableValuedFunctionOptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableValuedFunctionOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TableValuedFunctionOptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uses_upper_case_sql_name_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableValuedFunctionOptionsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool uses_upper_case_sql_name = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uses_upper_case_sql_name(&has_bits);
          uses_upper_case_sql_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableValuedFunctionOptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TableValuedFunctionOptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool uses_upper_case_sql_name = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_uses_upper_case_sql_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TableValuedFunctionOptionsProto)
  return target;
}

size_t TableValuedFunctionOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TableValuedFunctionOptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool uses_upper_case_sql_name = 1 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableValuedFunctionOptionsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableValuedFunctionOptionsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableValuedFunctionOptionsProto::GetClassData() const { return &_class_data_; }

void TableValuedFunctionOptionsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TableValuedFunctionOptionsProto *>(to)->MergeFrom(
      static_cast<const TableValuedFunctionOptionsProto &>(from));
}


void TableValuedFunctionOptionsProto::MergeFrom(const TableValuedFunctionOptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TableValuedFunctionOptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uses_upper_case_sql_name()) {
    _internal_set_uses_upper_case_sql_name(from._internal_uses_upper_case_sql_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableValuedFunctionOptionsProto::CopyFrom(const TableValuedFunctionOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TableValuedFunctionOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableValuedFunctionOptionsProto::IsInitialized() const {
  return true;
}

void TableValuedFunctionOptionsProto::InternalSwap(TableValuedFunctionOptionsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(uses_upper_case_sql_name_, other->uses_upper_case_sql_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableValuedFunctionOptionsProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[13]);
}

// ===================================================================

class TableValuedFunctionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TableValuedFunctionProto>()._has_bits_);
  static const ::zetasql::FunctionSignatureProto& signature(const TableValuedFunctionProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TableValuedFunctionOptionsProto& options(const TableValuedFunctionProto* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_volatility(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::zetasql::ParseResumeLocationProto& parse_resume_location(const TableValuedFunctionProto* msg);
  static void set_has_parse_resume_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_context(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::SimpleAnonymizationInfoProto& anonymization_info(const TableValuedFunctionProto* msg);
  static void set_has_anonymization_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::zetasql::FunctionSignatureProto&
TableValuedFunctionProto::_Internal::signature(const TableValuedFunctionProto* msg) {
  return *msg->signature_;
}
const ::zetasql::TableValuedFunctionOptionsProto&
TableValuedFunctionProto::_Internal::options(const TableValuedFunctionProto* msg) {
  return *msg->options_;
}
const ::zetasql::ParseResumeLocationProto&
TableValuedFunctionProto::_Internal::parse_resume_location(const TableValuedFunctionProto* msg) {
  return *msg->parse_resume_location_;
}
const ::zetasql::SimpleAnonymizationInfoProto&
TableValuedFunctionProto::_Internal::anonymization_info(const TableValuedFunctionProto* msg) {
  return *msg->anonymization_info_;
}
void TableValuedFunctionProto::clear_parse_resume_location() {
  if (parse_resume_location_ != nullptr) parse_resume_location_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void TableValuedFunctionProto::clear_anonymization_info() {
  if (anonymization_info_ != nullptr) anonymization_info_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
TableValuedFunctionProto::TableValuedFunctionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena),
  argument_name_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.TableValuedFunctionProto)
}
TableValuedFunctionProto::TableValuedFunctionProto(const TableValuedFunctionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_),
      argument_name_(from.argument_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  custom_context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    custom_context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_context()) {
    custom_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_context(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_signature()) {
    signature_ = new ::zetasql::FunctionSignatureProto(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  if (from._internal_has_parse_resume_location()) {
    parse_resume_location_ = new ::zetasql::ParseResumeLocationProto(*from.parse_resume_location_);
  } else {
    parse_resume_location_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::zetasql::TableValuedFunctionOptionsProto(*from.options_);
  } else {
    options_ = nullptr;
  }
  if (from._internal_has_anonymization_info()) {
    anonymization_info_ = new ::zetasql::SimpleAnonymizationInfoProto(*from.anonymization_info_);
  } else {
    anonymization_info_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&volatility_) -
    reinterpret_cast<char*>(&type_)) + sizeof(volatility_));
  // @@protoc_insertion_point(copy_constructor:zetasql.TableValuedFunctionProto)
}

inline void TableValuedFunctionProto::SharedCtor() {
custom_context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  custom_context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signature_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&volatility_) -
    reinterpret_cast<char*>(&signature_)) + sizeof(volatility_));
}

TableValuedFunctionProto::~TableValuedFunctionProto() {
  // @@protoc_insertion_point(destructor:zetasql.TableValuedFunctionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableValuedFunctionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  custom_context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete parse_resume_location_;
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete anonymization_info_;
}

void TableValuedFunctionProto::ArenaDtor(void* object) {
  TableValuedFunctionProto* _this = reinterpret_cast< TableValuedFunctionProto* >(object);
  (void)_this;
}
void TableValuedFunctionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableValuedFunctionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableValuedFunctionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TableValuedFunctionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_path_.Clear();
  argument_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      custom_context_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signature_ != nullptr);
      signature_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(parse_resume_location_ != nullptr);
      parse_resume_location_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(anonymization_info_ != nullptr);
      anonymization_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&volatility_) -
        reinterpret_cast<char*>(&type_)) + sizeof(volatility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableValuedFunctionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string name_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.TableValuedFunctionProto.name_path");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionSignatureProto signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionEnums.TableValuedFunctionType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::FunctionEnums_TableValuedFunctionType_IsValid(val))) {
            _internal_set_type(static_cast<::zetasql::FunctionEnums_TableValuedFunctionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string argument_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_argument_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.TableValuedFunctionProto.argument_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ParseResumeLocationProto parse_resume_location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_parse_resume_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string custom_context = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_custom_context();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.TableValuedFunctionProto.custom_context");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionEnums.Volatility volatility = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::FunctionEnums_Volatility_IsValid(val))) {
            _internal_set_volatility(static_cast<::zetasql::FunctionEnums_Volatility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TableValuedFunctionOptionsProto options = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.SimpleAnonymizationInfoProto anonymization_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_anonymization_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableValuedFunctionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TableValuedFunctionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name_path = 1;
  for (int i = 0, n = this->_internal_name_path_size(); i < n; i++) {
    const auto& s = this->_internal_name_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.TableValuedFunctionProto.name_path");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.FunctionSignatureProto signature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  // optional .zetasql.FunctionEnums.TableValuedFunctionType type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // repeated string argument_name = 5;
  for (int i = 0, n = this->_internal_argument_name_size(); i < n; i++) {
    const auto& s = this->_internal_argument_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.TableValuedFunctionProto.argument_name");
    target = stream->WriteString(5, s, target);
  }

  // optional .zetasql.ParseResumeLocationProto parse_resume_location = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::parse_resume_location(this), target, stream);
  }

  // optional string custom_context = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_context().data(), static_cast<int>(this->_internal_custom_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.TableValuedFunctionProto.custom_context");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_custom_context(), target);
  }

  // optional .zetasql.FunctionEnums.Volatility volatility = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_volatility(), target);
  }

  // optional .zetasql.TableValuedFunctionOptionsProto options = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::options(this), target, stream);
  }

  // optional .zetasql.SimpleAnonymizationInfoProto anonymization_info = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::anonymization_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TableValuedFunctionProto)
  return target;
}

size_t TableValuedFunctionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TableValuedFunctionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name_path = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_path_.size());
  for (int i = 0, n = name_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_path_.Get(i));
  }

  // repeated string argument_name = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(argument_name_.size());
  for (int i = 0, n = argument_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      argument_name_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string custom_context = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_context());
    }

    // optional .zetasql.FunctionSignatureProto signature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signature_);
    }

    // optional .zetasql.ParseResumeLocationProto parse_resume_location = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parse_resume_location_);
    }

    // optional .zetasql.TableValuedFunctionOptionsProto options = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional .zetasql.SimpleAnonymizationInfoProto anonymization_info = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anonymization_info_);
    }

    // optional .zetasql.FunctionEnums.TableValuedFunctionType type = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .zetasql.FunctionEnums.Volatility volatility = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_volatility());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableValuedFunctionProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableValuedFunctionProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableValuedFunctionProto::GetClassData() const { return &_class_data_; }

void TableValuedFunctionProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TableValuedFunctionProto *>(to)->MergeFrom(
      static_cast<const TableValuedFunctionProto &>(from));
}


void TableValuedFunctionProto::MergeFrom(const TableValuedFunctionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TableValuedFunctionProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  name_path_.MergeFrom(from.name_path_);
  argument_name_.MergeFrom(from.argument_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_custom_context(from._internal_custom_context());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_signature()->::zetasql::FunctionSignatureProto::MergeFrom(from._internal_signature());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_parse_resume_location()->::zetasql::ParseResumeLocationProto::MergeFrom(from._internal_parse_resume_location());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_options()->::zetasql::TableValuedFunctionOptionsProto::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_anonymization_info()->::zetasql::SimpleAnonymizationInfoProto::MergeFrom(from._internal_anonymization_info());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      volatility_ = from.volatility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableValuedFunctionProto::CopyFrom(const TableValuedFunctionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TableValuedFunctionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableValuedFunctionProto::IsInitialized() const {
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  return true;
}

void TableValuedFunctionProto::InternalSwap(TableValuedFunctionProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_path_.InternalSwap(&other->name_path_);
  argument_name_.InternalSwap(&other->argument_name_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &custom_context_, lhs_arena,
      &other->custom_context_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableValuedFunctionProto, volatility_)
      + sizeof(TableValuedFunctionProto::volatility_)
      - PROTOBUF_FIELD_OFFSET(TableValuedFunctionProto, signature_)>(
          reinterpret_cast<char*>(&signature_),
          reinterpret_cast<char*>(&other->signature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableValuedFunctionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[14]);
}

// ===================================================================

class TVFArgumentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TVFArgumentProto>()._has_bits_);
  static const ::zetasql::ValueWithTypeProto& scalar_argument(const TVFArgumentProto* msg);
  static void set_has_scalar_argument(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TVFRelationProto& relation_argument(const TVFArgumentProto* msg);
  static void set_has_relation_argument(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TVFModelProto& model_argument(const TVFArgumentProto* msg);
  static void set_has_model_argument(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::TVFConnectionProto& connection_argument(const TVFArgumentProto* msg);
  static void set_has_connection_argument(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::TVFDescriptorProto& descriptor_argument(const TVFArgumentProto* msg);
  static void set_has_descriptor_argument(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::zetasql::ValueWithTypeProto&
TVFArgumentProto::_Internal::scalar_argument(const TVFArgumentProto* msg) {
  return *msg->scalar_argument_;
}
const ::zetasql::TVFRelationProto&
TVFArgumentProto::_Internal::relation_argument(const TVFArgumentProto* msg) {
  return *msg->relation_argument_;
}
const ::zetasql::TVFModelProto&
TVFArgumentProto::_Internal::model_argument(const TVFArgumentProto* msg) {
  return *msg->model_argument_;
}
const ::zetasql::TVFConnectionProto&
TVFArgumentProto::_Internal::connection_argument(const TVFArgumentProto* msg) {
  return *msg->connection_argument_;
}
const ::zetasql::TVFDescriptorProto&
TVFArgumentProto::_Internal::descriptor_argument(const TVFArgumentProto* msg) {
  return *msg->descriptor_argument_;
}
void TVFArgumentProto::clear_scalar_argument() {
  if (scalar_argument_ != nullptr) scalar_argument_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
TVFArgumentProto::TVFArgumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.TVFArgumentProto)
}
TVFArgumentProto::TVFArgumentProto(const TVFArgumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalar_argument()) {
    scalar_argument_ = new ::zetasql::ValueWithTypeProto(*from.scalar_argument_);
  } else {
    scalar_argument_ = nullptr;
  }
  if (from._internal_has_relation_argument()) {
    relation_argument_ = new ::zetasql::TVFRelationProto(*from.relation_argument_);
  } else {
    relation_argument_ = nullptr;
  }
  if (from._internal_has_model_argument()) {
    model_argument_ = new ::zetasql::TVFModelProto(*from.model_argument_);
  } else {
    model_argument_ = nullptr;
  }
  if (from._internal_has_connection_argument()) {
    connection_argument_ = new ::zetasql::TVFConnectionProto(*from.connection_argument_);
  } else {
    connection_argument_ = nullptr;
  }
  if (from._internal_has_descriptor_argument()) {
    descriptor_argument_ = new ::zetasql::TVFDescriptorProto(*from.descriptor_argument_);
  } else {
    descriptor_argument_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.TVFArgumentProto)
}

inline void TVFArgumentProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scalar_argument_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&descriptor_argument_) -
    reinterpret_cast<char*>(&scalar_argument_)) + sizeof(descriptor_argument_));
}

TVFArgumentProto::~TVFArgumentProto() {
  // @@protoc_insertion_point(destructor:zetasql.TVFArgumentProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TVFArgumentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete scalar_argument_;
  if (this != internal_default_instance()) delete relation_argument_;
  if (this != internal_default_instance()) delete model_argument_;
  if (this != internal_default_instance()) delete connection_argument_;
  if (this != internal_default_instance()) delete descriptor_argument_;
}

void TVFArgumentProto::ArenaDtor(void* object) {
  TVFArgumentProto* _this = reinterpret_cast< TVFArgumentProto* >(object);
  (void)_this;
}
void TVFArgumentProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TVFArgumentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TVFArgumentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TVFArgumentProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(scalar_argument_ != nullptr);
      scalar_argument_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(relation_argument_ != nullptr);
      relation_argument_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(model_argument_ != nullptr);
      model_argument_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(connection_argument_ != nullptr);
      connection_argument_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(descriptor_argument_ != nullptr);
      descriptor_argument_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TVFArgumentProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.ValueWithTypeProto scalar_argument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar_argument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TVFRelationProto relation_argument = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation_argument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TVFModelProto model_argument = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_argument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TVFConnectionProto connection_argument = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_argument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TVFDescriptorProto descriptor_argument = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_descriptor_argument(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TVFArgumentProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TVFArgumentProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.ValueWithTypeProto scalar_argument = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::scalar_argument(this), target, stream);
  }

  // optional .zetasql.TVFRelationProto relation_argument = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::relation_argument(this), target, stream);
  }

  // optional .zetasql.TVFModelProto model_argument = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::model_argument(this), target, stream);
  }

  // optional .zetasql.TVFConnectionProto connection_argument = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::connection_argument(this), target, stream);
  }

  // optional .zetasql.TVFDescriptorProto descriptor_argument = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::descriptor_argument(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TVFArgumentProto)
  return target;
}

size_t TVFArgumentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TVFArgumentProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .zetasql.ValueWithTypeProto scalar_argument = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scalar_argument_);
    }

    // optional .zetasql.TVFRelationProto relation_argument = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relation_argument_);
    }

    // optional .zetasql.TVFModelProto model_argument = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_argument_);
    }

    // optional .zetasql.TVFConnectionProto connection_argument = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connection_argument_);
    }

    // optional .zetasql.TVFDescriptorProto descriptor_argument = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *descriptor_argument_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TVFArgumentProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TVFArgumentProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TVFArgumentProto::GetClassData() const { return &_class_data_; }

void TVFArgumentProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TVFArgumentProto *>(to)->MergeFrom(
      static_cast<const TVFArgumentProto &>(from));
}


void TVFArgumentProto::MergeFrom(const TVFArgumentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TVFArgumentProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_scalar_argument()->::zetasql::ValueWithTypeProto::MergeFrom(from._internal_scalar_argument());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_relation_argument()->::zetasql::TVFRelationProto::MergeFrom(from._internal_relation_argument());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_model_argument()->::zetasql::TVFModelProto::MergeFrom(from._internal_model_argument());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_connection_argument()->::zetasql::TVFConnectionProto::MergeFrom(from._internal_connection_argument());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_descriptor_argument()->::zetasql::TVFDescriptorProto::MergeFrom(from._internal_descriptor_argument());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TVFArgumentProto::CopyFrom(const TVFArgumentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TVFArgumentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVFArgumentProto::IsInitialized() const {
  if (_internal_has_scalar_argument()) {
    if (!scalar_argument_->IsInitialized()) return false;
  }
  if (_internal_has_relation_argument()) {
    if (!relation_argument_->IsInitialized()) return false;
  }
  return true;
}

void TVFArgumentProto::InternalSwap(TVFArgumentProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TVFArgumentProto, descriptor_argument_)
      + sizeof(TVFArgumentProto::descriptor_argument_)
      - PROTOBUF_FIELD_OFFSET(TVFArgumentProto, scalar_argument_)>(
          reinterpret_cast<char*>(&scalar_argument_),
          reinterpret_cast<char*>(&other->scalar_argument_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TVFArgumentProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[15]);
}

// ===================================================================

class TVFSignatureOptionsProto::_Internal {
 public:
};

void TVFSignatureOptionsProto::clear_additional_deprecation_warning() {
  additional_deprecation_warning_.Clear();
}
TVFSignatureOptionsProto::TVFSignatureOptionsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_deprecation_warning_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.TVFSignatureOptionsProto)
}
TVFSignatureOptionsProto::TVFSignatureOptionsProto(const TVFSignatureOptionsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_deprecation_warning_(from.additional_deprecation_warning_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.TVFSignatureOptionsProto)
}

inline void TVFSignatureOptionsProto::SharedCtor() {
}

TVFSignatureOptionsProto::~TVFSignatureOptionsProto() {
  // @@protoc_insertion_point(destructor:zetasql.TVFSignatureOptionsProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TVFSignatureOptionsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TVFSignatureOptionsProto::ArenaDtor(void* object) {
  TVFSignatureOptionsProto* _this = reinterpret_cast< TVFSignatureOptionsProto* >(object);
  (void)_this;
}
void TVFSignatureOptionsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TVFSignatureOptionsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TVFSignatureOptionsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TVFSignatureOptionsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_deprecation_warning_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TVFSignatureOptionsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zetasql.FreestandingDeprecationWarning additional_deprecation_warning = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_deprecation_warning(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TVFSignatureOptionsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TVFSignatureOptionsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zetasql.FreestandingDeprecationWarning additional_deprecation_warning = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_deprecation_warning_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_deprecation_warning(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TVFSignatureOptionsProto)
  return target;
}

size_t TVFSignatureOptionsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TVFSignatureOptionsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.FreestandingDeprecationWarning additional_deprecation_warning = 1;
  total_size += 1UL * this->_internal_additional_deprecation_warning_size();
  for (const auto& msg : this->additional_deprecation_warning_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TVFSignatureOptionsProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TVFSignatureOptionsProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TVFSignatureOptionsProto::GetClassData() const { return &_class_data_; }

void TVFSignatureOptionsProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TVFSignatureOptionsProto *>(to)->MergeFrom(
      static_cast<const TVFSignatureOptionsProto &>(from));
}


void TVFSignatureOptionsProto::MergeFrom(const TVFSignatureOptionsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TVFSignatureOptionsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  additional_deprecation_warning_.MergeFrom(from.additional_deprecation_warning_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TVFSignatureOptionsProto::CopyFrom(const TVFSignatureOptionsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TVFSignatureOptionsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVFSignatureOptionsProto::IsInitialized() const {
  return true;
}

void TVFSignatureOptionsProto::InternalSwap(TVFSignatureOptionsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_deprecation_warning_.InternalSwap(&other->additional_deprecation_warning_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TVFSignatureOptionsProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[16]);
}

// ===================================================================

class TVFSignatureProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TVFSignatureProto>()._has_bits_);
  static const ::zetasql::TVFRelationProto& output_schema(const TVFSignatureProto* msg);
  static void set_has_output_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TVFSignatureOptionsProto& options(const TVFSignatureProto* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::TVFRelationProto&
TVFSignatureProto::_Internal::output_schema(const TVFSignatureProto* msg) {
  return *msg->output_schema_;
}
const ::zetasql::TVFSignatureOptionsProto&
TVFSignatureProto::_Internal::options(const TVFSignatureProto* msg) {
  return *msg->options_;
}
TVFSignatureProto::TVFSignatureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  argument_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.TVFSignatureProto)
}
TVFSignatureProto::TVFSignatureProto(const TVFSignatureProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argument_(from.argument_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_output_schema()) {
    output_schema_ = new ::zetasql::TVFRelationProto(*from.output_schema_);
  } else {
    output_schema_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::zetasql::TVFSignatureOptionsProto(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.TVFSignatureProto)
}

inline void TVFSignatureProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&output_schema_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&options_) -
    reinterpret_cast<char*>(&output_schema_)) + sizeof(options_));
}

TVFSignatureProto::~TVFSignatureProto() {
  // @@protoc_insertion_point(destructor:zetasql.TVFSignatureProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TVFSignatureProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete output_schema_;
  if (this != internal_default_instance()) delete options_;
}

void TVFSignatureProto::ArenaDtor(void* object) {
  TVFSignatureProto* _this = reinterpret_cast< TVFSignatureProto* >(object);
  (void)_this;
}
void TVFSignatureProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TVFSignatureProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TVFSignatureProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TVFSignatureProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  argument_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(output_schema_ != nullptr);
      output_schema_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TVFSignatureProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zetasql.TVFArgumentProto argument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_argument(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TVFRelationProto output_schema = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.TVFSignatureOptionsProto options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TVFSignatureProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TVFSignatureProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zetasql.TVFArgumentProto argument = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_argument_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_argument(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.TVFRelationProto output_schema = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::output_schema(this), target, stream);
  }

  // optional .zetasql.TVFSignatureOptionsProto options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TVFSignatureProto)
  return target;
}

size_t TVFSignatureProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TVFSignatureProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.TVFArgumentProto argument = 1;
  total_size += 1UL * this->_internal_argument_size();
  for (const auto& msg : this->argument_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .zetasql.TVFRelationProto output_schema = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *output_schema_);
    }

    // optional .zetasql.TVFSignatureOptionsProto options = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TVFSignatureProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TVFSignatureProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TVFSignatureProto::GetClassData() const { return &_class_data_; }

void TVFSignatureProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TVFSignatureProto *>(to)->MergeFrom(
      static_cast<const TVFSignatureProto &>(from));
}


void TVFSignatureProto::MergeFrom(const TVFSignatureProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TVFSignatureProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  argument_.MergeFrom(from.argument_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_output_schema()->::zetasql::TVFRelationProto::MergeFrom(from._internal_output_schema());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_options()->::zetasql::TVFSignatureOptionsProto::MergeFrom(from._internal_options());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TVFSignatureProto::CopyFrom(const TVFSignatureProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TVFSignatureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVFSignatureProto::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(argument_))
    return false;
  if (_internal_has_output_schema()) {
    if (!output_schema_->IsInitialized()) return false;
  }
  return true;
}

void TVFSignatureProto::InternalSwap(TVFSignatureProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  argument_.InternalSwap(&other->argument_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TVFSignatureProto, options_)
      + sizeof(TVFSignatureProto::options_)
      - PROTOBUF_FIELD_OFFSET(TVFSignatureProto, output_schema_)>(
          reinterpret_cast<char*>(&output_schema_),
          reinterpret_cast<char*>(&other->output_schema_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TVFSignatureProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[17]);
}

// ===================================================================

class ProcedureProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcedureProto>()._has_bits_);
  static const ::zetasql::FunctionSignatureProto& signature(const ProcedureProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::FunctionSignatureProto&
ProcedureProto::_Internal::signature(const ProcedureProto* msg) {
  return *msg->signature_;
}
ProcedureProto::ProcedureProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ProcedureProto)
}
ProcedureProto::ProcedureProto(const ProcedureProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signature()) {
    signature_ = new ::zetasql::FunctionSignatureProto(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ProcedureProto)
}

inline void ProcedureProto::SharedCtor() {
signature_ = nullptr;
}

ProcedureProto::~ProcedureProto() {
  // @@protoc_insertion_point(destructor:zetasql.ProcedureProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcedureProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete signature_;
}

void ProcedureProto::ArenaDtor(void* object) {
  ProcedureProto* _this = reinterpret_cast< ProcedureProto* >(object);
  (void)_this;
}
void ProcedureProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcedureProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcedureProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ProcedureProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(signature_ != nullptr);
    signature_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcedureProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string name_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.ProcedureProto.name_path");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.FunctionSignatureProto signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcedureProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ProcedureProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name_path = 1;
  for (int i = 0, n = this->_internal_name_path_size(); i < n; i++) {
    const auto& s = this->_internal_name_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.ProcedureProto.name_path");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.FunctionSignatureProto signature = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ProcedureProto)
  return target;
}

size_t ProcedureProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ProcedureProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name_path = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_path_.size());
  for (int i = 0, n = name_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_path_.Get(i));
  }

  // optional .zetasql.FunctionSignatureProto signature = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcedureProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcedureProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcedureProto::GetClassData() const { return &_class_data_; }

void ProcedureProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcedureProto *>(to)->MergeFrom(
      static_cast<const ProcedureProto &>(from));
}


void ProcedureProto::MergeFrom(const ProcedureProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ProcedureProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  name_path_.MergeFrom(from.name_path_);
  if (from._internal_has_signature()) {
    _internal_mutable_signature()->::zetasql::FunctionSignatureProto::MergeFrom(from._internal_signature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcedureProto::CopyFrom(const ProcedureProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ProcedureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcedureProto::IsInitialized() const {
  if (_internal_has_signature()) {
    if (!signature_->IsInitialized()) return false;
  }
  return true;
}

void ProcedureProto::InternalSwap(ProcedureProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_path_.InternalSwap(&other->name_path_);
  swap(signature_, other->signature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcedureProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fproto_2ffunction_2eproto_getter, &descriptor_table_zetasql_2fproto_2ffunction_2eproto_once,
      file_level_metadata_zetasql_2fproto_2ffunction_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::TVFRelationColumnProto* Arena::CreateMaybeMessage< ::zetasql::TVFRelationColumnProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TVFRelationColumnProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::TVFRelationProto* Arena::CreateMaybeMessage< ::zetasql::TVFRelationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TVFRelationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::TVFModelProto* Arena::CreateMaybeMessage< ::zetasql::TVFModelProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TVFModelProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::TVFConnectionProto* Arena::CreateMaybeMessage< ::zetasql::TVFConnectionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TVFConnectionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::TVFDescriptorProto* Arena::CreateMaybeMessage< ::zetasql::TVFDescriptorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TVFDescriptorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::FunctionArgumentTypeOptionsProto* Arena::CreateMaybeMessage< ::zetasql::FunctionArgumentTypeOptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::FunctionArgumentTypeOptionsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ArgumentTypeLambdaProto* Arena::CreateMaybeMessage< ::zetasql::ArgumentTypeLambdaProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ArgumentTypeLambdaProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::FunctionArgumentTypeProto* Arena::CreateMaybeMessage< ::zetasql::FunctionArgumentTypeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::FunctionArgumentTypeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::FunctionSignatureOptionsProto* Arena::CreateMaybeMessage< ::zetasql::FunctionSignatureOptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::FunctionSignatureOptionsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::FunctionSignatureProto* Arena::CreateMaybeMessage< ::zetasql::FunctionSignatureProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::FunctionSignatureProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::FunctionOptionsProto* Arena::CreateMaybeMessage< ::zetasql::FunctionOptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::FunctionOptionsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::FunctionProto* Arena::CreateMaybeMessage< ::zetasql::FunctionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::FunctionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFunctionCallInfoProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedFunctionCallInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFunctionCallInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::TableValuedFunctionOptionsProto* Arena::CreateMaybeMessage< ::zetasql::TableValuedFunctionOptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TableValuedFunctionOptionsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::TableValuedFunctionProto* Arena::CreateMaybeMessage< ::zetasql::TableValuedFunctionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TableValuedFunctionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::TVFArgumentProto* Arena::CreateMaybeMessage< ::zetasql::TVFArgumentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TVFArgumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::TVFSignatureOptionsProto* Arena::CreateMaybeMessage< ::zetasql::TVFSignatureOptionsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TVFSignatureOptionsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::TVFSignatureProto* Arena::CreateMaybeMessage< ::zetasql::TVFSignatureProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TVFSignatureProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ProcedureProto* Arena::CreateMaybeMessage< ::zetasql::ProcedureProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ProcedureProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
