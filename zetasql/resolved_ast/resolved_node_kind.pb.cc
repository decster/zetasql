// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/resolved_ast/resolved_node_kind.proto

#include "zetasql/resolved_ast/resolved_node_kind.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zetasql {
}  // namespace zetasql
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto = nullptr;
const uint32_t TableStruct_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-zetasql/resolved_ast/resolved_node_kin"
  "d.proto\022\007zetasql*\315*\n\020ResolvedNodeKind\022\024\n"
  "\020RESOLVED_LITERAL\020\003\022\026\n\022RESOLVED_PARAMETE"
  "R\020\004\022\036\n\032RESOLVED_EXPRESSION_COLUMN\020\005\022\027\n\023R"
  "ESOLVED_COLUMN_REF\020\006\022\025\n\021RESOLVED_CONSTAN"
  "T\020g\022\035\n\030RESOLVED_SYSTEM_VARIABLE\020\213\001\022\033\n\026RE"
  "SOLVED_INLINE_LAMBDA\020\237\001\022\036\n\031RESOLVED_FILT"
  "ER_FIELD_ARG\020\255\001\022\032\n\025RESOLVED_FILTER_FIELD"
  "\020\256\001\022\032\n\026RESOLVED_FUNCTION_CALL\020\010\022$\n RESOL"
  "VED_AGGREGATE_FUNCTION_CALL\020\t\022#\n\037RESOLVE"
  "D_ANALYTIC_FUNCTION_CALL\020\n\022#\n\036RESOLVED_E"
  "XTENDED_CAST_ELEMENT\020\227\001\022\033\n\026RESOLVED_EXTE"
  "NDED_CAST\020\236\001\022\021\n\rRESOLVED_CAST\020\013\022\030\n\024RESOL"
  "VED_MAKE_STRUCT\020\014\022\027\n\023RESOLVED_MAKE_PROTO"
  "\020\r\022\035\n\031RESOLVED_MAKE_PROTO_FIELD\020\016\022\035\n\031RES"
  "OLVED_GET_STRUCT_FIELD\020\017\022\034\n\030RESOLVED_GET"
  "_PROTO_FIELD\020\020\022\034\n\027RESOLVED_GET_JSON_FIEL"
  "D\020\245\001\022\025\n\020RESOLVED_FLATTEN\020\225\001\022\033\n\026RESOLVED_"
  "FLATTENED_ARG\020\226\001\022 \n\033RESOLVED_REPLACE_FIE"
  "LD_ITEM\020\200\001\022\033\n\026RESOLVED_REPLACE_FIELD\020\201\001\022"
  "\032\n\026RESOLVED_SUBQUERY_EXPR\020\021\022\022\n\016RESOLVED_"
  "MODEL\020m\022\030\n\023RESOLVED_CONNECTION\020\215\001\022\030\n\023RES"
  "OLVED_DESCRIPTOR\020\220\001\022\034\n\030RESOLVED_SINGLE_R"
  "OW_SCAN\020\023\022\027\n\023RESOLVED_TABLE_SCAN\020\024\022\026\n\022RE"
  "SOLVED_JOIN_SCAN\020\025\022\027\n\023RESOLVED_ARRAY_SCA"
  "N\020\026\022\032\n\026RESOLVED_COLUMN_HOLDER\020\027\022\030\n\024RESOL"
  "VED_FILTER_SCAN\020\030\022\031\n\025RESOLVED_GROUPING_S"
  "ET\020]\022\033\n\027RESOLVED_AGGREGATE_SCAN\020\031\022&\n\"RES"
  "OLVED_ANONYMIZED_AGGREGATE_SCAN\020p\022\037\n\033RES"
  "OLVED_SET_OPERATION_ITEM\020^\022\037\n\033RESOLVED_S"
  "ET_OPERATION_SCAN\020\032\022\032\n\026RESOLVED_ORDER_BY"
  "_SCAN\020\033\022\036\n\032RESOLVED_LIMIT_OFFSET_SCAN\020\034\022"
  "\032\n\026RESOLVED_WITH_REF_SCAN\020\035\022\032\n\026RESOLVED_"
  "ANALYTIC_SCAN\020\036\022\030\n\024RESOLVED_SAMPLE_SCAN\020"
  "\037\022\034\n\030RESOLVED_COMPUTED_COLUMN\020 \022\032\n\026RESOL"
  "VED_ORDER_BY_ITEM\020!\022\037\n\033RESOLVED_COLUMN_A"
  "NNOTATIONS\020h\022\"\n\036RESOLVED_GENERATED_COLUM"
  "N_INFO\020i\022\"\n\035RESOLVED_COLUMN_DEFAULT_VALU"
  "E\020\274\001\022\036\n\032RESOLVED_COLUMN_DEFINITION\020[\022\030\n\024"
  "RESOLVED_PRIMARY_KEY\020\\\022\030\n\024RESOLVED_FOREI"
  "GN_KEY\020n\022\035\n\031RESOLVED_CHECK_CONSTRAINT\020q\022"
  "\032\n\026RESOLVED_OUTPUT_COLUMN\020\"\022\031\n\025RESOLVED_"
  "PROJECT_SCAN\020#\022\024\n\020RESOLVED_TVFSCAN\020Q\022\035\n\030"
  "RESOLVED_GROUP_ROWS_SCAN\020\260\001\022\036\n\032RESOLVED_"
  "FUNCTION_ARGUMENT\020R\022\031\n\025RESOLVED_EXPLAIN_"
  "STMT\020%\022\027\n\023RESOLVED_QUERY_STMT\020&\022!\n\035RESOL"
  "VED_CREATE_DATABASE_STMT\020_\022\027\n\023RESOLVED_I"
  "NDEX_ITEM\020`\022\030\n\024RESOLVED_UNNEST_ITEM\020~\022\036\n"
  "\032RESOLVED_CREATE_INDEX_STMT\020a\022 \n\033RESOLVE"
  "D_CREATE_SCHEMA_STMT\020\235\001\022\036\n\032RESOLVED_CREA"
  "TE_TABLE_STMT\020Z\022(\n$RESOLVED_CREATE_TABLE"
  "_AS_SELECT_STMT\020(\022\036\n\032RESOLVED_CREATE_MOD"
  "EL_STMT\020k\022\035\n\031RESOLVED_CREATE_VIEW_STMT\020)"
  "\022$\n\037RESOLVED_WITH_PARTITION_COLUMNS\020\231\001\022("
  "\n#RESOLVED_CREATE_SNAPSHOT_TABLE_STMT\020\266\001"
  "\022\'\n#RESOLVED_CREATE_EXTERNAL_TABLE_STMT\020"
  "*\022\037\n\032RESOLVED_EXPORT_MODEL_STMT\020\230\001\022\035\n\031RE"
  "SOLVED_EXPORT_DATA_STMT\020+\022\036\n\032RESOLVED_DE"
  "FINE_TABLE_STMT\020,\022\032\n\026RESOLVED_DESCRIBE_S"
  "TMT\020-\022\026\n\022RESOLVED_SHOW_STMT\020.\022\027\n\023RESOLVE"
  "D_BEGIN_STMT\020/\022!\n\035RESOLVED_SET_TRANSACTI"
  "ON_STMT\020x\022\030\n\024RESOLVED_COMMIT_STMT\0200\022\032\n\026R"
  "ESOLVED_ROLLBACK_STMT\0201\022\035\n\031RESOLVED_STAR"
  "T_BATCH_STMT\020z\022\033\n\027RESOLVED_RUN_BATCH_STM"
  "T\020{\022\035\n\031RESOLVED_ABORT_BATCH_STMT\020|\022\026\n\022RE"
  "SOLVED_DROP_STMT\0202\022(\n$RESOLVED_DROP_MATE"
  "RIALIZED_VIEW_STMT\020y\022&\n!RESOLVED_DROP_SN"
  "APSHOT_TABLE_STMT\020\267\001\022 \n\033RESOLVED_RECURSI"
  "VE_REF_SCAN\020\223\001\022\034\n\027RESOLVED_RECURSIVE_SCA"
  "N\020\224\001\022\026\n\022RESOLVED_WITH_SCAN\0203\022\027\n\023RESOLVED"
  "_WITH_ENTRY\0204\022\023\n\017RESOLVED_OPTION\0205\022 \n\034RE"
  "SOLVED_WINDOW_PARTITIONING\0206\022\034\n\030RESOLVED"
  "_WINDOW_ORDERING\0207\022\031\n\025RESOLVED_WINDOW_FR"
  "AME\0208\022$\n RESOLVED_ANALYTIC_FUNCTION_GROU"
  "P\0209\022\036\n\032RESOLVED_WINDOW_FRAME_EXPR\020:\022\025\n\021R"
  "ESOLVED_DMLVALUE\020;\022\027\n\023RESOLVED_DMLDEFAUL"
  "T\020<\022\030\n\024RESOLVED_ASSERT_STMT\020b\022!\n\035RESOLVE"
  "D_ASSERT_ROWS_MODIFIED\020=\022\027\n\023RESOLVED_INS"
  "ERT_ROW\020>\022\030\n\024RESOLVED_INSERT_STMT\020\?\022\030\n\024R"
  "ESOLVED_DELETE_STMT\020@\022\030\n\024RESOLVED_UPDATE"
  "_ITEM\020A\022\036\n\032RESOLVED_UPDATE_ARRAY_ITEM\020f\022"
  "\030\n\024RESOLVED_UPDATE_STMT\020B\022\027\n\023RESOLVED_ME"
  "RGE_WHEN\020d\022\027\n\023RESOLVED_MERGE_STMT\020e\022\033\n\026R"
  "ESOLVED_TRUNCATE_STMT\020\205\001\022\026\n\022RESOLVED_PRI"
  "VILEGE\020C\022\027\n\023RESOLVED_GRANT_STMT\020E\022\030\n\024RES"
  "OLVED_REVOKE_STMT\020F\022!\n\034RESOLVED_ALTER_DA"
  "TABASE_STMT\020\206\001\022)\n%RESOLVED_ALTER_MATERIA"
  "LIZED_VIEW_STMT\020\177\022\037\n\032RESOLVED_ALTER_SCHE"
  "MA_STMT\020\240\001\022\035\n\031RESOLVED_ALTER_TABLE_STMT\020"
  "s\022\034\n\030RESOLVED_ALTER_VIEW_STMT\020v\022\037\n\033RESOL"
  "VED_SET_OPTIONS_ACTION\020u\022\037\n\032RESOLVED_ADD"
  "_COLUMN_ACTION\020\203\001\022#\n\036RESOLVED_ADD_CONSTR"
  "AINT_ACTION\020\243\001\022$\n\037RESOLVED_DROP_CONSTRAI"
  "NT_ACTION\020\244\001\022%\n RESOLVED_DROP_PRIMARY_KE"
  "Y_ACTION\020\270\001\022)\n$RESOLVED_ALTER_COLUMN_OPT"
  "IONS_ACTION\020\251\001\022/\n*RESOLVED_ALTER_COLUMN_"
  "DROP_NOT_NULL_ACTION\020\262\001\022/\n*RESOLVED_ALTE"
  "R_COLUMN_SET_DATA_TYPE_ACTION\020\265\001\022 \n\033RESO"
  "LVED_DROP_COLUMN_ACTION\020\204\001\022\"\n\035RESOLVED_R"
  "ENAME_COLUMN_ACTION\020\271\001\022\033\n\026RESOLVED_SET_A"
  "S_ACTION\020\234\001\022 \n\033RESOLVED_SET_COLLATE_CLAU"
  "SE\020\273\001\022)\n%RESOLVED_ALTER_TABLE_SET_OPTION"
  "S_STMT\020G\022\030\n\024RESOLVED_RENAME_STMT\020H\022*\n&RE"
  "SOLVED_CREATE_ROW_ACCESS_POLICY_STMT\020I\022("
  "\n$RESOLVED_DROP_ROW_ACCESS_POLICY_STMT\020J"
  "\022$\n\037RESOLVED_DROP_SEARCH_INDEX_STMT\020\276\001\022\035"
  "\n\030RESOLVED_GRANT_TO_ACTION\020\207\001\022!\n\034RESOLVE"
  "D_FILTER_USING_ACTION\020\210\001\022 \n\033RESOLVED_REV"
  "OKE_FROM_ACTION\020\211\001\022\036\n\031RESOLVED_RENAME_TO"
  "_ACTION\020\212\001\022)\n%RESOLVED_ALTER_ROW_ACCESS_"
  "POLICY_STMT\020K\0220\n+RESOLVED_ALTER_ALL_ROW_"
  "ACCESS_POLICIES_STMT\020\221\001\022!\n\035RESOLVED_CREA"
  "TE_CONSTANT_STMT\020c\022!\n\035RESOLVED_CREATE_FU"
  "NCTION_STMT\020L\022\031\n\025RESOLVED_ARGUMENT_DEF\020M"
  "\022\031\n\025RESOLVED_ARGUMENT_REF\020N\022\'\n#RESOLVED_"
  "CREATE_TABLE_FUNCTION_STMT\020X\022#\n\037RESOLVED"
  "_RELATION_ARGUMENT_SCAN\020Y\022\032\n\026RESOLVED_AR"
  "GUMENT_LIST\020O\022&\n\"RESOLVED_FUNCTION_SIGNA"
  "TURE_HOLDER\020T\022\037\n\033RESOLVED_DROP_FUNCTION_"
  "STMT\020P\022&\n!RESOLVED_DROP_TABLE_FUNCTION_S"
  "TMT\020\257\001\022\026\n\022RESOLVED_CALL_STMT\020S\022\030\n\024RESOLV"
  "ED_IMPORT_STMT\020V\022\030\n\024RESOLVED_MODULE_STMT"
  "\020W\022&\n\"RESOLVED_AGGREGATE_HAVING_MODIFIER"
  "\020U\022*\n&RESOLVED_CREATE_MATERIALIZED_VIEW_"
  "STMT\020w\022\"\n\036RESOLVED_CREATE_PROCEDURE_STMT"
  "\020}\022(\n#RESOLVED_EXECUTE_IMMEDIATE_ARGUMEN"
  "T\020\217\001\022$\n\037RESOLVED_EXECUTE_IMMEDIATE_STMT\020"
  "\214\001\022\035\n\030RESOLVED_ASSIGNMENT_STMT\020\216\001\022 \n\033RES"
  "OLVED_CREATE_ENTITY_STMT\020\232\001\022\037\n\032RESOLVED_"
  "ALTER_ENTITY_STMT\020\233\001\022\032\n\025RESOLVED_PIVOT_C"
  "OLUMN\020\246\001\022\030\n\023RESOLVED_PIVOT_SCAN\020\241\001\022\036\n\031RE"
  "SOLVED_RETURNING_CLAUSE\020\252\001\022\031\n\024RESOLVED_U"
  "NPIVOT_ARG\020\253\001\022\032\n\025RESOLVED_UNPIVOT_SCAN\020\254"
  "\001\022\035\n\030RESOLVED_CLONE_DATA_STMT\020\261\001\022#\n\036RESO"
  "LVED_TABLE_AND_COLUMN_INFO\020\263\001\022\032\n\025RESOLVE"
  "D_ANALYZE_STMT\020\264\001\022 \n\033RESOLVED_AUX_LOAD_D"
  "ATA_STMT\020\272\001\022;\n.__ResolvedNodeKind__switc"
  "h_must_have_default__\020\377\377\377\377\377\377\377\377\377\001B-\n\022com."
  "google.zetasqlB\027ZetaSQLResolvedNodeKind"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto = {
  false, false, 5559, descriptor_table_protodef_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto, "zetasql/resolved_ast/resolved_node_kind.proto", 
  &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto_once, nullptr, 0, 0,
  schemas, file_default_instances, TableStruct_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto::offsets,
  nullptr, file_level_enum_descriptors_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto, file_level_service_descriptors_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto_getter() {
  return &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto(&descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto);
namespace zetasql {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResolvedNodeKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto);
  return file_level_enum_descriptors_zetasql_2fresolved_5fast_2fresolved_5fnode_5fkind_2eproto[0];
}
bool ResolvedNodeKind_IsValid(int value) {
  switch (value) {
    case -1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 107:
    case 109:
    case 110:
    case 112:
    case 113:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 163:
    case 164:
    case 165:
    case 166:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 190:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
