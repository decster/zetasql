// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/resolved_ast/resolved_ast.proto

#include "zetasql/resolved_ast/resolved_ast.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zetasql {
constexpr AnyResolvedNodeProto::AnyResolvedNodeProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedNodeProtoDefaultTypeInternal {
  constexpr AnyResolvedNodeProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedNodeProtoDefaultTypeInternal() {}
  union {
    AnyResolvedNodeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedNodeProtoDefaultTypeInternal _AnyResolvedNodeProto_default_instance_;
constexpr AnyResolvedArgumentProto::AnyResolvedArgumentProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedArgumentProtoDefaultTypeInternal {
  constexpr AnyResolvedArgumentProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedArgumentProtoDefaultTypeInternal() {}
  union {
    AnyResolvedArgumentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedArgumentProtoDefaultTypeInternal _AnyResolvedArgumentProto_default_instance_;
constexpr ResolvedArgumentProto::ResolvedArgumentProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedArgumentProtoDefaultTypeInternal {
  constexpr ResolvedArgumentProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedArgumentProtoDefaultTypeInternal() {}
  union {
    ResolvedArgumentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedArgumentProtoDefaultTypeInternal _ResolvedArgumentProto_default_instance_;
constexpr AnyResolvedExprProto::AnyResolvedExprProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedExprProtoDefaultTypeInternal {
  constexpr AnyResolvedExprProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedExprProtoDefaultTypeInternal() {}
  union {
    AnyResolvedExprProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedExprProtoDefaultTypeInternal _AnyResolvedExprProto_default_instance_;
constexpr ResolvedExprProto::ResolvedExprProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , type_(nullptr)
  , type_annotation_map_(nullptr){}
struct ResolvedExprProtoDefaultTypeInternal {
  constexpr ResolvedExprProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedExprProtoDefaultTypeInternal() {}
  union {
    ResolvedExprProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedExprProtoDefaultTypeInternal _ResolvedExprProto_default_instance_;
constexpr ResolvedLiteralProto::ResolvedLiteralProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , value_(nullptr)
  , float_literal_id_(int64_t{0})
  , has_explicit_type_(false)
  , preserve_in_literal_remover_(false){}
struct ResolvedLiteralProtoDefaultTypeInternal {
  constexpr ResolvedLiteralProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedLiteralProtoDefaultTypeInternal() {}
  union {
    ResolvedLiteralProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedLiteralProtoDefaultTypeInternal _ResolvedLiteralProto_default_instance_;
constexpr ResolvedParameterProto::ResolvedParameterProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , position_(int64_t{0})
  , is_untyped_(false){}
struct ResolvedParameterProtoDefaultTypeInternal {
  constexpr ResolvedParameterProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedParameterProtoDefaultTypeInternal() {}
  union {
    ResolvedParameterProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedParameterProtoDefaultTypeInternal _ResolvedParameterProto_default_instance_;
constexpr ResolvedExpressionColumnProto::ResolvedExpressionColumnProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr){}
struct ResolvedExpressionColumnProtoDefaultTypeInternal {
  constexpr ResolvedExpressionColumnProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedExpressionColumnProtoDefaultTypeInternal() {}
  union {
    ResolvedExpressionColumnProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedExpressionColumnProtoDefaultTypeInternal _ResolvedExpressionColumnProto_default_instance_;
constexpr ResolvedColumnRefProto::ResolvedColumnRefProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , column_(nullptr)
  , is_correlated_(false){}
struct ResolvedColumnRefProtoDefaultTypeInternal {
  constexpr ResolvedColumnRefProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedColumnRefProtoDefaultTypeInternal() {}
  union {
    ResolvedColumnRefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedColumnRefProtoDefaultTypeInternal _ResolvedColumnRefProto_default_instance_;
constexpr ResolvedConstantProto::ResolvedConstantProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , constant_(nullptr){}
struct ResolvedConstantProtoDefaultTypeInternal {
  constexpr ResolvedConstantProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedConstantProtoDefaultTypeInternal() {}
  union {
    ResolvedConstantProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedConstantProtoDefaultTypeInternal _ResolvedConstantProto_default_instance_;
constexpr ResolvedSystemVariableProto::ResolvedSystemVariableProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , parent_(nullptr){}
struct ResolvedSystemVariableProtoDefaultTypeInternal {
  constexpr ResolvedSystemVariableProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedSystemVariableProtoDefaultTypeInternal() {}
  union {
    ResolvedSystemVariableProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedSystemVariableProtoDefaultTypeInternal _ResolvedSystemVariableProto_default_instance_;
constexpr ResolvedInlineLambdaProto::ResolvedInlineLambdaProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argument_list_()
  , parameter_list_()
  , parent_(nullptr)
  , body_(nullptr){}
struct ResolvedInlineLambdaProtoDefaultTypeInternal {
  constexpr ResolvedInlineLambdaProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedInlineLambdaProtoDefaultTypeInternal() {}
  union {
    ResolvedInlineLambdaProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedInlineLambdaProtoDefaultTypeInternal _ResolvedInlineLambdaProto_default_instance_;
constexpr ResolvedFilterFieldArgProto::ResolvedFilterFieldArgProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_descriptor_path_()
  , parent_(nullptr)
  , include_(false){}
struct ResolvedFilterFieldArgProtoDefaultTypeInternal {
  constexpr ResolvedFilterFieldArgProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedFilterFieldArgProtoDefaultTypeInternal() {}
  union {
    ResolvedFilterFieldArgProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedFilterFieldArgProtoDefaultTypeInternal _ResolvedFilterFieldArgProto_default_instance_;
constexpr ResolvedFilterFieldProto::ResolvedFilterFieldProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_field_arg_list_()
  , parent_(nullptr)
  , expr_(nullptr){}
struct ResolvedFilterFieldProtoDefaultTypeInternal {
  constexpr ResolvedFilterFieldProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedFilterFieldProtoDefaultTypeInternal() {}
  union {
    ResolvedFilterFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedFilterFieldProtoDefaultTypeInternal _ResolvedFilterFieldProto_default_instance_;
constexpr AnyResolvedFunctionCallBaseProto::AnyResolvedFunctionCallBaseProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedFunctionCallBaseProtoDefaultTypeInternal {
  constexpr AnyResolvedFunctionCallBaseProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedFunctionCallBaseProtoDefaultTypeInternal() {}
  union {
    AnyResolvedFunctionCallBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedFunctionCallBaseProtoDefaultTypeInternal _AnyResolvedFunctionCallBaseProto_default_instance_;
constexpr ResolvedFunctionCallBaseProto::ResolvedFunctionCallBaseProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argument_list_()
  , generic_argument_list_()
  , hint_list_()
  , collation_list_()
  , parent_(nullptr)
  , function_(nullptr)
  , signature_(nullptr)
  , error_mode_(0)
{}
struct ResolvedFunctionCallBaseProtoDefaultTypeInternal {
  constexpr ResolvedFunctionCallBaseProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedFunctionCallBaseProtoDefaultTypeInternal() {}
  union {
    ResolvedFunctionCallBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedFunctionCallBaseProtoDefaultTypeInternal _ResolvedFunctionCallBaseProto_default_instance_;
constexpr ResolvedFunctionCallProto::ResolvedFunctionCallProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , function_call_info_(nullptr){}
struct ResolvedFunctionCallProtoDefaultTypeInternal {
  constexpr ResolvedFunctionCallProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedFunctionCallProtoDefaultTypeInternal() {}
  union {
    ResolvedFunctionCallProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedFunctionCallProtoDefaultTypeInternal _ResolvedFunctionCallProto_default_instance_;
constexpr AnyResolvedNonScalarFunctionCallBaseProto::AnyResolvedNonScalarFunctionCallBaseProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal {
  constexpr AnyResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal() {}
  union {
    AnyResolvedNonScalarFunctionCallBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal _AnyResolvedNonScalarFunctionCallBaseProto_default_instance_;
constexpr ResolvedNonScalarFunctionCallBaseProto::ResolvedNonScalarFunctionCallBaseProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : with_group_rows_parameter_list_()
  , parent_(nullptr)
  , with_group_rows_subquery_(nullptr)
  , distinct_(false)
  , null_handling_modifier_(0)
{}
struct ResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal {
  constexpr ResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal() {}
  union {
    ResolvedNonScalarFunctionCallBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedNonScalarFunctionCallBaseProtoDefaultTypeInternal _ResolvedNonScalarFunctionCallBaseProto_default_instance_;
constexpr ResolvedAggregateFunctionCallProto::ResolvedAggregateFunctionCallProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_by_item_list_()
  , parent_(nullptr)
  , limit_(nullptr)
  , having_modifier_(nullptr)
  , function_call_info_(nullptr){}
struct ResolvedAggregateFunctionCallProtoDefaultTypeInternal {
  constexpr ResolvedAggregateFunctionCallProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAggregateFunctionCallProtoDefaultTypeInternal() {}
  union {
    ResolvedAggregateFunctionCallProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAggregateFunctionCallProtoDefaultTypeInternal _ResolvedAggregateFunctionCallProto_default_instance_;
constexpr ResolvedAnalyticFunctionCallProto::ResolvedAnalyticFunctionCallProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , window_frame_(nullptr){}
struct ResolvedAnalyticFunctionCallProtoDefaultTypeInternal {
  constexpr ResolvedAnalyticFunctionCallProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAnalyticFunctionCallProtoDefaultTypeInternal() {}
  union {
    ResolvedAnalyticFunctionCallProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAnalyticFunctionCallProtoDefaultTypeInternal _ResolvedAnalyticFunctionCallProto_default_instance_;
constexpr ResolvedExtendedCastElementProto::ResolvedExtendedCastElementProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , from_type_(nullptr)
  , to_type_(nullptr)
  , function_(nullptr){}
struct ResolvedExtendedCastElementProtoDefaultTypeInternal {
  constexpr ResolvedExtendedCastElementProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedExtendedCastElementProtoDefaultTypeInternal() {}
  union {
    ResolvedExtendedCastElementProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedExtendedCastElementProtoDefaultTypeInternal _ResolvedExtendedCastElementProto_default_instance_;
constexpr ResolvedExtendedCastProto::ResolvedExtendedCastProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_list_()
  , parent_(nullptr){}
struct ResolvedExtendedCastProtoDefaultTypeInternal {
  constexpr ResolvedExtendedCastProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedExtendedCastProtoDefaultTypeInternal() {}
  union {
    ResolvedExtendedCastProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedExtendedCastProtoDefaultTypeInternal _ResolvedExtendedCastProto_default_instance_;
constexpr ResolvedCastProto::ResolvedCastProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , expr_(nullptr)
  , extended_cast_(nullptr)
  , format_(nullptr)
  , time_zone_(nullptr)
  , type_parameters_(nullptr)
  , return_null_on_error_(false){}
struct ResolvedCastProtoDefaultTypeInternal {
  constexpr ResolvedCastProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCastProtoDefaultTypeInternal() {}
  union {
    ResolvedCastProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCastProtoDefaultTypeInternal _ResolvedCastProto_default_instance_;
constexpr ResolvedMakeStructProto::ResolvedMakeStructProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_list_()
  , parent_(nullptr){}
struct ResolvedMakeStructProtoDefaultTypeInternal {
  constexpr ResolvedMakeStructProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedMakeStructProtoDefaultTypeInternal() {}
  union {
    ResolvedMakeStructProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedMakeStructProtoDefaultTypeInternal _ResolvedMakeStructProto_default_instance_;
constexpr ResolvedMakeProtoProto::ResolvedMakeProtoProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_list_()
  , parent_(nullptr){}
struct ResolvedMakeProtoProtoDefaultTypeInternal {
  constexpr ResolvedMakeProtoProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedMakeProtoProtoDefaultTypeInternal() {}
  union {
    ResolvedMakeProtoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedMakeProtoProtoDefaultTypeInternal _ResolvedMakeProtoProto_default_instance_;
constexpr ResolvedMakeProtoFieldProto::ResolvedMakeProtoFieldProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , field_descriptor_(nullptr)
  , expr_(nullptr)
  , format_(0)
{}
struct ResolvedMakeProtoFieldProtoDefaultTypeInternal {
  constexpr ResolvedMakeProtoFieldProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedMakeProtoFieldProtoDefaultTypeInternal() {}
  union {
    ResolvedMakeProtoFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedMakeProtoFieldProtoDefaultTypeInternal _ResolvedMakeProtoFieldProto_default_instance_;
constexpr ResolvedGetStructFieldProto::ResolvedGetStructFieldProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , expr_(nullptr)
  , field_idx_(int64_t{0}){}
struct ResolvedGetStructFieldProtoDefaultTypeInternal {
  constexpr ResolvedGetStructFieldProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedGetStructFieldProtoDefaultTypeInternal() {}
  union {
    ResolvedGetStructFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedGetStructFieldProtoDefaultTypeInternal _ResolvedGetStructFieldProto_default_instance_;
constexpr ResolvedGetProtoFieldProto::ResolvedGetProtoFieldProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , expr_(nullptr)
  , field_descriptor_(nullptr)
  , default_value_(nullptr)
  , format_(0)

  , get_has_bit_(false)
  , return_default_value_when_unset_(false){}
struct ResolvedGetProtoFieldProtoDefaultTypeInternal {
  constexpr ResolvedGetProtoFieldProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedGetProtoFieldProtoDefaultTypeInternal() {}
  union {
    ResolvedGetProtoFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedGetProtoFieldProtoDefaultTypeInternal _ResolvedGetProtoFieldProto_default_instance_;
constexpr ResolvedGetJsonFieldProto::ResolvedGetJsonFieldProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , expr_(nullptr){}
struct ResolvedGetJsonFieldProtoDefaultTypeInternal {
  constexpr ResolvedGetJsonFieldProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedGetJsonFieldProtoDefaultTypeInternal() {}
  union {
    ResolvedGetJsonFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedGetJsonFieldProtoDefaultTypeInternal _ResolvedGetJsonFieldProto_default_instance_;
constexpr ResolvedFlattenProto::ResolvedFlattenProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : get_field_list_()
  , parent_(nullptr)
  , expr_(nullptr){}
struct ResolvedFlattenProtoDefaultTypeInternal {
  constexpr ResolvedFlattenProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedFlattenProtoDefaultTypeInternal() {}
  union {
    ResolvedFlattenProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedFlattenProtoDefaultTypeInternal _ResolvedFlattenProto_default_instance_;
constexpr ResolvedFlattenedArgProto::ResolvedFlattenedArgProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedFlattenedArgProtoDefaultTypeInternal {
  constexpr ResolvedFlattenedArgProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedFlattenedArgProtoDefaultTypeInternal() {}
  union {
    ResolvedFlattenedArgProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedFlattenedArgProtoDefaultTypeInternal _ResolvedFlattenedArgProto_default_instance_;
constexpr ResolvedReplaceFieldItemProto::ResolvedReplaceFieldItemProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : struct_index_path_()
  , proto_field_path_()
  , parent_(nullptr)
  , expr_(nullptr){}
struct ResolvedReplaceFieldItemProtoDefaultTypeInternal {
  constexpr ResolvedReplaceFieldItemProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedReplaceFieldItemProtoDefaultTypeInternal() {}
  union {
    ResolvedReplaceFieldItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedReplaceFieldItemProtoDefaultTypeInternal _ResolvedReplaceFieldItemProto_default_instance_;
constexpr ResolvedReplaceFieldProto::ResolvedReplaceFieldProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replace_field_item_list_()
  , parent_(nullptr)
  , expr_(nullptr){}
struct ResolvedReplaceFieldProtoDefaultTypeInternal {
  constexpr ResolvedReplaceFieldProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedReplaceFieldProtoDefaultTypeInternal() {}
  union {
    ResolvedReplaceFieldProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedReplaceFieldProtoDefaultTypeInternal _ResolvedReplaceFieldProto_default_instance_;
constexpr ResolvedSubqueryExprProto::ResolvedSubqueryExprProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameter_list_()
  , hint_list_()
  , parent_(nullptr)
  , in_expr_(nullptr)
  , subquery_(nullptr)
  , subquery_type_(0)
{}
struct ResolvedSubqueryExprProtoDefaultTypeInternal {
  constexpr ResolvedSubqueryExprProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedSubqueryExprProtoDefaultTypeInternal() {}
  union {
    ResolvedSubqueryExprProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedSubqueryExprProtoDefaultTypeInternal _ResolvedSubqueryExprProto_default_instance_;
constexpr AnyResolvedScanProto::AnyResolvedScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedScanProtoDefaultTypeInternal {
  constexpr AnyResolvedScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedScanProtoDefaultTypeInternal() {}
  union {
    AnyResolvedScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedScanProtoDefaultTypeInternal _AnyResolvedScanProto_default_instance_;
constexpr ResolvedScanProto::ResolvedScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_list_()
  , hint_list_()
  , parent_(nullptr)
  , is_ordered_(false){}
struct ResolvedScanProtoDefaultTypeInternal {
  constexpr ResolvedScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedScanProtoDefaultTypeInternal() {}
  union {
    ResolvedScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedScanProtoDefaultTypeInternal _ResolvedScanProto_default_instance_;
constexpr ResolvedModelProto::ResolvedModelProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , model_(nullptr){}
struct ResolvedModelProtoDefaultTypeInternal {
  constexpr ResolvedModelProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedModelProtoDefaultTypeInternal() {}
  union {
    ResolvedModelProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedModelProtoDefaultTypeInternal _ResolvedModelProto_default_instance_;
constexpr ResolvedConnectionProto::ResolvedConnectionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , connection_(nullptr){}
struct ResolvedConnectionProtoDefaultTypeInternal {
  constexpr ResolvedConnectionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedConnectionProtoDefaultTypeInternal() {}
  union {
    ResolvedConnectionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedConnectionProtoDefaultTypeInternal _ResolvedConnectionProto_default_instance_;
constexpr ResolvedDescriptorProto::ResolvedDescriptorProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : descriptor_column_list_()
  , descriptor_column_name_list_()
  , parent_(nullptr){}
struct ResolvedDescriptorProtoDefaultTypeInternal {
  constexpr ResolvedDescriptorProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDescriptorProtoDefaultTypeInternal() {}
  union {
    ResolvedDescriptorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDescriptorProtoDefaultTypeInternal _ResolvedDescriptorProto_default_instance_;
constexpr ResolvedSingleRowScanProto::ResolvedSingleRowScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedSingleRowScanProtoDefaultTypeInternal {
  constexpr ResolvedSingleRowScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedSingleRowScanProtoDefaultTypeInternal() {}
  union {
    ResolvedSingleRowScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedSingleRowScanProtoDefaultTypeInternal _ResolvedSingleRowScanProto_default_instance_;
constexpr ResolvedTableScanProto::ResolvedTableScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_index_list_()
  , alias_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , table_(nullptr)
  , for_system_time_expr_(nullptr){}
struct ResolvedTableScanProtoDefaultTypeInternal {
  constexpr ResolvedTableScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedTableScanProtoDefaultTypeInternal() {}
  union {
    ResolvedTableScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedTableScanProtoDefaultTypeInternal _ResolvedTableScanProto_default_instance_;
constexpr ResolvedJoinScanProto::ResolvedJoinScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , left_scan_(nullptr)
  , right_scan_(nullptr)
  , join_expr_(nullptr)
  , join_type_(0)
{}
struct ResolvedJoinScanProtoDefaultTypeInternal {
  constexpr ResolvedJoinScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedJoinScanProtoDefaultTypeInternal() {}
  union {
    ResolvedJoinScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedJoinScanProtoDefaultTypeInternal _ResolvedJoinScanProto_default_instance_;
constexpr ResolvedArrayScanProto::ResolvedArrayScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , input_scan_(nullptr)
  , array_expr_(nullptr)
  , element_column_(nullptr)
  , array_offset_column_(nullptr)
  , join_expr_(nullptr)
  , is_outer_(false){}
struct ResolvedArrayScanProtoDefaultTypeInternal {
  constexpr ResolvedArrayScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedArrayScanProtoDefaultTypeInternal() {}
  union {
    ResolvedArrayScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedArrayScanProtoDefaultTypeInternal _ResolvedArrayScanProto_default_instance_;
constexpr ResolvedColumnHolderProto::ResolvedColumnHolderProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , column_(nullptr){}
struct ResolvedColumnHolderProtoDefaultTypeInternal {
  constexpr ResolvedColumnHolderProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedColumnHolderProtoDefaultTypeInternal() {}
  union {
    ResolvedColumnHolderProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedColumnHolderProtoDefaultTypeInternal _ResolvedColumnHolderProto_default_instance_;
constexpr ResolvedFilterScanProto::ResolvedFilterScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , input_scan_(nullptr)
  , filter_expr_(nullptr){}
struct ResolvedFilterScanProtoDefaultTypeInternal {
  constexpr ResolvedFilterScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedFilterScanProtoDefaultTypeInternal() {}
  union {
    ResolvedFilterScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedFilterScanProtoDefaultTypeInternal _ResolvedFilterScanProto_default_instance_;
constexpr ResolvedGroupingSetProto::ResolvedGroupingSetProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_by_column_list_()
  , parent_(nullptr){}
struct ResolvedGroupingSetProtoDefaultTypeInternal {
  constexpr ResolvedGroupingSetProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedGroupingSetProtoDefaultTypeInternal() {}
  union {
    ResolvedGroupingSetProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedGroupingSetProtoDefaultTypeInternal _ResolvedGroupingSetProto_default_instance_;
constexpr AnyResolvedAggregateScanBaseProto::AnyResolvedAggregateScanBaseProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedAggregateScanBaseProtoDefaultTypeInternal {
  constexpr AnyResolvedAggregateScanBaseProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedAggregateScanBaseProtoDefaultTypeInternal() {}
  union {
    AnyResolvedAggregateScanBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedAggregateScanBaseProtoDefaultTypeInternal _AnyResolvedAggregateScanBaseProto_default_instance_;
constexpr ResolvedAggregateScanBaseProto::ResolvedAggregateScanBaseProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_by_list_()
  , aggregate_list_()
  , collation_list_()
  , parent_(nullptr)
  , input_scan_(nullptr){}
struct ResolvedAggregateScanBaseProtoDefaultTypeInternal {
  constexpr ResolvedAggregateScanBaseProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAggregateScanBaseProtoDefaultTypeInternal() {}
  union {
    ResolvedAggregateScanBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAggregateScanBaseProtoDefaultTypeInternal _ResolvedAggregateScanBaseProto_default_instance_;
constexpr ResolvedAggregateScanProto::ResolvedAggregateScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : grouping_set_list_()
  , rollup_column_list_()
  , parent_(nullptr){}
struct ResolvedAggregateScanProtoDefaultTypeInternal {
  constexpr ResolvedAggregateScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAggregateScanProtoDefaultTypeInternal() {}
  union {
    ResolvedAggregateScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAggregateScanProtoDefaultTypeInternal _ResolvedAggregateScanProto_default_instance_;
constexpr ResolvedAnonymizedAggregateScanProto::ResolvedAnonymizedAggregateScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : anonymization_option_list_()
  , parent_(nullptr)
  , k_threshold_expr_(nullptr){}
struct ResolvedAnonymizedAggregateScanProtoDefaultTypeInternal {
  constexpr ResolvedAnonymizedAggregateScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAnonymizedAggregateScanProtoDefaultTypeInternal() {}
  union {
    ResolvedAnonymizedAggregateScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAnonymizedAggregateScanProtoDefaultTypeInternal _ResolvedAnonymizedAggregateScanProto_default_instance_;
constexpr ResolvedSetOperationItemProto::ResolvedSetOperationItemProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_column_list_()
  , parent_(nullptr)
  , scan_(nullptr){}
struct ResolvedSetOperationItemProtoDefaultTypeInternal {
  constexpr ResolvedSetOperationItemProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedSetOperationItemProtoDefaultTypeInternal() {}
  union {
    ResolvedSetOperationItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedSetOperationItemProtoDefaultTypeInternal _ResolvedSetOperationItemProto_default_instance_;
constexpr ResolvedSetOperationScanProto::ResolvedSetOperationScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_item_list_()
  , parent_(nullptr)
  , op_type_(0)
{}
struct ResolvedSetOperationScanProtoDefaultTypeInternal {
  constexpr ResolvedSetOperationScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedSetOperationScanProtoDefaultTypeInternal() {}
  union {
    ResolvedSetOperationScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedSetOperationScanProtoDefaultTypeInternal _ResolvedSetOperationScanProto_default_instance_;
constexpr ResolvedOrderByScanProto::ResolvedOrderByScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_by_item_list_()
  , parent_(nullptr)
  , input_scan_(nullptr){}
struct ResolvedOrderByScanProtoDefaultTypeInternal {
  constexpr ResolvedOrderByScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedOrderByScanProtoDefaultTypeInternal() {}
  union {
    ResolvedOrderByScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedOrderByScanProtoDefaultTypeInternal _ResolvedOrderByScanProto_default_instance_;
constexpr ResolvedLimitOffsetScanProto::ResolvedLimitOffsetScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , input_scan_(nullptr)
  , limit_(nullptr)
  , offset_(nullptr){}
struct ResolvedLimitOffsetScanProtoDefaultTypeInternal {
  constexpr ResolvedLimitOffsetScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedLimitOffsetScanProtoDefaultTypeInternal() {}
  union {
    ResolvedLimitOffsetScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedLimitOffsetScanProtoDefaultTypeInternal _ResolvedLimitOffsetScanProto_default_instance_;
constexpr ResolvedWithRefScanProto::ResolvedWithRefScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : with_query_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr){}
struct ResolvedWithRefScanProtoDefaultTypeInternal {
  constexpr ResolvedWithRefScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedWithRefScanProtoDefaultTypeInternal() {}
  union {
    ResolvedWithRefScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedWithRefScanProtoDefaultTypeInternal _ResolvedWithRefScanProto_default_instance_;
constexpr ResolvedAnalyticScanProto::ResolvedAnalyticScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : function_group_list_()
  , parent_(nullptr)
  , input_scan_(nullptr){}
struct ResolvedAnalyticScanProtoDefaultTypeInternal {
  constexpr ResolvedAnalyticScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAnalyticScanProtoDefaultTypeInternal() {}
  union {
    ResolvedAnalyticScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAnalyticScanProtoDefaultTypeInternal _ResolvedAnalyticScanProto_default_instance_;
constexpr ResolvedSampleScanProto::ResolvedSampleScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : partition_by_list_()
  , method_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , input_scan_(nullptr)
  , size_(nullptr)
  , repeatable_argument_(nullptr)
  , weight_column_(nullptr)
  , unit_(0)
{}
struct ResolvedSampleScanProtoDefaultTypeInternal {
  constexpr ResolvedSampleScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedSampleScanProtoDefaultTypeInternal() {}
  union {
    ResolvedSampleScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedSampleScanProtoDefaultTypeInternal _ResolvedSampleScanProto_default_instance_;
constexpr ResolvedComputedColumnProto::ResolvedComputedColumnProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , column_(nullptr)
  , expr_(nullptr){}
struct ResolvedComputedColumnProtoDefaultTypeInternal {
  constexpr ResolvedComputedColumnProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedComputedColumnProtoDefaultTypeInternal() {}
  union {
    ResolvedComputedColumnProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedComputedColumnProtoDefaultTypeInternal _ResolvedComputedColumnProto_default_instance_;
constexpr ResolvedOrderByItemProto::ResolvedOrderByItemProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , column_ref_(nullptr)
  , collation_name_(nullptr)
  , collation_(nullptr)
  , is_descending_(false)
  , null_order_(0)
{}
struct ResolvedOrderByItemProtoDefaultTypeInternal {
  constexpr ResolvedOrderByItemProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedOrderByItemProtoDefaultTypeInternal() {}
  union {
    ResolvedOrderByItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedOrderByItemProtoDefaultTypeInternal _ResolvedOrderByItemProto_default_instance_;
constexpr ResolvedColumnAnnotationsProto::ResolvedColumnAnnotationsProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_list_()
  , child_list_()
  , parent_(nullptr)
  , type_parameters_(nullptr)
  , collation_name_(nullptr)
  , not_null_(false){}
struct ResolvedColumnAnnotationsProtoDefaultTypeInternal {
  constexpr ResolvedColumnAnnotationsProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedColumnAnnotationsProtoDefaultTypeInternal() {}
  union {
    ResolvedColumnAnnotationsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedColumnAnnotationsProtoDefaultTypeInternal _ResolvedColumnAnnotationsProto_default_instance_;
constexpr ResolvedGeneratedColumnInfoProto::ResolvedGeneratedColumnInfoProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , expression_(nullptr)
  , stored_mode_(0)
{}
struct ResolvedGeneratedColumnInfoProtoDefaultTypeInternal {
  constexpr ResolvedGeneratedColumnInfoProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedGeneratedColumnInfoProtoDefaultTypeInternal() {}
  union {
    ResolvedGeneratedColumnInfoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedGeneratedColumnInfoProtoDefaultTypeInternal _ResolvedGeneratedColumnInfoProto_default_instance_;
constexpr ResolvedColumnDefaultValueProto::ResolvedColumnDefaultValueProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sql_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , expression_(nullptr){}
struct ResolvedColumnDefaultValueProtoDefaultTypeInternal {
  constexpr ResolvedColumnDefaultValueProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedColumnDefaultValueProtoDefaultTypeInternal() {}
  union {
    ResolvedColumnDefaultValueProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedColumnDefaultValueProtoDefaultTypeInternal _ResolvedColumnDefaultValueProto_default_instance_;
constexpr ResolvedColumnDefinitionProto::ResolvedColumnDefinitionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , type_(nullptr)
  , annotations_(nullptr)
  , column_(nullptr)
  , generated_column_info_(nullptr)
  , default_value_(nullptr)
  , is_hidden_(false){}
struct ResolvedColumnDefinitionProtoDefaultTypeInternal {
  constexpr ResolvedColumnDefinitionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedColumnDefinitionProtoDefaultTypeInternal() {}
  union {
    ResolvedColumnDefinitionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedColumnDefinitionProtoDefaultTypeInternal _ResolvedColumnDefinitionProto_default_instance_;
constexpr AnyResolvedConstraintProto::AnyResolvedConstraintProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedConstraintProtoDefaultTypeInternal {
  constexpr AnyResolvedConstraintProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedConstraintProtoDefaultTypeInternal() {}
  union {
    AnyResolvedConstraintProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedConstraintProtoDefaultTypeInternal _AnyResolvedConstraintProto_default_instance_;
constexpr ResolvedConstraintProto::ResolvedConstraintProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedConstraintProtoDefaultTypeInternal {
  constexpr ResolvedConstraintProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedConstraintProtoDefaultTypeInternal() {}
  union {
    ResolvedConstraintProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedConstraintProtoDefaultTypeInternal _ResolvedConstraintProto_default_instance_;
constexpr ResolvedPrimaryKeyProto::ResolvedPrimaryKeyProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_offset_list_()
  , option_list_()
  , column_name_list_()
  , constraint_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , unenforced_(false){}
struct ResolvedPrimaryKeyProtoDefaultTypeInternal {
  constexpr ResolvedPrimaryKeyProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedPrimaryKeyProtoDefaultTypeInternal() {}
  union {
    ResolvedPrimaryKeyProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedPrimaryKeyProtoDefaultTypeInternal _ResolvedPrimaryKeyProto_default_instance_;
constexpr ResolvedForeignKeyProto::ResolvedForeignKeyProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : referencing_column_offset_list_()
  , referenced_column_offset_list_()
  , option_list_()
  , referencing_column_list_()
  , constraint_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , referenced_table_(nullptr)
  , match_mode_(0)

  , update_action_(0)

  , delete_action_(0)

  , enforced_(false){}
struct ResolvedForeignKeyProtoDefaultTypeInternal {
  constexpr ResolvedForeignKeyProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedForeignKeyProtoDefaultTypeInternal() {}
  union {
    ResolvedForeignKeyProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedForeignKeyProtoDefaultTypeInternal _ResolvedForeignKeyProto_default_instance_;
constexpr ResolvedCheckConstraintProto::ResolvedCheckConstraintProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_list_()
  , constraint_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , expression_(nullptr)
  , enforced_(false){}
struct ResolvedCheckConstraintProtoDefaultTypeInternal {
  constexpr ResolvedCheckConstraintProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCheckConstraintProtoDefaultTypeInternal() {}
  union {
    ResolvedCheckConstraintProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCheckConstraintProtoDefaultTypeInternal _ResolvedCheckConstraintProto_default_instance_;
constexpr ResolvedOutputColumnProto::ResolvedOutputColumnProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , column_(nullptr){}
struct ResolvedOutputColumnProtoDefaultTypeInternal {
  constexpr ResolvedOutputColumnProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedOutputColumnProtoDefaultTypeInternal() {}
  union {
    ResolvedOutputColumnProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedOutputColumnProtoDefaultTypeInternal _ResolvedOutputColumnProto_default_instance_;
constexpr ResolvedProjectScanProto::ResolvedProjectScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expr_list_()
  , parent_(nullptr)
  , input_scan_(nullptr){}
struct ResolvedProjectScanProtoDefaultTypeInternal {
  constexpr ResolvedProjectScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedProjectScanProtoDefaultTypeInternal() {}
  union {
    ResolvedProjectScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedProjectScanProtoDefaultTypeInternal _ResolvedProjectScanProto_default_instance_;
constexpr ResolvedTVFScanProto::ResolvedTVFScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argument_list_()
  , column_index_list_()
  , alias_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , tvf_(nullptr)
  , signature_(nullptr)
  , function_call_signature_(nullptr){}
struct ResolvedTVFScanProtoDefaultTypeInternal {
  constexpr ResolvedTVFScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedTVFScanProtoDefaultTypeInternal() {}
  union {
    ResolvedTVFScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedTVFScanProtoDefaultTypeInternal _ResolvedTVFScanProto_default_instance_;
constexpr ResolvedGroupRowsScanProto::ResolvedGroupRowsScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_column_list_()
  , alias_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr){}
struct ResolvedGroupRowsScanProtoDefaultTypeInternal {
  constexpr ResolvedGroupRowsScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedGroupRowsScanProtoDefaultTypeInternal() {}
  union {
    ResolvedGroupRowsScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedGroupRowsScanProtoDefaultTypeInternal _ResolvedGroupRowsScanProto_default_instance_;
constexpr ResolvedFunctionArgumentProto::ResolvedFunctionArgumentProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argument_column_list_()
  , parent_(nullptr)
  , expr_(nullptr)
  , scan_(nullptr)
  , model_(nullptr)
  , connection_(nullptr)
  , descriptor_arg_(nullptr)
  , inline_lambda_(nullptr){}
struct ResolvedFunctionArgumentProtoDefaultTypeInternal {
  constexpr ResolvedFunctionArgumentProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedFunctionArgumentProtoDefaultTypeInternal() {}
  union {
    ResolvedFunctionArgumentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedFunctionArgumentProtoDefaultTypeInternal _ResolvedFunctionArgumentProto_default_instance_;
constexpr AnyResolvedStatementProto::AnyResolvedStatementProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedStatementProtoDefaultTypeInternal {
  constexpr AnyResolvedStatementProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedStatementProtoDefaultTypeInternal() {}
  union {
    AnyResolvedStatementProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedStatementProtoDefaultTypeInternal _AnyResolvedStatementProto_default_instance_;
constexpr ResolvedStatementProto::ResolvedStatementProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hint_list_()
  , parent_(nullptr){}
struct ResolvedStatementProtoDefaultTypeInternal {
  constexpr ResolvedStatementProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedStatementProtoDefaultTypeInternal() {}
  union {
    ResolvedStatementProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedStatementProtoDefaultTypeInternal _ResolvedStatementProto_default_instance_;
constexpr ResolvedExplainStmtProto::ResolvedExplainStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , statement_(nullptr){}
struct ResolvedExplainStmtProtoDefaultTypeInternal {
  constexpr ResolvedExplainStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedExplainStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedExplainStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedExplainStmtProtoDefaultTypeInternal _ResolvedExplainStmtProto_default_instance_;
constexpr ResolvedQueryStmtProto::ResolvedQueryStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_column_list_()
  , parent_(nullptr)
  , query_(nullptr)
  , is_value_table_(false){}
struct ResolvedQueryStmtProtoDefaultTypeInternal {
  constexpr ResolvedQueryStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedQueryStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedQueryStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedQueryStmtProtoDefaultTypeInternal _ResolvedQueryStmtProto_default_instance_;
constexpr ResolvedCreateDatabaseStmtProto::ResolvedCreateDatabaseStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , option_list_()
  , parent_(nullptr){}
struct ResolvedCreateDatabaseStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateDatabaseStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateDatabaseStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateDatabaseStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateDatabaseStmtProtoDefaultTypeInternal _ResolvedCreateDatabaseStmtProto_default_instance_;
constexpr AnyResolvedCreateStatementProto::AnyResolvedCreateStatementProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedCreateStatementProtoDefaultTypeInternal {
  constexpr AnyResolvedCreateStatementProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedCreateStatementProtoDefaultTypeInternal() {}
  union {
    AnyResolvedCreateStatementProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedCreateStatementProtoDefaultTypeInternal _AnyResolvedCreateStatementProto_default_instance_;
constexpr ResolvedCreateStatementProto::ResolvedCreateStatementProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , parent_(nullptr)
  , create_mode_(0)

  , create_scope_(0)
{}
struct ResolvedCreateStatementProtoDefaultTypeInternal {
  constexpr ResolvedCreateStatementProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateStatementProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateStatementProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateStatementProtoDefaultTypeInternal _ResolvedCreateStatementProto_default_instance_;
constexpr ResolvedIndexItemProto::ResolvedIndexItemProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , column_ref_(nullptr)
  , descending_(false){}
struct ResolvedIndexItemProtoDefaultTypeInternal {
  constexpr ResolvedIndexItemProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedIndexItemProtoDefaultTypeInternal() {}
  union {
    ResolvedIndexItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedIndexItemProtoDefaultTypeInternal _ResolvedIndexItemProto_default_instance_;
constexpr ResolvedUnnestItemProto::ResolvedUnnestItemProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , array_expr_(nullptr)
  , element_column_(nullptr)
  , array_offset_column_(nullptr){}
struct ResolvedUnnestItemProtoDefaultTypeInternal {
  constexpr ResolvedUnnestItemProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedUnnestItemProtoDefaultTypeInternal() {}
  union {
    ResolvedUnnestItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedUnnestItemProtoDefaultTypeInternal _ResolvedUnnestItemProto_default_instance_;
constexpr ResolvedCreateIndexStmtProto::ResolvedCreateIndexStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_name_path_()
  , index_item_list_()
  , option_list_()
  , computed_columns_list_()
  , unnest_expressions_list_()
  , storing_expression_list_()
  , parent_(nullptr)
  , table_scan_(nullptr)
  , is_unique_(false)
  , is_search_(false)
  , index_all_columns_(false){}
struct ResolvedCreateIndexStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateIndexStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateIndexStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateIndexStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateIndexStmtProtoDefaultTypeInternal _ResolvedCreateIndexStmtProto_default_instance_;
constexpr ResolvedCreateSchemaStmtProto::ResolvedCreateSchemaStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_list_()
  , parent_(nullptr)
  , collation_name_(nullptr){}
struct ResolvedCreateSchemaStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateSchemaStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateSchemaStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateSchemaStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateSchemaStmtProtoDefaultTypeInternal _ResolvedCreateSchemaStmtProto_default_instance_;
constexpr AnyResolvedCreateTableStmtBaseProto::AnyResolvedCreateTableStmtBaseProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedCreateTableStmtBaseProtoDefaultTypeInternal {
  constexpr AnyResolvedCreateTableStmtBaseProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedCreateTableStmtBaseProtoDefaultTypeInternal() {}
  union {
    AnyResolvedCreateTableStmtBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedCreateTableStmtBaseProtoDefaultTypeInternal _AnyResolvedCreateTableStmtBaseProto_default_instance_;
constexpr ResolvedCreateTableStmtBaseProto::ResolvedCreateTableStmtBaseProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_list_()
  , column_definition_list_()
  , pseudo_column_list_()
  , foreign_key_list_()
  , check_constraint_list_()
  , parent_(nullptr)
  , primary_key_(nullptr)
  , like_table_(nullptr)
  , collation_name_(nullptr)
  , is_value_table_(false){}
struct ResolvedCreateTableStmtBaseProtoDefaultTypeInternal {
  constexpr ResolvedCreateTableStmtBaseProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateTableStmtBaseProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateTableStmtBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateTableStmtBaseProtoDefaultTypeInternal _ResolvedCreateTableStmtBaseProto_default_instance_;
constexpr ResolvedCreateTableStmtProto::ResolvedCreateTableStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : partition_by_list_()
  , cluster_by_list_()
  , parent_(nullptr)
  , clone_from_(nullptr)
  , copy_from_(nullptr){}
struct ResolvedCreateTableStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateTableStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateTableStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateTableStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateTableStmtProtoDefaultTypeInternal _ResolvedCreateTableStmtProto_default_instance_;
constexpr ResolvedCreateTableAsSelectStmtProto::ResolvedCreateTableAsSelectStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_column_list_()
  , partition_by_list_()
  , cluster_by_list_()
  , parent_(nullptr)
  , query_(nullptr){}
struct ResolvedCreateTableAsSelectStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateTableAsSelectStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateTableAsSelectStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateTableAsSelectStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateTableAsSelectStmtProtoDefaultTypeInternal _ResolvedCreateTableAsSelectStmtProto_default_instance_;
constexpr ResolvedCreateModelStmtProto::ResolvedCreateModelStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_list_()
  , output_column_list_()
  , transform_list_()
  , transform_output_column_list_()
  , transform_analytic_function_group_list_()
  , transform_input_column_list_()
  , parent_(nullptr)
  , query_(nullptr){}
struct ResolvedCreateModelStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateModelStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateModelStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateModelStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateModelStmtProtoDefaultTypeInternal _ResolvedCreateModelStmtProto_default_instance_;
constexpr AnyResolvedCreateViewBaseProto::AnyResolvedCreateViewBaseProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedCreateViewBaseProtoDefaultTypeInternal {
  constexpr AnyResolvedCreateViewBaseProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedCreateViewBaseProtoDefaultTypeInternal() {}
  union {
    AnyResolvedCreateViewBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedCreateViewBaseProtoDefaultTypeInternal _AnyResolvedCreateViewBaseProto_default_instance_;
constexpr ResolvedCreateViewBaseProto::ResolvedCreateViewBaseProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_list_()
  , output_column_list_()
  , sql_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , query_(nullptr)
  , sql_security_(0)

  , has_explicit_columns_(false)
  , is_value_table_(false)
  , recursive_(false){}
struct ResolvedCreateViewBaseProtoDefaultTypeInternal {
  constexpr ResolvedCreateViewBaseProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateViewBaseProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateViewBaseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateViewBaseProtoDefaultTypeInternal _ResolvedCreateViewBaseProto_default_instance_;
constexpr ResolvedCreateViewStmtProto::ResolvedCreateViewStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedCreateViewStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateViewStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateViewStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateViewStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateViewStmtProtoDefaultTypeInternal _ResolvedCreateViewStmtProto_default_instance_;
constexpr ResolvedWithPartitionColumnsProto::ResolvedWithPartitionColumnsProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_definition_list_()
  , parent_(nullptr){}
struct ResolvedWithPartitionColumnsProtoDefaultTypeInternal {
  constexpr ResolvedWithPartitionColumnsProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedWithPartitionColumnsProtoDefaultTypeInternal() {}
  union {
    ResolvedWithPartitionColumnsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedWithPartitionColumnsProtoDefaultTypeInternal _ResolvedWithPartitionColumnsProto_default_instance_;
constexpr ResolvedCreateSnapshotTableStmtProto::ResolvedCreateSnapshotTableStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_list_()
  , parent_(nullptr)
  , clone_from_(nullptr){}
struct ResolvedCreateSnapshotTableStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateSnapshotTableStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateSnapshotTableStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateSnapshotTableStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateSnapshotTableStmtProtoDefaultTypeInternal _ResolvedCreateSnapshotTableStmtProto_default_instance_;
constexpr ResolvedCreateExternalTableStmtProto::ResolvedCreateExternalTableStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , with_partition_columns_(nullptr)
  , connection_(nullptr){}
struct ResolvedCreateExternalTableStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateExternalTableStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateExternalTableStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateExternalTableStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateExternalTableStmtProtoDefaultTypeInternal _ResolvedCreateExternalTableStmtProto_default_instance_;
constexpr ResolvedExportModelStmtProto::ResolvedExportModelStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_name_path_()
  , option_list_()
  , parent_(nullptr)
  , connection_(nullptr){}
struct ResolvedExportModelStmtProtoDefaultTypeInternal {
  constexpr ResolvedExportModelStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedExportModelStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedExportModelStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedExportModelStmtProtoDefaultTypeInternal _ResolvedExportModelStmtProto_default_instance_;
constexpr ResolvedExportDataStmtProto::ResolvedExportDataStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_list_()
  , output_column_list_()
  , parent_(nullptr)
  , query_(nullptr)
  , connection_(nullptr)
  , is_value_table_(false){}
struct ResolvedExportDataStmtProtoDefaultTypeInternal {
  constexpr ResolvedExportDataStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedExportDataStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedExportDataStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedExportDataStmtProtoDefaultTypeInternal _ResolvedExportDataStmtProto_default_instance_;
constexpr ResolvedDefineTableStmtProto::ResolvedDefineTableStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , option_list_()
  , parent_(nullptr){}
struct ResolvedDefineTableStmtProtoDefaultTypeInternal {
  constexpr ResolvedDefineTableStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDefineTableStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDefineTableStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDefineTableStmtProtoDefaultTypeInternal _ResolvedDefineTableStmtProto_default_instance_;
constexpr ResolvedDescribeStmtProto::ResolvedDescribeStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , from_name_path_()
  , object_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr){}
struct ResolvedDescribeStmtProtoDefaultTypeInternal {
  constexpr ResolvedDescribeStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDescribeStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDescribeStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDescribeStmtProtoDefaultTypeInternal _ResolvedDescribeStmtProto_default_instance_;
constexpr ResolvedShowStmtProto::ResolvedShowStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , like_expr_(nullptr){}
struct ResolvedShowStmtProtoDefaultTypeInternal {
  constexpr ResolvedShowStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedShowStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedShowStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedShowStmtProtoDefaultTypeInternal _ResolvedShowStmtProto_default_instance_;
constexpr ResolvedBeginStmtProto::ResolvedBeginStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isolation_level_list_()
  , parent_(nullptr)
  , read_write_mode_(0)
{}
struct ResolvedBeginStmtProtoDefaultTypeInternal {
  constexpr ResolvedBeginStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedBeginStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedBeginStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedBeginStmtProtoDefaultTypeInternal _ResolvedBeginStmtProto_default_instance_;
constexpr ResolvedSetTransactionStmtProto::ResolvedSetTransactionStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isolation_level_list_()
  , parent_(nullptr)
  , read_write_mode_(0)
{}
struct ResolvedSetTransactionStmtProtoDefaultTypeInternal {
  constexpr ResolvedSetTransactionStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedSetTransactionStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedSetTransactionStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedSetTransactionStmtProtoDefaultTypeInternal _ResolvedSetTransactionStmtProto_default_instance_;
constexpr ResolvedCommitStmtProto::ResolvedCommitStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedCommitStmtProtoDefaultTypeInternal {
  constexpr ResolvedCommitStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCommitStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCommitStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCommitStmtProtoDefaultTypeInternal _ResolvedCommitStmtProto_default_instance_;
constexpr ResolvedRollbackStmtProto::ResolvedRollbackStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedRollbackStmtProtoDefaultTypeInternal {
  constexpr ResolvedRollbackStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedRollbackStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedRollbackStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedRollbackStmtProtoDefaultTypeInternal _ResolvedRollbackStmtProto_default_instance_;
constexpr ResolvedStartBatchStmtProto::ResolvedStartBatchStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : batch_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr){}
struct ResolvedStartBatchStmtProtoDefaultTypeInternal {
  constexpr ResolvedStartBatchStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedStartBatchStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedStartBatchStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedStartBatchStmtProtoDefaultTypeInternal _ResolvedStartBatchStmtProto_default_instance_;
constexpr ResolvedRunBatchStmtProto::ResolvedRunBatchStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedRunBatchStmtProtoDefaultTypeInternal {
  constexpr ResolvedRunBatchStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedRunBatchStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedRunBatchStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedRunBatchStmtProtoDefaultTypeInternal _ResolvedRunBatchStmtProto_default_instance_;
constexpr ResolvedAbortBatchStmtProto::ResolvedAbortBatchStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedAbortBatchStmtProtoDefaultTypeInternal {
  constexpr ResolvedAbortBatchStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAbortBatchStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAbortBatchStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAbortBatchStmtProtoDefaultTypeInternal _ResolvedAbortBatchStmtProto_default_instance_;
constexpr ResolvedDropStmtProto::ResolvedDropStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , object_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , is_if_exists_(false)
  , drop_mode_(0)
{}
struct ResolvedDropStmtProtoDefaultTypeInternal {
  constexpr ResolvedDropStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDropStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDropStmtProtoDefaultTypeInternal _ResolvedDropStmtProto_default_instance_;
constexpr ResolvedDropMaterializedViewStmtProto::ResolvedDropMaterializedViewStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , parent_(nullptr)
  , is_if_exists_(false){}
struct ResolvedDropMaterializedViewStmtProtoDefaultTypeInternal {
  constexpr ResolvedDropMaterializedViewStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDropMaterializedViewStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropMaterializedViewStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDropMaterializedViewStmtProtoDefaultTypeInternal _ResolvedDropMaterializedViewStmtProto_default_instance_;
constexpr ResolvedDropSnapshotTableStmtProto::ResolvedDropSnapshotTableStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , parent_(nullptr)
  , is_if_exists_(false){}
struct ResolvedDropSnapshotTableStmtProtoDefaultTypeInternal {
  constexpr ResolvedDropSnapshotTableStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDropSnapshotTableStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropSnapshotTableStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDropSnapshotTableStmtProtoDefaultTypeInternal _ResolvedDropSnapshotTableStmtProto_default_instance_;
constexpr ResolvedRecursiveRefScanProto::ResolvedRecursiveRefScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedRecursiveRefScanProtoDefaultTypeInternal {
  constexpr ResolvedRecursiveRefScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedRecursiveRefScanProtoDefaultTypeInternal() {}
  union {
    ResolvedRecursiveRefScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedRecursiveRefScanProtoDefaultTypeInternal _ResolvedRecursiveRefScanProto_default_instance_;
constexpr ResolvedRecursiveScanProto::ResolvedRecursiveScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , non_recursive_term_(nullptr)
  , recursive_term_(nullptr)
  , op_type_(0)
{}
struct ResolvedRecursiveScanProtoDefaultTypeInternal {
  constexpr ResolvedRecursiveScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedRecursiveScanProtoDefaultTypeInternal() {}
  union {
    ResolvedRecursiveScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedRecursiveScanProtoDefaultTypeInternal _ResolvedRecursiveScanProto_default_instance_;
constexpr ResolvedWithScanProto::ResolvedWithScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : with_entry_list_()
  , parent_(nullptr)
  , query_(nullptr)
  , recursive_(false){}
struct ResolvedWithScanProtoDefaultTypeInternal {
  constexpr ResolvedWithScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedWithScanProtoDefaultTypeInternal() {}
  union {
    ResolvedWithScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedWithScanProtoDefaultTypeInternal _ResolvedWithScanProto_default_instance_;
constexpr ResolvedWithEntryProto::ResolvedWithEntryProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : with_query_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , with_subquery_(nullptr){}
struct ResolvedWithEntryProtoDefaultTypeInternal {
  constexpr ResolvedWithEntryProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedWithEntryProtoDefaultTypeInternal() {}
  union {
    ResolvedWithEntryProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedWithEntryProtoDefaultTypeInternal _ResolvedWithEntryProto_default_instance_;
constexpr ResolvedOptionProto::ResolvedOptionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : qualifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , value_(nullptr){}
struct ResolvedOptionProtoDefaultTypeInternal {
  constexpr ResolvedOptionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedOptionProtoDefaultTypeInternal() {}
  union {
    ResolvedOptionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedOptionProtoDefaultTypeInternal _ResolvedOptionProto_default_instance_;
constexpr ResolvedWindowPartitioningProto::ResolvedWindowPartitioningProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : partition_by_list_()
  , hint_list_()
  , parent_(nullptr){}
struct ResolvedWindowPartitioningProtoDefaultTypeInternal {
  constexpr ResolvedWindowPartitioningProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedWindowPartitioningProtoDefaultTypeInternal() {}
  union {
    ResolvedWindowPartitioningProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedWindowPartitioningProtoDefaultTypeInternal _ResolvedWindowPartitioningProto_default_instance_;
constexpr ResolvedWindowOrderingProto::ResolvedWindowOrderingProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_by_item_list_()
  , hint_list_()
  , parent_(nullptr){}
struct ResolvedWindowOrderingProtoDefaultTypeInternal {
  constexpr ResolvedWindowOrderingProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedWindowOrderingProtoDefaultTypeInternal() {}
  union {
    ResolvedWindowOrderingProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedWindowOrderingProtoDefaultTypeInternal _ResolvedWindowOrderingProto_default_instance_;
constexpr ResolvedWindowFrameProto::ResolvedWindowFrameProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , start_expr_(nullptr)
  , end_expr_(nullptr)
  , frame_unit_(0)
{}
struct ResolvedWindowFrameProtoDefaultTypeInternal {
  constexpr ResolvedWindowFrameProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedWindowFrameProtoDefaultTypeInternal() {}
  union {
    ResolvedWindowFrameProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedWindowFrameProtoDefaultTypeInternal _ResolvedWindowFrameProto_default_instance_;
constexpr ResolvedAnalyticFunctionGroupProto::ResolvedAnalyticFunctionGroupProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : analytic_function_list_()
  , parent_(nullptr)
  , partition_by_(nullptr)
  , order_by_(nullptr){}
struct ResolvedAnalyticFunctionGroupProtoDefaultTypeInternal {
  constexpr ResolvedAnalyticFunctionGroupProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAnalyticFunctionGroupProtoDefaultTypeInternal() {}
  union {
    ResolvedAnalyticFunctionGroupProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAnalyticFunctionGroupProtoDefaultTypeInternal _ResolvedAnalyticFunctionGroupProto_default_instance_;
constexpr ResolvedWindowFrameExprProto::ResolvedWindowFrameExprProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , expression_(nullptr)
  , boundary_type_(0)
{}
struct ResolvedWindowFrameExprProtoDefaultTypeInternal {
  constexpr ResolvedWindowFrameExprProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedWindowFrameExprProtoDefaultTypeInternal() {}
  union {
    ResolvedWindowFrameExprProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedWindowFrameExprProtoDefaultTypeInternal _ResolvedWindowFrameExprProto_default_instance_;
constexpr ResolvedDMLValueProto::ResolvedDMLValueProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , value_(nullptr){}
struct ResolvedDMLValueProtoDefaultTypeInternal {
  constexpr ResolvedDMLValueProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDMLValueProtoDefaultTypeInternal() {}
  union {
    ResolvedDMLValueProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDMLValueProtoDefaultTypeInternal _ResolvedDMLValueProto_default_instance_;
constexpr ResolvedDMLDefaultProto::ResolvedDMLDefaultProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedDMLDefaultProtoDefaultTypeInternal {
  constexpr ResolvedDMLDefaultProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDMLDefaultProtoDefaultTypeInternal() {}
  union {
    ResolvedDMLDefaultProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDMLDefaultProtoDefaultTypeInternal _ResolvedDMLDefaultProto_default_instance_;
constexpr ResolvedAssertStmtProto::ResolvedAssertStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , expression_(nullptr){}
struct ResolvedAssertStmtProtoDefaultTypeInternal {
  constexpr ResolvedAssertStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAssertStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAssertStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAssertStmtProtoDefaultTypeInternal _ResolvedAssertStmtProto_default_instance_;
constexpr ResolvedAssertRowsModifiedProto::ResolvedAssertRowsModifiedProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , rows_(nullptr){}
struct ResolvedAssertRowsModifiedProtoDefaultTypeInternal {
  constexpr ResolvedAssertRowsModifiedProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAssertRowsModifiedProtoDefaultTypeInternal() {}
  union {
    ResolvedAssertRowsModifiedProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAssertRowsModifiedProtoDefaultTypeInternal _ResolvedAssertRowsModifiedProto_default_instance_;
constexpr ResolvedInsertRowProto::ResolvedInsertRowProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_list_()
  , parent_(nullptr){}
struct ResolvedInsertRowProtoDefaultTypeInternal {
  constexpr ResolvedInsertRowProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedInsertRowProtoDefaultTypeInternal() {}
  union {
    ResolvedInsertRowProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedInsertRowProtoDefaultTypeInternal _ResolvedInsertRowProto_default_instance_;
constexpr ResolvedInsertStmtProto::ResolvedInsertStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : insert_column_list_()
  , row_list_()
  , query_output_column_list_()
  , query_parameter_list_()
  , parent_(nullptr)
  , table_scan_(nullptr)
  , assert_rows_modified_(nullptr)
  , query_(nullptr)
  , returning_(nullptr)
  , insert_mode_(0)
{}
struct ResolvedInsertStmtProtoDefaultTypeInternal {
  constexpr ResolvedInsertStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedInsertStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedInsertStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedInsertStmtProtoDefaultTypeInternal _ResolvedInsertStmtProto_default_instance_;
constexpr ResolvedDeleteStmtProto::ResolvedDeleteStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , table_scan_(nullptr)
  , assert_rows_modified_(nullptr)
  , where_expr_(nullptr)
  , array_offset_column_(nullptr)
  , returning_(nullptr){}
struct ResolvedDeleteStmtProtoDefaultTypeInternal {
  constexpr ResolvedDeleteStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDeleteStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDeleteStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDeleteStmtProtoDefaultTypeInternal _ResolvedDeleteStmtProto_default_instance_;
constexpr ResolvedUpdateItemProto::ResolvedUpdateItemProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : delete_list_()
  , update_list_()
  , insert_list_()
  , array_update_list_()
  , parent_(nullptr)
  , target_(nullptr)
  , set_value_(nullptr)
  , element_column_(nullptr){}
struct ResolvedUpdateItemProtoDefaultTypeInternal {
  constexpr ResolvedUpdateItemProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedUpdateItemProtoDefaultTypeInternal() {}
  union {
    ResolvedUpdateItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedUpdateItemProtoDefaultTypeInternal _ResolvedUpdateItemProto_default_instance_;
constexpr ResolvedUpdateArrayItemProto::ResolvedUpdateArrayItemProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , offset_(nullptr)
  , update_item_(nullptr){}
struct ResolvedUpdateArrayItemProtoDefaultTypeInternal {
  constexpr ResolvedUpdateArrayItemProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedUpdateArrayItemProtoDefaultTypeInternal() {}
  union {
    ResolvedUpdateArrayItemProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedUpdateArrayItemProtoDefaultTypeInternal _ResolvedUpdateArrayItemProto_default_instance_;
constexpr ResolvedUpdateStmtProto::ResolvedUpdateStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : update_item_list_()
  , column_access_list_()
  , parent_(nullptr)
  , table_scan_(nullptr)
  , assert_rows_modified_(nullptr)
  , where_expr_(nullptr)
  , from_scan_(nullptr)
  , array_offset_column_(nullptr)
  , returning_(nullptr){}
struct ResolvedUpdateStmtProtoDefaultTypeInternal {
  constexpr ResolvedUpdateStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedUpdateStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedUpdateStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedUpdateStmtProtoDefaultTypeInternal _ResolvedUpdateStmtProto_default_instance_;
constexpr ResolvedMergeWhenProto::ResolvedMergeWhenProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : insert_column_list_()
  , update_item_list_()
  , parent_(nullptr)
  , match_expr_(nullptr)
  , insert_row_(nullptr)
  , match_type_(0)

  , action_type_(0)
{}
struct ResolvedMergeWhenProtoDefaultTypeInternal {
  constexpr ResolvedMergeWhenProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedMergeWhenProtoDefaultTypeInternal() {}
  union {
    ResolvedMergeWhenProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedMergeWhenProtoDefaultTypeInternal _ResolvedMergeWhenProto_default_instance_;
constexpr ResolvedMergeStmtProto::ResolvedMergeStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : when_clause_list_()
  , column_access_list_()
  , parent_(nullptr)
  , table_scan_(nullptr)
  , from_scan_(nullptr)
  , merge_expr_(nullptr){}
struct ResolvedMergeStmtProtoDefaultTypeInternal {
  constexpr ResolvedMergeStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedMergeStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedMergeStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedMergeStmtProtoDefaultTypeInternal _ResolvedMergeStmtProto_default_instance_;
constexpr ResolvedTruncateStmtProto::ResolvedTruncateStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , table_scan_(nullptr)
  , where_expr_(nullptr){}
struct ResolvedTruncateStmtProtoDefaultTypeInternal {
  constexpr ResolvedTruncateStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedTruncateStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedTruncateStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedTruncateStmtProtoDefaultTypeInternal _ResolvedTruncateStmtProto_default_instance_;
constexpr ResolvedPrivilegeProto::ResolvedPrivilegeProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_list_()
  , action_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr){}
struct ResolvedPrivilegeProtoDefaultTypeInternal {
  constexpr ResolvedPrivilegeProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedPrivilegeProtoDefaultTypeInternal() {}
  union {
    ResolvedPrivilegeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedPrivilegeProtoDefaultTypeInternal _ResolvedPrivilegeProto_default_instance_;
constexpr AnyResolvedGrantOrRevokeStmtProto::AnyResolvedGrantOrRevokeStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedGrantOrRevokeStmtProtoDefaultTypeInternal {
  constexpr AnyResolvedGrantOrRevokeStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedGrantOrRevokeStmtProtoDefaultTypeInternal() {}
  union {
    AnyResolvedGrantOrRevokeStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedGrantOrRevokeStmtProtoDefaultTypeInternal _AnyResolvedGrantOrRevokeStmtProto_default_instance_;
constexpr ResolvedGrantOrRevokeStmtProto::ResolvedGrantOrRevokeStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : privilege_list_()
  , name_path_()
  , grantee_list_()
  , grantee_expr_list_()
  , object_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr){}
struct ResolvedGrantOrRevokeStmtProtoDefaultTypeInternal {
  constexpr ResolvedGrantOrRevokeStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedGrantOrRevokeStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedGrantOrRevokeStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedGrantOrRevokeStmtProtoDefaultTypeInternal _ResolvedGrantOrRevokeStmtProto_default_instance_;
constexpr ResolvedGrantStmtProto::ResolvedGrantStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedGrantStmtProtoDefaultTypeInternal {
  constexpr ResolvedGrantStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedGrantStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedGrantStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedGrantStmtProtoDefaultTypeInternal _ResolvedGrantStmtProto_default_instance_;
constexpr ResolvedRevokeStmtProto::ResolvedRevokeStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedRevokeStmtProtoDefaultTypeInternal {
  constexpr ResolvedRevokeStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedRevokeStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedRevokeStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedRevokeStmtProtoDefaultTypeInternal _ResolvedRevokeStmtProto_default_instance_;
constexpr AnyResolvedAlterObjectStmtProto::AnyResolvedAlterObjectStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedAlterObjectStmtProtoDefaultTypeInternal {
  constexpr AnyResolvedAlterObjectStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedAlterObjectStmtProtoDefaultTypeInternal() {}
  union {
    AnyResolvedAlterObjectStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedAlterObjectStmtProtoDefaultTypeInternal _AnyResolvedAlterObjectStmtProto_default_instance_;
constexpr ResolvedAlterObjectStmtProto::ResolvedAlterObjectStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , alter_action_list_()
  , parent_(nullptr)
  , is_if_exists_(false){}
struct ResolvedAlterObjectStmtProtoDefaultTypeInternal {
  constexpr ResolvedAlterObjectStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterObjectStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterObjectStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterObjectStmtProtoDefaultTypeInternal _ResolvedAlterObjectStmtProto_default_instance_;
constexpr ResolvedAlterDatabaseStmtProto::ResolvedAlterDatabaseStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedAlterDatabaseStmtProtoDefaultTypeInternal {
  constexpr ResolvedAlterDatabaseStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterDatabaseStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterDatabaseStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterDatabaseStmtProtoDefaultTypeInternal _ResolvedAlterDatabaseStmtProto_default_instance_;
constexpr ResolvedAlterMaterializedViewStmtProto::ResolvedAlterMaterializedViewStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedAlterMaterializedViewStmtProtoDefaultTypeInternal {
  constexpr ResolvedAlterMaterializedViewStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterMaterializedViewStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterMaterializedViewStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterMaterializedViewStmtProtoDefaultTypeInternal _ResolvedAlterMaterializedViewStmtProto_default_instance_;
constexpr ResolvedAlterSchemaStmtProto::ResolvedAlterSchemaStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedAlterSchemaStmtProtoDefaultTypeInternal {
  constexpr ResolvedAlterSchemaStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterSchemaStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterSchemaStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterSchemaStmtProtoDefaultTypeInternal _ResolvedAlterSchemaStmtProto_default_instance_;
constexpr ResolvedAlterTableStmtProto::ResolvedAlterTableStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedAlterTableStmtProtoDefaultTypeInternal {
  constexpr ResolvedAlterTableStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterTableStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterTableStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterTableStmtProtoDefaultTypeInternal _ResolvedAlterTableStmtProto_default_instance_;
constexpr ResolvedAlterViewStmtProto::ResolvedAlterViewStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedAlterViewStmtProtoDefaultTypeInternal {
  constexpr ResolvedAlterViewStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterViewStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterViewStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterViewStmtProtoDefaultTypeInternal _ResolvedAlterViewStmtProto_default_instance_;
constexpr AnyResolvedAlterActionProto::AnyResolvedAlterActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyResolvedAlterActionProtoDefaultTypeInternal {
  constexpr AnyResolvedAlterActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyResolvedAlterActionProtoDefaultTypeInternal() {}
  union {
    AnyResolvedAlterActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyResolvedAlterActionProtoDefaultTypeInternal _AnyResolvedAlterActionProto_default_instance_;
constexpr ResolvedAlterActionProto::ResolvedAlterActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr){}
struct ResolvedAlterActionProtoDefaultTypeInternal {
  constexpr ResolvedAlterActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterActionProtoDefaultTypeInternal _ResolvedAlterActionProto_default_instance_;
constexpr ResolvedSetOptionsActionProto::ResolvedSetOptionsActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_list_()
  , parent_(nullptr){}
struct ResolvedSetOptionsActionProtoDefaultTypeInternal {
  constexpr ResolvedSetOptionsActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedSetOptionsActionProtoDefaultTypeInternal() {}
  union {
    ResolvedSetOptionsActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedSetOptionsActionProtoDefaultTypeInternal _ResolvedSetOptionsActionProto_default_instance_;
constexpr ResolvedAddColumnActionProto::ResolvedAddColumnActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , column_definition_(nullptr)
  , is_if_not_exists_(false){}
struct ResolvedAddColumnActionProtoDefaultTypeInternal {
  constexpr ResolvedAddColumnActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAddColumnActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAddColumnActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAddColumnActionProtoDefaultTypeInternal _ResolvedAddColumnActionProto_default_instance_;
constexpr ResolvedAddConstraintActionProto::ResolvedAddConstraintActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , constraint_(nullptr)
  , table_(nullptr)
  , is_if_not_exists_(false){}
struct ResolvedAddConstraintActionProtoDefaultTypeInternal {
  constexpr ResolvedAddConstraintActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAddConstraintActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAddConstraintActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAddConstraintActionProtoDefaultTypeInternal _ResolvedAddConstraintActionProto_default_instance_;
constexpr ResolvedDropConstraintActionProto::ResolvedDropConstraintActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , is_if_exists_(false){}
struct ResolvedDropConstraintActionProtoDefaultTypeInternal {
  constexpr ResolvedDropConstraintActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDropConstraintActionProtoDefaultTypeInternal() {}
  union {
    ResolvedDropConstraintActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDropConstraintActionProtoDefaultTypeInternal _ResolvedDropConstraintActionProto_default_instance_;
constexpr ResolvedDropPrimaryKeyActionProto::ResolvedDropPrimaryKeyActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , is_if_exists_(false){}
struct ResolvedDropPrimaryKeyActionProtoDefaultTypeInternal {
  constexpr ResolvedDropPrimaryKeyActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDropPrimaryKeyActionProtoDefaultTypeInternal() {}
  union {
    ResolvedDropPrimaryKeyActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDropPrimaryKeyActionProtoDefaultTypeInternal _ResolvedDropPrimaryKeyActionProto_default_instance_;
constexpr ResolvedAlterColumnOptionsActionProto::ResolvedAlterColumnOptionsActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_list_()
  , column_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , is_if_exists_(false){}
struct ResolvedAlterColumnOptionsActionProtoDefaultTypeInternal {
  constexpr ResolvedAlterColumnOptionsActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterColumnOptionsActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterColumnOptionsActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterColumnOptionsActionProtoDefaultTypeInternal _ResolvedAlterColumnOptionsActionProto_default_instance_;
constexpr ResolvedAlterColumnDropNotNullActionProto::ResolvedAlterColumnDropNotNullActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , is_if_exists_(false){}
struct ResolvedAlterColumnDropNotNullActionProtoDefaultTypeInternal {
  constexpr ResolvedAlterColumnDropNotNullActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterColumnDropNotNullActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterColumnDropNotNullActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterColumnDropNotNullActionProtoDefaultTypeInternal _ResolvedAlterColumnDropNotNullActionProto_default_instance_;
constexpr ResolvedAlterColumnSetDataTypeActionProto::ResolvedAlterColumnSetDataTypeActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , updated_type_(nullptr)
  , updated_type_parameters_(nullptr)
  , updated_annotations_(nullptr)
  , is_if_exists_(false){}
struct ResolvedAlterColumnSetDataTypeActionProtoDefaultTypeInternal {
  constexpr ResolvedAlterColumnSetDataTypeActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterColumnSetDataTypeActionProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterColumnSetDataTypeActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterColumnSetDataTypeActionProtoDefaultTypeInternal _ResolvedAlterColumnSetDataTypeActionProto_default_instance_;
constexpr ResolvedDropColumnActionProto::ResolvedDropColumnActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , is_if_exists_(false){}
struct ResolvedDropColumnActionProtoDefaultTypeInternal {
  constexpr ResolvedDropColumnActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDropColumnActionProtoDefaultTypeInternal() {}
  union {
    ResolvedDropColumnActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDropColumnActionProtoDefaultTypeInternal _ResolvedDropColumnActionProto_default_instance_;
constexpr ResolvedRenameColumnActionProto::ResolvedRenameColumnActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , new_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , is_if_exists_(false){}
struct ResolvedRenameColumnActionProtoDefaultTypeInternal {
  constexpr ResolvedRenameColumnActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedRenameColumnActionProtoDefaultTypeInternal() {}
  union {
    ResolvedRenameColumnActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedRenameColumnActionProtoDefaultTypeInternal _ResolvedRenameColumnActionProto_default_instance_;
constexpr ResolvedSetAsActionProto::ResolvedSetAsActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_body_json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entity_body_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr){}
struct ResolvedSetAsActionProtoDefaultTypeInternal {
  constexpr ResolvedSetAsActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedSetAsActionProtoDefaultTypeInternal() {}
  union {
    ResolvedSetAsActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedSetAsActionProtoDefaultTypeInternal _ResolvedSetAsActionProto_default_instance_;
constexpr ResolvedSetCollateClauseProto::ResolvedSetCollateClauseProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , collation_name_(nullptr){}
struct ResolvedSetCollateClauseProtoDefaultTypeInternal {
  constexpr ResolvedSetCollateClauseProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedSetCollateClauseProtoDefaultTypeInternal() {}
  union {
    ResolvedSetCollateClauseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedSetCollateClauseProtoDefaultTypeInternal _ResolvedSetCollateClauseProto_default_instance_;
constexpr ResolvedAlterTableSetOptionsStmtProto::ResolvedAlterTableSetOptionsStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , option_list_()
  , parent_(nullptr)
  , is_if_exists_(false){}
struct ResolvedAlterTableSetOptionsStmtProtoDefaultTypeInternal {
  constexpr ResolvedAlterTableSetOptionsStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterTableSetOptionsStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterTableSetOptionsStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterTableSetOptionsStmtProtoDefaultTypeInternal _ResolvedAlterTableSetOptionsStmtProto_default_instance_;
constexpr ResolvedRenameStmtProto::ResolvedRenameStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : old_name_path_()
  , new_name_path_()
  , object_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr){}
struct ResolvedRenameStmtProtoDefaultTypeInternal {
  constexpr ResolvedRenameStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedRenameStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedRenameStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedRenameStmtProtoDefaultTypeInternal _ResolvedRenameStmtProto_default_instance_;
constexpr ResolvedCreateRowAccessPolicyStmtProto::ResolvedCreateRowAccessPolicyStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_name_path_()
  , grantee_list_()
  , grantee_expr_list_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , predicate_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , table_scan_(nullptr)
  , predicate_(nullptr)
  , create_mode_(0)
{}
struct ResolvedCreateRowAccessPolicyStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateRowAccessPolicyStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateRowAccessPolicyStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateRowAccessPolicyStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateRowAccessPolicyStmtProtoDefaultTypeInternal _ResolvedCreateRowAccessPolicyStmtProto_default_instance_;
constexpr ResolvedDropRowAccessPolicyStmtProto::ResolvedDropRowAccessPolicyStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_name_path_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , is_drop_all_(false)
  , is_if_exists_(false){}
struct ResolvedDropRowAccessPolicyStmtProtoDefaultTypeInternal {
  constexpr ResolvedDropRowAccessPolicyStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDropRowAccessPolicyStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropRowAccessPolicyStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDropRowAccessPolicyStmtProtoDefaultTypeInternal _ResolvedDropRowAccessPolicyStmtProto_default_instance_;
constexpr ResolvedDropSearchIndexStmtProto::ResolvedDropSearchIndexStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_name_path_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , is_if_exists_(false){}
struct ResolvedDropSearchIndexStmtProtoDefaultTypeInternal {
  constexpr ResolvedDropSearchIndexStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDropSearchIndexStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropSearchIndexStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDropSearchIndexStmtProtoDefaultTypeInternal _ResolvedDropSearchIndexStmtProto_default_instance_;
constexpr ResolvedGrantToActionProto::ResolvedGrantToActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : grantee_expr_list_()
  , parent_(nullptr){}
struct ResolvedGrantToActionProtoDefaultTypeInternal {
  constexpr ResolvedGrantToActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedGrantToActionProtoDefaultTypeInternal() {}
  union {
    ResolvedGrantToActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedGrantToActionProtoDefaultTypeInternal _ResolvedGrantToActionProto_default_instance_;
constexpr ResolvedFilterUsingActionProto::ResolvedFilterUsingActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predicate_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , predicate_(nullptr){}
struct ResolvedFilterUsingActionProtoDefaultTypeInternal {
  constexpr ResolvedFilterUsingActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedFilterUsingActionProtoDefaultTypeInternal() {}
  union {
    ResolvedFilterUsingActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedFilterUsingActionProtoDefaultTypeInternal _ResolvedFilterUsingActionProto_default_instance_;
constexpr ResolvedRevokeFromActionProto::ResolvedRevokeFromActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : revokee_expr_list_()
  , parent_(nullptr)
  , is_revoke_from_all_(false){}
struct ResolvedRevokeFromActionProtoDefaultTypeInternal {
  constexpr ResolvedRevokeFromActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedRevokeFromActionProtoDefaultTypeInternal() {}
  union {
    ResolvedRevokeFromActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedRevokeFromActionProtoDefaultTypeInternal _ResolvedRevokeFromActionProto_default_instance_;
constexpr ResolvedRenameToActionProto::ResolvedRenameToActionProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_path_()
  , parent_(nullptr){}
struct ResolvedRenameToActionProtoDefaultTypeInternal {
  constexpr ResolvedRenameToActionProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedRenameToActionProtoDefaultTypeInternal() {}
  union {
    ResolvedRenameToActionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedRenameToActionProtoDefaultTypeInternal _ResolvedRenameToActionProto_default_instance_;
constexpr ResolvedAlterRowAccessPolicyStmtProto::ResolvedAlterRowAccessPolicyStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , table_scan_(nullptr){}
struct ResolvedAlterRowAccessPolicyStmtProtoDefaultTypeInternal {
  constexpr ResolvedAlterRowAccessPolicyStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterRowAccessPolicyStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterRowAccessPolicyStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterRowAccessPolicyStmtProtoDefaultTypeInternal _ResolvedAlterRowAccessPolicyStmtProto_default_instance_;
constexpr ResolvedAlterAllRowAccessPoliciesStmtProto::ResolvedAlterAllRowAccessPoliciesStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , table_scan_(nullptr){}
struct ResolvedAlterAllRowAccessPoliciesStmtProtoDefaultTypeInternal {
  constexpr ResolvedAlterAllRowAccessPoliciesStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterAllRowAccessPoliciesStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterAllRowAccessPoliciesStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterAllRowAccessPoliciesStmtProtoDefaultTypeInternal _ResolvedAlterAllRowAccessPoliciesStmtProto_default_instance_;
constexpr ResolvedCreateConstantStmtProto::ResolvedCreateConstantStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , expr_(nullptr){}
struct ResolvedCreateConstantStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateConstantStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateConstantStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateConstantStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateConstantStmtProtoDefaultTypeInternal _ResolvedCreateConstantStmtProto_default_instance_;
constexpr ResolvedCreateFunctionStmtProto::ResolvedCreateFunctionStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_list_()
  , aggregate_expression_list_()
  , argument_name_list_()
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , return_type_(nullptr)
  , function_expression_(nullptr)
  , signature_(nullptr)
  , has_explicit_return_type_(false)
  , is_aggregate_(false)
  , sql_security_(0)

  , determinism_level_(0)
{}
struct ResolvedCreateFunctionStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateFunctionStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateFunctionStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateFunctionStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateFunctionStmtProtoDefaultTypeInternal _ResolvedCreateFunctionStmtProto_default_instance_;
constexpr ResolvedArgumentDefProto::ResolvedArgumentDefProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , type_(nullptr)
  , argument_kind_(0)
{}
struct ResolvedArgumentDefProtoDefaultTypeInternal {
  constexpr ResolvedArgumentDefProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedArgumentDefProtoDefaultTypeInternal() {}
  union {
    ResolvedArgumentDefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedArgumentDefProtoDefaultTypeInternal _ResolvedArgumentDefProto_default_instance_;
constexpr ResolvedArgumentRefProto::ResolvedArgumentRefProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , argument_kind_(0)
{}
struct ResolvedArgumentRefProtoDefaultTypeInternal {
  constexpr ResolvedArgumentRefProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedArgumentRefProtoDefaultTypeInternal() {}
  union {
    ResolvedArgumentRefProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedArgumentRefProtoDefaultTypeInternal _ResolvedArgumentRefProto_default_instance_;
constexpr ResolvedCreateTableFunctionStmtProto::ResolvedCreateTableFunctionStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argument_name_list_()
  , option_list_()
  , output_column_list_()
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , signature_(nullptr)
  , query_(nullptr)
  , sql_security_(0)

  , has_explicit_return_schema_(false)
  , is_value_table_(false){}
struct ResolvedCreateTableFunctionStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateTableFunctionStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateTableFunctionStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateTableFunctionStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateTableFunctionStmtProtoDefaultTypeInternal _ResolvedCreateTableFunctionStmtProto_default_instance_;
constexpr ResolvedRelationArgumentScanProto::ResolvedRelationArgumentScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , is_value_table_(false){}
struct ResolvedRelationArgumentScanProtoDefaultTypeInternal {
  constexpr ResolvedRelationArgumentScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedRelationArgumentScanProtoDefaultTypeInternal() {}
  union {
    ResolvedRelationArgumentScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedRelationArgumentScanProtoDefaultTypeInternal _ResolvedRelationArgumentScanProto_default_instance_;
constexpr ResolvedArgumentListProto::ResolvedArgumentListProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arg_list_()
  , parent_(nullptr){}
struct ResolvedArgumentListProtoDefaultTypeInternal {
  constexpr ResolvedArgumentListProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedArgumentListProtoDefaultTypeInternal() {}
  union {
    ResolvedArgumentListProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedArgumentListProtoDefaultTypeInternal _ResolvedArgumentListProto_default_instance_;
constexpr ResolvedFunctionSignatureHolderProto::ResolvedFunctionSignatureHolderProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , signature_(nullptr){}
struct ResolvedFunctionSignatureHolderProtoDefaultTypeInternal {
  constexpr ResolvedFunctionSignatureHolderProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedFunctionSignatureHolderProtoDefaultTypeInternal() {}
  union {
    ResolvedFunctionSignatureHolderProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedFunctionSignatureHolderProtoDefaultTypeInternal _ResolvedFunctionSignatureHolderProto_default_instance_;
constexpr ResolvedDropFunctionStmtProto::ResolvedDropFunctionStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , parent_(nullptr)
  , arguments_(nullptr)
  , signature_(nullptr)
  , is_if_exists_(false){}
struct ResolvedDropFunctionStmtProtoDefaultTypeInternal {
  constexpr ResolvedDropFunctionStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDropFunctionStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropFunctionStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDropFunctionStmtProtoDefaultTypeInternal _ResolvedDropFunctionStmtProto_default_instance_;
constexpr ResolvedDropTableFunctionStmtProto::ResolvedDropTableFunctionStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , parent_(nullptr)
  , is_if_exists_(false){}
struct ResolvedDropTableFunctionStmtProtoDefaultTypeInternal {
  constexpr ResolvedDropTableFunctionStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedDropTableFunctionStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedDropTableFunctionStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedDropTableFunctionStmtProtoDefaultTypeInternal _ResolvedDropTableFunctionStmtProto_default_instance_;
constexpr ResolvedCallStmtProto::ResolvedCallStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argument_list_()
  , parent_(nullptr)
  , procedure_(nullptr)
  , signature_(nullptr){}
struct ResolvedCallStmtProtoDefaultTypeInternal {
  constexpr ResolvedCallStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCallStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCallStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCallStmtProtoDefaultTypeInternal _ResolvedCallStmtProto_default_instance_;
constexpr ResolvedImportStmtProto::ResolvedImportStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , alias_path_()
  , option_list_()
  , into_alias_path_()
  , file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , import_kind_(0)
{}
struct ResolvedImportStmtProtoDefaultTypeInternal {
  constexpr ResolvedImportStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedImportStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedImportStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedImportStmtProtoDefaultTypeInternal _ResolvedImportStmtProto_default_instance_;
constexpr ResolvedModuleStmtProto::ResolvedModuleStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , option_list_()
  , parent_(nullptr){}
struct ResolvedModuleStmtProtoDefaultTypeInternal {
  constexpr ResolvedModuleStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedModuleStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedModuleStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedModuleStmtProtoDefaultTypeInternal _ResolvedModuleStmtProto_default_instance_;
constexpr ResolvedAggregateHavingModifierProto::ResolvedAggregateHavingModifierProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , having_expr_(nullptr)
  , kind_(0)
{}
struct ResolvedAggregateHavingModifierProtoDefaultTypeInternal {
  constexpr ResolvedAggregateHavingModifierProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAggregateHavingModifierProtoDefaultTypeInternal() {}
  union {
    ResolvedAggregateHavingModifierProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAggregateHavingModifierProtoDefaultTypeInternal _ResolvedAggregateHavingModifierProto_default_instance_;
constexpr ResolvedCreateMaterializedViewStmtProto::ResolvedCreateMaterializedViewStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_definition_list_()
  , partition_by_list_()
  , cluster_by_list_()
  , parent_(nullptr){}
struct ResolvedCreateMaterializedViewStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateMaterializedViewStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateMaterializedViewStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateMaterializedViewStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateMaterializedViewStmtProtoDefaultTypeInternal _ResolvedCreateMaterializedViewStmtProto_default_instance_;
constexpr ResolvedCreateProcedureStmtProto::ResolvedCreateProcedureStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : argument_name_list_()
  , option_list_()
  , procedure_body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , signature_(nullptr){}
struct ResolvedCreateProcedureStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateProcedureStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateProcedureStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateProcedureStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateProcedureStmtProtoDefaultTypeInternal _ResolvedCreateProcedureStmtProto_default_instance_;
constexpr ResolvedExecuteImmediateArgumentProto::ResolvedExecuteImmediateArgumentProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , expression_(nullptr){}
struct ResolvedExecuteImmediateArgumentProtoDefaultTypeInternal {
  constexpr ResolvedExecuteImmediateArgumentProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedExecuteImmediateArgumentProtoDefaultTypeInternal() {}
  union {
    ResolvedExecuteImmediateArgumentProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedExecuteImmediateArgumentProtoDefaultTypeInternal _ResolvedExecuteImmediateArgumentProto_default_instance_;
constexpr ResolvedExecuteImmediateStmtProto::ResolvedExecuteImmediateStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : into_identifier_list_()
  , using_argument_list_()
  , parent_(nullptr)
  , sql_(nullptr){}
struct ResolvedExecuteImmediateStmtProtoDefaultTypeInternal {
  constexpr ResolvedExecuteImmediateStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedExecuteImmediateStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedExecuteImmediateStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedExecuteImmediateStmtProtoDefaultTypeInternal _ResolvedExecuteImmediateStmtProto_default_instance_;
constexpr ResolvedAssignmentStmtProto::ResolvedAssignmentStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , target_(nullptr)
  , expr_(nullptr){}
struct ResolvedAssignmentStmtProtoDefaultTypeInternal {
  constexpr ResolvedAssignmentStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAssignmentStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAssignmentStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAssignmentStmtProtoDefaultTypeInternal _ResolvedAssignmentStmtProto_default_instance_;
constexpr ResolvedCreateEntityStmtProto::ResolvedCreateEntityStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_list_()
  , entity_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entity_body_json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entity_body_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr){}
struct ResolvedCreateEntityStmtProtoDefaultTypeInternal {
  constexpr ResolvedCreateEntityStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCreateEntityStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCreateEntityStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCreateEntityStmtProtoDefaultTypeInternal _ResolvedCreateEntityStmtProto_default_instance_;
constexpr ResolvedAlterEntityStmtProto::ResolvedAlterEntityStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr){}
struct ResolvedAlterEntityStmtProtoDefaultTypeInternal {
  constexpr ResolvedAlterEntityStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAlterEntityStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAlterEntityStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAlterEntityStmtProtoDefaultTypeInternal _ResolvedAlterEntityStmtProto_default_instance_;
constexpr ResolvedPivotColumnProto::ResolvedPivotColumnProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , column_(nullptr)
  , pivot_expr_index_(int64_t{0})
  , pivot_value_index_(int64_t{0}){}
struct ResolvedPivotColumnProtoDefaultTypeInternal {
  constexpr ResolvedPivotColumnProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedPivotColumnProtoDefaultTypeInternal() {}
  union {
    ResolvedPivotColumnProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedPivotColumnProtoDefaultTypeInternal _ResolvedPivotColumnProto_default_instance_;
constexpr ResolvedPivotScanProto::ResolvedPivotScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_by_list_()
  , pivot_expr_list_()
  , pivot_value_list_()
  , pivot_column_list_()
  , parent_(nullptr)
  , input_scan_(nullptr)
  , for_expr_(nullptr){}
struct ResolvedPivotScanProtoDefaultTypeInternal {
  constexpr ResolvedPivotScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedPivotScanProtoDefaultTypeInternal() {}
  union {
    ResolvedPivotScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedPivotScanProtoDefaultTypeInternal _ResolvedPivotScanProto_default_instance_;
constexpr ResolvedReturningClauseProto::ResolvedReturningClauseProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_column_list_()
  , expr_list_()
  , parent_(nullptr)
  , action_column_(nullptr){}
struct ResolvedReturningClauseProtoDefaultTypeInternal {
  constexpr ResolvedReturningClauseProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedReturningClauseProtoDefaultTypeInternal() {}
  union {
    ResolvedReturningClauseProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedReturningClauseProtoDefaultTypeInternal _ResolvedReturningClauseProto_default_instance_;
constexpr ResolvedUnpivotArgProto::ResolvedUnpivotArgProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_list_()
  , parent_(nullptr){}
struct ResolvedUnpivotArgProtoDefaultTypeInternal {
  constexpr ResolvedUnpivotArgProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedUnpivotArgProtoDefaultTypeInternal() {}
  union {
    ResolvedUnpivotArgProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedUnpivotArgProtoDefaultTypeInternal _ResolvedUnpivotArgProto_default_instance_;
constexpr ResolvedUnpivotScanProto::ResolvedUnpivotScanProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_column_list_()
  , label_list_()
  , unpivot_arg_list_()
  , projected_input_column_list_()
  , parent_(nullptr)
  , input_scan_(nullptr)
  , label_column_(nullptr)
  , include_nulls_(false){}
struct ResolvedUnpivotScanProtoDefaultTypeInternal {
  constexpr ResolvedUnpivotScanProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedUnpivotScanProtoDefaultTypeInternal() {}
  union {
    ResolvedUnpivotScanProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedUnpivotScanProtoDefaultTypeInternal _ResolvedUnpivotScanProto_default_instance_;
constexpr ResolvedCloneDataStmtProto::ResolvedCloneDataStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(nullptr)
  , target_table_(nullptr)
  , clone_from_(nullptr){}
struct ResolvedCloneDataStmtProtoDefaultTypeInternal {
  constexpr ResolvedCloneDataStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedCloneDataStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedCloneDataStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedCloneDataStmtProtoDefaultTypeInternal _ResolvedCloneDataStmtProto_default_instance_;
constexpr ResolvedTableAndColumnInfoProto::ResolvedTableAndColumnInfoProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_index_list_()
  , parent_(nullptr)
  , table_(nullptr){}
struct ResolvedTableAndColumnInfoProtoDefaultTypeInternal {
  constexpr ResolvedTableAndColumnInfoProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedTableAndColumnInfoProtoDefaultTypeInternal() {}
  union {
    ResolvedTableAndColumnInfoProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedTableAndColumnInfoProtoDefaultTypeInternal _ResolvedTableAndColumnInfoProto_default_instance_;
constexpr ResolvedAnalyzeStmtProto::ResolvedAnalyzeStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_list_()
  , table_and_column_index_list_()
  , parent_(nullptr){}
struct ResolvedAnalyzeStmtProtoDefaultTypeInternal {
  constexpr ResolvedAnalyzeStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAnalyzeStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAnalyzeStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAnalyzeStmtProtoDefaultTypeInternal _ResolvedAnalyzeStmtProto_default_instance_;
constexpr ResolvedAuxLoadDataStmtProto::ResolvedAuxLoadDataStmtProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_path_()
  , output_column_list_()
  , column_definition_list_()
  , pseudo_column_list_()
  , foreign_key_list_()
  , check_constraint_list_()
  , partition_by_list_()
  , cluster_by_list_()
  , option_list_()
  , from_files_option_list_()
  , parent_(nullptr)
  , primary_key_(nullptr)
  , with_partition_columns_(nullptr)
  , connection_(nullptr)
  , insertion_mode_(0)
{}
struct ResolvedAuxLoadDataStmtProtoDefaultTypeInternal {
  constexpr ResolvedAuxLoadDataStmtProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedAuxLoadDataStmtProtoDefaultTypeInternal() {}
  union {
    ResolvedAuxLoadDataStmtProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedAuxLoadDataStmtProtoDefaultTypeInternal _ResolvedAuxLoadDataStmtProto_default_instance_;
}  // namespace zetasql
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[201];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedNodeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedNodeProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedNodeProto, node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedArgumentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedArgumentProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedArgumentProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentProto, parent_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedExprProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedExprProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedExprProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExprProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExprProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExprProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExprProto, type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExprProto, type_annotation_map_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, value_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, has_explicit_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, float_literal_id_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLiteralProto, preserve_in_literal_remover_),
  0,
  1,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedParameterProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedParameterProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedParameterProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedParameterProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedParameterProto, position_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedParameterProto, is_untyped_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExpressionColumnProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExpressionColumnProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExpressionColumnProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExpressionColumnProto, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnRefProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnRefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnRefProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnRefProto, column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnRefProto, is_correlated_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstantProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstantProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstantProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstantProto, constant_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSystemVariableProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSystemVariableProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSystemVariableProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSystemVariableProto, name_path_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInlineLambdaProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInlineLambdaProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInlineLambdaProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInlineLambdaProto, argument_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInlineLambdaProto, parameter_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInlineLambdaProto, body_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldArgProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldArgProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldArgProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldArgProto, include_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldArgProto, field_descriptor_path_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldProto, expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterFieldProto, filter_field_arg_list_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedFunctionCallBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedFunctionCallBaseProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedFunctionCallBaseProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, function_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, argument_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, generic_argument_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, error_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, hint_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallBaseProto, collation_list_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionCallProto, function_call_info_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedNonScalarFunctionCallBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedNonScalarFunctionCallBaseProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedNonScalarFunctionCallBaseProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, distinct_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, null_handling_modifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, with_group_rows_subquery_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedNonScalarFunctionCallBaseProto, with_group_rows_parameter_list_),
  0,
  2,
  3,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, having_modifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, order_by_item_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, limit_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateFunctionCallProto, function_call_info_),
  0,
  2,
  ~0u,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionCallProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionCallProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionCallProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionCallProto, window_frame_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastElementProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastElementProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastElementProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastElementProto, from_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastElementProto, to_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastElementProto, function_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExtendedCastProto, element_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, return_null_on_error_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, extended_cast_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, format_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, time_zone_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCastProto, type_parameters_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeStructProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeStructProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeStructProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeStructProto, field_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoProto, field_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoFieldProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoFieldProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoFieldProto, field_descriptor_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoFieldProto, format_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMakeProtoFieldProto, expr_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetStructFieldProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetStructFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetStructFieldProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetStructFieldProto, expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetStructFieldProto, field_idx_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, field_descriptor_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, default_value_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, get_has_bit_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, format_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetProtoFieldProto, return_default_value_when_unset_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetJsonFieldProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetJsonFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetJsonFieldProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetJsonFieldProto, expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGetJsonFieldProto, field_name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenProto, expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenProto, get_field_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenedArgProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenedArgProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFlattenedArgProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldItemProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldItemProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldItemProto, expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldItemProto, struct_index_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldItemProto, proto_field_path_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldProto, expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReplaceFieldProto, replace_field_item_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, subquery_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, parameter_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, in_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, subquery_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSubqueryExprProto, hint_list_),
  0,
  3,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedScanProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedScanProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedScanProto, column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedScanProto, hint_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedScanProto, is_ordered_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModelProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModelProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModelProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModelProto, model_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConnectionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConnectionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConnectionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConnectionProto, connection_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescriptorProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescriptorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescriptorProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescriptorProto, descriptor_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescriptorProto, descriptor_column_name_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSingleRowScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSingleRowScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSingleRowScanProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, for_system_time_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, column_index_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableScanProto, alias_),
  1,
  2,
  3,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, join_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, left_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, right_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedJoinScanProto, join_expr_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, array_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, element_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, array_offset_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, join_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArrayScanProto, is_outer_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnHolderProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnHolderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnHolderProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnHolderProto, column_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterScanProto, input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterScanProto, filter_expr_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupingSetProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupingSetProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupingSetProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupingSetProto, group_by_column_list_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAggregateScanBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAggregateScanBaseProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAggregateScanBaseProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, group_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, collation_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanBaseProto, aggregate_list_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanProto, grouping_set_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateScanProto, rollup_column_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnonymizedAggregateScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnonymizedAggregateScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnonymizedAggregateScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnonymizedAggregateScanProto, k_threshold_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnonymizedAggregateScanProto, anonymization_option_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationItemProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationItemProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationItemProto, scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationItemProto, output_column_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationScanProto, op_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOperationScanProto, input_item_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByScanProto, input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByScanProto, order_by_item_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLimitOffsetScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLimitOffsetScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLimitOffsetScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLimitOffsetScanProto, input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLimitOffsetScanProto, limit_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedLimitOffsetScanProto, offset_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithRefScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithRefScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithRefScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithRefScanProto, with_query_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticScanProto, input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticScanProto, function_group_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, method_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, size_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, unit_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, repeatable_argument_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, weight_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSampleScanProto, partition_by_list_),
  1,
  2,
  0,
  3,
  6,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedComputedColumnProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedComputedColumnProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedComputedColumnProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedComputedColumnProto, column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedComputedColumnProto, expr_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, column_ref_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, collation_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, is_descending_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, null_order_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOrderByItemProto, collation_),
  0,
  1,
  2,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, collation_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, not_null_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, child_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnAnnotationsProto, type_parameters_),
  0,
  2,
  3,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGeneratedColumnInfoProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGeneratedColumnInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGeneratedColumnInfoProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGeneratedColumnInfoProto, expression_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGeneratedColumnInfoProto, stored_mode_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefaultValueProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefaultValueProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefaultValueProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefaultValueProto, expression_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefaultValueProto, sql_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, annotations_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, is_hidden_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, generated_column_info_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedColumnDefinitionProto, default_value_),
  1,
  0,
  2,
  3,
  7,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedConstraintProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedConstraintProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstraintProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedConstraintProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, column_offset_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, unenforced_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, constraint_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrimaryKeyProto, column_name_list_),
  1,
  ~0u,
  ~0u,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, constraint_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, referencing_column_offset_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, referenced_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, referenced_column_offset_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, match_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, update_action_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, delete_action_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, enforced_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedForeignKeyProto, referencing_column_list_),
  1,
  0,
  ~0u,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, constraint_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, expression_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, enforced_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCheckConstraintProto, option_list_),
  1,
  0,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOutputColumnProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOutputColumnProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOutputColumnProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOutputColumnProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOutputColumnProto, column_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedProjectScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedProjectScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedProjectScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedProjectScanProto, expr_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedProjectScanProto, input_scan_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, tvf_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, argument_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, column_index_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, alias_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTVFScanProto, function_call_signature_),
  1,
  2,
  3,
  ~0u,
  ~0u,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupRowsScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupRowsScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupRowsScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupRowsScanProto, input_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGroupRowsScanProto, alias_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, model_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, connection_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, descriptor_arg_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, argument_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionArgumentProto, inline_lambda_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedStatementProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedStatementProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedStatementProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStatementProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStatementProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStatementProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStatementProto, hint_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExplainStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExplainStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExplainStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExplainStmtProto, statement_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedQueryStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedQueryStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedQueryStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedQueryStmtProto, output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedQueryStmtProto, is_value_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedQueryStmtProto, query_),
  0,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateDatabaseStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateDatabaseStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateDatabaseStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateDatabaseStmtProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateDatabaseStmtProto, option_list_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateStatementProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateStatementProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateStatementProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateStatementProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateStatementProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateStatementProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateStatementProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateStatementProto, create_scope_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateStatementProto, create_mode_),
  0,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedIndexItemProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedIndexItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedIndexItemProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedIndexItemProto, column_ref_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedIndexItemProto, descending_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnnestItemProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnnestItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnnestItemProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnnestItemProto, array_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnnestItemProto, element_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnnestItemProto, array_offset_column_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, table_name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, is_unique_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, is_search_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, index_all_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, index_item_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, storing_expression_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, computed_columns_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateIndexStmtProto, unnest_expressions_list_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSchemaStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSchemaStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSchemaStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSchemaStmtProto, collation_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSchemaStmtProto, option_list_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateTableStmtBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateTableStmtBaseProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateTableStmtBaseProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, column_definition_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, pseudo_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, primary_key_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, foreign_key_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, check_constraint_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, is_value_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, like_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtBaseProto, collation_name_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, clone_from_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, copy_from_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, partition_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableStmtProto, cluster_by_list_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, partition_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, cluster_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableAsSelectStmtProto, query_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, query_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, transform_input_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, transform_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, transform_output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateModelStmtProto, transform_analytic_function_group_list_),
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateViewBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateViewBaseProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedCreateViewBaseProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, has_explicit_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, query_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, sql_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, sql_security_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, is_value_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewBaseProto, recursive_),
  1,
  ~0u,
  ~0u,
  4,
  2,
  0,
  3,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateViewStmtProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithPartitionColumnsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithPartitionColumnsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithPartitionColumnsProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithPartitionColumnsProto, column_definition_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSnapshotTableStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSnapshotTableStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSnapshotTableStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSnapshotTableStmtProto, clone_from_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateSnapshotTableStmtProto, option_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateExternalTableStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateExternalTableStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateExternalTableStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateExternalTableStmtProto, with_partition_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateExternalTableStmtProto, connection_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportModelStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportModelStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportModelStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportModelStmtProto, model_name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportModelStmtProto, connection_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportModelStmtProto, option_list_),
  0,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, connection_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, is_value_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExportDataStmtProto, query_),
  0,
  2,
  ~0u,
  ~0u,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDefineTableStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDefineTableStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDefineTableStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDefineTableStmtProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDefineTableStmtProto, option_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescribeStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescribeStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescribeStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescribeStmtProto, object_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescribeStmtProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDescribeStmtProto, from_name_path_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedShowStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedShowStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedShowStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedShowStmtProto, identifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedShowStmtProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedShowStmtProto, like_expr_),
  1,
  0,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedBeginStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedBeginStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedBeginStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedBeginStmtProto, read_write_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedBeginStmtProto, isolation_level_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetTransactionStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetTransactionStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetTransactionStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetTransactionStmtProto, read_write_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetTransactionStmtProto, isolation_level_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCommitStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCommitStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCommitStmtProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRollbackStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRollbackStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRollbackStmtProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStartBatchStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStartBatchStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStartBatchStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedStartBatchStmtProto, batch_type_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRunBatchStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRunBatchStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRunBatchStmtProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAbortBatchStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAbortBatchStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAbortBatchStmtProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, object_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropStmtProto, drop_mode_),
  1,
  0,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropMaterializedViewStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropMaterializedViewStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropMaterializedViewStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropMaterializedViewStmtProto, is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropMaterializedViewStmtProto, name_path_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSnapshotTableStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSnapshotTableStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSnapshotTableStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSnapshotTableStmtProto, is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSnapshotTableStmtProto, name_path_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveRefScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveRefScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveRefScanProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveScanProto, op_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveScanProto, non_recursive_term_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRecursiveScanProto, recursive_term_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithScanProto, with_entry_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithScanProto, query_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithScanProto, recursive_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithEntryProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithEntryProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithEntryProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithEntryProto, with_query_name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWithEntryProto, with_subquery_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOptionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOptionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOptionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOptionProto, qualifier_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOptionProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedOptionProto, value_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowPartitioningProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowPartitioningProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowPartitioningProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowPartitioningProto, partition_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowPartitioningProto, hint_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowOrderingProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowOrderingProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowOrderingProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowOrderingProto, order_by_item_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowOrderingProto, hint_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameProto, frame_unit_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameProto, start_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameProto, end_expr_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionGroupProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionGroupProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionGroupProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionGroupProto, partition_by_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionGroupProto, order_by_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyticFunctionGroupProto, analytic_function_list_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameExprProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameExprProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameExprProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameExprProto, boundary_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedWindowFrameExprProto, expression_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLValueProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLValueProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLValueProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLValueProto, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLDefaultProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLDefaultProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDMLDefaultProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertStmtProto, expression_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertStmtProto, description_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertRowsModifiedProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertRowsModifiedProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertRowsModifiedProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssertRowsModifiedProto, rows_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertRowProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertRowProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertRowProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertRowProto, value_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, insert_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, assert_rows_modified_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, returning_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, insert_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, query_parameter_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, query_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, query_output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedInsertStmtProto, row_list_),
  0,
  1,
  5,
  2,
  4,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, assert_rows_modified_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, returning_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, array_offset_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDeleteStmtProto, where_expr_),
  0,
  1,
  2,
  5,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, target_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, set_value_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, element_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, array_update_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, delete_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, update_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateItemProto, insert_list_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateArrayItemProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateArrayItemProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateArrayItemProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateArrayItemProto, offset_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateArrayItemProto, update_item_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, column_access_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, assert_rows_modified_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, returning_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, array_offset_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, where_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, update_item_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUpdateStmtProto, from_scan_),
  0,
  1,
  ~0u,
  2,
  6,
  5,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, match_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, match_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, action_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, insert_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, insert_row_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeWhenProto, update_item_list_),
  0,
  3,
  1,
  4,
  ~0u,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, column_access_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, from_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, merge_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedMergeStmtProto, when_clause_list_),
  0,
  1,
  ~0u,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTruncateStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTruncateStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTruncateStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTruncateStmtProto, table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTruncateStmtProto, where_expr_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrivilegeProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrivilegeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrivilegeProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrivilegeProto, action_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPrivilegeProto, unit_list_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedGrantOrRevokeStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedGrantOrRevokeStmtProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedGrantOrRevokeStmtProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, privilege_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, object_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, grantee_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantOrRevokeStmtProto, grantee_expr_list_),
  1,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantStmtProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeStmtProto, parent_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterObjectStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterObjectStmtProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterObjectStmtProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterObjectStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterObjectStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterObjectStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterObjectStmtProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterObjectStmtProto, alter_action_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterObjectStmtProto, is_if_exists_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterDatabaseStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterDatabaseStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterDatabaseStmtProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterMaterializedViewStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterMaterializedViewStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterMaterializedViewStmtProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterSchemaStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterSchemaStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterSchemaStmtProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableStmtProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterViewStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterViewStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterViewStmtProto, parent_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterActionProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::AnyResolvedAlterActionProto, node_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterActionProto, parent_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOptionsActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOptionsActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOptionsActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetOptionsActionProto, option_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddColumnActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddColumnActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddColumnActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddColumnActionProto, is_if_not_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddColumnActionProto, column_definition_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddConstraintActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddConstraintActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddConstraintActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddConstraintActionProto, is_if_not_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddConstraintActionProto, constraint_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAddConstraintActionProto, table_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropConstraintActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropConstraintActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropConstraintActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropConstraintActionProto, is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropConstraintActionProto, name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrimaryKeyActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrimaryKeyActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrimaryKeyActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropPrimaryKeyActionProto, is_if_exists_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnOptionsActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnOptionsActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnOptionsActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnOptionsActionProto, is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnOptionsActionProto, column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnOptionsActionProto, option_list_),
  1,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnDropNotNullActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnDropNotNullActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnDropNotNullActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnDropNotNullActionProto, is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnDropNotNullActionProto, column_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, updated_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, updated_type_parameters_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterColumnSetDataTypeActionProto, updated_annotations_),
  1,
  5,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropColumnActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropColumnActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropColumnActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropColumnActionProto, is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropColumnActionProto, name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameColumnActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameColumnActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameColumnActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameColumnActionProto, is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameColumnActionProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameColumnActionProto, new_name_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetAsActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetAsActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetAsActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetAsActionProto, entity_body_json_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetAsActionProto, entity_body_text_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetCollateClauseProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetCollateClauseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetCollateClauseProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedSetCollateClauseProto, collation_name_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableSetOptionsStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableSetOptionsStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableSetOptionsStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableSetOptionsStmtProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableSetOptionsStmtProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterTableSetOptionsStmtProto, is_if_exists_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameStmtProto, object_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameStmtProto, old_name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameStmtProto, new_name_path_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, create_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, target_name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, grantee_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, grantee_expr_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, table_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, predicate_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateRowAccessPolicyStmtProto, predicate_str_),
  2,
  5,
  0,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, is_drop_all_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropRowAccessPolicyStmtProto, target_name_path_),
  1,
  2,
  3,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSearchIndexStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSearchIndexStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSearchIndexStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSearchIndexStmtProto, is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSearchIndexStmtProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropSearchIndexStmtProto, table_name_path_),
  1,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantToActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantToActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantToActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedGrantToActionProto, grantee_expr_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterUsingActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterUsingActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterUsingActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterUsingActionProto, predicate_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFilterUsingActionProto, predicate_str_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeFromActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeFromActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeFromActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeFromActionProto, revokee_expr_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRevokeFromActionProto, is_revoke_from_all_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameToActionProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameToActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameToActionProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRenameToActionProto, new_path_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterRowAccessPolicyStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterRowAccessPolicyStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterRowAccessPolicyStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterRowAccessPolicyStmtProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterRowAccessPolicyStmtProto, table_scan_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto, table_scan_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateConstantStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateConstantStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateConstantStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateConstantStmtProto, expr_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, has_explicit_return_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, return_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, argument_name_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, is_aggregate_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, language_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, code_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, aggregate_expression_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, function_expression_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, sql_security_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateFunctionStmtProto, determinism_level_),
  2,
  6,
  3,
  ~0u,
  5,
  7,
  0,
  1,
  ~0u,
  4,
  ~0u,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentDefProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentDefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentDefProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentDefProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentDefProto, type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentDefProto, argument_kind_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentRefProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentRefProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentRefProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentRefProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentRefProto, argument_kind_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, argument_name_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, has_explicit_return_schema_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, language_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, code_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, query_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, is_value_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateTableFunctionStmtProto, sql_security_),
  2,
  ~0u,
  3,
  6,
  ~0u,
  0,
  1,
  4,
  ~0u,
  7,
  5,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRelationArgumentScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRelationArgumentScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRelationArgumentScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRelationArgumentScanProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedRelationArgumentScanProto, is_value_table_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentListProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentListProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentListProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedArgumentListProto, arg_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionSignatureHolderProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionSignatureHolderProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionSignatureHolderProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedFunctionSignatureHolderProto, signature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, arguments_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropFunctionStmtProto, signature_),
  0,
  3,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropTableFunctionStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropTableFunctionStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropTableFunctionStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropTableFunctionStmtProto, is_if_exists_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedDropTableFunctionStmtProto, name_path_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCallStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCallStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCallStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCallStmtProto, procedure_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCallStmtProto, signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCallStmtProto, argument_list_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, import_kind_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, file_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, alias_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, into_alias_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedImportStmtProto, option_list_),
  1,
  2,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModuleStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModuleStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModuleStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModuleStmtProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedModuleStmtProto, option_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateHavingModifierProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateHavingModifierProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateHavingModifierProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateHavingModifierProto, kind_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAggregateHavingModifierProto, having_expr_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateMaterializedViewStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateMaterializedViewStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateMaterializedViewStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateMaterializedViewStmtProto, column_definition_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateMaterializedViewStmtProto, partition_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateMaterializedViewStmtProto, cluster_by_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, argument_name_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, signature_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateProcedureStmtProto, procedure_body_),
  1,
  ~0u,
  2,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateArgumentProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateArgumentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateArgumentProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateArgumentProto, name_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateArgumentProto, expression_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateStmtProto, sql_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateStmtProto, into_identifier_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedExecuteImmediateStmtProto, using_argument_list_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssignmentStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssignmentStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssignmentStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssignmentStmtProto, target_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAssignmentStmtProto, expr_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, entity_type_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, entity_body_json_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, entity_body_text_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCreateEntityStmtProto, option_list_),
  3,
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterEntityStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterEntityStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterEntityStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAlterEntityStmtProto, entity_type_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotColumnProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotColumnProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotColumnProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotColumnProto, column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotColumnProto, pivot_expr_index_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotColumnProto, pivot_value_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, group_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, pivot_expr_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, for_expr_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, pivot_value_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedPivotScanProto, pivot_column_list_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReturningClauseProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReturningClauseProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReturningClauseProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReturningClauseProto, output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReturningClauseProto, action_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedReturningClauseProto, expr_list_),
  0,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotArgProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotArgProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotArgProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotArgProto, column_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, input_scan_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, value_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, label_column_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, label_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, unpivot_arg_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, projected_input_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedUnpivotScanProto, include_nulls_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCloneDataStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCloneDataStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCloneDataStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCloneDataStmtProto, target_table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedCloneDataStmtProto, clone_from_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableAndColumnInfoProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableAndColumnInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableAndColumnInfoProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableAndColumnInfoProto, table_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedTableAndColumnInfoProto, column_index_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyzeStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyzeStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyzeStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyzeStmtProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAnalyzeStmtProto, table_and_column_index_list_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, parent_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, insertion_mode_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, name_path_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, output_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, column_definition_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, pseudo_column_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, primary_key_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, foreign_key_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, check_constraint_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, partition_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, cluster_by_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, option_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, with_partition_columns_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, connection_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedAuxLoadDataStmtProto, from_files_option_list_),
  0,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::zetasql::AnyResolvedNodeProto)},
  { 11, -1, -1, sizeof(::zetasql::AnyResolvedArgumentProto)},
  { 66, 73, -1, sizeof(::zetasql::ResolvedArgumentProto)},
  { 74, -1, -1, sizeof(::zetasql::AnyResolvedExprProto)},
  { 101, 110, -1, sizeof(::zetasql::ResolvedExprProto)},
  { 113, 124, -1, sizeof(::zetasql::ResolvedLiteralProto)},
  { 129, 139, -1, sizeof(::zetasql::ResolvedParameterProto)},
  { 143, 151, -1, sizeof(::zetasql::ResolvedExpressionColumnProto)},
  { 153, 162, -1, sizeof(::zetasql::ResolvedColumnRefProto)},
  { 165, 173, -1, sizeof(::zetasql::ResolvedConstantProto)},
  { 175, 183, -1, sizeof(::zetasql::ResolvedSystemVariableProto)},
  { 185, 195, -1, sizeof(::zetasql::ResolvedInlineLambdaProto)},
  { 199, 208, -1, sizeof(::zetasql::ResolvedFilterFieldArgProto)},
  { 211, 220, -1, sizeof(::zetasql::ResolvedFilterFieldProto)},
  { 223, -1, -1, sizeof(::zetasql::AnyResolvedFunctionCallBaseProto)},
  { 232, 246, -1, sizeof(::zetasql::ResolvedFunctionCallBaseProto)},
  { 254, 262, -1, sizeof(::zetasql::ResolvedFunctionCallProto)},
  { 264, -1, -1, sizeof(::zetasql::AnyResolvedNonScalarFunctionCallBaseProto)},
  { 273, 284, -1, sizeof(::zetasql::ResolvedNonScalarFunctionCallBaseProto)},
  { 289, 300, -1, sizeof(::zetasql::ResolvedAggregateFunctionCallProto)},
  { 305, 313, -1, sizeof(::zetasql::ResolvedAnalyticFunctionCallProto)},
  { 315, 325, -1, sizeof(::zetasql::ResolvedExtendedCastElementProto)},
  { 329, 337, -1, sizeof(::zetasql::ResolvedExtendedCastProto)},
  { 339, 352, -1, sizeof(::zetasql::ResolvedCastProto)},
  { 359, 367, -1, sizeof(::zetasql::ResolvedMakeStructProto)},
  { 369, 377, -1, sizeof(::zetasql::ResolvedMakeProtoProto)},
  { 379, 389, -1, sizeof(::zetasql::ResolvedMakeProtoFieldProto)},
  { 393, 402, -1, sizeof(::zetasql::ResolvedGetStructFieldProto)},
  { 405, 418, -1, sizeof(::zetasql::ResolvedGetProtoFieldProto)},
  { 425, 434, -1, sizeof(::zetasql::ResolvedGetJsonFieldProto)},
  { 437, 446, -1, sizeof(::zetasql::ResolvedFlattenProto)},
  { 449, 456, -1, sizeof(::zetasql::ResolvedFlattenedArgProto)},
  { 457, 467, -1, sizeof(::zetasql::ResolvedReplaceFieldItemProto)},
  { 471, 480, -1, sizeof(::zetasql::ResolvedReplaceFieldProto)},
  { 483, 495, -1, sizeof(::zetasql::ResolvedSubqueryExprProto)},
  { 501, -1, -1, sizeof(::zetasql::AnyResolvedScanProto)},
  { 529, 539, -1, sizeof(::zetasql::ResolvedScanProto)},
  { 543, 551, -1, sizeof(::zetasql::ResolvedModelProto)},
  { 553, 561, -1, sizeof(::zetasql::ResolvedConnectionProto)},
  { 563, 572, -1, sizeof(::zetasql::ResolvedDescriptorProto)},
  { 575, 582, -1, sizeof(::zetasql::ResolvedSingleRowScanProto)},
  { 583, 594, -1, sizeof(::zetasql::ResolvedTableScanProto)},
  { 599, 610, -1, sizeof(::zetasql::ResolvedJoinScanProto)},
  { 615, 628, -1, sizeof(::zetasql::ResolvedArrayScanProto)},
  { 635, 643, -1, sizeof(::zetasql::ResolvedColumnHolderProto)},
  { 645, 654, -1, sizeof(::zetasql::ResolvedFilterScanProto)},
  { 657, 665, -1, sizeof(::zetasql::ResolvedGroupingSetProto)},
  { 667, -1, -1, sizeof(::zetasql::AnyResolvedAggregateScanBaseProto)},
  { 676, 687, -1, sizeof(::zetasql::ResolvedAggregateScanBaseProto)},
  { 692, 701, -1, sizeof(::zetasql::ResolvedAggregateScanProto)},
  { 704, 713, -1, sizeof(::zetasql::ResolvedAnonymizedAggregateScanProto)},
  { 716, 725, -1, sizeof(::zetasql::ResolvedSetOperationItemProto)},
  { 728, 737, -1, sizeof(::zetasql::ResolvedSetOperationScanProto)},
  { 740, 749, -1, sizeof(::zetasql::ResolvedOrderByScanProto)},
  { 752, 762, -1, sizeof(::zetasql::ResolvedLimitOffsetScanProto)},
  { 766, 774, -1, sizeof(::zetasql::ResolvedWithRefScanProto)},
  { 776, 785, -1, sizeof(::zetasql::ResolvedAnalyticScanProto)},
  { 788, 802, -1, sizeof(::zetasql::ResolvedSampleScanProto)},
  { 810, 819, -1, sizeof(::zetasql::ResolvedComputedColumnProto)},
  { 822, 834, -1, sizeof(::zetasql::ResolvedOrderByItemProto)},
  { 840, 852, -1, sizeof(::zetasql::ResolvedColumnAnnotationsProto)},
  { 858, 867, -1, sizeof(::zetasql::ResolvedGeneratedColumnInfoProto)},
  { 870, 879, -1, sizeof(::zetasql::ResolvedColumnDefaultValueProto)},
  { 882, 896, -1, sizeof(::zetasql::ResolvedColumnDefinitionProto)},
  { 904, -1, -1, sizeof(::zetasql::AnyResolvedConstraintProto)},
  { 914, 921, -1, sizeof(::zetasql::ResolvedConstraintProto)},
  { 922, 934, -1, sizeof(::zetasql::ResolvedPrimaryKeyProto)},
  { 940, 957, -1, sizeof(::zetasql::ResolvedForeignKeyProto)},
  { 968, 979, -1, sizeof(::zetasql::ResolvedCheckConstraintProto)},
  { 984, 993, -1, sizeof(::zetasql::ResolvedOutputColumnProto)},
  { 996, 1005, -1, sizeof(::zetasql::ResolvedProjectScanProto)},
  { 1008, 1021, -1, sizeof(::zetasql::ResolvedTVFScanProto)},
  { 1028, 1037, -1, sizeof(::zetasql::ResolvedGroupRowsScanProto)},
  { 1040, 1054, -1, sizeof(::zetasql::ResolvedFunctionArgumentProto)},
  { 1062, -1, -1, sizeof(::zetasql::AnyResolvedStatementProto)},
  { 1111, 1119, -1, sizeof(::zetasql::ResolvedStatementProto)},
  { 1121, 1129, -1, sizeof(::zetasql::ResolvedExplainStmtProto)},
  { 1131, 1141, -1, sizeof(::zetasql::ResolvedQueryStmtProto)},
  { 1145, 1154, -1, sizeof(::zetasql::ResolvedCreateDatabaseStmtProto)},
  { 1157, -1, -1, sizeof(::zetasql::AnyResolvedCreateStatementProto)},
  { 1175, 1185, -1, sizeof(::zetasql::ResolvedCreateStatementProto)},
  { 1189, 1198, -1, sizeof(::zetasql::ResolvedIndexItemProto)},
  { 1201, 1211, -1, sizeof(::zetasql::ResolvedUnnestItemProto)},
  { 1215, 1232, -1, sizeof(::zetasql::ResolvedCreateIndexStmtProto)},
  { 1243, 1252, -1, sizeof(::zetasql::ResolvedCreateSchemaStmtProto)},
  { 1255, -1, -1, sizeof(::zetasql::AnyResolvedCreateTableStmtBaseProto)},
  { 1265, 1281, -1, sizeof(::zetasql::ResolvedCreateTableStmtBaseProto)},
  { 1291, 1302, -1, sizeof(::zetasql::ResolvedCreateTableStmtProto)},
  { 1307, 1318, -1, sizeof(::zetasql::ResolvedCreateTableAsSelectStmtProto)},
  { 1323, 1337, -1, sizeof(::zetasql::ResolvedCreateModelStmtProto)},
  { 1345, -1, -1, sizeof(::zetasql::AnyResolvedCreateViewBaseProto)},
  { 1354, 1369, -1, sizeof(::zetasql::ResolvedCreateViewBaseProto)},
  { 1378, 1385, -1, sizeof(::zetasql::ResolvedCreateViewStmtProto)},
  { 1386, 1394, -1, sizeof(::zetasql::ResolvedWithPartitionColumnsProto)},
  { 1396, 1405, -1, sizeof(::zetasql::ResolvedCreateSnapshotTableStmtProto)},
  { 1408, 1417, -1, sizeof(::zetasql::ResolvedCreateExternalTableStmtProto)},
  { 1420, 1430, -1, sizeof(::zetasql::ResolvedExportModelStmtProto)},
  { 1434, 1446, -1, sizeof(::zetasql::ResolvedExportDataStmtProto)},
  { 1452, 1461, -1, sizeof(::zetasql::ResolvedDefineTableStmtProto)},
  { 1464, 1474, -1, sizeof(::zetasql::ResolvedDescribeStmtProto)},
  { 1478, 1488, -1, sizeof(::zetasql::ResolvedShowStmtProto)},
  { 1492, 1501, -1, sizeof(::zetasql::ResolvedBeginStmtProto)},
  { 1504, 1513, -1, sizeof(::zetasql::ResolvedSetTransactionStmtProto)},
  { 1516, 1523, -1, sizeof(::zetasql::ResolvedCommitStmtProto)},
  { 1524, 1531, -1, sizeof(::zetasql::ResolvedRollbackStmtProto)},
  { 1532, 1540, -1, sizeof(::zetasql::ResolvedStartBatchStmtProto)},
  { 1542, 1549, -1, sizeof(::zetasql::ResolvedRunBatchStmtProto)},
  { 1550, 1557, -1, sizeof(::zetasql::ResolvedAbortBatchStmtProto)},
  { 1558, 1569, -1, sizeof(::zetasql::ResolvedDropStmtProto)},
  { 1574, 1583, -1, sizeof(::zetasql::ResolvedDropMaterializedViewStmtProto)},
  { 1586, 1595, -1, sizeof(::zetasql::ResolvedDropSnapshotTableStmtProto)},
  { 1598, 1605, -1, sizeof(::zetasql::ResolvedRecursiveRefScanProto)},
  { 1606, 1616, -1, sizeof(::zetasql::ResolvedRecursiveScanProto)},
  { 1620, 1630, -1, sizeof(::zetasql::ResolvedWithScanProto)},
  { 1634, 1643, -1, sizeof(::zetasql::ResolvedWithEntryProto)},
  { 1646, 1656, -1, sizeof(::zetasql::ResolvedOptionProto)},
  { 1660, 1669, -1, sizeof(::zetasql::ResolvedWindowPartitioningProto)},
  { 1672, 1681, -1, sizeof(::zetasql::ResolvedWindowOrderingProto)},
  { 1684, 1694, -1, sizeof(::zetasql::ResolvedWindowFrameProto)},
  { 1698, 1708, -1, sizeof(::zetasql::ResolvedAnalyticFunctionGroupProto)},
  { 1712, 1721, -1, sizeof(::zetasql::ResolvedWindowFrameExprProto)},
  { 1724, 1732, -1, sizeof(::zetasql::ResolvedDMLValueProto)},
  { 1734, 1741, -1, sizeof(::zetasql::ResolvedDMLDefaultProto)},
  { 1742, 1751, -1, sizeof(::zetasql::ResolvedAssertStmtProto)},
  { 1754, 1762, -1, sizeof(::zetasql::ResolvedAssertRowsModifiedProto)},
  { 1764, 1772, -1, sizeof(::zetasql::ResolvedInsertRowProto)},
  { 1774, 1790, -1, sizeof(::zetasql::ResolvedInsertStmtProto)},
  { 1800, 1812, -1, sizeof(::zetasql::ResolvedDeleteStmtProto)},
  { 1818, 1832, -1, sizeof(::zetasql::ResolvedUpdateItemProto)},
  { 1840, 1849, -1, sizeof(::zetasql::ResolvedUpdateArrayItemProto)},
  { 1852, 1867, -1, sizeof(::zetasql::ResolvedUpdateStmtProto)},
  { 1876, 1889, -1, sizeof(::zetasql::ResolvedMergeWhenProto)},
  { 1896, 1908, -1, sizeof(::zetasql::ResolvedMergeStmtProto)},
  { 1914, 1923, -1, sizeof(::zetasql::ResolvedTruncateStmtProto)},
  { 1926, 1935, -1, sizeof(::zetasql::ResolvedPrivilegeProto)},
  { 1938, -1, -1, sizeof(::zetasql::AnyResolvedGrantOrRevokeStmtProto)},
  { 1947, 1959, -1, sizeof(::zetasql::ResolvedGrantOrRevokeStmtProto)},
  { 1965, 1972, -1, sizeof(::zetasql::ResolvedGrantStmtProto)},
  { 1973, 1980, -1, sizeof(::zetasql::ResolvedRevokeStmtProto)},
  { 1981, -1, -1, sizeof(::zetasql::AnyResolvedAlterObjectStmtProto)},
  { 1996, 2006, -1, sizeof(::zetasql::ResolvedAlterObjectStmtProto)},
  { 2010, 2017, -1, sizeof(::zetasql::ResolvedAlterDatabaseStmtProto)},
  { 2018, 2025, -1, sizeof(::zetasql::ResolvedAlterMaterializedViewStmtProto)},
  { 2026, 2033, -1, sizeof(::zetasql::ResolvedAlterSchemaStmtProto)},
  { 2034, 2041, -1, sizeof(::zetasql::ResolvedAlterTableStmtProto)},
  { 2042, 2049, -1, sizeof(::zetasql::ResolvedAlterViewStmtProto)},
  { 2050, -1, -1, sizeof(::zetasql::AnyResolvedAlterActionProto)},
  { 2073, 2080, -1, sizeof(::zetasql::ResolvedAlterActionProto)},
  { 2081, 2089, -1, sizeof(::zetasql::ResolvedSetOptionsActionProto)},
  { 2091, 2100, -1, sizeof(::zetasql::ResolvedAddColumnActionProto)},
  { 2103, 2113, -1, sizeof(::zetasql::ResolvedAddConstraintActionProto)},
  { 2117, 2126, -1, sizeof(::zetasql::ResolvedDropConstraintActionProto)},
  { 2129, 2137, -1, sizeof(::zetasql::ResolvedDropPrimaryKeyActionProto)},
  { 2139, 2149, -1, sizeof(::zetasql::ResolvedAlterColumnOptionsActionProto)},
  { 2153, 2162, -1, sizeof(::zetasql::ResolvedAlterColumnDropNotNullActionProto)},
  { 2165, 2177, -1, sizeof(::zetasql::ResolvedAlterColumnSetDataTypeActionProto)},
  { 2183, 2192, -1, sizeof(::zetasql::ResolvedDropColumnActionProto)},
  { 2195, 2205, -1, sizeof(::zetasql::ResolvedRenameColumnActionProto)},
  { 2209, 2218, -1, sizeof(::zetasql::ResolvedSetAsActionProto)},
  { 2221, 2229, -1, sizeof(::zetasql::ResolvedSetCollateClauseProto)},
  { 2231, 2241, -1, sizeof(::zetasql::ResolvedAlterTableSetOptionsStmtProto)},
  { 2245, 2255, -1, sizeof(::zetasql::ResolvedRenameStmtProto)},
  { 2259, 2274, -1, sizeof(::zetasql::ResolvedCreateRowAccessPolicyStmtProto)},
  { 2283, 2294, -1, sizeof(::zetasql::ResolvedDropRowAccessPolicyStmtProto)},
  { 2299, 2309, -1, sizeof(::zetasql::ResolvedDropSearchIndexStmtProto)},
  { 2313, 2321, -1, sizeof(::zetasql::ResolvedGrantToActionProto)},
  { 2323, 2332, -1, sizeof(::zetasql::ResolvedFilterUsingActionProto)},
  { 2335, 2344, -1, sizeof(::zetasql::ResolvedRevokeFromActionProto)},
  { 2347, 2355, -1, sizeof(::zetasql::ResolvedRenameToActionProto)},
  { 2357, 2366, -1, sizeof(::zetasql::ResolvedAlterRowAccessPolicyStmtProto)},
  { 2369, 2377, -1, sizeof(::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto)},
  { 2379, 2387, -1, sizeof(::zetasql::ResolvedCreateConstantStmtProto)},
  { 2389, 2408, -1, sizeof(::zetasql::ResolvedCreateFunctionStmtProto)},
  { 2421, 2431, -1, sizeof(::zetasql::ResolvedArgumentDefProto)},
  { 2435, 2444, -1, sizeof(::zetasql::ResolvedArgumentRefProto)},
  { 2447, 2464, -1, sizeof(::zetasql::ResolvedCreateTableFunctionStmtProto)},
  { 2475, 2484, -1, sizeof(::zetasql::ResolvedRelationArgumentScanProto)},
  { 2487, 2495, -1, sizeof(::zetasql::ResolvedArgumentListProto)},
  { 2497, 2505, -1, sizeof(::zetasql::ResolvedFunctionSignatureHolderProto)},
  { 2507, 2518, -1, sizeof(::zetasql::ResolvedDropFunctionStmtProto)},
  { 2523, 2532, -1, sizeof(::zetasql::ResolvedDropTableFunctionStmtProto)},
  { 2535, 2545, -1, sizeof(::zetasql::ResolvedCallStmtProto)},
  { 2549, 2562, -1, sizeof(::zetasql::ResolvedImportStmtProto)},
  { 2569, 2578, -1, sizeof(::zetasql::ResolvedModuleStmtProto)},
  { 2581, 2590, -1, sizeof(::zetasql::ResolvedAggregateHavingModifierProto)},
  { 2593, 2603, -1, sizeof(::zetasql::ResolvedCreateMaterializedViewStmtProto)},
  { 2607, 2618, -1, sizeof(::zetasql::ResolvedCreateProcedureStmtProto)},
  { 2623, 2632, -1, sizeof(::zetasql::ResolvedExecuteImmediateArgumentProto)},
  { 2635, 2645, -1, sizeof(::zetasql::ResolvedExecuteImmediateStmtProto)},
  { 2649, 2658, -1, sizeof(::zetasql::ResolvedAssignmentStmtProto)},
  { 2661, 2672, -1, sizeof(::zetasql::ResolvedCreateEntityStmtProto)},
  { 2677, 2685, -1, sizeof(::zetasql::ResolvedAlterEntityStmtProto)},
  { 2687, 2697, -1, sizeof(::zetasql::ResolvedPivotColumnProto)},
  { 2701, 2714, -1, sizeof(::zetasql::ResolvedPivotScanProto)},
  { 2721, 2731, -1, sizeof(::zetasql::ResolvedReturningClauseProto)},
  { 2735, 2743, -1, sizeof(::zetasql::ResolvedUnpivotArgProto)},
  { 2745, 2759, -1, sizeof(::zetasql::ResolvedUnpivotScanProto)},
  { 2767, 2776, -1, sizeof(::zetasql::ResolvedCloneDataStmtProto)},
  { 2779, 2788, -1, sizeof(::zetasql::ResolvedTableAndColumnInfoProto)},
  { 2791, 2800, -1, sizeof(::zetasql::ResolvedAnalyzeStmtProto)},
  { 2803, 2824, -1, sizeof(::zetasql::ResolvedAuxLoadDataStmtProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedNodeProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedArgumentProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedArgumentProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedExprProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedExprProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedLiteralProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedParameterProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedExpressionColumnProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedColumnRefProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedConstantProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedSystemVariableProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedInlineLambdaProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedFilterFieldArgProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedFilterFieldProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedFunctionCallBaseProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedFunctionCallBaseProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedFunctionCallProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedNonScalarFunctionCallBaseProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedNonScalarFunctionCallBaseProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAggregateFunctionCallProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAnalyticFunctionCallProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedExtendedCastElementProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedExtendedCastProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCastProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedMakeStructProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedMakeProtoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedMakeProtoFieldProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedGetStructFieldProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedGetProtoFieldProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedGetJsonFieldProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedFlattenProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedFlattenedArgProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedReplaceFieldItemProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedReplaceFieldProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedSubqueryExprProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedModelProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedConnectionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDescriptorProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedSingleRowScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedTableScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedJoinScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedArrayScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedColumnHolderProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedFilterScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedGroupingSetProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedAggregateScanBaseProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAggregateScanBaseProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAggregateScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAnonymizedAggregateScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedSetOperationItemProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedSetOperationScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedOrderByScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedLimitOffsetScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedWithRefScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAnalyticScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedSampleScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedComputedColumnProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedOrderByItemProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedColumnAnnotationsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedGeneratedColumnInfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedColumnDefaultValueProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedColumnDefinitionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedPrimaryKeyProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedForeignKeyProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCheckConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedOutputColumnProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedProjectScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedTVFScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedGroupRowsScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedFunctionArgumentProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedStatementProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedStatementProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedExplainStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedQueryStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateDatabaseStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedCreateStatementProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateStatementProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedIndexItemProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedUnnestItemProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateIndexStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateSchemaStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedCreateTableStmtBaseProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateTableStmtBaseProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateTableStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateTableAsSelectStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateModelStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedCreateViewBaseProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateViewBaseProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateViewStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedWithPartitionColumnsProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateSnapshotTableStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateExternalTableStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedExportModelStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedExportDataStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDefineTableStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDescribeStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedShowStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedBeginStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedSetTransactionStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCommitStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedRollbackStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedStartBatchStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedRunBatchStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAbortBatchStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDropStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDropMaterializedViewStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDropSnapshotTableStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedRecursiveRefScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedRecursiveScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedWithScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedWithEntryProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedOptionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedWindowPartitioningProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedWindowOrderingProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedWindowFrameProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAnalyticFunctionGroupProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedWindowFrameExprProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDMLValueProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDMLDefaultProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAssertStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAssertRowsModifiedProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedInsertRowProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedInsertStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDeleteStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedUpdateItemProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedUpdateArrayItemProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedUpdateStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedMergeWhenProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedMergeStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedTruncateStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedPrivilegeProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedGrantOrRevokeStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedGrantOrRevokeStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedGrantStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedRevokeStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedAlterObjectStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterObjectStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterDatabaseStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterMaterializedViewStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterSchemaStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterTableStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterViewStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_AnyResolvedAlterActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedSetOptionsActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAddColumnActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAddConstraintActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDropConstraintActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDropPrimaryKeyActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterColumnOptionsActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterColumnDropNotNullActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterColumnSetDataTypeActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDropColumnActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedRenameColumnActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedSetAsActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedSetCollateClauseProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterTableSetOptionsStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedRenameStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateRowAccessPolicyStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDropRowAccessPolicyStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDropSearchIndexStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedGrantToActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedFilterUsingActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedRevokeFromActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedRenameToActionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterRowAccessPolicyStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterAllRowAccessPoliciesStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateConstantStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateFunctionStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedArgumentDefProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedArgumentRefProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateTableFunctionStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedRelationArgumentScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedArgumentListProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedFunctionSignatureHolderProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDropFunctionStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedDropTableFunctionStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCallStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedImportStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedModuleStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAggregateHavingModifierProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateMaterializedViewStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateProcedureStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedExecuteImmediateArgumentProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedExecuteImmediateStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAssignmentStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCreateEntityStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAlterEntityStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedPivotColumnProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedPivotScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedReturningClauseProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedUnpivotArgProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedUnpivotScanProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedCloneDataStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedTableAndColumnInfoProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAnalyzeStmtProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedAuxLoadDataStmtProto_default_instance_),
};

const char descriptor_table_protodef_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'zetasql/resolved_ast/resolved_ast.prot"
  "o\022\007zetasql\032\037zetasql/public/annotation.pr"
  "oto\032*zetasql/public/proto/type_annotatio"
  "n.proto\032\031zetasql/public/type.proto\032$zeta"
  "sql/public/type_parameters.proto\032\034zetasq"
  "l/proto/function.proto\032(zetasql/resolved"
  "_ast/serialization.proto\032-zetasql/resolv"
  "ed_ast/resolved_ast_enums.proto\"\244\002\n\024AnyR"
  "esolvedNodeProto\022C\n\026resolved_argument_no"
  "de\030\001 \001(\0132!.zetasql.AnyResolvedArgumentPr"
  "otoH\000\022;\n\022resolved_expr_node\030\002 \001(\0132\035.zeta"
  "sql.AnyResolvedExprProtoH\000\022;\n\022resolved_s"
  "can_node\030\022 \001(\0132\035.zetasql.AnyResolvedScan"
  "ProtoH\000\022E\n\027resolved_statement_node\030$ \001(\013"
  "2\".zetasql.AnyResolvedStatementProtoH\000B\006"
  "\n\004node\"\354\035\n\030AnyResolvedArgumentProto\022N\n\036r"
  "esolved_make_proto_field_node\030\016 \001(\0132$.ze"
  "tasql.ResolvedMakeProtoFieldProtoH\000\022I\n\033r"
  "esolved_column_holder_node\030\027 \001(\0132\".zetas"
  "ql.ResolvedColumnHolderProtoH\000\022M\n\035resolv"
  "ed_computed_column_node\030  \001(\0132$.zetasql."
  "ResolvedComputedColumnProtoH\000\022H\n\033resolve"
  "d_order_by_item_node\030! \001(\0132!.zetasql.Res"
  "olvedOrderByItemProtoH\000\022I\n\033resolved_outp"
  "ut_column_node\030\" \001(\0132\".zetasql.ResolvedO"
  "utputColumnProtoH\000\022C\n\030resolved_with_entr"
  "y_node\0304 \001(\0132\037.zetasql.ResolvedWithEntry"
  "ProtoH\000\022<\n\024resolved_option_node\0305 \001(\0132\034."
  "zetasql.ResolvedOptionProtoH\000\022U\n!resolve"
  "d_window_partitioning_node\0306 \001(\0132(.zetas"
  "ql.ResolvedWindowPartitioningProtoH\000\022M\n\035"
  "resolved_window_ordering_node\0307 \001(\0132$.ze"
  "tasql.ResolvedWindowOrderingProtoH\000\022G\n\032r"
  "esolved_window_frame_node\0308 \001(\0132!.zetasq"
  "l.ResolvedWindowFrameProtoH\000\022\\\n%resolved"
  "_analytic_function_group_node\0309 \001(\0132+.ze"
  "tasql.ResolvedAnalyticFunctionGroupProto"
  "H\000\022P\n\037resolved_window_frame_expr_node\030: "
  "\001(\0132%.zetasql.ResolvedWindowFrameExprPro"
  "toH\000\022@\n\026resolved_dmlvalue_node\030; \001(\0132\036.z"
  "etasql.ResolvedDMLValueProtoH\000\022V\n\"resolv"
  "ed_assert_rows_modified_node\030= \001(\0132(.zet"
  "asql.ResolvedAssertRowsModifiedProtoH\000\022C"
  "\n\030resolved_insert_row_node\030> \001(\0132\037.zetas"
  "ql.ResolvedInsertRowProtoH\000\022E\n\031resolved_"
  "update_item_node\030A \001(\0132 .zetasql.Resolve"
  "dUpdateItemProtoH\000\022B\n\027resolved_privilege"
  "_node\030C \001(\0132\037.zetasql.ResolvedPrivilegeP"
  "rotoH\000\022G\n\032resolved_argument_def_node\030M \001"
  "(\0132!.zetasql.ResolvedArgumentDefProtoH\000\022"
  "I\n\033resolved_argument_list_node\030O \001(\0132\".z"
  "etasql.ResolvedArgumentListProtoH\000\022Q\n\037re"
  "solved_function_argument_node\030R \001(\0132&.ze"
  "tasql.ResolvedFunctionArgumentProtoH\000\022`\n"
  "\'resolved_function_signature_holder_node"
  "\030T \001(\0132-.zetasql.ResolvedFunctionSignatu"
  "reHolderProtoH\000\022`\n\'resolved_aggregate_ha"
  "ving_modifier_node\030U \001(\0132-.zetasql.Resol"
  "vedAggregateHavingModifierProtoH\000\022Q\n\037res"
  "olved_column_definition_node\030[ \001(\0132&.zet"
  "asql.ResolvedColumnDefinitionProtoH\000\022G\n\032"
  "resolved_grouping_set_node\030] \001(\0132!.zetas"
  "ql.ResolvedGroupingSetProtoH\000\022R\n resolve"
  "d_set_operation_item_node\030^ \001(\0132&.zetasq"
  "l.ResolvedSetOperationItemProtoH\000\022C\n\030res"
  "olved_index_item_node\030` \001(\0132\037.zetasql.Re"
  "solvedIndexItemProtoH\000\022C\n\030resolved_merge"
  "_when_node\030d \001(\0132\037.zetasql.ResolvedMerge"
  "WhenProtoH\000\022P\n\037resolved_update_array_ite"
  "m_node\030f \001(\0132%.zetasql.ResolvedUpdateArr"
  "ayItemProtoH\000\022S\n resolved_column_annotat"
  "ions_node\030h \001(\0132\'.zetasql.ResolvedColumn"
  "AnnotationsProtoH\000\022X\n#resolved_generated"
  "_column_info_node\030i \001(\0132).zetasql.Resolv"
  "edGeneratedColumnInfoProtoH\000\022:\n\023resolved"
  "_model_node\030m \001(\0132\033.zetasql.ResolvedMode"
  "lProtoH\000\022J\n\032resolved_alter_action_node\030t"
  " \001(\0132$.zetasql.AnyResolvedAlterActionPro"
  "toH\000\022E\n\031resolved_unnest_item_node\030~ \001(\0132"
  " .zetasql.ResolvedUnnestItemProtoH\000\022S\n r"
  "esolved_replace_field_item_node\030\200\001 \001(\0132&"
  ".zetasql.ResolvedReplaceFieldItemProtoH\000"
  "\022E\n\030resolved_connection_node\030\215\001 \001(\0132 .ze"
  "tasql.ResolvedConnectionProtoH\000\022c\n(resol"
  "ved_execute_immediate_argument_node\030\217\001 \001"
  "(\0132..zetasql.ResolvedExecuteImmediateArg"
  "umentProtoH\000\022E\n\030resolved_descriptor_node"
  "\030\220\001 \001(\0132 .zetasql.ResolvedDescriptorProt"
  "oH\000\022Y\n#resolved_extended_cast_element_no"
  "de\030\227\001 \001(\0132).zetasql.ResolvedExtendedCast"
  "ElementProtoH\000\022[\n$resolved_with_partitio"
  "n_columns_node\030\231\001 \001(\0132*.zetasql.Resolved"
  "WithPartitionColumnsProtoH\000\022J\n\033resolved_"
  "extended_cast_node\030\236\001 \001(\0132\".zetasql.Reso"
  "lvedExtendedCastProtoH\000\022J\n\033resolved_inli"
  "ne_lambda_node\030\237\001 \001(\0132\".zetasql.Resolved"
  "InlineLambdaProtoH\000\022H\n\030resolved_constrai"
  "nt_node\030\242\001 \001(\0132#.zetasql.AnyResolvedCons"
  "traintProtoH\000\022H\n\032resolved_pivot_column_n"
  "ode\030\246\001 \001(\0132!.zetasql.ResolvedPivotColumn"
  "ProtoH\000\022P\n\036resolved_returning_clause_nod"
  "e\030\252\001 \001(\0132%.zetasql.ResolvedReturningClau"
  "seProtoH\000\022F\n\031resolved_unpivot_arg_node\030\253"
  "\001 \001(\0132 .zetasql.ResolvedUnpivotArgProtoH"
  "\000\022O\n\036resolved_filter_field_arg_node\030\255\001 \001"
  "(\0132$.zetasql.ResolvedFilterFieldArgProto"
  "H\000\022X\n#resolved_table_and_column_info_nod"
  "e\030\263\001 \001(\0132(.zetasql.ResolvedTableAndColum"
  "nInfoProtoH\000\022W\n\"resolved_column_default_"
  "value_node\030\274\001 \001(\0132(.zetasql.ResolvedColu"
  "mnDefaultValueProtoH\000B\006\n\004node\"C\n\025Resolve"
  "dArgumentProto\022*\n\006parent\030\001 \001(\0132\032.zetasql"
  ".ResolvedNodeProto\"\321\013\n\024AnyResolvedExprPr"
  "oto\022>\n\025resolved_literal_node\030\003 \001(\0132\035.zet"
  "asql.ResolvedLiteralProtoH\000\022B\n\027resolved_"
  "parameter_node\030\004 \001(\0132\037.zetasql.ResolvedP"
  "arameterProtoH\000\022Q\n\037resolved_expression_c"
  "olumn_node\030\005 \001(\0132&.zetasql.ResolvedExpre"
  "ssionColumnProtoH\000\022C\n\030resolved_column_re"
  "f_node\030\006 \001(\0132\037.zetasql.ResolvedColumnRef"
  "ProtoH\000\022U\n resolved_function_call_base_n"
  "ode\030\007 \001(\0132).zetasql.AnyResolvedFunctionC"
  "allBaseProtoH\000\0228\n\022resolved_cast_node\030\013 \001"
  "(\0132\032.zetasql.ResolvedCastProtoH\000\022E\n\031reso"
  "lved_make_struct_node\030\014 \001(\0132 .zetasql.Re"
  "solvedMakeStructProtoH\000\022C\n\030resolved_make"
  "_proto_node\030\r \001(\0132\037.zetasql.ResolvedMake"
  "ProtoProtoH\000\022N\n\036resolved_get_struct_fiel"
  "d_node\030\017 \001(\0132$.zetasql.ResolvedGetStruct"
  "FieldProtoH\000\022L\n\035resolved_get_proto_field"
  "_node\030\020 \001(\0132#.zetasql.ResolvedGetProtoFi"
  "eldProtoH\000\022I\n\033resolved_subquery_expr_nod"
  "e\030\021 \001(\0132\".zetasql.ResolvedSubqueryExprPr"
  "otoH\000\022D\n\030resolved_dmldefault_node\030< \001(\0132"
  " .zetasql.ResolvedDMLDefaultProtoH\000\022G\n\032r"
  "esolved_argument_ref_node\030N \001(\0132!.zetasq"
  "l.ResolvedArgumentRefProtoH\000\022@\n\026resolved"
  "_constant_node\030g \001(\0132\036.zetasql.ResolvedC"
  "onstantProtoH\000\022J\n\033resolved_replace_field"
  "_node\030\201\001 \001(\0132\".zetasql.ResolvedReplaceFi"
  "eldProtoH\000\022N\n\035resolved_system_variable_n"
  "ode\030\213\001 \001(\0132$.zetasql.ResolvedSystemVaria"
  "bleProtoH\000\022\?\n\025resolved_flatten_node\030\225\001 \001"
  "(\0132\035.zetasql.ResolvedFlattenProtoH\000\022J\n\033r"
  "esolved_flattened_arg_node\030\226\001 \001(\0132\".zeta"
  "sql.ResolvedFlattenedArgProtoH\000\022K\n\034resol"
  "ved_get_json_field_node\030\245\001 \001(\0132\".zetasql"
  ".ResolvedGetJsonFieldProtoH\000\022H\n\032resolved"
  "_filter_field_node\030\256\001 \001(\0132!.zetasql.Reso"
  "lvedFilterFieldProtoH\000B\006\n\004node\"\233\001\n\021Resol"
  "vedExprProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.R"
  "esolvedNodeProto\022 \n\004type\030\002 \001(\0132\022.zetasql"
  ".TypeProto\0228\n\023type_annotation_map\030\003 \001(\0132"
  "\033.zetasql.AnnotationMapProto\"\310\001\n\024Resolve"
  "dLiteralProto\022*\n\006parent\030\001 \001(\0132\032.zetasql."
  "ResolvedExprProto\022*\n\005value\030\002 \001(\0132\033.zetas"
  "ql.ValueWithTypeProto\022\031\n\021has_explicit_ty"
  "pe\030\003 \001(\010\022\030\n\020float_literal_id\030\004 \001(\003\022#\n\033pr"
  "eserve_in_literal_remover\030\005 \001(\010\"x\n\026Resol"
  "vedParameterProto\022*\n\006parent\030\001 \001(\0132\032.zeta"
  "sql.ResolvedExprProto\022\014\n\004name\030\002 \001(\t\022\020\n\010p"
  "osition\030\005 \001(\003\022\022\n\nis_untyped\030\003 \001(\010\"Y\n\035Res"
  "olvedExpressionColumnProto\022*\n\006parent\030\001 \001"
  "(\0132\032.zetasql.ResolvedExprProto\022\014\n\004name\030\002"
  " \001(\t\"\211\001\n\026ResolvedColumnRefProto\022*\n\006paren"
  "t\030\001 \001(\0132\032.zetasql.ResolvedExprProto\022,\n\006c"
  "olumn\030\002 \001(\0132\034.zetasql.ResolvedColumnProt"
  "o\022\025\n\ris_correlated\030\003 \001(\010\"p\n\025ResolvedCons"
  "tantProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Reso"
  "lvedExprProto\022+\n\010constant\030\002 \001(\0132\031.zetasq"
  "l.ConstantRefProto\"\\\n\033ResolvedSystemVari"
  "ableProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Reso"
  "lvedExprProto\022\021\n\tname_path\030\002 \003(\t\"\346\001\n\031Res"
  "olvedInlineLambdaProto\022.\n\006parent\030\001 \001(\0132\036"
  ".zetasql.ResolvedArgumentProto\0223\n\rargume"
  "nt_list\030\002 \003(\0132\034.zetasql.ResolvedColumnPr"
  "oto\0227\n\016parameter_list\030\003 \003(\0132\037.zetasql.Re"
  "solvedColumnRefProto\022+\n\004body\030\004 \001(\0132\035.zet"
  "asql.AnyResolvedExprProto\"\237\001\n\033ResolvedFi"
  "lterFieldArgProto\022.\n\006parent\030\001 \001(\0132\036.zeta"
  "sql.ResolvedArgumentProto\022\017\n\007include\030\002 \001"
  "(\010\022\?\n\025field_descriptor_path\030\003 \003(\0132 .zeta"
  "sql.FieldDescriptorRefProto\"\270\001\n\030Resolved"
  "FilterFieldProto\022*\n\006parent\030\001 \001(\0132\032.zetas"
  "ql.ResolvedExprProto\022+\n\004expr\030\002 \001(\0132\035.zet"
  "asql.AnyResolvedExprProto\022C\n\025filter_fiel"
  "d_arg_list\030\003 \003(\0132$.zetasql.ResolvedFilte"
  "rFieldArgProto\"\340\001\n AnyResolvedFunctionCa"
  "llBaseProto\022I\n\033resolved_function_call_no"
  "de\030\010 \001(\0132\".zetasql.ResolvedFunctionCallP"
  "rotoH\000\022i\n+resolved_non_scalar_function_c"
  "all_base_node\030V \001(\01322.zetasql.AnyResolve"
  "dNonScalarFunctionCallBaseProtoH\000B\006\n\004nod"
  "e\"\331\003\n\035ResolvedFunctionCallBaseProto\022*\n\006p"
  "arent\030\001 \001(\0132\032.zetasql.ResolvedExprProto\022"
  "+\n\010function\030\002 \001(\0132\031.zetasql.FunctionRefP"
  "roto\0222\n\tsignature\030\003 \001(\0132\037.zetasql.Functi"
  "onSignatureProto\0224\n\rargument_list\030\004 \003(\0132"
  "\035.zetasql.AnyResolvedExprProto\022E\n\025generi"
  "c_argument_list\030\006 \003(\0132&.zetasql.Resolved"
  "FunctionArgumentProto\022D\n\nerror_mode\030\005 \001("
  "\01620.zetasql.ResolvedFunctionCallBaseEnum"
  "s.ErrorMode\022/\n\thint_list\030\007 \003(\0132\034.zetasql"
  ".ResolvedOptionProto\0227\n\016collation_list\030\010"
  " \003(\0132\037.zetasql.ResolvedCollationProto\"\227\001"
  "\n\031ResolvedFunctionCallProto\0226\n\006parent\030\001 "
  "\001(\0132&.zetasql.ResolvedFunctionCallBasePr"
  "oto\022B\n\022function_call_info\030\002 \001(\0132&.zetasq"
  "l.ResolvedFunctionCallInfoProto\"\355\001\n)AnyR"
  "esolvedNonScalarFunctionCallBaseProto\022\\\n"
  "%resolved_aggregate_function_call_node\030\t"
  " \001(\0132+.zetasql.ResolvedAggregateFunction"
  "CallProtoH\000\022Z\n$resolved_analytic_functio"
  "n_call_node\030\n \001(\0132*.zetasql.ResolvedAnal"
  "yticFunctionCallProtoH\000B\006\n\004node\"\342\002\n&Reso"
  "lvedNonScalarFunctionCallBaseProto\0226\n\006pa"
  "rent\030\001 \001(\0132&.zetasql.ResolvedFunctionCal"
  "lBaseProto\022\020\n\010distinct\030\002 \001(\010\022d\n\026null_han"
  "dling_modifier\030\003 \001(\0162D.zetasql.ResolvedN"
  "onScalarFunctionCallBaseEnums.NullHandli"
  "ngModifier\022\?\n\030with_group_rows_subquery\030\004"
  " \001(\0132\035.zetasql.AnyResolvedScanProto\022G\n\036w"
  "ith_group_rows_parameter_list\030\005 \003(\0132\037.ze"
  "tasql.ResolvedColumnRefProto\"\336\002\n\"Resolve"
  "dAggregateFunctionCallProto\022\?\n\006parent\030\001 "
  "\001(\0132/.zetasql.ResolvedNonScalarFunctionC"
  "allBaseProto\022F\n\017having_modifier\030\005 \001(\0132-."
  "zetasql.ResolvedAggregateHavingModifierP"
  "roto\022=\n\022order_by_item_list\030\003 \003(\0132!.zetas"
  "ql.ResolvedOrderByItemProto\022,\n\005limit\030\004 \001"
  "(\0132\035.zetasql.AnyResolvedExprProto\022B\n\022fun"
  "ction_call_info\030\006 \001(\0132&.zetasql.Resolved"
  "FunctionCallInfoProto\"\235\001\n!ResolvedAnalyt"
  "icFunctionCallProto\022\?\n\006parent\030\001 \001(\0132/.ze"
  "tasql.ResolvedNonScalarFunctionCallBaseP"
  "roto\0227\n\014window_frame\030\002 \001(\0132!.zetasql.Res"
  "olvedWindowFrameProto\"\313\001\n ResolvedExtend"
  "edCastElementProto\022.\n\006parent\030\001 \001(\0132\036.zet"
  "asql.ResolvedArgumentProto\022%\n\tfrom_type\030"
  "\002 \001(\0132\022.zetasql.TypeProto\022#\n\007to_type\030\003 \001"
  "(\0132\022.zetasql.TypeProto\022+\n\010function\030\004 \001(\013"
  "2\031.zetasql.FunctionRefProto\"\214\001\n\031Resolved"
  "ExtendedCastProto\022.\n\006parent\030\001 \001(\0132\036.zeta"
  "sql.ResolvedArgumentProto\022\?\n\014element_lis"
  "t\030\002 \003(\0132).zetasql.ResolvedExtendedCastEl"
  "ementProto\"\335\002\n\021ResolvedCastProto\022*\n\006pare"
  "nt\030\001 \001(\0132\032.zetasql.ResolvedExprProto\022+\n\004"
  "expr\030\002 \001(\0132\035.zetasql.AnyResolvedExprProt"
  "o\022\034\n\024return_null_on_error\030\003 \001(\010\0229\n\rexten"
  "ded_cast\030\004 \001(\0132\".zetasql.ResolvedExtende"
  "dCastProto\022-\n\006format\030\005 \001(\0132\035.zetasql.Any"
  "ResolvedExprProto\0220\n\ttime_zone\030\006 \001(\0132\035.z"
  "etasql.AnyResolvedExprProto\0225\n\017type_para"
  "meters\030\007 \001(\0132\034.zetasql.TypeParametersPro"
  "to\"x\n\027ResolvedMakeStructProto\022*\n\006parent\030"
  "\001 \001(\0132\032.zetasql.ResolvedExprProto\0221\n\nfie"
  "ld_list\030\002 \003(\0132\035.zetasql.AnyResolvedExprP"
  "roto\"~\n\026ResolvedMakeProtoProto\022*\n\006parent"
  "\030\001 \001(\0132\032.zetasql.ResolvedExprProto\0228\n\nfi"
  "eld_list\030\002 \003(\0132$.zetasql.ResolvedMakePro"
  "toFieldProto\"\343\001\n\033ResolvedMakeProtoFieldP"
  "roto\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedA"
  "rgumentProto\022:\n\020field_descriptor\030\002 \001(\0132 "
  ".zetasql.FieldDescriptorRefProto\022+\n\006form"
  "at\030\003 \001(\0162\033.zetasql.FieldFormat.Format\022+\n"
  "\004expr\030\004 \001(\0132\035.zetasql.AnyResolvedExprPro"
  "to\"\211\001\n\033ResolvedGetStructFieldProto\022*\n\006pa"
  "rent\030\001 \001(\0132\032.zetasql.ResolvedExprProto\022+"
  "\n\004expr\030\002 \001(\0132\035.zetasql.AnyResolvedExprPr"
  "oto\022\021\n\tfield_idx\030\003 \001(\003\"\320\002\n\032ResolvedGetPr"
  "otoFieldProto\022*\n\006parent\030\001 \001(\0132\032.zetasql."
  "ResolvedExprProto\022+\n\004expr\030\002 \001(\0132\035.zetasq"
  "l.AnyResolvedExprProto\022:\n\020field_descript"
  "or\030\003 \001(\0132 .zetasql.FieldDescriptorRefPro"
  "to\0222\n\rdefault_value\030\004 \001(\0132\033.zetasql.Valu"
  "eWithTypeProto\022\023\n\013get_has_bit\030\005 \001(\010\022+\n\006f"
  "ormat\030\006 \001(\0162\033.zetasql.FieldFormat.Format"
  "\022\'\n\037return_default_value_when_unset\030\007 \001("
  "\010\"\210\001\n\031ResolvedGetJsonFieldProto\022*\n\006paren"
  "t\030\001 \001(\0132\032.zetasql.ResolvedExprProto\022+\n\004e"
  "xpr\030\002 \001(\0132\035.zetasql.AnyResolvedExprProto"
  "\022\022\n\nfield_name\030\003 \001(\t\"\246\001\n\024ResolvedFlatten"
  "Proto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Resolved"
  "ExprProto\022+\n\004expr\030\002 \001(\0132\035.zetasql.AnyRes"
  "olvedExprProto\0225\n\016get_field_list\030\003 \003(\0132\035"
  ".zetasql.AnyResolvedExprProto\"G\n\031Resolve"
  "dFlattenedArgProto\022*\n\006parent\030\001 \001(\0132\032.zet"
  "asql.ResolvedExprProto\"\323\001\n\035ResolvedRepla"
  "ceFieldItemProto\022.\n\006parent\030\001 \001(\0132\036.zetas"
  "ql.ResolvedArgumentProto\022+\n\004expr\030\002 \001(\0132\035"
  ".zetasql.AnyResolvedExprProto\022\031\n\021struct_"
  "index_path\030\003 \003(\003\022:\n\020proto_field_path\030\004 \003"
  "(\0132 .zetasql.FieldDescriptorRefProto\"\275\001\n"
  "\031ResolvedReplaceFieldProto\022*\n\006parent\030\001 \001"
  "(\0132\032.zetasql.ResolvedExprProto\022+\n\004expr\030\002"
  " \001(\0132\035.zetasql.AnyResolvedExprProto\022G\n\027r"
  "eplace_field_item_list\030\003 \003(\0132&.zetasql.R"
  "esolvedReplaceFieldItemProto\"\332\002\n\031Resolve"
  "dSubqueryExprProto\022*\n\006parent\030\001 \001(\0132\032.zet"
  "asql.ResolvedExprProto\022F\n\rsubquery_type\030"
  "\002 \001(\0162/.zetasql.ResolvedSubqueryExprEnum"
  "s.SubqueryType\0227\n\016parameter_list\030\003 \003(\0132\037"
  ".zetasql.ResolvedColumnRefProto\022.\n\007in_ex"
  "pr\030\004 \001(\0132\035.zetasql.AnyResolvedExprProto\022"
  "/\n\010subquery\030\005 \001(\0132\035.zetasql.AnyResolvedS"
  "canProto\022/\n\thint_list\030\006 \003(\0132\034.zetasql.Re"
  "solvedOptionProto\"\317\014\n\024AnyResolvedScanPro"
  "to\022L\n\035resolved_single_row_scan_node\030\023 \001("
  "\0132#.zetasql.ResolvedSingleRowScanProtoH\000"
  "\022C\n\030resolved_table_scan_node\030\024 \001(\0132\037.zet"
  "asql.ResolvedTableScanProtoH\000\022A\n\027resolve"
  "d_join_scan_node\030\025 \001(\0132\036.zetasql.Resolve"
  "dJoinScanProtoH\000\022C\n\030resolved_array_scan_"
  "node\030\026 \001(\0132\037.zetasql.ResolvedArrayScanPr"
  "otoH\000\022E\n\031resolved_filter_scan_node\030\030 \001(\013"
  "2 .zetasql.ResolvedFilterScanProtoH\000\022R\n "
  "resolved_set_operation_scan_node\030\032 \001(\0132&"
  ".zetasql.ResolvedSetOperationScanProtoH\000"
  "\022H\n\033resolved_order_by_scan_node\030\033 \001(\0132!."
  "zetasql.ResolvedOrderByScanProtoH\000\022P\n\037re"
  "solved_limit_offset_scan_node\030\034 \001(\0132%.ze"
  "tasql.ResolvedLimitOffsetScanProtoH\000\022H\n\033"
  "resolved_with_ref_scan_node\030\035 \001(\0132!.zeta"
  "sql.ResolvedWithRefScanProtoH\000\022I\n\033resolv"
  "ed_analytic_scan_node\030\036 \001(\0132\".zetasql.Re"
  "solvedAnalyticScanProtoH\000\022E\n\031resolved_sa"
  "mple_scan_node\030\037 \001(\0132 .zetasql.ResolvedS"
  "ampleScanProtoH\000\022G\n\032resolved_project_sca"
  "n_node\030# \001(\0132!.zetasql.ResolvedProjectSc"
  "anProtoH\000\022A\n\027resolved_with_scan_node\0303 \001"
  "(\0132\036.zetasql.ResolvedWithScanProtoH\000\022>\n\025"
  "resolved_tvfscan_node\030Q \001(\0132\035.zetasql.Re"
  "solvedTVFScanProtoH\000\022Z\n$resolved_relatio"
  "n_argument_scan_node\030Y \001(\0132*.zetasql.Res"
  "olvedRelationArgumentScanProtoH\000\022W\n!reso"
  "lved_aggregate_scan_base_node\030o \001(\0132*.ze"
  "tasql.AnyResolvedAggregateScanBaseProtoH"
  "\000\022S\n resolved_recursive_ref_scan_node\030\223\001"
  " \001(\0132&.zetasql.ResolvedRecursiveRefScanP"
  "rotoH\000\022L\n\034resolved_recursive_scan_node\030\224"
  "\001 \001(\0132#.zetasql.ResolvedRecursiveScanPro"
  "toH\000\022D\n\030resolved_pivot_scan_node\030\241\001 \001(\0132"
  "\037.zetasql.ResolvedPivotScanProtoH\000\022H\n\032re"
  "solved_unpivot_scan_node\030\254\001 \001(\0132!.zetasq"
  "l.ResolvedUnpivotScanProtoH\000\022M\n\035resolved"
  "_group_rows_scan_node\030\260\001 \001(\0132#.zetasql.R"
  "esolvedGroupRowsScanProtoH\000B\006\n\004node\"\267\001\n\021"
  "ResolvedScanProto\022*\n\006parent\030\001 \001(\0132\032.zeta"
  "sql.ResolvedNodeProto\0221\n\013column_list\030\002 \003"
  "(\0132\034.zetasql.ResolvedColumnProto\022/\n\thint"
  "_list\030\003 \003(\0132\034.zetasql.ResolvedOptionProt"
  "o\022\022\n\nis_ordered\030\004 \001(\010\"k\n\022ResolvedModelPr"
  "oto\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedAr"
  "gumentProto\022%\n\005model\030\002 \001(\0132\026.zetasql.Mod"
  "elRefProto\"z\n\027ResolvedConnectionProto\022.\n"
  "\006parent\030\001 \001(\0132\036.zetasql.ResolvedArgument"
  "Proto\022/\n\nconnection\030\002 \001(\0132\033.zetasql.Conn"
  "ectionRefProto\"\254\001\n\027ResolvedDescriptorPro"
  "to\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArg"
  "umentProto\022<\n\026descriptor_column_list\030\002 \003"
  "(\0132\034.zetasql.ResolvedColumnProto\022#\n\033desc"
  "riptor_column_name_list\030\003 \003(\t\"H\n\032Resolve"
  "dSingleRowScanProto\022*\n\006parent\030\001 \001(\0132\032.ze"
  "tasql.ResolvedScanProto\"\322\001\n\026ResolvedTabl"
  "eScanProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Res"
  "olvedScanProto\022%\n\005table\030\002 \001(\0132\026.zetasql."
  "TableRefProto\022;\n\024for_system_time_expr\030\003 "
  "\001(\0132\035.zetasql.AnyResolvedExprProto\022\031\n\021co"
  "lumn_index_list\030\004 \003(\003\022\r\n\005alias\030\005 \001(\t\"\226\002\n"
  "\025ResolvedJoinScanProto\022*\n\006parent\030\001 \001(\0132\032"
  ".zetasql.ResolvedScanProto\022:\n\tjoin_type\030"
  "\002 \001(\0162\'.zetasql.ResolvedJoinScanEnums.Jo"
  "inType\0220\n\tleft_scan\030\003 \001(\0132\035.zetasql.AnyR"
  "esolvedScanProto\0221\n\nright_scan\030\004 \001(\0132\035.z"
  "etasql.AnyResolvedScanProto\0220\n\tjoin_expr"
  "\030\005 \001(\0132\035.zetasql.AnyResolvedExprProto\"\345\002"
  "\n\026ResolvedArrayScanProto\022*\n\006parent\030\001 \001(\013"
  "2\032.zetasql.ResolvedScanProto\0221\n\ninput_sc"
  "an\030\002 \001(\0132\035.zetasql.AnyResolvedScanProto\022"
  "1\n\narray_expr\030\003 \001(\0132\035.zetasql.AnyResolve"
  "dExprProto\0224\n\016element_column\030\004 \001(\0132\034.zet"
  "asql.ResolvedColumnProto\022\?\n\023array_offset"
  "_column\030\005 \001(\0132\".zetasql.ResolvedColumnHo"
  "lderProto\0220\n\tjoin_expr\030\006 \001(\0132\035.zetasql.A"
  "nyResolvedExprProto\022\020\n\010is_outer\030\007 \001(\010\"y\n"
  "\031ResolvedColumnHolderProto\022.\n\006parent\030\001 \001"
  "(\0132\036.zetasql.ResolvedArgumentProto\022,\n\006co"
  "lumn\030\002 \001(\0132\034.zetasql.ResolvedColumnProto"
  "\"\254\001\n\027ResolvedFilterScanProto\022*\n\006parent\030\001"
  " \001(\0132\032.zetasql.ResolvedScanProto\0221\n\ninpu"
  "t_scan\030\002 \001(\0132\035.zetasql.AnyResolvedScanPr"
  "oto\0222\n\013filter_expr\030\003 \001(\0132\035.zetasql.AnyRe"
  "solvedExprProto\"\211\001\n\030ResolvedGroupingSetP"
  "roto\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedA"
  "rgumentProto\022=\n\024group_by_column_list\030\002 \003"
  "(\0132\037.zetasql.ResolvedColumnRefProto\"\332\001\n!"
  "AnyResolvedAggregateScanBaseProto\022K\n\034res"
  "olved_aggregate_scan_node\030\031 \001(\0132#.zetasq"
  "l.ResolvedAggregateScanProtoH\000\022`\n\'resolv"
  "ed_anonymized_aggregate_scan_node\030p \001(\0132"
  "-.zetasql.ResolvedAnonymizedAggregateSca"
  "nProtoH\000B\006\n\004node\"\263\002\n\036ResolvedAggregateSc"
  "anBaseProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Re"
  "solvedScanProto\0221\n\ninput_scan\030\002 \001(\0132\035.ze"
  "tasql.AnyResolvedScanProto\022;\n\rgroup_by_l"
  "ist\030\003 \003(\0132$.zetasql.ResolvedComputedColu"
  "mnProto\0227\n\016collation_list\030\005 \003(\0132\037.zetasq"
  "l.ResolvedCollationProto\022<\n\016aggregate_li"
  "st\030\004 \003(\0132$.zetasql.ResolvedComputedColum"
  "nProto\"\320\001\n\032ResolvedAggregateScanProto\0227\n"
  "\006parent\030\001 \001(\0132\'.zetasql.ResolvedAggregat"
  "eScanBaseProto\022<\n\021grouping_set_list\030\005 \003("
  "\0132!.zetasql.ResolvedGroupingSetProto\022;\n\022"
  "rollup_column_list\030\006 \003(\0132\037.zetasql.Resol"
  "vedColumnRefProto\"\333\001\n$ResolvedAnonymized"
  "AggregateScanProto\0227\n\006parent\030\001 \001(\0132\'.zet"
  "asql.ResolvedAggregateScanBaseProto\0229\n\020k"
  "_threshold_expr\030\005 \001(\0132\037.zetasql.Resolved"
  "ColumnRefProto\022\?\n\031anonymization_option_l"
  "ist\030\006 \003(\0132\034.zetasql.ResolvedOptionProto\""
  "\266\001\n\035ResolvedSetOperationItemProto\022.\n\006par"
  "ent\030\001 \001(\0132\036.zetasql.ResolvedArgumentProt"
  "o\022+\n\004scan\030\002 \001(\0132\035.zetasql.AnyResolvedSca"
  "nProto\0228\n\022output_column_list\030\003 \003(\0132\034.zet"
  "asql.ResolvedColumnProto\"\326\001\n\035ResolvedSet"
  "OperationScanProto\022*\n\006parent\030\001 \001(\0132\032.zet"
  "asql.ResolvedScanProto\022H\n\007op_type\030\002 \001(\0162"
  "7.zetasql.ResolvedSetOperationScanEnums."
  "SetOperationType\022\?\n\017input_item_list\030\004 \003("
  "\0132&.zetasql.ResolvedSetOperationItemProt"
  "o\"\270\001\n\030ResolvedOrderByScanProto\022*\n\006parent"
  "\030\001 \001(\0132\032.zetasql.ResolvedScanProto\0221\n\nin"
  "put_scan\030\002 \001(\0132\035.zetasql.AnyResolvedScan"
  "Proto\022=\n\022order_by_item_list\030\003 \003(\0132!.zeta"
  "sql.ResolvedOrderByItemProto\"\332\001\n\034Resolve"
  "dLimitOffsetScanProto\022*\n\006parent\030\001 \001(\0132\032."
  "zetasql.ResolvedScanProto\0221\n\ninput_scan\030"
  "\002 \001(\0132\035.zetasql.AnyResolvedScanProto\022,\n\005"
  "limit\030\003 \001(\0132\035.zetasql.AnyResolvedExprPro"
  "to\022-\n\006offset\030\004 \001(\0132\035.zetasql.AnyResolved"
  "ExprProto\"_\n\030ResolvedWithRefScanProto\022*\n"
  "\006parent\030\001 \001(\0132\032.zetasql.ResolvedScanProt"
  "o\022\027\n\017with_query_name\030\002 \001(\t\"\304\001\n\031ResolvedA"
  "nalyticScanProto\022*\n\006parent\030\001 \001(\0132\032.zetas"
  "ql.ResolvedScanProto\0221\n\ninput_scan\030\002 \001(\013"
  "2\035.zetasql.AnyResolvedScanProto\022H\n\023funct"
  "ion_group_list\030\003 \003(\0132+.zetasql.ResolvedA"
  "nalyticFunctionGroupProto\"\241\003\n\027ResolvedSa"
  "mpleScanProto\022*\n\006parent\030\001 \001(\0132\032.zetasql."
  "ResolvedScanProto\0221\n\ninput_scan\030\002 \001(\0132\035."
  "zetasql.AnyResolvedScanProto\022\016\n\006method\030\003"
  " \001(\t\022+\n\004size\030\004 \001(\0132\035.zetasql.AnyResolved"
  "ExprProto\0229\n\004unit\030\005 \001(\0162+.zetasql.Resolv"
  "edSampleScanEnums.SampleUnit\022:\n\023repeatab"
  "le_argument\030\006 \001(\0132\035.zetasql.AnyResolvedE"
  "xprProto\0229\n\rweight_column\030\007 \001(\0132\".zetasq"
  "l.ResolvedColumnHolderProto\0228\n\021partition"
  "_by_list\030\010 \003(\0132\035.zetasql.AnyResolvedExpr"
  "Proto\"\250\001\n\033ResolvedComputedColumnProto\022.\n"
  "\006parent\030\001 \001(\0132\036.zetasql.ResolvedArgument"
  "Proto\022,\n\006column\030\002 \001(\0132\034.zetasql.Resolved"
  "ColumnProto\022+\n\004expr\030\003 \001(\0132\035.zetasql.AnyR"
  "esolvedExprProto\"\306\002\n\030ResolvedOrderByItem"
  "Proto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Resolved"
  "ArgumentProto\0223\n\ncolumn_ref\030\002 \001(\0132\037.zeta"
  "sql.ResolvedColumnRefProto\0225\n\016collation_"
  "name\030\003 \001(\0132\035.zetasql.AnyResolvedExprProt"
  "o\022\025\n\ris_descending\030\004 \001(\010\022C\n\nnull_order\030\005"
  " \001(\0162/.zetasql.ResolvedOrderByItemEnums."
  "NullOrderMode\0222\n\tcollation\030\006 \001(\0132\037.zetas"
  "ql.ResolvedCollationProto\"\300\002\n\036ResolvedCo"
  "lumnAnnotationsProto\022.\n\006parent\030\001 \001(\0132\036.z"
  "etasql.ResolvedArgumentProto\0225\n\016collatio"
  "n_name\030\006 \001(\0132\035.zetasql.AnyResolvedExprPr"
  "oto\022\020\n\010not_null\030\002 \001(\010\0221\n\013option_list\030\003 \003"
  "(\0132\034.zetasql.ResolvedOptionProto\022;\n\nchil"
  "d_list\030\004 \003(\0132\'.zetasql.ResolvedColumnAnn"
  "otationsProto\0225\n\017type_parameters\030\005 \001(\0132\034"
  ".zetasql.TypeParametersProto\"\320\001\n Resolve"
  "dGeneratedColumnInfoProto\022.\n\006parent\030\001 \001("
  "\0132\036.zetasql.ResolvedArgumentProto\0221\n\nexp"
  "ression\030\002 \001(\0132\035.zetasql.AnyResolvedExprP"
  "roto\022I\n\013stored_mode\030\005 \001(\01624.zetasql.Reso"
  "lvedGeneratedColumnInfoEnums.StoredMode\""
  "\221\001\n\037ResolvedColumnDefaultValueProto\022.\n\006p"
  "arent\030\001 \001(\0132\036.zetasql.ResolvedArgumentPr"
  "oto\0221\n\nexpression\030\002 \001(\0132\035.zetasql.AnyRes"
  "olvedExprProto\022\013\n\003sql\030\003 \001(\t\"\211\003\n\035Resolved"
  "ColumnDefinitionProto\022.\n\006parent\030\001 \001(\0132\036."
  "zetasql.ResolvedArgumentProto\022\014\n\004name\030\002 "
  "\001(\t\022 \n\004type\030\003 \001(\0132\022.zetasql.TypeProto\022<\n"
  "\013annotations\030\004 \001(\0132\'.zetasql.ResolvedCol"
  "umnAnnotationsProto\022\021\n\tis_hidden\030\005 \001(\010\022,"
  "\n\006column\030\006 \001(\0132\034.zetasql.ResolvedColumnP"
  "roto\022H\n\025generated_column_info\030\007 \001(\0132).ze"
  "tasql.ResolvedGeneratedColumnInfoProto\022\?"
  "\n\rdefault_value\030\t \001(\0132(.zetasql.Resolved"
  "ColumnDefaultValueProto\"\203\002\n\032AnyResolvedC"
  "onstraintProto\022E\n\031resolved_primary_key_n"
  "ode\030\\ \001(\0132 .zetasql.ResolvedPrimaryKeyPr"
  "otoH\000\022E\n\031resolved_foreign_key_node\030n \001(\013"
  "2 .zetasql.ResolvedForeignKeyProtoH\000\022O\n\036"
  "resolved_check_constraint_node\030q \001(\0132%.z"
  "etasql.ResolvedCheckConstraintProtoH\000B\006\n"
  "\004node\"I\n\027ResolvedConstraintProto\022.\n\006pare"
  "nt\030\001 \001(\0132\036.zetasql.ResolvedArgumentProto"
  "\"\341\001\n\027ResolvedPrimaryKeyProto\0220\n\006parent\030\001"
  " \001(\0132 .zetasql.ResolvedConstraintProto\022\032"
  "\n\022column_offset_list\030\002 \003(\003\0221\n\013option_lis"
  "t\030\003 \003(\0132\034.zetasql.ResolvedOptionProto\022\022\n"
  "\nunenforced\030\004 \001(\010\022\027\n\017constraint_name\030\005 \001"
  "(\t\022\030\n\020column_name_list\030\006 \003(\t\"\235\004\n\027Resolve"
  "dForeignKeyProto\0220\n\006parent\030\001 \001(\0132 .zetas"
  "ql.ResolvedConstraintProto\022\027\n\017constraint"
  "_name\030\002 \001(\t\022&\n\036referencing_column_offset"
  "_list\030\003 \003(\003\0220\n\020referenced_table\030\004 \001(\0132\026."
  "zetasql.TableRefProto\022%\n\035referenced_colu"
  "mn_offset_list\030\005 \003(\003\022>\n\nmatch_mode\030\006 \001(\016"
  "2*.zetasql.ResolvedForeignKeyEnums.Match"
  "Mode\022G\n\rupdate_action\030\007 \001(\01620.zetasql.Re"
  "solvedForeignKeyEnums.ActionOperation\022G\n"
  "\rdelete_action\030\010 \001(\01620.zetasql.ResolvedF"
  "oreignKeyEnums.ActionOperation\022\020\n\010enforc"
  "ed\030\t \001(\010\0221\n\013option_list\030\n \003(\0132\034.zetasql."
  "ResolvedOptionProto\022\037\n\027referencing_colum"
  "n_list\030\013 \003(\t\"\341\001\n\034ResolvedCheckConstraint"
  "Proto\0220\n\006parent\030\001 \001(\0132 .zetasql.Resolved"
  "ConstraintProto\022\027\n\017constraint_name\030\002 \001(\t"
  "\0221\n\nexpression\030\003 \001(\0132\035.zetasql.AnyResolv"
  "edExprProto\022\020\n\010enforced\030\004 \001(\010\0221\n\013option_"
  "list\030\005 \003(\0132\034.zetasql.ResolvedOptionProto"
  "\"\207\001\n\031ResolvedOutputColumnProto\022.\n\006parent"
  "\030\001 \001(\0132\036.zetasql.ResolvedArgumentProto\022\014"
  "\n\004name\030\002 \001(\t\022,\n\006column\030\003 \001(\0132\034.zetasql.R"
  "esolvedColumnProto\"\262\001\n\030ResolvedProjectSc"
  "anProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Resolv"
  "edScanProto\0227\n\texpr_list\030\002 \003(\0132$.zetasql"
  ".ResolvedComputedColumnProto\0221\n\ninput_sc"
  "an\030\003 \001(\0132\035.zetasql.AnyResolvedScanProto\""
  "\317\002\n\024ResolvedTVFScanProto\022*\n\006parent\030\001 \001(\013"
  "2\032.zetasql.ResolvedScanProto\0221\n\003tvf\030\002 \001("
  "\0132$.zetasql.TableValuedFunctionRefProto\022"
  "-\n\tsignature\030\003 \001(\0132\032.zetasql.TVFSignatur"
  "eProto\022=\n\rargument_list\030\005 \003(\0132&.zetasql."
  "ResolvedFunctionArgumentProto\022\031\n\021column_"
  "index_list\030\010 \003(\003\022\r\n\005alias\030\006 \001(\t\022@\n\027funct"
  "ion_call_signature\030\007 \001(\0132\037.zetasql.Funct"
  "ionSignatureProto\"\230\001\n\032ResolvedGroupRowsS"
  "canProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Resol"
  "vedScanProto\022\?\n\021input_column_list\030\002 \003(\0132"
  "$.zetasql.ResolvedComputedColumnProto\022\r\n"
  "\005alias\030\003 \001(\t\"\274\003\n\035ResolvedFunctionArgumen"
  "tProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Resolve"
  "dArgumentProto\022+\n\004expr\030\002 \001(\0132\035.zetasql.A"
  "nyResolvedExprProto\022+\n\004scan\030\003 \001(\0132\035.zeta"
  "sql.AnyResolvedScanProto\022*\n\005model\030\005 \001(\0132"
  "\033.zetasql.ResolvedModelProto\0224\n\nconnecti"
  "on\030\006 \001(\0132 .zetasql.ResolvedConnectionPro"
  "to\0228\n\016descriptor_arg\030\007 \001(\0132 .zetasql.Res"
  "olvedDescriptorProto\022:\n\024argument_column_"
  "list\030\004 \003(\0132\034.zetasql.ResolvedColumnProto"
  "\0229\n\rinline_lambda\030\010 \001(\0132\".zetasql.Resolv"
  "edInlineLambdaProto\"\323\032\n\031AnyResolvedState"
  "mentProto\022G\n\032resolved_explain_stmt_node\030"
  "% \001(\0132!.zetasql.ResolvedExplainStmtProto"
  "H\000\022C\n\030resolved_query_stmt_node\030& \001(\0132\037.z"
  "etasql.ResolvedQueryStmtProtoH\000\022R\n\036resol"
  "ved_create_statement_node\030\' \001(\0132(.zetasq"
  "l.AnyResolvedCreateStatementProtoH\000\022N\n\036r"
  "esolved_export_data_stmt_node\030+ \001(\0132$.ze"
  "tasql.ResolvedExportDataStmtProtoH\000\022P\n\037r"
  "esolved_define_table_stmt_node\030, \001(\0132%.z"
  "etasql.ResolvedDefineTableStmtProtoH\000\022I\n"
  "\033resolved_describe_stmt_node\030- \001(\0132\".zet"
  "asql.ResolvedDescribeStmtProtoH\000\022A\n\027reso"
  "lved_show_stmt_node\030. \001(\0132\036.zetasql.Reso"
  "lvedShowStmtProtoH\000\022C\n\030resolved_begin_st"
  "mt_node\030/ \001(\0132\037.zetasql.ResolvedBeginStm"
  "tProtoH\000\022E\n\031resolved_commit_stmt_node\0300 "
  "\001(\0132 .zetasql.ResolvedCommitStmtProtoH\000\022"
  "I\n\033resolved_rollback_stmt_node\0301 \001(\0132\".z"
  "etasql.ResolvedRollbackStmtProtoH\000\022A\n\027re"
  "solved_drop_stmt_node\0302 \001(\0132\036.zetasql.Re"
  "solvedDropStmtProtoH\000\022E\n\031resolved_insert"
  "_stmt_node\030\? \001(\0132 .zetasql.ResolvedInser"
  "tStmtProtoH\000\022E\n\031resolved_delete_stmt_nod"
  "e\030@ \001(\0132 .zetasql.ResolvedDeleteStmtProt"
  "oH\000\022E\n\031resolved_update_stmt_node\030B \001(\0132 "
  ".zetasql.ResolvedUpdateStmtProtoH\000\022X\n\"re"
  "solved_grant_or_revoke_stmt_node\030D \001(\0132*"
  ".zetasql.AnyResolvedGrantOrRevokeStmtPro"
  "toH\000\022d\n*resolved_alter_table_set_options"
  "_stmt_node\030G \001(\0132..zetasql.ResolvedAlter"
  "TableSetOptionsStmtProtoH\000\022E\n\031resolved_r"
  "ename_stmt_node\030H \001(\0132 .zetasql.Resolved"
  "RenameStmtProtoH\000\022f\n+resolved_create_row"
  "_access_policy_stmt_node\030I \001(\0132/.zetasql"
  ".ResolvedCreateRowAccessPolicyStmtProtoH"
  "\000\022b\n)resolved_drop_row_access_policy_stm"
  "t_node\030J \001(\0132-.zetasql.ResolvedDropRowAc"
  "cessPolicyStmtProtoH\000\022R\n resolved_drop_f"
  "unction_stmt_node\030P \001(\0132&.zetasql.Resolv"
  "edDropFunctionStmtProtoH\000\022A\n\027resolved_ca"
  "ll_stmt_node\030S \001(\0132\036.zetasql.ResolvedCal"
  "lStmtProtoH\000\022E\n\031resolved_import_stmt_nod"
  "e\030V \001(\0132 .zetasql.ResolvedImportStmtProt"
  "oH\000\022E\n\031resolved_module_stmt_node\030W \001(\0132 "
  ".zetasql.ResolvedModuleStmtProtoH\000\022V\n\"re"
  "solved_create_database_stmt_node\030_ \001(\0132("
  ".zetasql.ResolvedCreateDatabaseStmtProto"
  "H\000\022E\n\031resolved_assert_stmt_node\030b \001(\0132 ."
  "zetasql.ResolvedAssertStmtProtoH\000\022C\n\030res"
  "olved_merge_stmt_node\030e \001(\0132\037.zetasql.Re"
  "solvedMergeStmtProtoH\000\022S\n\037resolved_alter"
  "_object_stmt_node\030r \001(\0132(.zetasql.AnyRes"
  "olvedAlterObjectStmtProtoH\000\022V\n\"resolved_"
  "set_transaction_stmt_node\030x \001(\0132(.zetasq"
  "l.ResolvedSetTransactionStmtProtoH\000\022c\n)r"
  "esolved_drop_materialized_view_stmt_node"
  "\030y \001(\0132..zetasql.ResolvedDropMaterialize"
  "dViewStmtProtoH\000\022N\n\036resolved_start_batch"
  "_stmt_node\030z \001(\0132$.zetasql.ResolvedStart"
  "BatchStmtProtoH\000\022J\n\034resolved_run_batch_s"
  "tmt_node\030{ \001(\0132\".zetasql.ResolvedRunBatc"
  "hStmtProtoH\000\022N\n\036resolved_abort_batch_stm"
  "t_node\030| \001(\0132$.zetasql.ResolvedAbortBatc"
  "hStmtProtoH\000\022J\n\033resolved_truncate_stmt_n"
  "ode\030\205\001 \001(\0132\".zetasql.ResolvedTruncateStm"
  "tProtoH\000\022[\n$resolved_execute_immediate_s"
  "tmt_node\030\214\001 \001(\0132*.zetasql.ResolvedExecut"
  "eImmediateStmtProtoH\000\022N\n\035resolved_assign"
  "ment_stmt_node\030\216\001 \001(\0132$.zetasql.Resolved"
  "AssignmentStmtProtoH\000\022Q\n\037resolved_export"
  "_model_stmt_node\030\230\001 \001(\0132%.zetasql.Resolv"
  "edExportModelStmtProtoH\000\022^\n&resolved_dro"
  "p_table_function_stmt_node\030\257\001 \001(\0132+.zeta"
  "sql.ResolvedDropTableFunctionStmtProtoH\000"
  "\022M\n\035resolved_clone_data_stmt_node\030\261\001 \001(\013"
  "2#.zetasql.ResolvedCloneDataStmtProtoH\000\022"
  "H\n\032resolved_analyze_stmt_node\030\264\001 \001(\0132!.z"
  "etasql.ResolvedAnalyzeStmtProtoH\000\022^\n&res"
  "olved_drop_snapshot_table_stmt_node\030\267\001 \001"
  "(\0132+.zetasql.ResolvedDropSnapshotTableSt"
  "mtProtoH\000\022R\n resolved_aux_load_data_stmt"
  "_node\030\272\001 \001(\0132%.zetasql.ResolvedAuxLoadDa"
  "taStmtProtoH\000\022Z\n$resolved_drop_search_in"
  "dex_stmt_node\030\276\001 \001(\0132).zetasql.ResolvedD"
  "ropSearchIndexStmtProtoH\000B\006\n\004node\"u\n\026Res"
  "olvedStatementProto\022*\n\006parent\030\001 \001(\0132\032.ze"
  "tasql.ResolvedNodeProto\022/\n\thint_list\030\002 \003"
  "(\0132\034.zetasql.ResolvedOptionProto\"\202\001\n\030Res"
  "olvedExplainStmtProto\022/\n\006parent\030\001 \001(\0132\037."
  "zetasql.ResolvedStatementProto\0225\n\tstatem"
  "ent\030\002 \001(\0132\".zetasql.AnyResolvedStatement"
  "Proto\"\317\001\n\026ResolvedQueryStmtProto\022/\n\006pare"
  "nt\030\001 \001(\0132\037.zetasql.ResolvedStatementProt"
  "o\022>\n\022output_column_list\030\002 \003(\0132\".zetasql."
  "ResolvedOutputColumnProto\022\026\n\016is_value_ta"
  "ble\030\003 \001(\010\022,\n\005query\030\004 \001(\0132\035.zetasql.AnyRe"
  "solvedScanProto\"\230\001\n\037ResolvedCreateDataba"
  "seStmtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Re"
  "solvedStatementProto\022\021\n\tname_path\030\002 \003(\t\022"
  "1\n\013option_list\030\003 \003(\0132\034.zetasql.ResolvedO"
  "ptionProto\"\371\007\n\037AnyResolvedCreateStatemen"
  "tProto\022V\n\"resolved_create_function_stmt_"
  "node\030L \001(\0132(.zetasql.ResolvedCreateFunct"
  "ionStmtProtoH\000\022a\n(resolved_create_table_"
  "function_stmt_node\030X \001(\0132-.zetasql.Resol"
  "vedCreateTableFunctionStmtProtoH\000\022P\n\037res"
  "olved_create_index_stmt_node\030a \001(\0132%.zet"
  "asql.ResolvedCreateIndexStmtProtoH\000\022V\n\"r"
  "esolved_create_constant_stmt_node\030c \001(\0132"
  "(.zetasql.ResolvedCreateConstantStmtProt"
  "oH\000\022\\\n$resolved_create_table_stmt_base_n"
  "ode\030j \001(\0132,.zetasql.AnyResolvedCreateTab"
  "leStmtBaseProtoH\000\022P\n\037resolved_create_mod"
  "el_stmt_node\030k \001(\0132%.zetasql.ResolvedCre"
  "ateModelStmtProtoH\000\022Q\n\036resolved_create_v"
  "iew_base_node\030l \001(\0132\'.zetasql.AnyResolve"
  "dCreateViewBaseProtoH\000\022X\n#resolved_creat"
  "e_procedure_stmt_node\030} \001(\0132).zetasql.Re"
  "solvedCreateProcedureStmtProtoH\000\022S\n reso"
  "lved_create_entity_stmt_node\030\232\001 \001(\0132&.ze"
  "tasql.ResolvedCreateEntityStmtProtoH\000\022S\n"
  " resolved_create_schema_stmt_node\030\235\001 \001(\013"
  "2&.zetasql.ResolvedCreateSchemaStmtProto"
  "H\000\022b\n(resolved_create_snapshot_table_stm"
  "t_node\030\266\001 \001(\0132-.zetasql.ResolvedCreateSn"
  "apshotTableStmtProtoH\000B\006\n\004node\"\362\001\n\034Resol"
  "vedCreateStatementProto\022/\n\006parent\030\001 \001(\0132"
  "\037.zetasql.ResolvedStatementProto\022\021\n\tname"
  "_path\030\002 \003(\t\022G\n\014create_scope\030\005 \001(\01621.zeta"
  "sql.ResolvedCreateStatementEnums.CreateS"
  "cope\022E\n\013create_mode\030\004 \001(\01620.zetasql.Reso"
  "lvedCreateStatementEnums.CreateMode\"\221\001\n\026"
  "ResolvedIndexItemProto\022.\n\006parent\030\001 \001(\0132\036"
  ".zetasql.ResolvedArgumentProto\0223\n\ncolumn"
  "_ref\030\002 \001(\0132\037.zetasql.ResolvedColumnRefPr"
  "oto\022\022\n\ndescending\030\003 \001(\010\"\363\001\n\027ResolvedUnne"
  "stItemProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Re"
  "solvedArgumentProto\0221\n\narray_expr\030\002 \001(\0132"
  "\035.zetasql.AnyResolvedExprProto\0224\n\016elemen"
  "t_column\030\003 \001(\0132\034.zetasql.ResolvedColumnP"
  "roto\022\?\n\023array_offset_column\030\004 \001(\0132\".zeta"
  "sql.ResolvedColumnHolderProto\"\231\004\n\034Resolv"
  "edCreateIndexStmtProto\0225\n\006parent\030\001 \001(\0132%"
  ".zetasql.ResolvedCreateStatementProto\022\027\n"
  "\017table_name_path\030\002 \003(\t\0223\n\ntable_scan\030\003 \001"
  "(\0132\037.zetasql.ResolvedTableScanProto\022\021\n\ti"
  "s_unique\030\004 \001(\010\022\021\n\tis_search\030\n \001(\010\022\031\n\021ind"
  "ex_all_columns\030\013 \001(\010\0228\n\017index_item_list\030"
  "\005 \003(\0132\037.zetasql.ResolvedIndexItemProto\022>"
  "\n\027storing_expression_list\030\t \003(\0132\035.zetasq"
  "l.AnyResolvedExprProto\0221\n\013option_list\030\006 "
  "\003(\0132\034.zetasql.ResolvedOptionProto\022C\n\025com"
  "puted_columns_list\030\007 \003(\0132$.zetasql.Resol"
  "vedComputedColumnProto\022A\n\027unnest_express"
  "ions_list\030\010 \003(\0132 .zetasql.ResolvedUnnest"
  "ItemProto\"\300\001\n\035ResolvedCreateSchemaStmtPr"
  "oto\0225\n\006parent\030\001 \001(\0132%.zetasql.ResolvedCr"
  "eateStatementProto\0225\n\016collation_name\030\003 \001"
  "(\0132\035.zetasql.AnyResolvedExprProto\0221\n\013opt"
  "ion_list\030\002 \003(\0132\034.zetasql.ResolvedOptionP"
  "roto\"\306\002\n#AnyResolvedCreateTableStmtBaseP"
  "roto\022b\n)resolved_create_table_as_select_"
  "stmt_node\030( \001(\0132-.zetasql.ResolvedCreate"
  "TableAsSelectStmtProtoH\000\022a\n(resolved_cre"
  "ate_external_table_stmt_node\030* \001(\0132-.zet"
  "asql.ResolvedCreateExternalTableStmtProt"
  "oH\000\022P\n\037resolved_create_table_stmt_node\030Z"
  " \001(\0132%.zetasql.ResolvedCreateTableStmtPr"
  "otoH\000B\006\n\004node\"\302\004\n ResolvedCreateTableStm"
  "tBaseProto\0225\n\006parent\030\001 \001(\0132%.zetasql.Res"
  "olvedCreateStatementProto\0221\n\013option_list"
  "\030\002 \003(\0132\034.zetasql.ResolvedOptionProto\022F\n\026"
  "column_definition_list\030\003 \003(\0132&.zetasql.R"
  "esolvedColumnDefinitionProto\0228\n\022pseudo_c"
  "olumn_list\030\007 \003(\0132\034.zetasql.ResolvedColum"
  "nProto\0225\n\013primary_key\030\004 \001(\0132 .zetasql.Re"
  "solvedPrimaryKeyProto\022:\n\020foreign_key_lis"
  "t\030\t \003(\0132 .zetasql.ResolvedForeignKeyProt"
  "o\022D\n\025check_constraint_list\030\n \003(\0132%.zetas"
  "ql.ResolvedCheckConstraintProto\022\026\n\016is_va"
  "lue_table\030\010 \001(\010\022*\n\nlike_table\030\013 \001(\0132\026.ze"
  "tasql.TableRefProto\0225\n\016collation_name\030\014 "
  "\001(\0132\035.zetasql.AnyResolvedExprProto\"\260\002\n\034R"
  "esolvedCreateTableStmtProto\0229\n\006parent\030\001 "
  "\001(\0132).zetasql.ResolvedCreateTableStmtBas"
  "eProto\0221\n\nclone_from\030\007 \001(\0132\035.zetasql.Any"
  "ResolvedScanProto\0220\n\tcopy_from\030\010 \001(\0132\035.z"
  "etasql.AnyResolvedScanProto\0228\n\021partition"
  "_by_list\030\005 \003(\0132\035.zetasql.AnyResolvedExpr"
  "Proto\0226\n\017cluster_by_list\030\006 \003(\0132\035.zetasql"
  ".AnyResolvedExprProto\"\301\002\n$ResolvedCreate"
  "TableAsSelectStmtProto\0229\n\006parent\030\001 \001(\0132)"
  ".zetasql.ResolvedCreateTableStmtBaseProt"
  "o\0228\n\021partition_by_list\030\005 \003(\0132\035.zetasql.A"
  "nyResolvedExprProto\0226\n\017cluster_by_list\030\006"
  " \003(\0132\035.zetasql.AnyResolvedExprProto\022>\n\022o"
  "utput_column_list\030\002 \003(\0132\".zetasql.Resolv"
  "edOutputColumnProto\022,\n\005query\030\003 \001(\0132\035.zet"
  "asql.AnyResolvedScanProto\"\250\004\n\034ResolvedCr"
  "eateModelStmtProto\0225\n\006parent\030\001 \001(\0132%.zet"
  "asql.ResolvedCreateStatementProto\0221\n\013opt"
  "ion_list\030\002 \003(\0132\034.zetasql.ResolvedOptionP"
  "roto\022>\n\022output_column_list\030\003 \003(\0132\".zetas"
  "ql.ResolvedOutputColumnProto\022,\n\005query\030\004 "
  "\001(\0132\035.zetasql.AnyResolvedScanProto\022K\n\033tr"
  "ansform_input_column_list\030\010 \003(\0132&.zetasq"
  "l.ResolvedColumnDefinitionProto\022<\n\016trans"
  "form_list\030\005 \003(\0132$.zetasql.ResolvedComput"
  "edColumnProto\022H\n\034transform_output_column"
  "_list\030\006 \003(\0132\".zetasql.ResolvedOutputColu"
  "mnProto\022[\n&transform_analytic_function_g"
  "roup_list\030\007 \003(\0132+.zetasql.ResolvedAnalyt"
  "icFunctionGroupProto\"\341\001\n\036AnyResolvedCrea"
  "teViewBaseProto\022N\n\036resolved_create_view_"
  "stmt_node\030) \001(\0132$.zetasql.ResolvedCreate"
  "ViewStmtProtoH\000\022g\n+resolved_create_mater"
  "ialized_view_stmt_node\030w \001(\01320.zetasql.R"
  "esolvedCreateMaterializedViewStmtProtoH\000"
  "B\006\n\004node\"\224\003\n\033ResolvedCreateViewBaseProto"
  "\0225\n\006parent\030\001 \001(\0132%.zetasql.ResolvedCreat"
  "eStatementProto\0221\n\013option_list\030\002 \003(\0132\034.z"
  "etasql.ResolvedOptionProto\022>\n\022output_col"
  "umn_list\030\003 \003(\0132\".zetasql.ResolvedOutputC"
  "olumnProto\022\034\n\024has_explicit_columns\030\t \001(\010"
  "\022,\n\005query\030\005 \001(\0132\035.zetasql.AnyResolvedSca"
  "nProto\022\013\n\003sql\030\006 \001(\t\022G\n\014sql_security\030\007 \001("
  "\01621.zetasql.ResolvedCreateStatementEnums"
  ".SqlSecurity\022\026\n\016is_value_table\030\004 \001(\010\022\021\n\t"
  "recursive\030\010 \001(\010\"S\n\033ResolvedCreateViewStm"
  "tProto\0224\n\006parent\030\001 \001(\0132$.zetasql.Resolve"
  "dCreateViewBaseProto\"\233\001\n!ResolvedWithPar"
  "titionColumnsProto\022.\n\006parent\030\001 \001(\0132\036.zet"
  "asql.ResolvedArgumentProto\022F\n\026column_def"
  "inition_list\030\002 \003(\0132&.zetasql.ResolvedCol"
  "umnDefinitionProto\"\303\001\n$ResolvedCreateSna"
  "pshotTableStmtProto\0225\n\006parent\030\001 \001(\0132%.ze"
  "tasql.ResolvedCreateStatementProto\0221\n\ncl"
  "one_from\030\002 \001(\0132\035.zetasql.AnyResolvedScan"
  "Proto\0221\n\013option_list\030\003 \003(\0132\034.zetasql.Res"
  "olvedOptionProto\"\343\001\n$ResolvedCreateExter"
  "nalTableStmtProto\0229\n\006parent\030\001 \001(\0132).zeta"
  "sql.ResolvedCreateTableStmtBaseProto\022J\n\026"
  "with_partition_columns\030\002 \001(\0132*.zetasql.R"
  "esolvedWithPartitionColumnsProto\0224\n\nconn"
  "ection\030\003 \001(\0132 .zetasql.ResolvedConnectio"
  "nProto\"\321\001\n\034ResolvedExportModelStmtProto\022"
  "/\n\006parent\030\001 \001(\0132\037.zetasql.ResolvedStatem"
  "entProto\022\027\n\017model_name_path\030\002 \003(\t\0224\n\ncon"
  "nection\030\003 \001(\0132 .zetasql.ResolvedConnecti"
  "onProto\0221\n\013option_list\030\004 \003(\0132\034.zetasql.R"
  "esolvedOptionProto\"\275\002\n\033ResolvedExportDat"
  "aStmtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Res"
  "olvedStatementProto\0224\n\nconnection\030\006 \001(\0132"
  " .zetasql.ResolvedConnectionProto\0221\n\013opt"
  "ion_list\030\002 \003(\0132\034.zetasql.ResolvedOptionP"
  "roto\022>\n\022output_column_list\030\003 \003(\0132\".zetas"
  "ql.ResolvedOutputColumnProto\022\026\n\016is_value"
  "_table\030\004 \001(\010\022,\n\005query\030\005 \001(\0132\035.zetasql.An"
  "yResolvedScanProto\"\225\001\n\034ResolvedDefineTab"
  "leStmtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Re"
  "solvedStatementProto\022\021\n\tname_path\030\002 \003(\t\022"
  "1\n\013option_list\030\003 \003(\0132\034.zetasql.ResolvedO"
  "ptionProto\"\214\001\n\031ResolvedDescribeStmtProto"
  "\022/\n\006parent\030\001 \001(\0132\037.zetasql.ResolvedState"
  "mentProto\022\023\n\013object_type\030\002 \001(\t\022\021\n\tname_p"
  "ath\030\003 \003(\t\022\026\n\016from_name_path\030\004 \003(\t\"\241\001\n\025Re"
  "solvedShowStmtProto\022/\n\006parent\030\001 \001(\0132\037.ze"
  "tasql.ResolvedStatementProto\022\022\n\nidentifi"
  "er\030\002 \001(\t\022\021\n\tname_path\030\003 \003(\t\0220\n\tlike_expr"
  "\030\004 \001(\0132\035.zetasql.ResolvedLiteralProto\"\257\001"
  "\n\026ResolvedBeginStmtProto\022/\n\006parent\030\001 \001(\013"
  "2\037.zetasql.ResolvedStatementProto\022F\n\017rea"
  "d_write_mode\030\003 \001(\0162-.zetasql.ResolvedBeg"
  "inStmtEnums.ReadWriteMode\022\034\n\024isolation_l"
  "evel_list\030\002 \003(\t\"\270\001\n\037ResolvedSetTransacti"
  "onStmtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Re"
  "solvedStatementProto\022F\n\017read_write_mode\030"
  "\003 \001(\0162-.zetasql.ResolvedBeginStmtEnums.R"
  "eadWriteMode\022\034\n\024isolation_level_list\030\002 \003"
  "(\t\"J\n\027ResolvedCommitStmtProto\022/\n\006parent\030"
  "\001 \001(\0132\037.zetasql.ResolvedStatementProto\"L"
  "\n\031ResolvedRollbackStmtProto\022/\n\006parent\030\001 "
  "\001(\0132\037.zetasql.ResolvedStatementProto\"b\n\033"
  "ResolvedStartBatchStmtProto\022/\n\006parent\030\001 "
  "\001(\0132\037.zetasql.ResolvedStatementProto\022\022\n\n"
  "batch_type\030\002 \001(\t\"L\n\031ResolvedRunBatchStmt"
  "Proto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Resolved"
  "StatementProto\"N\n\033ResolvedAbortBatchStmt"
  "Proto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Resolved"
  "StatementProto\"\302\001\n\025ResolvedDropStmtProto"
  "\022/\n\006parent\030\001 \001(\0132\037.zetasql.ResolvedState"
  "mentProto\022\023\n\013object_type\030\002 \001(\t\022\024\n\014is_if_"
  "exists\030\003 \001(\010\022\021\n\tname_path\030\004 \003(\t\022:\n\tdrop_"
  "mode\030\005 \001(\0162\'.zetasql.ResolvedDropStmtEnu"
  "ms.DropMode\"\201\001\n%ResolvedDropMaterialized"
  "ViewStmtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql."
  "ResolvedStatementProto\022\024\n\014is_if_exists\030\003"
  " \001(\010\022\021\n\tname_path\030\004 \003(\t\"~\n\"ResolvedDropS"
  "napshotTableStmtProto\022/\n\006parent\030\001 \001(\0132\037."
  "zetasql.ResolvedStatementProto\022\024\n\014is_if_"
  "exists\030\003 \001(\010\022\021\n\tname_path\030\004 \003(\t\"K\n\035Resol"
  "vedRecursiveRefScanProto\022*\n\006parent\030\001 \001(\013"
  "2\032.zetasql.ResolvedScanProto\"\234\002\n\032Resolve"
  "dRecursiveScanProto\022*\n\006parent\030\001 \001(\0132\032.ze"
  "tasql.ResolvedScanProto\022N\n\007op_type\030\002 \001(\016"
  "2=.zetasql.ResolvedRecursiveScanEnums.Re"
  "cursiveSetOperationType\022B\n\022non_recursive"
  "_term\030\003 \001(\0132&.zetasql.ResolvedSetOperati"
  "onItemProto\022>\n\016recursive_term\030\004 \001(\0132&.ze"
  "tasql.ResolvedSetOperationItemProto\"\276\001\n\025"
  "ResolvedWithScanProto\022*\n\006parent\030\001 \001(\0132\032."
  "zetasql.ResolvedScanProto\0228\n\017with_entry_"
  "list\030\002 \003(\0132\037.zetasql.ResolvedWithEntryPr"
  "oto\022,\n\005query\030\003 \001(\0132\035.zetasql.AnyResolved"
  "ScanProto\022\021\n\trecursive\030\004 \001(\010\"\227\001\n\026Resolve"
  "dWithEntryProto\022.\n\006parent\030\001 \001(\0132\036.zetasq"
  "l.ResolvedArgumentProto\022\027\n\017with_query_na"
  "me\030\002 \001(\t\0224\n\rwith_subquery\030\003 \001(\0132\035.zetasq"
  "l.AnyResolvedScanProto\"\224\001\n\023ResolvedOptio"
  "nProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Resolve"
  "dArgumentProto\022\021\n\tqualifier\030\002 \001(\t\022\014\n\004nam"
  "e\030\003 \001(\t\022,\n\005value\030\004 \001(\0132\035.zetasql.AnyReso"
  "lvedExprProto\"\276\001\n\037ResolvedWindowPartitio"
  "ningProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Reso"
  "lvedArgumentProto\022:\n\021partition_by_list\030\002"
  " \003(\0132\037.zetasql.ResolvedColumnRefProto\022/\n"
  "\thint_list\030\003 \003(\0132\034.zetasql.ResolvedOptio"
  "nProto\"\275\001\n\033ResolvedWindowOrderingProto\022."
  "\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArgumen"
  "tProto\022=\n\022order_by_item_list\030\002 \003(\0132!.zet"
  "asql.ResolvedOrderByItemProto\022/\n\thint_li"
  "st\030\003 \003(\0132\034.zetasql.ResolvedOptionProto\"\377"
  "\001\n\030ResolvedWindowFrameProto\022.\n\006parent\030\001 "
  "\001(\0132\036.zetasql.ResolvedArgumentProto\022\?\n\nf"
  "rame_unit\030\002 \001(\0162+.zetasql.ResolvedWindow"
  "FrameEnums.FrameUnit\0229\n\nstart_expr\030\003 \001(\013"
  "2%.zetasql.ResolvedWindowFrameExprProto\022"
  "7\n\010end_expr\030\004 \001(\0132%.zetasql.ResolvedWind"
  "owFrameExprProto\"\222\002\n\"ResolvedAnalyticFun"
  "ctionGroupProto\022.\n\006parent\030\001 \001(\0132\036.zetasq"
  "l.ResolvedArgumentProto\022>\n\014partition_by\030"
  "\002 \001(\0132(.zetasql.ResolvedWindowPartitioni"
  "ngProto\0226\n\010order_by\030\003 \001(\0132$.zetasql.Reso"
  "lvedWindowOrderingProto\022D\n\026analytic_func"
  "tion_list\030\004 \003(\0132$.zetasql.ResolvedComput"
  "edColumnProto\"\314\001\n\034ResolvedWindowFrameExp"
  "rProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Resolve"
  "dArgumentProto\022I\n\rboundary_type\030\002 \001(\01622."
  "zetasql.ResolvedWindowFrameExprEnums.Bou"
  "ndaryType\0221\n\nexpression\030\003 \001(\0132\035.zetasql."
  "AnyResolvedExprProto\"u\n\025ResolvedDMLValue"
  "Proto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Resolved"
  "ArgumentProto\022,\n\005value\030\002 \001(\0132\035.zetasql.A"
  "nyResolvedExprProto\"E\n\027ResolvedDMLDefaul"
  "tProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Resolve"
  "dExprProto\"\222\001\n\027ResolvedAssertStmtProto\022/"
  "\n\006parent\030\001 \001(\0132\037.zetasql.ResolvedStateme"
  "ntProto\0221\n\nexpression\030\002 \001(\0132\035.zetasql.An"
  "yResolvedExprProto\022\023\n\013description\030\003 \001(\t\""
  "~\n\037ResolvedAssertRowsModifiedProto\022.\n\006pa"
  "rent\030\001 \001(\0132\036.zetasql.ResolvedArgumentPro"
  "to\022+\n\004rows\030\002 \001(\0132\035.zetasql.AnyResolvedEx"
  "prProto\"|\n\026ResolvedInsertRowProto\022.\n\006par"
  "ent\030\001 \001(\0132\036.zetasql.ResolvedArgumentProt"
  "o\0222\n\nvalue_list\030\002 \003(\0132\036.zetasql.Resolved"
  "DMLValueProto\"\335\004\n\027ResolvedInsertStmtProt"
  "o\022/\n\006parent\030\001 \001(\0132\037.zetasql.ResolvedStat"
  "ementProto\0223\n\ntable_scan\030\002 \001(\0132\037.zetasql"
  ".ResolvedTableScanProto\022@\n\013insert_mode\030\003"
  " \001(\0162+.zetasql.ResolvedInsertStmtEnums.I"
  "nsertMode\022F\n\024assert_rows_modified\030\004 \001(\0132"
  "(.zetasql.ResolvedAssertRowsModifiedProt"
  "o\0228\n\treturning\030\n \001(\0132%.zetasql.ResolvedR"
  "eturningClauseProto\0228\n\022insert_column_lis"
  "t\030\005 \003(\0132\034.zetasql.ResolvedColumnProto\022=\n"
  "\024query_parameter_list\030\t \003(\0132\037.zetasql.Re"
  "solvedColumnRefProto\022,\n\005query\030\006 \001(\0132\035.ze"
  "tasql.AnyResolvedScanProto\022>\n\030query_outp"
  "ut_column_list\030\010 \003(\0132\034.zetasql.ResolvedC"
  "olumnProto\0221\n\010row_list\030\007 \003(\0132\037.zetasql.R"
  "esolvedInsertRowProto\"\365\002\n\027ResolvedDelete"
  "StmtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Reso"
  "lvedStatementProto\0223\n\ntable_scan\030\002 \001(\0132\037"
  ".zetasql.ResolvedTableScanProto\022F\n\024asser"
  "t_rows_modified\030\003 \001(\0132(.zetasql.Resolved"
  "AssertRowsModifiedProto\0228\n\treturning\030\006 \001"
  "(\0132%.zetasql.ResolvedReturningClauseProt"
  "o\022\?\n\023array_offset_column\030\005 \001(\0132\".zetasql"
  ".ResolvedColumnHolderProto\0221\n\nwhere_expr"
  "\030\004 \001(\0132\035.zetasql.AnyResolvedExprProto\"\316\003"
  "\n\027ResolvedUpdateItemProto\022.\n\006parent\030\001 \001("
  "\0132\036.zetasql.ResolvedArgumentProto\022-\n\006tar"
  "get\030\002 \001(\0132\035.zetasql.AnyResolvedExprProto"
  "\0221\n\tset_value\030\003 \001(\0132\036.zetasql.ResolvedDM"
  "LValueProto\022:\n\016element_column\030\004 \001(\0132\".ze"
  "tasql.ResolvedColumnHolderProto\022@\n\021array"
  "_update_list\030\010 \003(\0132%.zetasql.ResolvedUpd"
  "ateArrayItemProto\0225\n\013delete_list\030\005 \003(\0132 "
  ".zetasql.ResolvedDeleteStmtProto\0225\n\013upda"
  "te_list\030\006 \003(\0132 .zetasql.ResolvedUpdateSt"
  "mtProto\0225\n\013insert_list\030\007 \003(\0132 .zetasql.R"
  "esolvedInsertStmtProto\"\264\001\n\034ResolvedUpdat"
  "eArrayItemProto\022.\n\006parent\030\001 \001(\0132\036.zetasq"
  "l.ResolvedArgumentProto\022-\n\006offset\030\002 \001(\0132"
  "\035.zetasql.AnyResolvedExprProto\0225\n\013update"
  "_item\030\003 \001(\0132 .zetasql.ResolvedUpdateItem"
  "Proto\"\255\004\n\027ResolvedUpdateStmtProto\022/\n\006par"
  "ent\030\001 \001(\0132\037.zetasql.ResolvedStatementPro"
  "to\0223\n\ntable_scan\030\002 \001(\0132\037.zetasql.Resolve"
  "dTableScanProto\022H\n\022column_access_list\030\010 "
  "\003(\0162,.zetasql.ResolvedStatementEnums.Obj"
  "ectAccess\022F\n\024assert_rows_modified\030\003 \001(\0132"
  "(.zetasql.ResolvedAssertRowsModifiedProt"
  "o\0228\n\treturning\030\t \001(\0132%.zetasql.ResolvedR"
  "eturningClauseProto\022\?\n\023array_offset_colu"
  "mn\030\007 \001(\0132\".zetasql.ResolvedColumnHolderP"
  "roto\0221\n\nwhere_expr\030\004 \001(\0132\035.zetasql.AnyRe"
  "solvedExprProto\022:\n\020update_item_list\030\005 \003("
  "\0132 .zetasql.ResolvedUpdateItemProto\0220\n\tf"
  "rom_scan\030\006 \001(\0132\035.zetasql.AnyResolvedScan"
  "Proto\"\246\003\n\026ResolvedMergeWhenProto\022.\n\006pare"
  "nt\030\001 \001(\0132\036.zetasql.ResolvedArgumentProto"
  "\022=\n\nmatch_type\030\002 \001(\0162).zetasql.ResolvedM"
  "ergeWhenEnums.MatchType\0221\n\nmatch_expr\030\003 "
  "\001(\0132\035.zetasql.AnyResolvedExprProto\022\?\n\013ac"
  "tion_type\030\004 \001(\0162*.zetasql.ResolvedMergeW"
  "henEnums.ActionType\0228\n\022insert_column_lis"
  "t\030\005 \003(\0132\034.zetasql.ResolvedColumnProto\0223\n"
  "\ninsert_row\030\006 \001(\0132\037.zetasql.ResolvedInse"
  "rtRowProto\022:\n\020update_item_list\030\007 \003(\0132 .z"
  "etasql.ResolvedUpdateItemProto\"\350\002\n\026Resol"
  "vedMergeStmtProto\022/\n\006parent\030\001 \001(\0132\037.zeta"
  "sql.ResolvedStatementProto\0223\n\ntable_scan"
  "\030\002 \001(\0132\037.zetasql.ResolvedTableScanProto\022"
  "H\n\022column_access_list\030\006 \003(\0162,.zetasql.Re"
  "solvedStatementEnums.ObjectAccess\0220\n\tfro"
  "m_scan\030\003 \001(\0132\035.zetasql.AnyResolvedScanPr"
  "oto\0221\n\nmerge_expr\030\004 \001(\0132\035.zetasql.AnyRes"
  "olvedExprProto\0229\n\020when_clause_list\030\005 \003(\013"
  "2\037.zetasql.ResolvedMergeWhenProto\"\264\001\n\031Re"
  "solvedTruncateStmtProto\022/\n\006parent\030\001 \001(\0132"
  "\037.zetasql.ResolvedStatementProto\0223\n\ntabl"
  "e_scan\030\003 \001(\0132\037.zetasql.ResolvedTableScan"
  "Proto\0221\n\nwhere_expr\030\004 \001(\0132\035.zetasql.AnyR"
  "esolvedExprProto\"p\n\026ResolvedPrivilegePro"
  "to\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArg"
  "umentProto\022\023\n\013action_type\030\002 \001(\t\022\021\n\tunit_"
  "list\030\003 \003(\t\"\267\001\n!AnyResolvedGrantOrRevokeS"
  "tmtProto\022C\n\030resolved_grant_stmt_node\030E \001"
  "(\0132\037.zetasql.ResolvedGrantStmtProtoH\000\022E\n"
  "\031resolved_revoke_stmt_node\030F \001(\0132 .zetas"
  "ql.ResolvedRevokeStmtProtoH\000B\006\n\004node\"\202\002\n"
  "\036ResolvedGrantOrRevokeStmtProto\022/\n\006paren"
  "t\030\001 \001(\0132\037.zetasql.ResolvedStatementProto"
  "\0227\n\016privilege_list\030\002 \003(\0132\037.zetasql.Resol"
  "vedPrivilegeProto\022\023\n\013object_type\030\003 \001(\t\022\021"
  "\n\tname_path\030\004 \003(\t\022\024\n\014grantee_list\030\005 \003(\t\022"
  "8\n\021grantee_expr_list\030\006 \003(\0132\035.zetasql.Any"
  "ResolvedExprProto\"Q\n\026ResolvedGrantStmtPr"
  "oto\0227\n\006parent\030\001 \001(\0132\'.zetasql.ResolvedGr"
  "antOrRevokeStmtProto\"R\n\027ResolvedRevokeSt"
  "mtProto\0227\n\006parent\030\001 \001(\0132\'.zetasql.Resolv"
  "edGrantOrRevokeStmtProto\"\203\006\n\037AnyResolved"
  "AlterObjectStmtProto\022d\n*resolved_alter_r"
  "ow_access_policy_stmt_node\030K \001(\0132..zetas"
  "ql.ResolvedAlterRowAccessPolicyStmtProto"
  "H\000\022N\n\036resolved_alter_table_stmt_node\030s \001"
  "(\0132$.zetasql.ResolvedAlterTableStmtProto"
  "H\000\022L\n\035resolved_alter_view_stmt_node\030v \001("
  "\0132#.zetasql.ResolvedAlterViewStmtProtoH\000"
  "\022e\n*resolved_alter_materialized_view_stm"
  "t_node\030\177 \001(\0132/.zetasql.ResolvedAlterMate"
  "rializedViewStmtProtoH\000\022U\n!resolved_alte"
  "r_database_stmt_node\030\206\001 \001(\0132\'.zetasql.Re"
  "solvedAlterDatabaseStmtProtoH\000\022p\n0resolv"
  "ed_alter_all_row_access_policies_stmt_no"
  "de\030\221\001 \001(\01323.zetasql.ResolvedAlterAllRowA"
  "ccessPoliciesStmtProtoH\000\022Q\n\037resolved_alt"
  "er_entity_stmt_node\030\233\001 \001(\0132%.zetasql.Res"
  "olvedAlterEntityStmtProtoH\000\022Q\n\037resolved_"
  "alter_schema_stmt_node\030\240\001 \001(\0132%.zetasql."
  "ResolvedAlterSchemaStmtProtoH\000B\006\n\004node\"\271"
  "\001\n\034ResolvedAlterObjectStmtProto\022/\n\006paren"
  "t\030\001 \001(\0132\037.zetasql.ResolvedStatementProto"
  "\022\021\n\tname_path\030\002 \003(\t\022\?\n\021alter_action_list"
  "\030\003 \003(\0132$.zetasql.AnyResolvedAlterActionP"
  "roto\022\024\n\014is_if_exists\030\004 \001(\010\"W\n\036ResolvedAl"
  "terDatabaseStmtProto\0225\n\006parent\030\001 \001(\0132%.z"
  "etasql.ResolvedAlterObjectStmtProto\"_\n&R"
  "esolvedAlterMaterializedViewStmtProto\0225\n"
  "\006parent\030\001 \001(\0132%.zetasql.ResolvedAlterObj"
  "ectStmtProto\"U\n\034ResolvedAlterSchemaStmtP"
  "roto\0225\n\006parent\030\001 \001(\0132%.zetasql.ResolvedA"
  "lterObjectStmtProto\"T\n\033ResolvedAlterTabl"
  "eStmtProto\0225\n\006parent\030\001 \001(\0132%.zetasql.Res"
  "olvedAlterObjectStmtProto\"S\n\032ResolvedAlt"
  "erViewStmtProto\0225\n\006parent\030\001 \001(\0132%.zetasq"
  "l.ResolvedAlterObjectStmtProto\"\302\013\n\033AnyRe"
  "solvedAlterActionProto\022R\n resolved_set_o"
  "ptions_action_node\030u \001(\0132&.zetasql.Resol"
  "vedSetOptionsActionProtoH\000\022Q\n\037resolved_a"
  "dd_column_action_node\030\203\001 \001(\0132%.zetasql.R"
  "esolvedAddColumnActionProtoH\000\022S\n resolve"
  "d_drop_column_action_node\030\204\001 \001(\0132&.zetas"
  "ql.ResolvedDropColumnActionProtoH\000\022M\n\035re"
  "solved_grant_to_action_node\030\207\001 \001(\0132#.zet"
  "asql.ResolvedGrantToActionProtoH\000\022U\n!res"
  "olved_filter_using_action_node\030\210\001 \001(\0132\'."
  "zetasql.ResolvedFilterUsingActionProtoH\000"
  "\022S\n resolved_revoke_from_action_node\030\211\001 "
  "\001(\0132&.zetasql.ResolvedRevokeFromActionPr"
  "otoH\000\022O\n\036resolved_rename_to_action_node\030"
  "\212\001 \001(\0132$.zetasql.ResolvedRenameToActionP"
  "rotoH\000\022I\n\033resolved_set_as_action_node\030\234\001"
  " \001(\0132!.zetasql.ResolvedSetAsActionProtoH"
  "\000\022Y\n#resolved_add_constraint_action_node"
  "\030\243\001 \001(\0132).zetasql.ResolvedAddConstraintA"
  "ctionProtoH\000\022[\n$resolved_drop_constraint"
  "_action_node\030\244\001 \001(\0132*.zetasql.ResolvedDr"
  "opConstraintActionProtoH\000\022d\n)resolved_al"
  "ter_column_options_action_node\030\251\001 \001(\0132.."
  "zetasql.ResolvedAlterColumnOptionsAction"
  "ProtoH\000\022n\n/resolved_alter_column_drop_no"
  "t_null_action_node\030\262\001 \001(\01322.zetasql.Reso"
  "lvedAlterColumnDropNotNullActionProtoH\000\022"
  "n\n/resolved_alter_column_set_data_type_a"
  "ction_node\030\265\001 \001(\01322.zetasql.ResolvedAlte"
  "rColumnSetDataTypeActionProtoH\000\022\\\n%resol"
  "ved_drop_primary_key_action_node\030\270\001 \001(\0132"
  "*.zetasql.ResolvedDropPrimaryKeyActionPr"
  "otoH\000\022W\n\"resolved_rename_column_action_n"
  "ode\030\271\001 \001(\0132(.zetasql.ResolvedRenameColum"
  "nActionProtoH\000\022S\n resolved_set_collate_c"
  "lause_node\030\273\001 \001(\0132&.zetasql.ResolvedSetC"
  "ollateClauseProtoH\000B\006\n\004node\"J\n\030ResolvedA"
  "lterActionProto\022.\n\006parent\030\001 \001(\0132\036.zetasq"
  "l.ResolvedArgumentProto\"\205\001\n\035ResolvedSetO"
  "ptionsActionProto\0221\n\006parent\030\001 \001(\0132!.zeta"
  "sql.ResolvedAlterActionProto\0221\n\013option_l"
  "ist\030\002 \003(\0132\034.zetasql.ResolvedOptionProto\""
  "\256\001\n\034ResolvedAddColumnActionProto\0221\n\006pare"
  "nt\030\001 \001(\0132!.zetasql.ResolvedAlterActionPr"
  "oto\022\030\n\020is_if_not_exists\030\002 \001(\010\022A\n\021column_"
  "definition\030\003 \001(\0132&.zetasql.ResolvedColum"
  "nDefinitionProto\"\317\001\n ResolvedAddConstrai"
  "ntActionProto\0221\n\006parent\030\001 \001(\0132!.zetasql."
  "ResolvedAlterActionProto\022\030\n\020is_if_not_ex"
  "ists\030\002 \001(\010\0227\n\nconstraint\030\003 \001(\0132#.zetasql"
  ".AnyResolvedConstraintProto\022%\n\005table\030\004 \001"
  "(\0132\026.zetasql.TableRefProto\"z\n!ResolvedDr"
  "opConstraintActionProto\0221\n\006parent\030\001 \001(\0132"
  "!.zetasql.ResolvedAlterActionProto\022\024\n\014is"
  "_if_exists\030\002 \001(\010\022\014\n\004name\030\003 \001(\t\"l\n!Resolv"
  "edDropPrimaryKeyActionProto\0221\n\006parent\030\001 "
  "\001(\0132!.zetasql.ResolvedAlterActionProto\022\024"
  "\n\014is_if_exists\030\002 \001(\010\"\263\001\n%ResolvedAlterCo"
  "lumnOptionsActionProto\0221\n\006parent\030\001 \001(\0132!"
  ".zetasql.ResolvedAlterActionProto\022\024\n\014is_"
  "if_exists\030\005 \001(\010\022\016\n\006column\030\003 \001(\t\0221\n\013optio"
  "n_list\030\004 \003(\0132\034.zetasql.ResolvedOptionPro"
  "to\"\204\001\n)ResolvedAlterColumnDropNotNullAct"
  "ionProto\0221\n\006parent\030\001 \001(\0132!.zetasql.Resol"
  "vedAlterActionProto\022\024\n\014is_if_exists\030\003 \001("
  "\010\022\016\n\006column\030\002 \001(\t\"\263\002\n)ResolvedAlterColum"
  "nSetDataTypeActionProto\0221\n\006parent\030\001 \001(\0132"
  "!.zetasql.ResolvedAlterActionProto\022\024\n\014is"
  "_if_exists\030\002 \001(\010\022\016\n\006column\030\003 \001(\t\022(\n\014upda"
  "ted_type\030\004 \001(\0132\022.zetasql.TypeProto\022=\n\027up"
  "dated_type_parameters\030\005 \001(\0132\034.zetasql.Ty"
  "peParametersProto\022D\n\023updated_annotations"
  "\030\006 \001(\0132\'.zetasql.ResolvedColumnAnnotatio"
  "nsProto\"v\n\035ResolvedDropColumnActionProto"
  "\0221\n\006parent\030\001 \001(\0132!.zetasql.ResolvedAlter"
  "ActionProto\022\024\n\014is_if_exists\030\002 \001(\010\022\014\n\004nam"
  "e\030\003 \001(\t\"\212\001\n\037ResolvedRenameColumnActionPr"
  "oto\0221\n\006parent\030\001 \001(\0132!.zetasql.ResolvedAl"
  "terActionProto\022\024\n\014is_if_exists\030\004 \001(\010\022\014\n\004"
  "name\030\002 \001(\t\022\020\n\010new_name\030\003 \001(\t\"\201\001\n\030Resolve"
  "dSetAsActionProto\0221\n\006parent\030\001 \001(\0132!.zeta"
  "sql.ResolvedAlterActionProto\022\030\n\020entity_b"
  "ody_json\030\002 \001(\t\022\030\n\020entity_body_text\030\003 \001(\t"
  "\"\211\001\n\035ResolvedSetCollateClauseProto\0221\n\006pa"
  "rent\030\001 \001(\0132!.zetasql.ResolvedAlterAction"
  "Proto\0225\n\016collation_name\030\002 \001(\0132\035.zetasql."
  "AnyResolvedExprProto\"\264\001\n%ResolvedAlterTa"
  "bleSetOptionsStmtProto\022/\n\006parent\030\001 \001(\0132\037"
  ".zetasql.ResolvedStatementProto\022\021\n\tname_"
  "path\030\002 \003(\t\0221\n\013option_list\030\003 \003(\0132\034.zetasq"
  "l.ResolvedOptionProto\022\024\n\014is_if_exists\030\004 "
  "\001(\010\"\215\001\n\027ResolvedRenameStmtProto\022/\n\006paren"
  "t\030\001 \001(\0132\037.zetasql.ResolvedStatementProto"
  "\022\023\n\013object_type\030\002 \001(\t\022\025\n\rold_name_path\030\003"
  " \003(\t\022\025\n\rnew_name_path\030\004 \003(\t\"\226\003\n&Resolved"
  "CreateRowAccessPolicyStmtProto\022/\n\006parent"
  "\030\001 \001(\0132\037.zetasql.ResolvedStatementProto\022"
  "E\n\013create_mode\030\002 \001(\01620.zetasql.ResolvedC"
  "reateStatementEnums.CreateMode\022\014\n\004name\030\003"
  " \001(\t\022\030\n\020target_name_path\030\004 \003(\t\022\024\n\014grante"
  "e_list\030\005 \003(\t\0228\n\021grantee_expr_list\030\t \003(\0132"
  "\035.zetasql.AnyResolvedExprProto\0223\n\ntable_"
  "scan\030\006 \001(\0132\037.zetasql.ResolvedTableScanPr"
  "oto\0220\n\tpredicate\030\007 \001(\0132\035.zetasql.AnyReso"
  "lvedExprProto\022\025\n\rpredicate_str\030\010 \001(\t\"\252\001\n"
  "$ResolvedDropRowAccessPolicyStmtProto\022/\n"
  "\006parent\030\001 \001(\0132\037.zetasql.ResolvedStatemen"
  "tProto\022\023\n\013is_drop_all\030\002 \001(\010\022\024\n\014is_if_exi"
  "sts\030\003 \001(\010\022\014\n\004name\030\004 \001(\t\022\030\n\020target_name_p"
  "ath\030\005 \003(\t\"\220\001\n ResolvedDropSearchIndexStm"
  "tProto\022/\n\006parent\030\001 \001(\0132\037.zetasql.Resolve"
  "dStatementProto\022\024\n\014is_if_exists\030\002 \001(\010\022\014\n"
  "\004name\030\003 \001(\t\022\027\n\017table_name_path\030\004 \003(\t\"\211\001\n"
  "\032ResolvedGrantToActionProto\0221\n\006parent\030\001 "
  "\001(\0132!.zetasql.ResolvedAlterActionProto\0228"
  "\n\021grantee_expr_list\030\002 \003(\0132\035.zetasql.AnyR"
  "esolvedExprProto\"\234\001\n\036ResolvedFilterUsing"
  "ActionProto\0221\n\006parent\030\001 \001(\0132!.zetasql.Re"
  "solvedAlterActionProto\0220\n\tpredicate\030\002 \001("
  "\0132\035.zetasql.AnyResolvedExprProto\022\025\n\rpred"
  "icate_str\030\003 \001(\t\"\250\001\n\035ResolvedRevokeFromAc"
  "tionProto\0221\n\006parent\030\001 \001(\0132!.zetasql.Reso"
  "lvedAlterActionProto\0228\n\021revokee_expr_lis"
  "t\030\002 \003(\0132\035.zetasql.AnyResolvedExprProto\022\032"
  "\n\022is_revoke_from_all\030\003 \001(\010\"b\n\033ResolvedRe"
  "nameToActionProto\0221\n\006parent\030\001 \001(\0132!.zeta"
  "sql.ResolvedAlterActionProto\022\020\n\010new_path"
  "\030\002 \003(\t\"\241\001\n%ResolvedAlterRowAccessPolicyS"
  "tmtProto\0225\n\006parent\030\001 \001(\0132%.zetasql.Resol"
  "vedAlterObjectStmtProto\022\014\n\004name\030\002 \001(\t\0223\n"
  "\ntable_scan\030\006 \001(\0132\037.zetasql.ResolvedTabl"
  "eScanProto\"\230\001\n*ResolvedAlterAllRowAccess"
  "PoliciesStmtProto\0225\n\006parent\030\001 \001(\0132%.zeta"
  "sql.ResolvedAlterObjectStmtProto\0223\n\ntabl"
  "e_scan\030\006 \001(\0132\037.zetasql.ResolvedTableScan"
  "Proto\"\205\001\n\037ResolvedCreateConstantStmtProt"
  "o\0225\n\006parent\030\001 \001(\0132%.zetasql.ResolvedCrea"
  "teStatementProto\022+\n\004expr\030\002 \001(\0132\035.zetasql"
  ".AnyResolvedExprProto\"\375\004\n\037ResolvedCreate"
  "FunctionStmtProto\0225\n\006parent\030\001 \001(\0132%.zeta"
  "sql.ResolvedCreateStatementProto\022 \n\030has_"
  "explicit_return_type\030\r \001(\010\022\'\n\013return_typ"
  "e\030\003 \001(\0132\022.zetasql.TypeProto\022\032\n\022argument_"
  "name_list\030\013 \003(\t\0222\n\tsignature\030\n \001(\0132\037.zet"
  "asql.FunctionSignatureProto\022\024\n\014is_aggreg"
  "ate\030\010 \001(\010\022\020\n\010language\030\004 \001(\t\022\014\n\004code\030\005 \001("
  "\t\022G\n\031aggregate_expression_list\030\t \003(\0132$.z"
  "etasql.ResolvedComputedColumnProto\022:\n\023fu"
  "nction_expression\030\006 \001(\0132\035.zetasql.AnyRes"
  "olvedExprProto\0221\n\013option_list\030\007 \003(\0132\034.ze"
  "tasql.ResolvedOptionProto\022G\n\014sql_securit"
  "y\030\014 \001(\01621.zetasql.ResolvedCreateStatemen"
  "tEnums.SqlSecurity\022Q\n\021determinism_level\030"
  "\016 \001(\01626.zetasql.ResolvedCreateStatementE"
  "nums.DeterminismLevel\"\301\001\n\030ResolvedArgume"
  "ntDefProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Res"
  "olvedArgumentProto\022\014\n\004name\030\002 \001(\t\022 \n\004type"
  "\030\003 \001(\0132\022.zetasql.TypeProto\022E\n\rargument_k"
  "ind\030\004 \001(\0162..zetasql.ResolvedArgumentDefE"
  "nums.ArgumentKind\"\233\001\n\030ResolvedArgumentRe"
  "fProto\022*\n\006parent\030\001 \001(\0132\032.zetasql.Resolve"
  "dExprProto\022\014\n\004name\030\002 \001(\t\022E\n\rargument_kin"
  "d\030\003 \001(\0162..zetasql.ResolvedArgumentDefEnu"
  "ms.ArgumentKind\"\363\003\n$ResolvedCreateTableF"
  "unctionStmtProto\0225\n\006parent\030\001 \001(\0132%.zetas"
  "ql.ResolvedCreateStatementProto\022\032\n\022argum"
  "ent_name_list\030\002 \003(\t\0222\n\tsignature\030\003 \001(\0132\037"
  ".zetasql.FunctionSignatureProto\022\"\n\032has_e"
  "xplicit_return_schema\030\013 \001(\010\0221\n\013option_li"
  "st\030\004 \003(\0132\034.zetasql.ResolvedOptionProto\022\020"
  "\n\010language\030\005 \001(\t\022\014\n\004code\030\006 \001(\t\022,\n\005query\030"
  "\007 \001(\0132\035.zetasql.AnyResolvedScanProto\022>\n\022"
  "output_column_list\030\010 \003(\0132\".zetasql.Resol"
  "vedOutputColumnProto\022\026\n\016is_value_table\030\t"
  " \001(\010\022G\n\014sql_security\030\n \001(\01621.zetasql.Res"
  "olvedCreateStatementEnums.SqlSecurity\"u\n"
  "!ResolvedRelationArgumentScanProto\022*\n\006pa"
  "rent\030\001 \001(\0132\032.zetasql.ResolvedScanProto\022\014"
  "\n\004name\030\002 \001(\t\022\026\n\016is_value_table\030\003 \001(\010\"\200\001\n"
  "\031ResolvedArgumentListProto\022.\n\006parent\030\001 \001"
  "(\0132\036.zetasql.ResolvedArgumentProto\0223\n\010ar"
  "g_list\030\002 \003(\0132!.zetasql.ResolvedArgumentD"
  "efProto\"\212\001\n$ResolvedFunctionSignatureHol"
  "derProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Resol"
  "vedArgumentProto\0222\n\tsignature\030\002 \001(\0132\037.ze"
  "tasql.FunctionSignatureProto\"\362\001\n\035Resolve"
  "dDropFunctionStmtProto\022/\n\006parent\030\001 \001(\0132\037"
  ".zetasql.ResolvedStatementProto\022\024\n\014is_if"
  "_exists\030\002 \001(\010\022\021\n\tname_path\030\003 \003(\t\0225\n\targu"
  "ments\030\004 \001(\0132\".zetasql.ResolvedArgumentLi"
  "stProto\022@\n\tsignature\030\005 \001(\0132-.zetasql.Res"
  "olvedFunctionSignatureHolderProto\"~\n\"Res"
  "olvedDropTableFunctionStmtProto\022/\n\006paren"
  "t\030\001 \001(\0132\037.zetasql.ResolvedStatementProto"
  "\022\024\n\014is_if_exists\030\002 \001(\010\022\021\n\tname_path\030\003 \003("
  "\t\"\341\001\n\025ResolvedCallStmtProto\022/\n\006parent\030\001 "
  "\001(\0132\037.zetasql.ResolvedStatementProto\022-\n\t"
  "procedure\030\002 \001(\0132\032.zetasql.ProcedureRefPr"
  "oto\0222\n\tsignature\030\003 \001(\0132\037.zetasql.Functio"
  "nSignatureProto\0224\n\rargument_list\030\004 \003(\0132\035"
  ".zetasql.AnyResolvedExprProto\"\222\002\n\027Resolv"
  "edImportStmtProto\022/\n\006parent\030\001 \001(\0132\037.zeta"
  "sql.ResolvedStatementProto\022@\n\013import_kin"
  "d\030\002 \001(\0162+.zetasql.ResolvedImportStmtEnum"
  "s.ImportKind\022\021\n\tname_path\030\003 \003(\t\022\021\n\tfile_"
  "path\030\004 \001(\t\022\022\n\nalias_path\030\005 \003(\t\022\027\n\017into_a"
  "lias_path\030\007 \003(\t\0221\n\013option_list\030\006 \003(\0132\034.z"
  "etasql.ResolvedOptionProto\"\220\001\n\027ResolvedM"
  "oduleStmtProto\022/\n\006parent\030\001 \001(\0132\037.zetasql"
  ".ResolvedStatementProto\022\021\n\tname_path\030\002 \003"
  "(\t\0221\n\013option_list\030\003 \003(\0132\034.zetasql.Resolv"
  "edOptionProto\"\332\001\n$ResolvedAggregateHavin"
  "gModifierProto\022.\n\006parent\030\001 \001(\0132\036.zetasql"
  ".ResolvedArgumentProto\022N\n\004kind\030\002 \001(\0162@.z"
  "etasql.ResolvedAggregateHavingModifierEn"
  "ums.HavingModifierKind\0222\n\013having_expr\030\003 "
  "\001(\0132\035.zetasql.AnyResolvedExprProto\"\231\002\n\'R"
  "esolvedCreateMaterializedViewStmtProto\0224"
  "\n\006parent\030\001 \001(\0132$.zetasql.ResolvedCreateV"
  "iewBaseProto\022F\n\026column_definition_list\030\002"
  " \003(\0132&.zetasql.ResolvedColumnDefinitionP"
  "roto\0228\n\021partition_by_list\030\003 \003(\0132\035.zetasq"
  "l.AnyResolvedExprProto\0226\n\017cluster_by_lis"
  "t\030\004 \003(\0132\035.zetasql.AnyResolvedExprProto\"\364"
  "\001\n ResolvedCreateProcedureStmtProto\0225\n\006p"
  "arent\030\001 \001(\0132%.zetasql.ResolvedCreateStat"
  "ementProto\022\032\n\022argument_name_list\030\002 \003(\t\0222"
  "\n\tsignature\030\003 \001(\0132\037.zetasql.FunctionSign"
  "atureProto\0221\n\013option_list\030\004 \003(\0132\034.zetasq"
  "l.ResolvedOptionProto\022\026\n\016procedure_body\030"
  "\005 \001(\t\"\230\001\n%ResolvedExecuteImmediateArgume"
  "ntProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Resolv"
  "edArgumentProto\022\014\n\004name\030\002 \001(\t\0221\n\nexpress"
  "ion\030\003 \001(\0132\035.zetasql.AnyResolvedExprProto"
  "\"\353\001\n!ResolvedExecuteImmediateStmtProto\022/"
  "\n\006parent\030\001 \001(\0132\037.zetasql.ResolvedStateme"
  "ntProto\022*\n\003sql\030\002 \001(\0132\035.zetasql.AnyResolv"
  "edExprProto\022\034\n\024into_identifier_list\030\003 \003("
  "\t\022K\n\023using_argument_list\030\004 \003(\0132..zetasql"
  ".ResolvedExecuteImmediateArgumentProto\"\252"
  "\001\n\033ResolvedAssignmentStmtProto\022/\n\006parent"
  "\030\001 \001(\0132\037.zetasql.ResolvedStatementProto\022"
  "-\n\006target\030\002 \001(\0132\035.zetasql.AnyResolvedExp"
  "rProto\022+\n\004expr\030\003 \001(\0132\035.zetasql.AnyResolv"
  "edExprProto\"\322\001\n\035ResolvedCreateEntityStmt"
  "Proto\0225\n\006parent\030\001 \001(\0132%.zetasql.Resolved"
  "CreateStatementProto\022\023\n\013entity_type\030\002 \001("
  "\t\022\030\n\020entity_body_json\030\003 \001(\t\022\030\n\020entity_bo"
  "dy_text\030\005 \001(\t\0221\n\013option_list\030\004 \003(\0132\034.zet"
  "asql.ResolvedOptionProto\"j\n\034ResolvedAlte"
  "rEntityStmtProto\0225\n\006parent\030\001 \001(\0132%.zetas"
  "ql.ResolvedAlterObjectStmtProto\022\023\n\013entit"
  "y_type\030\002 \001(\t\"\255\001\n\030ResolvedPivotColumnProt"
  "o\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedArgu"
  "mentProto\022,\n\006column\030\002 \001(\0132\034.zetasql.Reso"
  "lvedColumnProto\022\030\n\020pivot_expr_index\030\003 \001("
  "\003\022\031\n\021pivot_value_index\030\004 \001(\003\"\224\003\n\026Resolve"
  "dPivotScanProto\022*\n\006parent\030\001 \001(\0132\032.zetasq"
  "l.ResolvedScanProto\0221\n\ninput_scan\030\002 \001(\0132"
  "\035.zetasql.AnyResolvedScanProto\022;\n\rgroup_"
  "by_list\030\003 \003(\0132$.zetasql.ResolvedComputed"
  "ColumnProto\0226\n\017pivot_expr_list\030\004 \003(\0132\035.z"
  "etasql.AnyResolvedExprProto\022/\n\010for_expr\030"
  "\005 \001(\0132\035.zetasql.AnyResolvedExprProto\0227\n\020"
  "pivot_value_list\030\006 \003(\0132\035.zetasql.AnyReso"
  "lvedExprProto\022<\n\021pivot_column_list\030\007 \003(\013"
  "2!.zetasql.ResolvedPivotColumnProto\"\202\002\n\034"
  "ResolvedReturningClauseProto\022.\n\006parent\030\001"
  " \001(\0132\036.zetasql.ResolvedArgumentProto\022>\n\022"
  "output_column_list\030\002 \003(\0132\".zetasql.Resol"
  "vedOutputColumnProto\0229\n\raction_column\030\003 "
  "\001(\0132\".zetasql.ResolvedColumnHolderProto\022"
  "7\n\texpr_list\030\004 \003(\0132$.zetasql.ResolvedCom"
  "putedColumnProto\"\177\n\027ResolvedUnpivotArgPr"
  "oto\022.\n\006parent\030\001 \001(\0132\036.zetasql.ResolvedAr"
  "gumentProto\0224\n\013column_list\030\002 \003(\0132\037.zetas"
  "ql.ResolvedColumnRefProto\"\267\003\n\030ResolvedUn"
  "pivotScanProto\022*\n\006parent\030\001 \001(\0132\032.zetasql"
  ".ResolvedScanProto\0221\n\ninput_scan\030\002 \001(\0132\035"
  ".zetasql.AnyResolvedScanProto\0227\n\021value_c"
  "olumn_list\030\003 \003(\0132\034.zetasql.ResolvedColum"
  "nProto\0222\n\014label_column\030\004 \001(\0132\034.zetasql.R"
  "esolvedColumnProto\0221\n\nlabel_list\030\005 \003(\0132\035"
  ".zetasql.ResolvedLiteralProto\022:\n\020unpivot"
  "_arg_list\030\006 \003(\0132 .zetasql.ResolvedUnpivo"
  "tArgProto\022I\n\033projected_input_column_list"
  "\030\007 \003(\0132$.zetasql.ResolvedComputedColumnP"
  "roto\022\025\n\rinclude_nulls\030\010 \001(\010\"\267\001\n\032Resolved"
  "CloneDataStmtProto\022/\n\006parent\030\001 \001(\0132\037.zet"
  "asql.ResolvedStatementProto\0225\n\014target_ta"
  "ble\030\002 \001(\0132\037.zetasql.ResolvedTableScanPro"
  "to\0221\n\nclone_from\030\003 \001(\0132\035.zetasql.AnyReso"
  "lvedScanProto\"\223\001\n\037ResolvedTableAndColumn"
  "InfoProto\022.\n\006parent\030\001 \001(\0132\036.zetasql.Reso"
  "lvedArgumentProto\022%\n\005table\030\002 \001(\0132\026.zetas"
  "ql.TableRefProto\022\031\n\021column_index_list\030\003 "
  "\003(\003\"\315\001\n\030ResolvedAnalyzeStmtProto\022/\n\006pare"
  "nt\030\001 \001(\0132\037.zetasql.ResolvedStatementProt"
  "o\0221\n\013option_list\030\002 \003(\0132\034.zetasql.Resolve"
  "dOptionProto\022M\n\033table_and_column_index_l"
  "ist\030\003 \003(\0132(.zetasql.ResolvedTableAndColu"
  "mnInfoProto\"\217\007\n\034ResolvedAuxLoadDataStmtP"
  "roto\022/\n\006parent\030\001 \001(\0132\037.zetasql.ResolvedS"
  "tatementProto\022K\n\016insertion_mode\030\002 \001(\01623."
  "zetasql.ResolvedAuxLoadDataStmtEnums.Ins"
  "ertionMode\022\021\n\tname_path\030\003 \003(\t\022>\n\022output_"
  "column_list\030\004 \003(\0132\".zetasql.ResolvedOutp"
  "utColumnProto\022F\n\026column_definition_list\030"
  "\005 \003(\0132&.zetasql.ResolvedColumnDefinition"
  "Proto\0228\n\022pseudo_column_list\030\006 \003(\0132\034.zeta"
  "sql.ResolvedColumnProto\0225\n\013primary_key\030\007"
  " \001(\0132 .zetasql.ResolvedPrimaryKeyProto\022:"
  "\n\020foreign_key_list\030\010 \003(\0132 .zetasql.Resol"
  "vedForeignKeyProto\022D\n\025check_constraint_l"
  "ist\030\t \003(\0132%.zetasql.ResolvedCheckConstra"
  "intProto\0228\n\021partition_by_list\030\n \003(\0132\035.ze"
  "tasql.AnyResolvedExprProto\0226\n\017cluster_by"
  "_list\030\013 \003(\0132\035.zetasql.AnyResolvedExprPro"
  "to\0221\n\013option_list\030\014 \003(\0132\034.zetasql.Resolv"
  "edOptionProto\022J\n\026with_partition_columns\030"
  "\r \001(\0132*.zetasql.ResolvedWithPartitionCol"
  "umnsProto\0224\n\nconnection\030\016 \001(\0132 .zetasql."
  "ResolvedConnectionProto\022<\n\026from_files_op"
  "tion_list\030\017 \003(\0132\034.zetasql.ResolvedOption"
  "ProtoB,\n\022com.google.zetasqlB\022ZetaSQLReso"
  "lvedASTH\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_deps[7] = {
  &::descriptor_table_zetasql_2fproto_2ffunction_2eproto,
  &::descriptor_table_zetasql_2fpublic_2fannotation_2eproto,
  &::descriptor_table_zetasql_2fpublic_2fproto_2ftype_5fannotation_2eproto,
  &::descriptor_table_zetasql_2fpublic_2ftype_2eproto,
  &::descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto,
  &::descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_5fenums_2eproto,
  &::descriptor_table_zetasql_2fresolved_5fast_2fserialization_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto = {
  false, false, 55451, descriptor_table_protodef_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto, "zetasql/resolved_ast/resolved_ast.proto", 
  &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once, descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_deps, 7, 201,
  schemas, file_default_instances, TableStruct_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto::offsets,
  file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto, file_level_enum_descriptors_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto, file_level_service_descriptors_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter() {
  return &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto(&descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto);
namespace zetasql {

// ===================================================================

class AnyResolvedNodeProto::_Internal {
 public:
  static const ::zetasql::AnyResolvedArgumentProto& resolved_argument_node(const AnyResolvedNodeProto* msg);
  static const ::zetasql::AnyResolvedExprProto& resolved_expr_node(const AnyResolvedNodeProto* msg);
  static const ::zetasql::AnyResolvedScanProto& resolved_scan_node(const AnyResolvedNodeProto* msg);
  static const ::zetasql::AnyResolvedStatementProto& resolved_statement_node(const AnyResolvedNodeProto* msg);
};

const ::zetasql::AnyResolvedArgumentProto&
AnyResolvedNodeProto::_Internal::resolved_argument_node(const AnyResolvedNodeProto* msg) {
  return *msg->node_.resolved_argument_node_;
}
const ::zetasql::AnyResolvedExprProto&
AnyResolvedNodeProto::_Internal::resolved_expr_node(const AnyResolvedNodeProto* msg) {
  return *msg->node_.resolved_expr_node_;
}
const ::zetasql::AnyResolvedScanProto&
AnyResolvedNodeProto::_Internal::resolved_scan_node(const AnyResolvedNodeProto* msg) {
  return *msg->node_.resolved_scan_node_;
}
const ::zetasql::AnyResolvedStatementProto&
AnyResolvedNodeProto::_Internal::resolved_statement_node(const AnyResolvedNodeProto* msg) {
  return *msg->node_.resolved_statement_node_;
}
void AnyResolvedNodeProto::set_allocated_resolved_argument_node(::zetasql::AnyResolvedArgumentProto* resolved_argument_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_argument_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedArgumentProto>::GetOwningArena(resolved_argument_node);
    if (message_arena != submessage_arena) {
      resolved_argument_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_argument_node, submessage_arena);
    }
    set_has_resolved_argument_node();
    node_.resolved_argument_node_ = resolved_argument_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedNodeProto.resolved_argument_node)
}
void AnyResolvedNodeProto::set_allocated_resolved_expr_node(::zetasql::AnyResolvedExprProto* resolved_expr_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_expr_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedExprProto>::GetOwningArena(resolved_expr_node);
    if (message_arena != submessage_arena) {
      resolved_expr_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_expr_node, submessage_arena);
    }
    set_has_resolved_expr_node();
    node_.resolved_expr_node_ = resolved_expr_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedNodeProto.resolved_expr_node)
}
void AnyResolvedNodeProto::set_allocated_resolved_scan_node(::zetasql::AnyResolvedScanProto* resolved_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedScanProto>::GetOwningArena(resolved_scan_node);
    if (message_arena != submessage_arena) {
      resolved_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_scan_node, submessage_arena);
    }
    set_has_resolved_scan_node();
    node_.resolved_scan_node_ = resolved_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedNodeProto.resolved_scan_node)
}
void AnyResolvedNodeProto::set_allocated_resolved_statement_node(::zetasql::AnyResolvedStatementProto* resolved_statement_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_statement_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedStatementProto>::GetOwningArena(resolved_statement_node);
    if (message_arena != submessage_arena) {
      resolved_statement_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_statement_node, submessage_arena);
    }
    set_has_resolved_statement_node();
    node_.resolved_statement_node_ = resolved_statement_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedNodeProto.resolved_statement_node)
}
AnyResolvedNodeProto::AnyResolvedNodeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedNodeProto)
}
AnyResolvedNodeProto::AnyResolvedNodeProto(const AnyResolvedNodeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedArgumentNode: {
      _internal_mutable_resolved_argument_node()->::zetasql::AnyResolvedArgumentProto::MergeFrom(from._internal_resolved_argument_node());
      break;
    }
    case kResolvedExprNode: {
      _internal_mutable_resolved_expr_node()->::zetasql::AnyResolvedExprProto::MergeFrom(from._internal_resolved_expr_node());
      break;
    }
    case kResolvedScanNode: {
      _internal_mutable_resolved_scan_node()->::zetasql::AnyResolvedScanProto::MergeFrom(from._internal_resolved_scan_node());
      break;
    }
    case kResolvedStatementNode: {
      _internal_mutable_resolved_statement_node()->::zetasql::AnyResolvedStatementProto::MergeFrom(from._internal_resolved_statement_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedNodeProto)
}

inline void AnyResolvedNodeProto::SharedCtor() {
clear_has_node();
}

AnyResolvedNodeProto::~AnyResolvedNodeProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedNodeProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedNodeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedNodeProto::ArenaDtor(void* object) {
  AnyResolvedNodeProto* _this = reinterpret_cast< AnyResolvedNodeProto* >(object);
  (void)_this;
}
void AnyResolvedNodeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedNodeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedNodeProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedNodeProto)
  switch (node_case()) {
    case kResolvedArgumentNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_argument_node_;
      }
      break;
    }
    case kResolvedExprNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_expr_node_;
      }
      break;
    }
    case kResolvedScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_scan_node_;
      }
      break;
    }
    case kResolvedStatementNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_statement_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedNodeProto::InternalSwap(AnyResolvedNodeProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedNodeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[0]);
}

// ===================================================================

class AnyResolvedArgumentProto::_Internal {
 public:
  static const ::zetasql::ResolvedMakeProtoFieldProto& resolved_make_proto_field_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedColumnHolderProto& resolved_column_holder_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedComputedColumnProto& resolved_computed_column_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedOrderByItemProto& resolved_order_by_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedOutputColumnProto& resolved_output_column_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedWithEntryProto& resolved_with_entry_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedOptionProto& resolved_option_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedWindowPartitioningProto& resolved_window_partitioning_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedWindowOrderingProto& resolved_window_ordering_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedWindowFrameProto& resolved_window_frame_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedAnalyticFunctionGroupProto& resolved_analytic_function_group_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedWindowFrameExprProto& resolved_window_frame_expr_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedDMLValueProto& resolved_dmlvalue_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedAssertRowsModifiedProto& resolved_assert_rows_modified_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedInsertRowProto& resolved_insert_row_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedUpdateItemProto& resolved_update_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedPrivilegeProto& resolved_privilege_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedArgumentDefProto& resolved_argument_def_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedArgumentListProto& resolved_argument_list_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedFunctionArgumentProto& resolved_function_argument_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedFunctionSignatureHolderProto& resolved_function_signature_holder_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedAggregateHavingModifierProto& resolved_aggregate_having_modifier_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedColumnDefinitionProto& resolved_column_definition_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedGroupingSetProto& resolved_grouping_set_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedSetOperationItemProto& resolved_set_operation_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedIndexItemProto& resolved_index_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedMergeWhenProto& resolved_merge_when_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedUpdateArrayItemProto& resolved_update_array_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedColumnAnnotationsProto& resolved_column_annotations_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedGeneratedColumnInfoProto& resolved_generated_column_info_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedModelProto& resolved_model_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::AnyResolvedAlterActionProto& resolved_alter_action_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedUnnestItemProto& resolved_unnest_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedReplaceFieldItemProto& resolved_replace_field_item_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedConnectionProto& resolved_connection_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedExecuteImmediateArgumentProto& resolved_execute_immediate_argument_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedDescriptorProto& resolved_descriptor_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedExtendedCastElementProto& resolved_extended_cast_element_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedWithPartitionColumnsProto& resolved_with_partition_columns_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedExtendedCastProto& resolved_extended_cast_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedInlineLambdaProto& resolved_inline_lambda_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::AnyResolvedConstraintProto& resolved_constraint_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedPivotColumnProto& resolved_pivot_column_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedReturningClauseProto& resolved_returning_clause_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedUnpivotArgProto& resolved_unpivot_arg_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedFilterFieldArgProto& resolved_filter_field_arg_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedTableAndColumnInfoProto& resolved_table_and_column_info_node(const AnyResolvedArgumentProto* msg);
  static const ::zetasql::ResolvedColumnDefaultValueProto& resolved_column_default_value_node(const AnyResolvedArgumentProto* msg);
};

const ::zetasql::ResolvedMakeProtoFieldProto&
AnyResolvedArgumentProto::_Internal::resolved_make_proto_field_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_make_proto_field_node_;
}
const ::zetasql::ResolvedColumnHolderProto&
AnyResolvedArgumentProto::_Internal::resolved_column_holder_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_column_holder_node_;
}
const ::zetasql::ResolvedComputedColumnProto&
AnyResolvedArgumentProto::_Internal::resolved_computed_column_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_computed_column_node_;
}
const ::zetasql::ResolvedOrderByItemProto&
AnyResolvedArgumentProto::_Internal::resolved_order_by_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_order_by_item_node_;
}
const ::zetasql::ResolvedOutputColumnProto&
AnyResolvedArgumentProto::_Internal::resolved_output_column_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_output_column_node_;
}
const ::zetasql::ResolvedWithEntryProto&
AnyResolvedArgumentProto::_Internal::resolved_with_entry_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_with_entry_node_;
}
const ::zetasql::ResolvedOptionProto&
AnyResolvedArgumentProto::_Internal::resolved_option_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_option_node_;
}
const ::zetasql::ResolvedWindowPartitioningProto&
AnyResolvedArgumentProto::_Internal::resolved_window_partitioning_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_window_partitioning_node_;
}
const ::zetasql::ResolvedWindowOrderingProto&
AnyResolvedArgumentProto::_Internal::resolved_window_ordering_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_window_ordering_node_;
}
const ::zetasql::ResolvedWindowFrameProto&
AnyResolvedArgumentProto::_Internal::resolved_window_frame_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_window_frame_node_;
}
const ::zetasql::ResolvedAnalyticFunctionGroupProto&
AnyResolvedArgumentProto::_Internal::resolved_analytic_function_group_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_analytic_function_group_node_;
}
const ::zetasql::ResolvedWindowFrameExprProto&
AnyResolvedArgumentProto::_Internal::resolved_window_frame_expr_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_window_frame_expr_node_;
}
const ::zetasql::ResolvedDMLValueProto&
AnyResolvedArgumentProto::_Internal::resolved_dmlvalue_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_dmlvalue_node_;
}
const ::zetasql::ResolvedAssertRowsModifiedProto&
AnyResolvedArgumentProto::_Internal::resolved_assert_rows_modified_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_assert_rows_modified_node_;
}
const ::zetasql::ResolvedInsertRowProto&
AnyResolvedArgumentProto::_Internal::resolved_insert_row_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_insert_row_node_;
}
const ::zetasql::ResolvedUpdateItemProto&
AnyResolvedArgumentProto::_Internal::resolved_update_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_update_item_node_;
}
const ::zetasql::ResolvedPrivilegeProto&
AnyResolvedArgumentProto::_Internal::resolved_privilege_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_privilege_node_;
}
const ::zetasql::ResolvedArgumentDefProto&
AnyResolvedArgumentProto::_Internal::resolved_argument_def_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_argument_def_node_;
}
const ::zetasql::ResolvedArgumentListProto&
AnyResolvedArgumentProto::_Internal::resolved_argument_list_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_argument_list_node_;
}
const ::zetasql::ResolvedFunctionArgumentProto&
AnyResolvedArgumentProto::_Internal::resolved_function_argument_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_function_argument_node_;
}
const ::zetasql::ResolvedFunctionSignatureHolderProto&
AnyResolvedArgumentProto::_Internal::resolved_function_signature_holder_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_function_signature_holder_node_;
}
const ::zetasql::ResolvedAggregateHavingModifierProto&
AnyResolvedArgumentProto::_Internal::resolved_aggregate_having_modifier_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_aggregate_having_modifier_node_;
}
const ::zetasql::ResolvedColumnDefinitionProto&
AnyResolvedArgumentProto::_Internal::resolved_column_definition_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_column_definition_node_;
}
const ::zetasql::ResolvedGroupingSetProto&
AnyResolvedArgumentProto::_Internal::resolved_grouping_set_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_grouping_set_node_;
}
const ::zetasql::ResolvedSetOperationItemProto&
AnyResolvedArgumentProto::_Internal::resolved_set_operation_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_set_operation_item_node_;
}
const ::zetasql::ResolvedIndexItemProto&
AnyResolvedArgumentProto::_Internal::resolved_index_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_index_item_node_;
}
const ::zetasql::ResolvedMergeWhenProto&
AnyResolvedArgumentProto::_Internal::resolved_merge_when_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_merge_when_node_;
}
const ::zetasql::ResolvedUpdateArrayItemProto&
AnyResolvedArgumentProto::_Internal::resolved_update_array_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_update_array_item_node_;
}
const ::zetasql::ResolvedColumnAnnotationsProto&
AnyResolvedArgumentProto::_Internal::resolved_column_annotations_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_column_annotations_node_;
}
const ::zetasql::ResolvedGeneratedColumnInfoProto&
AnyResolvedArgumentProto::_Internal::resolved_generated_column_info_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_generated_column_info_node_;
}
const ::zetasql::ResolvedModelProto&
AnyResolvedArgumentProto::_Internal::resolved_model_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_model_node_;
}
const ::zetasql::AnyResolvedAlterActionProto&
AnyResolvedArgumentProto::_Internal::resolved_alter_action_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_alter_action_node_;
}
const ::zetasql::ResolvedUnnestItemProto&
AnyResolvedArgumentProto::_Internal::resolved_unnest_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_unnest_item_node_;
}
const ::zetasql::ResolvedReplaceFieldItemProto&
AnyResolvedArgumentProto::_Internal::resolved_replace_field_item_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_replace_field_item_node_;
}
const ::zetasql::ResolvedConnectionProto&
AnyResolvedArgumentProto::_Internal::resolved_connection_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_connection_node_;
}
const ::zetasql::ResolvedExecuteImmediateArgumentProto&
AnyResolvedArgumentProto::_Internal::resolved_execute_immediate_argument_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_execute_immediate_argument_node_;
}
const ::zetasql::ResolvedDescriptorProto&
AnyResolvedArgumentProto::_Internal::resolved_descriptor_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_descriptor_node_;
}
const ::zetasql::ResolvedExtendedCastElementProto&
AnyResolvedArgumentProto::_Internal::resolved_extended_cast_element_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_extended_cast_element_node_;
}
const ::zetasql::ResolvedWithPartitionColumnsProto&
AnyResolvedArgumentProto::_Internal::resolved_with_partition_columns_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_with_partition_columns_node_;
}
const ::zetasql::ResolvedExtendedCastProto&
AnyResolvedArgumentProto::_Internal::resolved_extended_cast_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_extended_cast_node_;
}
const ::zetasql::ResolvedInlineLambdaProto&
AnyResolvedArgumentProto::_Internal::resolved_inline_lambda_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_inline_lambda_node_;
}
const ::zetasql::AnyResolvedConstraintProto&
AnyResolvedArgumentProto::_Internal::resolved_constraint_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_constraint_node_;
}
const ::zetasql::ResolvedPivotColumnProto&
AnyResolvedArgumentProto::_Internal::resolved_pivot_column_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_pivot_column_node_;
}
const ::zetasql::ResolvedReturningClauseProto&
AnyResolvedArgumentProto::_Internal::resolved_returning_clause_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_returning_clause_node_;
}
const ::zetasql::ResolvedUnpivotArgProto&
AnyResolvedArgumentProto::_Internal::resolved_unpivot_arg_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_unpivot_arg_node_;
}
const ::zetasql::ResolvedFilterFieldArgProto&
AnyResolvedArgumentProto::_Internal::resolved_filter_field_arg_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_filter_field_arg_node_;
}
const ::zetasql::ResolvedTableAndColumnInfoProto&
AnyResolvedArgumentProto::_Internal::resolved_table_and_column_info_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_table_and_column_info_node_;
}
const ::zetasql::ResolvedColumnDefaultValueProto&
AnyResolvedArgumentProto::_Internal::resolved_column_default_value_node(const AnyResolvedArgumentProto* msg) {
  return *msg->node_.resolved_column_default_value_node_;
}
void AnyResolvedArgumentProto::set_allocated_resolved_make_proto_field_node(::zetasql::ResolvedMakeProtoFieldProto* resolved_make_proto_field_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_make_proto_field_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedMakeProtoFieldProto>::GetOwningArena(resolved_make_proto_field_node);
    if (message_arena != submessage_arena) {
      resolved_make_proto_field_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_make_proto_field_node, submessage_arena);
    }
    set_has_resolved_make_proto_field_node();
    node_.resolved_make_proto_field_node_ = resolved_make_proto_field_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_make_proto_field_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_column_holder_node(::zetasql::ResolvedColumnHolderProto* resolved_column_holder_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_column_holder_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedColumnHolderProto>::GetOwningArena(resolved_column_holder_node);
    if (message_arena != submessage_arena) {
      resolved_column_holder_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_column_holder_node, submessage_arena);
    }
    set_has_resolved_column_holder_node();
    node_.resolved_column_holder_node_ = resolved_column_holder_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_column_holder_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_computed_column_node(::zetasql::ResolvedComputedColumnProto* resolved_computed_column_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_computed_column_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedComputedColumnProto>::GetOwningArena(resolved_computed_column_node);
    if (message_arena != submessage_arena) {
      resolved_computed_column_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_computed_column_node, submessage_arena);
    }
    set_has_resolved_computed_column_node();
    node_.resolved_computed_column_node_ = resolved_computed_column_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_computed_column_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_order_by_item_node(::zetasql::ResolvedOrderByItemProto* resolved_order_by_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_order_by_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedOrderByItemProto>::GetOwningArena(resolved_order_by_item_node);
    if (message_arena != submessage_arena) {
      resolved_order_by_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_order_by_item_node, submessage_arena);
    }
    set_has_resolved_order_by_item_node();
    node_.resolved_order_by_item_node_ = resolved_order_by_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_order_by_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_output_column_node(::zetasql::ResolvedOutputColumnProto* resolved_output_column_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_output_column_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedOutputColumnProto>::GetOwningArena(resolved_output_column_node);
    if (message_arena != submessage_arena) {
      resolved_output_column_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_output_column_node, submessage_arena);
    }
    set_has_resolved_output_column_node();
    node_.resolved_output_column_node_ = resolved_output_column_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_output_column_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_with_entry_node(::zetasql::ResolvedWithEntryProto* resolved_with_entry_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_with_entry_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedWithEntryProto>::GetOwningArena(resolved_with_entry_node);
    if (message_arena != submessage_arena) {
      resolved_with_entry_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_with_entry_node, submessage_arena);
    }
    set_has_resolved_with_entry_node();
    node_.resolved_with_entry_node_ = resolved_with_entry_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_with_entry_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_option_node(::zetasql::ResolvedOptionProto* resolved_option_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_option_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedOptionProto>::GetOwningArena(resolved_option_node);
    if (message_arena != submessage_arena) {
      resolved_option_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_option_node, submessage_arena);
    }
    set_has_resolved_option_node();
    node_.resolved_option_node_ = resolved_option_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_option_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_window_partitioning_node(::zetasql::ResolvedWindowPartitioningProto* resolved_window_partitioning_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_window_partitioning_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedWindowPartitioningProto>::GetOwningArena(resolved_window_partitioning_node);
    if (message_arena != submessage_arena) {
      resolved_window_partitioning_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_window_partitioning_node, submessage_arena);
    }
    set_has_resolved_window_partitioning_node();
    node_.resolved_window_partitioning_node_ = resolved_window_partitioning_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_window_partitioning_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_window_ordering_node(::zetasql::ResolvedWindowOrderingProto* resolved_window_ordering_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_window_ordering_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedWindowOrderingProto>::GetOwningArena(resolved_window_ordering_node);
    if (message_arena != submessage_arena) {
      resolved_window_ordering_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_window_ordering_node, submessage_arena);
    }
    set_has_resolved_window_ordering_node();
    node_.resolved_window_ordering_node_ = resolved_window_ordering_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_window_ordering_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_window_frame_node(::zetasql::ResolvedWindowFrameProto* resolved_window_frame_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_window_frame_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedWindowFrameProto>::GetOwningArena(resolved_window_frame_node);
    if (message_arena != submessage_arena) {
      resolved_window_frame_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_window_frame_node, submessage_arena);
    }
    set_has_resolved_window_frame_node();
    node_.resolved_window_frame_node_ = resolved_window_frame_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_window_frame_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_analytic_function_group_node(::zetasql::ResolvedAnalyticFunctionGroupProto* resolved_analytic_function_group_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_analytic_function_group_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAnalyticFunctionGroupProto>::GetOwningArena(resolved_analytic_function_group_node);
    if (message_arena != submessage_arena) {
      resolved_analytic_function_group_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_analytic_function_group_node, submessage_arena);
    }
    set_has_resolved_analytic_function_group_node();
    node_.resolved_analytic_function_group_node_ = resolved_analytic_function_group_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_analytic_function_group_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_window_frame_expr_node(::zetasql::ResolvedWindowFrameExprProto* resolved_window_frame_expr_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_window_frame_expr_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedWindowFrameExprProto>::GetOwningArena(resolved_window_frame_expr_node);
    if (message_arena != submessage_arena) {
      resolved_window_frame_expr_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_window_frame_expr_node, submessage_arena);
    }
    set_has_resolved_window_frame_expr_node();
    node_.resolved_window_frame_expr_node_ = resolved_window_frame_expr_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_window_frame_expr_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_dmlvalue_node(::zetasql::ResolvedDMLValueProto* resolved_dmlvalue_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_dmlvalue_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDMLValueProto>::GetOwningArena(resolved_dmlvalue_node);
    if (message_arena != submessage_arena) {
      resolved_dmlvalue_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_dmlvalue_node, submessage_arena);
    }
    set_has_resolved_dmlvalue_node();
    node_.resolved_dmlvalue_node_ = resolved_dmlvalue_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_dmlvalue_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_assert_rows_modified_node(::zetasql::ResolvedAssertRowsModifiedProto* resolved_assert_rows_modified_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_assert_rows_modified_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAssertRowsModifiedProto>::GetOwningArena(resolved_assert_rows_modified_node);
    if (message_arena != submessage_arena) {
      resolved_assert_rows_modified_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_assert_rows_modified_node, submessage_arena);
    }
    set_has_resolved_assert_rows_modified_node();
    node_.resolved_assert_rows_modified_node_ = resolved_assert_rows_modified_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_assert_rows_modified_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_insert_row_node(::zetasql::ResolvedInsertRowProto* resolved_insert_row_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_insert_row_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedInsertRowProto>::GetOwningArena(resolved_insert_row_node);
    if (message_arena != submessage_arena) {
      resolved_insert_row_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_insert_row_node, submessage_arena);
    }
    set_has_resolved_insert_row_node();
    node_.resolved_insert_row_node_ = resolved_insert_row_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_insert_row_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_update_item_node(::zetasql::ResolvedUpdateItemProto* resolved_update_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_update_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedUpdateItemProto>::GetOwningArena(resolved_update_item_node);
    if (message_arena != submessage_arena) {
      resolved_update_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_update_item_node, submessage_arena);
    }
    set_has_resolved_update_item_node();
    node_.resolved_update_item_node_ = resolved_update_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_update_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_privilege_node(::zetasql::ResolvedPrivilegeProto* resolved_privilege_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_privilege_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedPrivilegeProto>::GetOwningArena(resolved_privilege_node);
    if (message_arena != submessage_arena) {
      resolved_privilege_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_privilege_node, submessage_arena);
    }
    set_has_resolved_privilege_node();
    node_.resolved_privilege_node_ = resolved_privilege_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_privilege_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_argument_def_node(::zetasql::ResolvedArgumentDefProto* resolved_argument_def_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_argument_def_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedArgumentDefProto>::GetOwningArena(resolved_argument_def_node);
    if (message_arena != submessage_arena) {
      resolved_argument_def_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_argument_def_node, submessage_arena);
    }
    set_has_resolved_argument_def_node();
    node_.resolved_argument_def_node_ = resolved_argument_def_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_argument_def_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_argument_list_node(::zetasql::ResolvedArgumentListProto* resolved_argument_list_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_argument_list_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedArgumentListProto>::GetOwningArena(resolved_argument_list_node);
    if (message_arena != submessage_arena) {
      resolved_argument_list_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_argument_list_node, submessage_arena);
    }
    set_has_resolved_argument_list_node();
    node_.resolved_argument_list_node_ = resolved_argument_list_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_argument_list_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_function_argument_node(::zetasql::ResolvedFunctionArgumentProto* resolved_function_argument_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_function_argument_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedFunctionArgumentProto>::GetOwningArena(resolved_function_argument_node);
    if (message_arena != submessage_arena) {
      resolved_function_argument_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_function_argument_node, submessage_arena);
    }
    set_has_resolved_function_argument_node();
    node_.resolved_function_argument_node_ = resolved_function_argument_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_function_argument_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_function_signature_holder_node(::zetasql::ResolvedFunctionSignatureHolderProto* resolved_function_signature_holder_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_function_signature_holder_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedFunctionSignatureHolderProto>::GetOwningArena(resolved_function_signature_holder_node);
    if (message_arena != submessage_arena) {
      resolved_function_signature_holder_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_function_signature_holder_node, submessage_arena);
    }
    set_has_resolved_function_signature_holder_node();
    node_.resolved_function_signature_holder_node_ = resolved_function_signature_holder_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_function_signature_holder_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_aggregate_having_modifier_node(::zetasql::ResolvedAggregateHavingModifierProto* resolved_aggregate_having_modifier_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_aggregate_having_modifier_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAggregateHavingModifierProto>::GetOwningArena(resolved_aggregate_having_modifier_node);
    if (message_arena != submessage_arena) {
      resolved_aggregate_having_modifier_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_aggregate_having_modifier_node, submessage_arena);
    }
    set_has_resolved_aggregate_having_modifier_node();
    node_.resolved_aggregate_having_modifier_node_ = resolved_aggregate_having_modifier_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_aggregate_having_modifier_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_column_definition_node(::zetasql::ResolvedColumnDefinitionProto* resolved_column_definition_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_column_definition_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedColumnDefinitionProto>::GetOwningArena(resolved_column_definition_node);
    if (message_arena != submessage_arena) {
      resolved_column_definition_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_column_definition_node, submessage_arena);
    }
    set_has_resolved_column_definition_node();
    node_.resolved_column_definition_node_ = resolved_column_definition_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_column_definition_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_grouping_set_node(::zetasql::ResolvedGroupingSetProto* resolved_grouping_set_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_grouping_set_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedGroupingSetProto>::GetOwningArena(resolved_grouping_set_node);
    if (message_arena != submessage_arena) {
      resolved_grouping_set_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_grouping_set_node, submessage_arena);
    }
    set_has_resolved_grouping_set_node();
    node_.resolved_grouping_set_node_ = resolved_grouping_set_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_grouping_set_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_set_operation_item_node(::zetasql::ResolvedSetOperationItemProto* resolved_set_operation_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_set_operation_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedSetOperationItemProto>::GetOwningArena(resolved_set_operation_item_node);
    if (message_arena != submessage_arena) {
      resolved_set_operation_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_set_operation_item_node, submessage_arena);
    }
    set_has_resolved_set_operation_item_node();
    node_.resolved_set_operation_item_node_ = resolved_set_operation_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_set_operation_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_index_item_node(::zetasql::ResolvedIndexItemProto* resolved_index_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_index_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedIndexItemProto>::GetOwningArena(resolved_index_item_node);
    if (message_arena != submessage_arena) {
      resolved_index_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_index_item_node, submessage_arena);
    }
    set_has_resolved_index_item_node();
    node_.resolved_index_item_node_ = resolved_index_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_index_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_merge_when_node(::zetasql::ResolvedMergeWhenProto* resolved_merge_when_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_merge_when_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedMergeWhenProto>::GetOwningArena(resolved_merge_when_node);
    if (message_arena != submessage_arena) {
      resolved_merge_when_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_merge_when_node, submessage_arena);
    }
    set_has_resolved_merge_when_node();
    node_.resolved_merge_when_node_ = resolved_merge_when_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_merge_when_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_update_array_item_node(::zetasql::ResolvedUpdateArrayItemProto* resolved_update_array_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_update_array_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedUpdateArrayItemProto>::GetOwningArena(resolved_update_array_item_node);
    if (message_arena != submessage_arena) {
      resolved_update_array_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_update_array_item_node, submessage_arena);
    }
    set_has_resolved_update_array_item_node();
    node_.resolved_update_array_item_node_ = resolved_update_array_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_update_array_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_column_annotations_node(::zetasql::ResolvedColumnAnnotationsProto* resolved_column_annotations_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_column_annotations_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedColumnAnnotationsProto>::GetOwningArena(resolved_column_annotations_node);
    if (message_arena != submessage_arena) {
      resolved_column_annotations_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_column_annotations_node, submessage_arena);
    }
    set_has_resolved_column_annotations_node();
    node_.resolved_column_annotations_node_ = resolved_column_annotations_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_column_annotations_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_generated_column_info_node(::zetasql::ResolvedGeneratedColumnInfoProto* resolved_generated_column_info_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_generated_column_info_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedGeneratedColumnInfoProto>::GetOwningArena(resolved_generated_column_info_node);
    if (message_arena != submessage_arena) {
      resolved_generated_column_info_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_generated_column_info_node, submessage_arena);
    }
    set_has_resolved_generated_column_info_node();
    node_.resolved_generated_column_info_node_ = resolved_generated_column_info_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_generated_column_info_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_model_node(::zetasql::ResolvedModelProto* resolved_model_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_model_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedModelProto>::GetOwningArena(resolved_model_node);
    if (message_arena != submessage_arena) {
      resolved_model_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_model_node, submessage_arena);
    }
    set_has_resolved_model_node();
    node_.resolved_model_node_ = resolved_model_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_model_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_alter_action_node(::zetasql::AnyResolvedAlterActionProto* resolved_alter_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedAlterActionProto>::GetOwningArena(resolved_alter_action_node);
    if (message_arena != submessage_arena) {
      resolved_alter_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_action_node, submessage_arena);
    }
    set_has_resolved_alter_action_node();
    node_.resolved_alter_action_node_ = resolved_alter_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_alter_action_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_unnest_item_node(::zetasql::ResolvedUnnestItemProto* resolved_unnest_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_unnest_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedUnnestItemProto>::GetOwningArena(resolved_unnest_item_node);
    if (message_arena != submessage_arena) {
      resolved_unnest_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_unnest_item_node, submessage_arena);
    }
    set_has_resolved_unnest_item_node();
    node_.resolved_unnest_item_node_ = resolved_unnest_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_unnest_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_replace_field_item_node(::zetasql::ResolvedReplaceFieldItemProto* resolved_replace_field_item_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_replace_field_item_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedReplaceFieldItemProto>::GetOwningArena(resolved_replace_field_item_node);
    if (message_arena != submessage_arena) {
      resolved_replace_field_item_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_replace_field_item_node, submessage_arena);
    }
    set_has_resolved_replace_field_item_node();
    node_.resolved_replace_field_item_node_ = resolved_replace_field_item_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_replace_field_item_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_connection_node(::zetasql::ResolvedConnectionProto* resolved_connection_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_connection_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedConnectionProto>::GetOwningArena(resolved_connection_node);
    if (message_arena != submessage_arena) {
      resolved_connection_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_connection_node, submessage_arena);
    }
    set_has_resolved_connection_node();
    node_.resolved_connection_node_ = resolved_connection_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_connection_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_execute_immediate_argument_node(::zetasql::ResolvedExecuteImmediateArgumentProto* resolved_execute_immediate_argument_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_execute_immediate_argument_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedExecuteImmediateArgumentProto>::GetOwningArena(resolved_execute_immediate_argument_node);
    if (message_arena != submessage_arena) {
      resolved_execute_immediate_argument_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_execute_immediate_argument_node, submessage_arena);
    }
    set_has_resolved_execute_immediate_argument_node();
    node_.resolved_execute_immediate_argument_node_ = resolved_execute_immediate_argument_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_execute_immediate_argument_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_descriptor_node(::zetasql::ResolvedDescriptorProto* resolved_descriptor_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_descriptor_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDescriptorProto>::GetOwningArena(resolved_descriptor_node);
    if (message_arena != submessage_arena) {
      resolved_descriptor_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_descriptor_node, submessage_arena);
    }
    set_has_resolved_descriptor_node();
    node_.resolved_descriptor_node_ = resolved_descriptor_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_descriptor_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_extended_cast_element_node(::zetasql::ResolvedExtendedCastElementProto* resolved_extended_cast_element_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_extended_cast_element_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedExtendedCastElementProto>::GetOwningArena(resolved_extended_cast_element_node);
    if (message_arena != submessage_arena) {
      resolved_extended_cast_element_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_extended_cast_element_node, submessage_arena);
    }
    set_has_resolved_extended_cast_element_node();
    node_.resolved_extended_cast_element_node_ = resolved_extended_cast_element_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_extended_cast_element_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_with_partition_columns_node(::zetasql::ResolvedWithPartitionColumnsProto* resolved_with_partition_columns_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_with_partition_columns_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedWithPartitionColumnsProto>::GetOwningArena(resolved_with_partition_columns_node);
    if (message_arena != submessage_arena) {
      resolved_with_partition_columns_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_with_partition_columns_node, submessage_arena);
    }
    set_has_resolved_with_partition_columns_node();
    node_.resolved_with_partition_columns_node_ = resolved_with_partition_columns_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_with_partition_columns_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_extended_cast_node(::zetasql::ResolvedExtendedCastProto* resolved_extended_cast_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_extended_cast_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedExtendedCastProto>::GetOwningArena(resolved_extended_cast_node);
    if (message_arena != submessage_arena) {
      resolved_extended_cast_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_extended_cast_node, submessage_arena);
    }
    set_has_resolved_extended_cast_node();
    node_.resolved_extended_cast_node_ = resolved_extended_cast_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_extended_cast_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_inline_lambda_node(::zetasql::ResolvedInlineLambdaProto* resolved_inline_lambda_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_inline_lambda_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedInlineLambdaProto>::GetOwningArena(resolved_inline_lambda_node);
    if (message_arena != submessage_arena) {
      resolved_inline_lambda_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_inline_lambda_node, submessage_arena);
    }
    set_has_resolved_inline_lambda_node();
    node_.resolved_inline_lambda_node_ = resolved_inline_lambda_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_inline_lambda_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_constraint_node(::zetasql::AnyResolvedConstraintProto* resolved_constraint_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_constraint_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedConstraintProto>::GetOwningArena(resolved_constraint_node);
    if (message_arena != submessage_arena) {
      resolved_constraint_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_constraint_node, submessage_arena);
    }
    set_has_resolved_constraint_node();
    node_.resolved_constraint_node_ = resolved_constraint_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_constraint_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_pivot_column_node(::zetasql::ResolvedPivotColumnProto* resolved_pivot_column_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_pivot_column_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedPivotColumnProto>::GetOwningArena(resolved_pivot_column_node);
    if (message_arena != submessage_arena) {
      resolved_pivot_column_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_pivot_column_node, submessage_arena);
    }
    set_has_resolved_pivot_column_node();
    node_.resolved_pivot_column_node_ = resolved_pivot_column_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_pivot_column_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_returning_clause_node(::zetasql::ResolvedReturningClauseProto* resolved_returning_clause_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_returning_clause_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedReturningClauseProto>::GetOwningArena(resolved_returning_clause_node);
    if (message_arena != submessage_arena) {
      resolved_returning_clause_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_returning_clause_node, submessage_arena);
    }
    set_has_resolved_returning_clause_node();
    node_.resolved_returning_clause_node_ = resolved_returning_clause_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_returning_clause_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_unpivot_arg_node(::zetasql::ResolvedUnpivotArgProto* resolved_unpivot_arg_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_unpivot_arg_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedUnpivotArgProto>::GetOwningArena(resolved_unpivot_arg_node);
    if (message_arena != submessage_arena) {
      resolved_unpivot_arg_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_unpivot_arg_node, submessage_arena);
    }
    set_has_resolved_unpivot_arg_node();
    node_.resolved_unpivot_arg_node_ = resolved_unpivot_arg_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_unpivot_arg_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_filter_field_arg_node(::zetasql::ResolvedFilterFieldArgProto* resolved_filter_field_arg_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_filter_field_arg_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedFilterFieldArgProto>::GetOwningArena(resolved_filter_field_arg_node);
    if (message_arena != submessage_arena) {
      resolved_filter_field_arg_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_filter_field_arg_node, submessage_arena);
    }
    set_has_resolved_filter_field_arg_node();
    node_.resolved_filter_field_arg_node_ = resolved_filter_field_arg_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_filter_field_arg_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_table_and_column_info_node(::zetasql::ResolvedTableAndColumnInfoProto* resolved_table_and_column_info_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_table_and_column_info_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedTableAndColumnInfoProto>::GetOwningArena(resolved_table_and_column_info_node);
    if (message_arena != submessage_arena) {
      resolved_table_and_column_info_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_table_and_column_info_node, submessage_arena);
    }
    set_has_resolved_table_and_column_info_node();
    node_.resolved_table_and_column_info_node_ = resolved_table_and_column_info_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_table_and_column_info_node)
}
void AnyResolvedArgumentProto::set_allocated_resolved_column_default_value_node(::zetasql::ResolvedColumnDefaultValueProto* resolved_column_default_value_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_column_default_value_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedColumnDefaultValueProto>::GetOwningArena(resolved_column_default_value_node);
    if (message_arena != submessage_arena) {
      resolved_column_default_value_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_column_default_value_node, submessage_arena);
    }
    set_has_resolved_column_default_value_node();
    node_.resolved_column_default_value_node_ = resolved_column_default_value_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedArgumentProto.resolved_column_default_value_node)
}
AnyResolvedArgumentProto::AnyResolvedArgumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedArgumentProto)
}
AnyResolvedArgumentProto::AnyResolvedArgumentProto(const AnyResolvedArgumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedMakeProtoFieldNode: {
      _internal_mutable_resolved_make_proto_field_node()->::zetasql::ResolvedMakeProtoFieldProto::MergeFrom(from._internal_resolved_make_proto_field_node());
      break;
    }
    case kResolvedColumnHolderNode: {
      _internal_mutable_resolved_column_holder_node()->::zetasql::ResolvedColumnHolderProto::MergeFrom(from._internal_resolved_column_holder_node());
      break;
    }
    case kResolvedComputedColumnNode: {
      _internal_mutable_resolved_computed_column_node()->::zetasql::ResolvedComputedColumnProto::MergeFrom(from._internal_resolved_computed_column_node());
      break;
    }
    case kResolvedOrderByItemNode: {
      _internal_mutable_resolved_order_by_item_node()->::zetasql::ResolvedOrderByItemProto::MergeFrom(from._internal_resolved_order_by_item_node());
      break;
    }
    case kResolvedOutputColumnNode: {
      _internal_mutable_resolved_output_column_node()->::zetasql::ResolvedOutputColumnProto::MergeFrom(from._internal_resolved_output_column_node());
      break;
    }
    case kResolvedWithEntryNode: {
      _internal_mutable_resolved_with_entry_node()->::zetasql::ResolvedWithEntryProto::MergeFrom(from._internal_resolved_with_entry_node());
      break;
    }
    case kResolvedOptionNode: {
      _internal_mutable_resolved_option_node()->::zetasql::ResolvedOptionProto::MergeFrom(from._internal_resolved_option_node());
      break;
    }
    case kResolvedWindowPartitioningNode: {
      _internal_mutable_resolved_window_partitioning_node()->::zetasql::ResolvedWindowPartitioningProto::MergeFrom(from._internal_resolved_window_partitioning_node());
      break;
    }
    case kResolvedWindowOrderingNode: {
      _internal_mutable_resolved_window_ordering_node()->::zetasql::ResolvedWindowOrderingProto::MergeFrom(from._internal_resolved_window_ordering_node());
      break;
    }
    case kResolvedWindowFrameNode: {
      _internal_mutable_resolved_window_frame_node()->::zetasql::ResolvedWindowFrameProto::MergeFrom(from._internal_resolved_window_frame_node());
      break;
    }
    case kResolvedAnalyticFunctionGroupNode: {
      _internal_mutable_resolved_analytic_function_group_node()->::zetasql::ResolvedAnalyticFunctionGroupProto::MergeFrom(from._internal_resolved_analytic_function_group_node());
      break;
    }
    case kResolvedWindowFrameExprNode: {
      _internal_mutable_resolved_window_frame_expr_node()->::zetasql::ResolvedWindowFrameExprProto::MergeFrom(from._internal_resolved_window_frame_expr_node());
      break;
    }
    case kResolvedDmlvalueNode: {
      _internal_mutable_resolved_dmlvalue_node()->::zetasql::ResolvedDMLValueProto::MergeFrom(from._internal_resolved_dmlvalue_node());
      break;
    }
    case kResolvedAssertRowsModifiedNode: {
      _internal_mutable_resolved_assert_rows_modified_node()->::zetasql::ResolvedAssertRowsModifiedProto::MergeFrom(from._internal_resolved_assert_rows_modified_node());
      break;
    }
    case kResolvedInsertRowNode: {
      _internal_mutable_resolved_insert_row_node()->::zetasql::ResolvedInsertRowProto::MergeFrom(from._internal_resolved_insert_row_node());
      break;
    }
    case kResolvedUpdateItemNode: {
      _internal_mutable_resolved_update_item_node()->::zetasql::ResolvedUpdateItemProto::MergeFrom(from._internal_resolved_update_item_node());
      break;
    }
    case kResolvedPrivilegeNode: {
      _internal_mutable_resolved_privilege_node()->::zetasql::ResolvedPrivilegeProto::MergeFrom(from._internal_resolved_privilege_node());
      break;
    }
    case kResolvedArgumentDefNode: {
      _internal_mutable_resolved_argument_def_node()->::zetasql::ResolvedArgumentDefProto::MergeFrom(from._internal_resolved_argument_def_node());
      break;
    }
    case kResolvedArgumentListNode: {
      _internal_mutable_resolved_argument_list_node()->::zetasql::ResolvedArgumentListProto::MergeFrom(from._internal_resolved_argument_list_node());
      break;
    }
    case kResolvedFunctionArgumentNode: {
      _internal_mutable_resolved_function_argument_node()->::zetasql::ResolvedFunctionArgumentProto::MergeFrom(from._internal_resolved_function_argument_node());
      break;
    }
    case kResolvedFunctionSignatureHolderNode: {
      _internal_mutable_resolved_function_signature_holder_node()->::zetasql::ResolvedFunctionSignatureHolderProto::MergeFrom(from._internal_resolved_function_signature_holder_node());
      break;
    }
    case kResolvedAggregateHavingModifierNode: {
      _internal_mutable_resolved_aggregate_having_modifier_node()->::zetasql::ResolvedAggregateHavingModifierProto::MergeFrom(from._internal_resolved_aggregate_having_modifier_node());
      break;
    }
    case kResolvedColumnDefinitionNode: {
      _internal_mutable_resolved_column_definition_node()->::zetasql::ResolvedColumnDefinitionProto::MergeFrom(from._internal_resolved_column_definition_node());
      break;
    }
    case kResolvedGroupingSetNode: {
      _internal_mutable_resolved_grouping_set_node()->::zetasql::ResolvedGroupingSetProto::MergeFrom(from._internal_resolved_grouping_set_node());
      break;
    }
    case kResolvedSetOperationItemNode: {
      _internal_mutable_resolved_set_operation_item_node()->::zetasql::ResolvedSetOperationItemProto::MergeFrom(from._internal_resolved_set_operation_item_node());
      break;
    }
    case kResolvedIndexItemNode: {
      _internal_mutable_resolved_index_item_node()->::zetasql::ResolvedIndexItemProto::MergeFrom(from._internal_resolved_index_item_node());
      break;
    }
    case kResolvedMergeWhenNode: {
      _internal_mutable_resolved_merge_when_node()->::zetasql::ResolvedMergeWhenProto::MergeFrom(from._internal_resolved_merge_when_node());
      break;
    }
    case kResolvedUpdateArrayItemNode: {
      _internal_mutable_resolved_update_array_item_node()->::zetasql::ResolvedUpdateArrayItemProto::MergeFrom(from._internal_resolved_update_array_item_node());
      break;
    }
    case kResolvedColumnAnnotationsNode: {
      _internal_mutable_resolved_column_annotations_node()->::zetasql::ResolvedColumnAnnotationsProto::MergeFrom(from._internal_resolved_column_annotations_node());
      break;
    }
    case kResolvedGeneratedColumnInfoNode: {
      _internal_mutable_resolved_generated_column_info_node()->::zetasql::ResolvedGeneratedColumnInfoProto::MergeFrom(from._internal_resolved_generated_column_info_node());
      break;
    }
    case kResolvedModelNode: {
      _internal_mutable_resolved_model_node()->::zetasql::ResolvedModelProto::MergeFrom(from._internal_resolved_model_node());
      break;
    }
    case kResolvedAlterActionNode: {
      _internal_mutable_resolved_alter_action_node()->::zetasql::AnyResolvedAlterActionProto::MergeFrom(from._internal_resolved_alter_action_node());
      break;
    }
    case kResolvedUnnestItemNode: {
      _internal_mutable_resolved_unnest_item_node()->::zetasql::ResolvedUnnestItemProto::MergeFrom(from._internal_resolved_unnest_item_node());
      break;
    }
    case kResolvedReplaceFieldItemNode: {
      _internal_mutable_resolved_replace_field_item_node()->::zetasql::ResolvedReplaceFieldItemProto::MergeFrom(from._internal_resolved_replace_field_item_node());
      break;
    }
    case kResolvedConnectionNode: {
      _internal_mutable_resolved_connection_node()->::zetasql::ResolvedConnectionProto::MergeFrom(from._internal_resolved_connection_node());
      break;
    }
    case kResolvedExecuteImmediateArgumentNode: {
      _internal_mutable_resolved_execute_immediate_argument_node()->::zetasql::ResolvedExecuteImmediateArgumentProto::MergeFrom(from._internal_resolved_execute_immediate_argument_node());
      break;
    }
    case kResolvedDescriptorNode: {
      _internal_mutable_resolved_descriptor_node()->::zetasql::ResolvedDescriptorProto::MergeFrom(from._internal_resolved_descriptor_node());
      break;
    }
    case kResolvedExtendedCastElementNode: {
      _internal_mutable_resolved_extended_cast_element_node()->::zetasql::ResolvedExtendedCastElementProto::MergeFrom(from._internal_resolved_extended_cast_element_node());
      break;
    }
    case kResolvedWithPartitionColumnsNode: {
      _internal_mutable_resolved_with_partition_columns_node()->::zetasql::ResolvedWithPartitionColumnsProto::MergeFrom(from._internal_resolved_with_partition_columns_node());
      break;
    }
    case kResolvedExtendedCastNode: {
      _internal_mutable_resolved_extended_cast_node()->::zetasql::ResolvedExtendedCastProto::MergeFrom(from._internal_resolved_extended_cast_node());
      break;
    }
    case kResolvedInlineLambdaNode: {
      _internal_mutable_resolved_inline_lambda_node()->::zetasql::ResolvedInlineLambdaProto::MergeFrom(from._internal_resolved_inline_lambda_node());
      break;
    }
    case kResolvedConstraintNode: {
      _internal_mutable_resolved_constraint_node()->::zetasql::AnyResolvedConstraintProto::MergeFrom(from._internal_resolved_constraint_node());
      break;
    }
    case kResolvedPivotColumnNode: {
      _internal_mutable_resolved_pivot_column_node()->::zetasql::ResolvedPivotColumnProto::MergeFrom(from._internal_resolved_pivot_column_node());
      break;
    }
    case kResolvedReturningClauseNode: {
      _internal_mutable_resolved_returning_clause_node()->::zetasql::ResolvedReturningClauseProto::MergeFrom(from._internal_resolved_returning_clause_node());
      break;
    }
    case kResolvedUnpivotArgNode: {
      _internal_mutable_resolved_unpivot_arg_node()->::zetasql::ResolvedUnpivotArgProto::MergeFrom(from._internal_resolved_unpivot_arg_node());
      break;
    }
    case kResolvedFilterFieldArgNode: {
      _internal_mutable_resolved_filter_field_arg_node()->::zetasql::ResolvedFilterFieldArgProto::MergeFrom(from._internal_resolved_filter_field_arg_node());
      break;
    }
    case kResolvedTableAndColumnInfoNode: {
      _internal_mutable_resolved_table_and_column_info_node()->::zetasql::ResolvedTableAndColumnInfoProto::MergeFrom(from._internal_resolved_table_and_column_info_node());
      break;
    }
    case kResolvedColumnDefaultValueNode: {
      _internal_mutable_resolved_column_default_value_node()->::zetasql::ResolvedColumnDefaultValueProto::MergeFrom(from._internal_resolved_column_default_value_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedArgumentProto)
}

inline void AnyResolvedArgumentProto::SharedCtor() {
clear_has_node();
}

AnyResolvedArgumentProto::~AnyResolvedArgumentProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedArgumentProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedArgumentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedArgumentProto::ArenaDtor(void* object) {
  AnyResolvedArgumentProto* _this = reinterpret_cast< AnyResolvedArgumentProto* >(object);
  (void)_this;
}
void AnyResolvedArgumentProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedArgumentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedArgumentProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedArgumentProto)
  switch (node_case()) {
    case kResolvedMakeProtoFieldNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_make_proto_field_node_;
      }
      break;
    }
    case kResolvedColumnHolderNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_column_holder_node_;
      }
      break;
    }
    case kResolvedComputedColumnNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_computed_column_node_;
      }
      break;
    }
    case kResolvedOrderByItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_order_by_item_node_;
      }
      break;
    }
    case kResolvedOutputColumnNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_output_column_node_;
      }
      break;
    }
    case kResolvedWithEntryNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_with_entry_node_;
      }
      break;
    }
    case kResolvedOptionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_option_node_;
      }
      break;
    }
    case kResolvedWindowPartitioningNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_window_partitioning_node_;
      }
      break;
    }
    case kResolvedWindowOrderingNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_window_ordering_node_;
      }
      break;
    }
    case kResolvedWindowFrameNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_window_frame_node_;
      }
      break;
    }
    case kResolvedAnalyticFunctionGroupNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_analytic_function_group_node_;
      }
      break;
    }
    case kResolvedWindowFrameExprNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_window_frame_expr_node_;
      }
      break;
    }
    case kResolvedDmlvalueNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_dmlvalue_node_;
      }
      break;
    }
    case kResolvedAssertRowsModifiedNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_assert_rows_modified_node_;
      }
      break;
    }
    case kResolvedInsertRowNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_insert_row_node_;
      }
      break;
    }
    case kResolvedUpdateItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_update_item_node_;
      }
      break;
    }
    case kResolvedPrivilegeNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_privilege_node_;
      }
      break;
    }
    case kResolvedArgumentDefNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_argument_def_node_;
      }
      break;
    }
    case kResolvedArgumentListNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_argument_list_node_;
      }
      break;
    }
    case kResolvedFunctionArgumentNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_function_argument_node_;
      }
      break;
    }
    case kResolvedFunctionSignatureHolderNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_function_signature_holder_node_;
      }
      break;
    }
    case kResolvedAggregateHavingModifierNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_aggregate_having_modifier_node_;
      }
      break;
    }
    case kResolvedColumnDefinitionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_column_definition_node_;
      }
      break;
    }
    case kResolvedGroupingSetNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_grouping_set_node_;
      }
      break;
    }
    case kResolvedSetOperationItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_set_operation_item_node_;
      }
      break;
    }
    case kResolvedIndexItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_index_item_node_;
      }
      break;
    }
    case kResolvedMergeWhenNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_merge_when_node_;
      }
      break;
    }
    case kResolvedUpdateArrayItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_update_array_item_node_;
      }
      break;
    }
    case kResolvedColumnAnnotationsNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_column_annotations_node_;
      }
      break;
    }
    case kResolvedGeneratedColumnInfoNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_generated_column_info_node_;
      }
      break;
    }
    case kResolvedModelNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_model_node_;
      }
      break;
    }
    case kResolvedAlterActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_action_node_;
      }
      break;
    }
    case kResolvedUnnestItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_unnest_item_node_;
      }
      break;
    }
    case kResolvedReplaceFieldItemNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_replace_field_item_node_;
      }
      break;
    }
    case kResolvedConnectionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_connection_node_;
      }
      break;
    }
    case kResolvedExecuteImmediateArgumentNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_execute_immediate_argument_node_;
      }
      break;
    }
    case kResolvedDescriptorNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_descriptor_node_;
      }
      break;
    }
    case kResolvedExtendedCastElementNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_extended_cast_element_node_;
      }
      break;
    }
    case kResolvedWithPartitionColumnsNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_with_partition_columns_node_;
      }
      break;
    }
    case kResolvedExtendedCastNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_extended_cast_node_;
      }
      break;
    }
    case kResolvedInlineLambdaNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_inline_lambda_node_;
      }
      break;
    }
    case kResolvedConstraintNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_constraint_node_;
      }
      break;
    }
    case kResolvedPivotColumnNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_pivot_column_node_;
      }
      break;
    }
    case kResolvedReturningClauseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_returning_clause_node_;
      }
      break;
    }
    case kResolvedUnpivotArgNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_unpivot_arg_node_;
      }
      break;
    }
    case kResolvedFilterFieldArgNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_filter_field_arg_node_;
      }
      break;
    }
    case kResolvedTableAndColumnInfoNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_table_and_column_info_node_;
      }
      break;
    }
    case kResolvedColumnDefaultValueNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_column_default_value_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedArgumentProto::InternalSwap(AnyResolvedArgumentProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedArgumentProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[1]);
}

// ===================================================================

class ResolvedArgumentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedArgumentProto>()._has_bits_);
  static const ::zetasql::ResolvedNodeProto& parent(const ResolvedArgumentProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedNodeProto&
ResolvedArgumentProto::_Internal::parent(const ResolvedArgumentProto* msg) {
  return *msg->parent_;
}
void ResolvedArgumentProto::clear_parent() {
  if (parent_ != nullptr) parent_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ResolvedArgumentProto::ResolvedArgumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedArgumentProto)
}
ResolvedArgumentProto::ResolvedArgumentProto(const ResolvedArgumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedNodeProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedArgumentProto)
}

inline void ResolvedArgumentProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedArgumentProto::~ResolvedArgumentProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedArgumentProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedArgumentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedArgumentProto::ArenaDtor(void* object) {
  ResolvedArgumentProto* _this = reinterpret_cast< ResolvedArgumentProto* >(object);
  (void)_this;
}
void ResolvedArgumentProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedArgumentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedArgumentProto::InternalSwap(ResolvedArgumentProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedArgumentProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[2]);
}

// ===================================================================

class AnyResolvedExprProto::_Internal {
 public:
  static const ::zetasql::ResolvedLiteralProto& resolved_literal_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedParameterProto& resolved_parameter_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedExpressionColumnProto& resolved_expression_column_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedColumnRefProto& resolved_column_ref_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::AnyResolvedFunctionCallBaseProto& resolved_function_call_base_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedCastProto& resolved_cast_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedMakeStructProto& resolved_make_struct_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedMakeProtoProto& resolved_make_proto_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedGetStructFieldProto& resolved_get_struct_field_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedGetProtoFieldProto& resolved_get_proto_field_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedSubqueryExprProto& resolved_subquery_expr_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedDMLDefaultProto& resolved_dmldefault_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedArgumentRefProto& resolved_argument_ref_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedConstantProto& resolved_constant_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedReplaceFieldProto& resolved_replace_field_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedSystemVariableProto& resolved_system_variable_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedFlattenProto& resolved_flatten_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedFlattenedArgProto& resolved_flattened_arg_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedGetJsonFieldProto& resolved_get_json_field_node(const AnyResolvedExprProto* msg);
  static const ::zetasql::ResolvedFilterFieldProto& resolved_filter_field_node(const AnyResolvedExprProto* msg);
};

const ::zetasql::ResolvedLiteralProto&
AnyResolvedExprProto::_Internal::resolved_literal_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_literal_node_;
}
const ::zetasql::ResolvedParameterProto&
AnyResolvedExprProto::_Internal::resolved_parameter_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_parameter_node_;
}
const ::zetasql::ResolvedExpressionColumnProto&
AnyResolvedExprProto::_Internal::resolved_expression_column_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_expression_column_node_;
}
const ::zetasql::ResolvedColumnRefProto&
AnyResolvedExprProto::_Internal::resolved_column_ref_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_column_ref_node_;
}
const ::zetasql::AnyResolvedFunctionCallBaseProto&
AnyResolvedExprProto::_Internal::resolved_function_call_base_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_function_call_base_node_;
}
const ::zetasql::ResolvedCastProto&
AnyResolvedExprProto::_Internal::resolved_cast_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_cast_node_;
}
const ::zetasql::ResolvedMakeStructProto&
AnyResolvedExprProto::_Internal::resolved_make_struct_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_make_struct_node_;
}
const ::zetasql::ResolvedMakeProtoProto&
AnyResolvedExprProto::_Internal::resolved_make_proto_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_make_proto_node_;
}
const ::zetasql::ResolvedGetStructFieldProto&
AnyResolvedExprProto::_Internal::resolved_get_struct_field_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_get_struct_field_node_;
}
const ::zetasql::ResolvedGetProtoFieldProto&
AnyResolvedExprProto::_Internal::resolved_get_proto_field_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_get_proto_field_node_;
}
const ::zetasql::ResolvedSubqueryExprProto&
AnyResolvedExprProto::_Internal::resolved_subquery_expr_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_subquery_expr_node_;
}
const ::zetasql::ResolvedDMLDefaultProto&
AnyResolvedExprProto::_Internal::resolved_dmldefault_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_dmldefault_node_;
}
const ::zetasql::ResolvedArgumentRefProto&
AnyResolvedExprProto::_Internal::resolved_argument_ref_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_argument_ref_node_;
}
const ::zetasql::ResolvedConstantProto&
AnyResolvedExprProto::_Internal::resolved_constant_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_constant_node_;
}
const ::zetasql::ResolvedReplaceFieldProto&
AnyResolvedExprProto::_Internal::resolved_replace_field_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_replace_field_node_;
}
const ::zetasql::ResolvedSystemVariableProto&
AnyResolvedExprProto::_Internal::resolved_system_variable_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_system_variable_node_;
}
const ::zetasql::ResolvedFlattenProto&
AnyResolvedExprProto::_Internal::resolved_flatten_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_flatten_node_;
}
const ::zetasql::ResolvedFlattenedArgProto&
AnyResolvedExprProto::_Internal::resolved_flattened_arg_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_flattened_arg_node_;
}
const ::zetasql::ResolvedGetJsonFieldProto&
AnyResolvedExprProto::_Internal::resolved_get_json_field_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_get_json_field_node_;
}
const ::zetasql::ResolvedFilterFieldProto&
AnyResolvedExprProto::_Internal::resolved_filter_field_node(const AnyResolvedExprProto* msg) {
  return *msg->node_.resolved_filter_field_node_;
}
void AnyResolvedExprProto::set_allocated_resolved_literal_node(::zetasql::ResolvedLiteralProto* resolved_literal_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_literal_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedLiteralProto>::GetOwningArena(resolved_literal_node);
    if (message_arena != submessage_arena) {
      resolved_literal_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_literal_node, submessage_arena);
    }
    set_has_resolved_literal_node();
    node_.resolved_literal_node_ = resolved_literal_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_literal_node)
}
void AnyResolvedExprProto::set_allocated_resolved_parameter_node(::zetasql::ResolvedParameterProto* resolved_parameter_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_parameter_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedParameterProto>::GetOwningArena(resolved_parameter_node);
    if (message_arena != submessage_arena) {
      resolved_parameter_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_parameter_node, submessage_arena);
    }
    set_has_resolved_parameter_node();
    node_.resolved_parameter_node_ = resolved_parameter_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_parameter_node)
}
void AnyResolvedExprProto::set_allocated_resolved_expression_column_node(::zetasql::ResolvedExpressionColumnProto* resolved_expression_column_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_expression_column_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedExpressionColumnProto>::GetOwningArena(resolved_expression_column_node);
    if (message_arena != submessage_arena) {
      resolved_expression_column_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_expression_column_node, submessage_arena);
    }
    set_has_resolved_expression_column_node();
    node_.resolved_expression_column_node_ = resolved_expression_column_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_expression_column_node)
}
void AnyResolvedExprProto::set_allocated_resolved_column_ref_node(::zetasql::ResolvedColumnRefProto* resolved_column_ref_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_column_ref_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedColumnRefProto>::GetOwningArena(resolved_column_ref_node);
    if (message_arena != submessage_arena) {
      resolved_column_ref_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_column_ref_node, submessage_arena);
    }
    set_has_resolved_column_ref_node();
    node_.resolved_column_ref_node_ = resolved_column_ref_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_column_ref_node)
}
void AnyResolvedExprProto::set_allocated_resolved_function_call_base_node(::zetasql::AnyResolvedFunctionCallBaseProto* resolved_function_call_base_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_function_call_base_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedFunctionCallBaseProto>::GetOwningArena(resolved_function_call_base_node);
    if (message_arena != submessage_arena) {
      resolved_function_call_base_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_function_call_base_node, submessage_arena);
    }
    set_has_resolved_function_call_base_node();
    node_.resolved_function_call_base_node_ = resolved_function_call_base_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_function_call_base_node)
}
void AnyResolvedExprProto::set_allocated_resolved_cast_node(::zetasql::ResolvedCastProto* resolved_cast_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_cast_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCastProto>::GetOwningArena(resolved_cast_node);
    if (message_arena != submessage_arena) {
      resolved_cast_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_cast_node, submessage_arena);
    }
    set_has_resolved_cast_node();
    node_.resolved_cast_node_ = resolved_cast_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_cast_node)
}
void AnyResolvedExprProto::set_allocated_resolved_make_struct_node(::zetasql::ResolvedMakeStructProto* resolved_make_struct_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_make_struct_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedMakeStructProto>::GetOwningArena(resolved_make_struct_node);
    if (message_arena != submessage_arena) {
      resolved_make_struct_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_make_struct_node, submessage_arena);
    }
    set_has_resolved_make_struct_node();
    node_.resolved_make_struct_node_ = resolved_make_struct_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_make_struct_node)
}
void AnyResolvedExprProto::set_allocated_resolved_make_proto_node(::zetasql::ResolvedMakeProtoProto* resolved_make_proto_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_make_proto_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedMakeProtoProto>::GetOwningArena(resolved_make_proto_node);
    if (message_arena != submessage_arena) {
      resolved_make_proto_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_make_proto_node, submessage_arena);
    }
    set_has_resolved_make_proto_node();
    node_.resolved_make_proto_node_ = resolved_make_proto_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_make_proto_node)
}
void AnyResolvedExprProto::set_allocated_resolved_get_struct_field_node(::zetasql::ResolvedGetStructFieldProto* resolved_get_struct_field_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_get_struct_field_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedGetStructFieldProto>::GetOwningArena(resolved_get_struct_field_node);
    if (message_arena != submessage_arena) {
      resolved_get_struct_field_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_get_struct_field_node, submessage_arena);
    }
    set_has_resolved_get_struct_field_node();
    node_.resolved_get_struct_field_node_ = resolved_get_struct_field_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_get_struct_field_node)
}
void AnyResolvedExprProto::set_allocated_resolved_get_proto_field_node(::zetasql::ResolvedGetProtoFieldProto* resolved_get_proto_field_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_get_proto_field_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedGetProtoFieldProto>::GetOwningArena(resolved_get_proto_field_node);
    if (message_arena != submessage_arena) {
      resolved_get_proto_field_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_get_proto_field_node, submessage_arena);
    }
    set_has_resolved_get_proto_field_node();
    node_.resolved_get_proto_field_node_ = resolved_get_proto_field_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_get_proto_field_node)
}
void AnyResolvedExprProto::set_allocated_resolved_subquery_expr_node(::zetasql::ResolvedSubqueryExprProto* resolved_subquery_expr_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_subquery_expr_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedSubqueryExprProto>::GetOwningArena(resolved_subquery_expr_node);
    if (message_arena != submessage_arena) {
      resolved_subquery_expr_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_subquery_expr_node, submessage_arena);
    }
    set_has_resolved_subquery_expr_node();
    node_.resolved_subquery_expr_node_ = resolved_subquery_expr_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_subquery_expr_node)
}
void AnyResolvedExprProto::set_allocated_resolved_dmldefault_node(::zetasql::ResolvedDMLDefaultProto* resolved_dmldefault_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_dmldefault_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDMLDefaultProto>::GetOwningArena(resolved_dmldefault_node);
    if (message_arena != submessage_arena) {
      resolved_dmldefault_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_dmldefault_node, submessage_arena);
    }
    set_has_resolved_dmldefault_node();
    node_.resolved_dmldefault_node_ = resolved_dmldefault_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_dmldefault_node)
}
void AnyResolvedExprProto::set_allocated_resolved_argument_ref_node(::zetasql::ResolvedArgumentRefProto* resolved_argument_ref_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_argument_ref_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedArgumentRefProto>::GetOwningArena(resolved_argument_ref_node);
    if (message_arena != submessage_arena) {
      resolved_argument_ref_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_argument_ref_node, submessage_arena);
    }
    set_has_resolved_argument_ref_node();
    node_.resolved_argument_ref_node_ = resolved_argument_ref_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_argument_ref_node)
}
void AnyResolvedExprProto::set_allocated_resolved_constant_node(::zetasql::ResolvedConstantProto* resolved_constant_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_constant_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedConstantProto>::GetOwningArena(resolved_constant_node);
    if (message_arena != submessage_arena) {
      resolved_constant_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_constant_node, submessage_arena);
    }
    set_has_resolved_constant_node();
    node_.resolved_constant_node_ = resolved_constant_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_constant_node)
}
void AnyResolvedExprProto::set_allocated_resolved_replace_field_node(::zetasql::ResolvedReplaceFieldProto* resolved_replace_field_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_replace_field_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedReplaceFieldProto>::GetOwningArena(resolved_replace_field_node);
    if (message_arena != submessage_arena) {
      resolved_replace_field_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_replace_field_node, submessage_arena);
    }
    set_has_resolved_replace_field_node();
    node_.resolved_replace_field_node_ = resolved_replace_field_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_replace_field_node)
}
void AnyResolvedExprProto::set_allocated_resolved_system_variable_node(::zetasql::ResolvedSystemVariableProto* resolved_system_variable_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_system_variable_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedSystemVariableProto>::GetOwningArena(resolved_system_variable_node);
    if (message_arena != submessage_arena) {
      resolved_system_variable_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_system_variable_node, submessage_arena);
    }
    set_has_resolved_system_variable_node();
    node_.resolved_system_variable_node_ = resolved_system_variable_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_system_variable_node)
}
void AnyResolvedExprProto::set_allocated_resolved_flatten_node(::zetasql::ResolvedFlattenProto* resolved_flatten_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_flatten_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedFlattenProto>::GetOwningArena(resolved_flatten_node);
    if (message_arena != submessage_arena) {
      resolved_flatten_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_flatten_node, submessage_arena);
    }
    set_has_resolved_flatten_node();
    node_.resolved_flatten_node_ = resolved_flatten_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_flatten_node)
}
void AnyResolvedExprProto::set_allocated_resolved_flattened_arg_node(::zetasql::ResolvedFlattenedArgProto* resolved_flattened_arg_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_flattened_arg_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedFlattenedArgProto>::GetOwningArena(resolved_flattened_arg_node);
    if (message_arena != submessage_arena) {
      resolved_flattened_arg_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_flattened_arg_node, submessage_arena);
    }
    set_has_resolved_flattened_arg_node();
    node_.resolved_flattened_arg_node_ = resolved_flattened_arg_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_flattened_arg_node)
}
void AnyResolvedExprProto::set_allocated_resolved_get_json_field_node(::zetasql::ResolvedGetJsonFieldProto* resolved_get_json_field_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_get_json_field_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedGetJsonFieldProto>::GetOwningArena(resolved_get_json_field_node);
    if (message_arena != submessage_arena) {
      resolved_get_json_field_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_get_json_field_node, submessage_arena);
    }
    set_has_resolved_get_json_field_node();
    node_.resolved_get_json_field_node_ = resolved_get_json_field_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_get_json_field_node)
}
void AnyResolvedExprProto::set_allocated_resolved_filter_field_node(::zetasql::ResolvedFilterFieldProto* resolved_filter_field_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_filter_field_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedFilterFieldProto>::GetOwningArena(resolved_filter_field_node);
    if (message_arena != submessage_arena) {
      resolved_filter_field_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_filter_field_node, submessage_arena);
    }
    set_has_resolved_filter_field_node();
    node_.resolved_filter_field_node_ = resolved_filter_field_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedExprProto.resolved_filter_field_node)
}
AnyResolvedExprProto::AnyResolvedExprProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedExprProto)
}
AnyResolvedExprProto::AnyResolvedExprProto(const AnyResolvedExprProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedLiteralNode: {
      _internal_mutable_resolved_literal_node()->::zetasql::ResolvedLiteralProto::MergeFrom(from._internal_resolved_literal_node());
      break;
    }
    case kResolvedParameterNode: {
      _internal_mutable_resolved_parameter_node()->::zetasql::ResolvedParameterProto::MergeFrom(from._internal_resolved_parameter_node());
      break;
    }
    case kResolvedExpressionColumnNode: {
      _internal_mutable_resolved_expression_column_node()->::zetasql::ResolvedExpressionColumnProto::MergeFrom(from._internal_resolved_expression_column_node());
      break;
    }
    case kResolvedColumnRefNode: {
      _internal_mutable_resolved_column_ref_node()->::zetasql::ResolvedColumnRefProto::MergeFrom(from._internal_resolved_column_ref_node());
      break;
    }
    case kResolvedFunctionCallBaseNode: {
      _internal_mutable_resolved_function_call_base_node()->::zetasql::AnyResolvedFunctionCallBaseProto::MergeFrom(from._internal_resolved_function_call_base_node());
      break;
    }
    case kResolvedCastNode: {
      _internal_mutable_resolved_cast_node()->::zetasql::ResolvedCastProto::MergeFrom(from._internal_resolved_cast_node());
      break;
    }
    case kResolvedMakeStructNode: {
      _internal_mutable_resolved_make_struct_node()->::zetasql::ResolvedMakeStructProto::MergeFrom(from._internal_resolved_make_struct_node());
      break;
    }
    case kResolvedMakeProtoNode: {
      _internal_mutable_resolved_make_proto_node()->::zetasql::ResolvedMakeProtoProto::MergeFrom(from._internal_resolved_make_proto_node());
      break;
    }
    case kResolvedGetStructFieldNode: {
      _internal_mutable_resolved_get_struct_field_node()->::zetasql::ResolvedGetStructFieldProto::MergeFrom(from._internal_resolved_get_struct_field_node());
      break;
    }
    case kResolvedGetProtoFieldNode: {
      _internal_mutable_resolved_get_proto_field_node()->::zetasql::ResolvedGetProtoFieldProto::MergeFrom(from._internal_resolved_get_proto_field_node());
      break;
    }
    case kResolvedSubqueryExprNode: {
      _internal_mutable_resolved_subquery_expr_node()->::zetasql::ResolvedSubqueryExprProto::MergeFrom(from._internal_resolved_subquery_expr_node());
      break;
    }
    case kResolvedDmldefaultNode: {
      _internal_mutable_resolved_dmldefault_node()->::zetasql::ResolvedDMLDefaultProto::MergeFrom(from._internal_resolved_dmldefault_node());
      break;
    }
    case kResolvedArgumentRefNode: {
      _internal_mutable_resolved_argument_ref_node()->::zetasql::ResolvedArgumentRefProto::MergeFrom(from._internal_resolved_argument_ref_node());
      break;
    }
    case kResolvedConstantNode: {
      _internal_mutable_resolved_constant_node()->::zetasql::ResolvedConstantProto::MergeFrom(from._internal_resolved_constant_node());
      break;
    }
    case kResolvedReplaceFieldNode: {
      _internal_mutable_resolved_replace_field_node()->::zetasql::ResolvedReplaceFieldProto::MergeFrom(from._internal_resolved_replace_field_node());
      break;
    }
    case kResolvedSystemVariableNode: {
      _internal_mutable_resolved_system_variable_node()->::zetasql::ResolvedSystemVariableProto::MergeFrom(from._internal_resolved_system_variable_node());
      break;
    }
    case kResolvedFlattenNode: {
      _internal_mutable_resolved_flatten_node()->::zetasql::ResolvedFlattenProto::MergeFrom(from._internal_resolved_flatten_node());
      break;
    }
    case kResolvedFlattenedArgNode: {
      _internal_mutable_resolved_flattened_arg_node()->::zetasql::ResolvedFlattenedArgProto::MergeFrom(from._internal_resolved_flattened_arg_node());
      break;
    }
    case kResolvedGetJsonFieldNode: {
      _internal_mutable_resolved_get_json_field_node()->::zetasql::ResolvedGetJsonFieldProto::MergeFrom(from._internal_resolved_get_json_field_node());
      break;
    }
    case kResolvedFilterFieldNode: {
      _internal_mutable_resolved_filter_field_node()->::zetasql::ResolvedFilterFieldProto::MergeFrom(from._internal_resolved_filter_field_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedExprProto)
}

inline void AnyResolvedExprProto::SharedCtor() {
clear_has_node();
}

AnyResolvedExprProto::~AnyResolvedExprProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedExprProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedExprProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedExprProto::ArenaDtor(void* object) {
  AnyResolvedExprProto* _this = reinterpret_cast< AnyResolvedExprProto* >(object);
  (void)_this;
}
void AnyResolvedExprProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedExprProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedExprProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedExprProto)
  switch (node_case()) {
    case kResolvedLiteralNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_literal_node_;
      }
      break;
    }
    case kResolvedParameterNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_parameter_node_;
      }
      break;
    }
    case kResolvedExpressionColumnNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_expression_column_node_;
      }
      break;
    }
    case kResolvedColumnRefNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_column_ref_node_;
      }
      break;
    }
    case kResolvedFunctionCallBaseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_function_call_base_node_;
      }
      break;
    }
    case kResolvedCastNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_cast_node_;
      }
      break;
    }
    case kResolvedMakeStructNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_make_struct_node_;
      }
      break;
    }
    case kResolvedMakeProtoNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_make_proto_node_;
      }
      break;
    }
    case kResolvedGetStructFieldNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_get_struct_field_node_;
      }
      break;
    }
    case kResolvedGetProtoFieldNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_get_proto_field_node_;
      }
      break;
    }
    case kResolvedSubqueryExprNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_subquery_expr_node_;
      }
      break;
    }
    case kResolvedDmldefaultNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_dmldefault_node_;
      }
      break;
    }
    case kResolvedArgumentRefNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_argument_ref_node_;
      }
      break;
    }
    case kResolvedConstantNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_constant_node_;
      }
      break;
    }
    case kResolvedReplaceFieldNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_replace_field_node_;
      }
      break;
    }
    case kResolvedSystemVariableNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_system_variable_node_;
      }
      break;
    }
    case kResolvedFlattenNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_flatten_node_;
      }
      break;
    }
    case kResolvedFlattenedArgNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_flattened_arg_node_;
      }
      break;
    }
    case kResolvedGetJsonFieldNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_get_json_field_node_;
      }
      break;
    }
    case kResolvedFilterFieldNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_filter_field_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedExprProto::InternalSwap(AnyResolvedExprProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedExprProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[3]);
}

// ===================================================================

class ResolvedExprProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExprProto>()._has_bits_);
  static const ::zetasql::ResolvedNodeProto& parent(const ResolvedExprProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& type(const ResolvedExprProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnnotationMapProto& type_annotation_map(const ResolvedExprProto* msg);
  static void set_has_type_annotation_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedNodeProto&
ResolvedExprProto::_Internal::parent(const ResolvedExprProto* msg) {
  return *msg->parent_;
}
const ::zetasql::TypeProto&
ResolvedExprProto::_Internal::type(const ResolvedExprProto* msg) {
  return *msg->type_;
}
const ::zetasql::AnnotationMapProto&
ResolvedExprProto::_Internal::type_annotation_map(const ResolvedExprProto* msg) {
  return *msg->type_annotation_map_;
}
void ResolvedExprProto::clear_parent() {
  if (parent_ != nullptr) parent_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ResolvedExprProto::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ResolvedExprProto::clear_type_annotation_map() {
  if (type_annotation_map_ != nullptr) type_annotation_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ResolvedExprProto::ResolvedExprProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExprProto)
}
ResolvedExprProto::ResolvedExprProto(const ResolvedExprProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedNodeProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::zetasql::TypeProto(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_type_annotation_map()) {
    type_annotation_map_ = new ::zetasql::AnnotationMapProto(*from.type_annotation_map_);
  } else {
    type_annotation_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExprProto)
}

inline void ResolvedExprProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_annotation_map_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(type_annotation_map_));
}

ResolvedExprProto::~ResolvedExprProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExprProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedExprProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete type_annotation_map_;
}

void ResolvedExprProto::ArenaDtor(void* object) {
  ResolvedExprProto* _this = reinterpret_cast< ResolvedExprProto* >(object);
  (void)_this;
}
void ResolvedExprProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedExprProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedExprProto::InternalSwap(ResolvedExprProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExprProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[4]);
}

// ===================================================================

class ResolvedLiteralProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedLiteralProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedLiteralProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ValueWithTypeProto& value(const ResolvedLiteralProto* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_explicit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_float_literal_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preserve_in_literal_remover(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedLiteralProto::_Internal::parent(const ResolvedLiteralProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ValueWithTypeProto&
ResolvedLiteralProto::_Internal::value(const ResolvedLiteralProto* msg) {
  return *msg->value_;
}
void ResolvedLiteralProto::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResolvedLiteralProto::ResolvedLiteralProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedLiteralProto)
}
ResolvedLiteralProto::ResolvedLiteralProto(const ResolvedLiteralProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::zetasql::ValueWithTypeProto(*from.value_);
  } else {
    value_ = nullptr;
  }
  ::memcpy(&float_literal_id_, &from.float_literal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_in_literal_remover_) -
    reinterpret_cast<char*>(&float_literal_id_)) + sizeof(preserve_in_literal_remover_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedLiteralProto)
}

inline void ResolvedLiteralProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preserve_in_literal_remover_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(preserve_in_literal_remover_));
}

ResolvedLiteralProto::~ResolvedLiteralProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedLiteralProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedLiteralProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete value_;
}

void ResolvedLiteralProto::ArenaDtor(void* object) {
  ResolvedLiteralProto* _this = reinterpret_cast< ResolvedLiteralProto* >(object);
  (void)_this;
}
void ResolvedLiteralProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedLiteralProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedLiteralProto::InternalSwap(ResolvedLiteralProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedLiteralProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[5]);
}

// ===================================================================

class ResolvedParameterProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedParameterProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedParameterProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_untyped(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedParameterProto::_Internal::parent(const ResolvedParameterProto* msg) {
  return *msg->parent_;
}
ResolvedParameterProto::ResolvedParameterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedParameterProto)
}
ResolvedParameterProto::ResolvedParameterProto(const ResolvedParameterProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_untyped_) -
    reinterpret_cast<char*>(&position_)) + sizeof(is_untyped_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedParameterProto)
}

inline void ResolvedParameterProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_untyped_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_untyped_));
}

ResolvedParameterProto::~ResolvedParameterProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedParameterProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedParameterProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedParameterProto::ArenaDtor(void* object) {
  ResolvedParameterProto* _this = reinterpret_cast< ResolvedParameterProto* >(object);
  (void)_this;
}
void ResolvedParameterProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedParameterProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedParameterProto::InternalSwap(ResolvedParameterProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedParameterProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[6]);
}

// ===================================================================

class ResolvedExpressionColumnProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExpressionColumnProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedExpressionColumnProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedExpressionColumnProto::_Internal::parent(const ResolvedExpressionColumnProto* msg) {
  return *msg->parent_;
}
ResolvedExpressionColumnProto::ResolvedExpressionColumnProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExpressionColumnProto)
}
ResolvedExpressionColumnProto::ResolvedExpressionColumnProto(const ResolvedExpressionColumnProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExpressionColumnProto)
}

inline void ResolvedExpressionColumnProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_ = nullptr;
}

ResolvedExpressionColumnProto::~ResolvedExpressionColumnProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExpressionColumnProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedExpressionColumnProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedExpressionColumnProto::ArenaDtor(void* object) {
  ResolvedExpressionColumnProto* _this = reinterpret_cast< ResolvedExpressionColumnProto* >(object);
  (void)_this;
}
void ResolvedExpressionColumnProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedExpressionColumnProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedExpressionColumnProto::InternalSwap(ResolvedExpressionColumnProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExpressionColumnProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[7]);
}

// ===================================================================

class ResolvedColumnRefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedColumnRefProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedColumnRefProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnProto& column(const ResolvedColumnRefProto* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_correlated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedColumnRefProto::_Internal::parent(const ResolvedColumnRefProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedColumnRefProto::_Internal::column(const ResolvedColumnRefProto* msg) {
  return *msg->column_;
}
void ResolvedColumnRefProto::clear_column() {
  if (column_ != nullptr) column_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResolvedColumnRefProto::ResolvedColumnRefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedColumnRefProto)
}
ResolvedColumnRefProto::ResolvedColumnRefProto(const ResolvedColumnRefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_column()) {
    column_ = new ::zetasql::ResolvedColumnProto(*from.column_);
  } else {
    column_ = nullptr;
  }
  is_correlated_ = from.is_correlated_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedColumnRefProto)
}

inline void ResolvedColumnRefProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_correlated_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_correlated_));
}

ResolvedColumnRefProto::~ResolvedColumnRefProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedColumnRefProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedColumnRefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete column_;
}

void ResolvedColumnRefProto::ArenaDtor(void* object) {
  ResolvedColumnRefProto* _this = reinterpret_cast< ResolvedColumnRefProto* >(object);
  (void)_this;
}
void ResolvedColumnRefProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedColumnRefProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedColumnRefProto::InternalSwap(ResolvedColumnRefProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedColumnRefProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[8]);
}

// ===================================================================

class ResolvedConstantProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedConstantProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedConstantProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ConstantRefProto& constant(const ResolvedConstantProto* msg);
  static void set_has_constant(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedConstantProto::_Internal::parent(const ResolvedConstantProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ConstantRefProto&
ResolvedConstantProto::_Internal::constant(const ResolvedConstantProto* msg) {
  return *msg->constant_;
}
void ResolvedConstantProto::clear_constant() {
  if (constant_ != nullptr) constant_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResolvedConstantProto::ResolvedConstantProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedConstantProto)
}
ResolvedConstantProto::ResolvedConstantProto(const ResolvedConstantProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_constant()) {
    constant_ = new ::zetasql::ConstantRefProto(*from.constant_);
  } else {
    constant_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedConstantProto)
}

inline void ResolvedConstantProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&constant_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(constant_));
}

ResolvedConstantProto::~ResolvedConstantProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedConstantProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedConstantProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete constant_;
}

void ResolvedConstantProto::ArenaDtor(void* object) {
  ResolvedConstantProto* _this = reinterpret_cast< ResolvedConstantProto* >(object);
  (void)_this;
}
void ResolvedConstantProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedConstantProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedConstantProto::InternalSwap(ResolvedConstantProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedConstantProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[9]);
}

// ===================================================================

class ResolvedSystemVariableProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSystemVariableProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedSystemVariableProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedSystemVariableProto::_Internal::parent(const ResolvedSystemVariableProto* msg) {
  return *msg->parent_;
}
ResolvedSystemVariableProto::ResolvedSystemVariableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSystemVariableProto)
}
ResolvedSystemVariableProto::ResolvedSystemVariableProto(const ResolvedSystemVariableProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSystemVariableProto)
}

inline void ResolvedSystemVariableProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedSystemVariableProto::~ResolvedSystemVariableProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSystemVariableProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedSystemVariableProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedSystemVariableProto::ArenaDtor(void* object) {
  ResolvedSystemVariableProto* _this = reinterpret_cast< ResolvedSystemVariableProto* >(object);
  (void)_this;
}
void ResolvedSystemVariableProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedSystemVariableProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedSystemVariableProto::InternalSwap(ResolvedSystemVariableProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSystemVariableProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[10]);
}

// ===================================================================

class ResolvedInlineLambdaProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedInlineLambdaProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedInlineLambdaProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& body(const ResolvedInlineLambdaProto* msg);
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedInlineLambdaProto::_Internal::parent(const ResolvedInlineLambdaProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedInlineLambdaProto::_Internal::body(const ResolvedInlineLambdaProto* msg) {
  return *msg->body_;
}
void ResolvedInlineLambdaProto::clear_argument_list() {
  argument_list_.Clear();
}
ResolvedInlineLambdaProto::ResolvedInlineLambdaProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  argument_list_(arena),
  parameter_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedInlineLambdaProto)
}
ResolvedInlineLambdaProto::ResolvedInlineLambdaProto(const ResolvedInlineLambdaProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argument_list_(from.argument_list_),
      parameter_list_(from.parameter_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_body()) {
    body_ = new ::zetasql::AnyResolvedExprProto(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedInlineLambdaProto)
}

inline void ResolvedInlineLambdaProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&body_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(body_));
}

ResolvedInlineLambdaProto::~ResolvedInlineLambdaProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedInlineLambdaProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedInlineLambdaProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete body_;
}

void ResolvedInlineLambdaProto::ArenaDtor(void* object) {
  ResolvedInlineLambdaProto* _this = reinterpret_cast< ResolvedInlineLambdaProto* >(object);
  (void)_this;
}
void ResolvedInlineLambdaProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedInlineLambdaProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedInlineLambdaProto::InternalSwap(ResolvedInlineLambdaProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedInlineLambdaProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[11]);
}

// ===================================================================

class ResolvedFilterFieldArgProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFilterFieldArgProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedFilterFieldArgProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_include(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedFilterFieldArgProto::_Internal::parent(const ResolvedFilterFieldArgProto* msg) {
  return *msg->parent_;
}
void ResolvedFilterFieldArgProto::clear_field_descriptor_path() {
  field_descriptor_path_.Clear();
}
ResolvedFilterFieldArgProto::ResolvedFilterFieldArgProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  field_descriptor_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFilterFieldArgProto)
}
ResolvedFilterFieldArgProto::ResolvedFilterFieldArgProto(const ResolvedFilterFieldArgProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      field_descriptor_path_(from.field_descriptor_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  include_ = from.include_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFilterFieldArgProto)
}

inline void ResolvedFilterFieldArgProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(include_));
}

ResolvedFilterFieldArgProto::~ResolvedFilterFieldArgProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFilterFieldArgProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedFilterFieldArgProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedFilterFieldArgProto::ArenaDtor(void* object) {
  ResolvedFilterFieldArgProto* _this = reinterpret_cast< ResolvedFilterFieldArgProto* >(object);
  (void)_this;
}
void ResolvedFilterFieldArgProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedFilterFieldArgProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedFilterFieldArgProto::InternalSwap(ResolvedFilterFieldArgProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFilterFieldArgProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[12]);
}

// ===================================================================

class ResolvedFilterFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFilterFieldProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedFilterFieldProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedFilterFieldProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedFilterFieldProto::_Internal::parent(const ResolvedFilterFieldProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedFilterFieldProto::_Internal::expr(const ResolvedFilterFieldProto* msg) {
  return *msg->expr_;
}
ResolvedFilterFieldProto::ResolvedFilterFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filter_field_arg_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFilterFieldProto)
}
ResolvedFilterFieldProto::ResolvedFilterFieldProto(const ResolvedFilterFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      filter_field_arg_list_(from.filter_field_arg_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expr()) {
    expr_ = new ::zetasql::AnyResolvedExprProto(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFilterFieldProto)
}

inline void ResolvedFilterFieldProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(expr_));
}

ResolvedFilterFieldProto::~ResolvedFilterFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFilterFieldProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedFilterFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expr_;
}

void ResolvedFilterFieldProto::ArenaDtor(void* object) {
  ResolvedFilterFieldProto* _this = reinterpret_cast< ResolvedFilterFieldProto* >(object);
  (void)_this;
}
void ResolvedFilterFieldProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedFilterFieldProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedFilterFieldProto::InternalSwap(ResolvedFilterFieldProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFilterFieldProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[13]);
}

// ===================================================================

class AnyResolvedFunctionCallBaseProto::_Internal {
 public:
  static const ::zetasql::ResolvedFunctionCallProto& resolved_function_call_node(const AnyResolvedFunctionCallBaseProto* msg);
  static const ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto& resolved_non_scalar_function_call_base_node(const AnyResolvedFunctionCallBaseProto* msg);
};

const ::zetasql::ResolvedFunctionCallProto&
AnyResolvedFunctionCallBaseProto::_Internal::resolved_function_call_node(const AnyResolvedFunctionCallBaseProto* msg) {
  return *msg->node_.resolved_function_call_node_;
}
const ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto&
AnyResolvedFunctionCallBaseProto::_Internal::resolved_non_scalar_function_call_base_node(const AnyResolvedFunctionCallBaseProto* msg) {
  return *msg->node_.resolved_non_scalar_function_call_base_node_;
}
void AnyResolvedFunctionCallBaseProto::set_allocated_resolved_function_call_node(::zetasql::ResolvedFunctionCallProto* resolved_function_call_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_function_call_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedFunctionCallProto>::GetOwningArena(resolved_function_call_node);
    if (message_arena != submessage_arena) {
      resolved_function_call_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_function_call_node, submessage_arena);
    }
    set_has_resolved_function_call_node();
    node_.resolved_function_call_node_ = resolved_function_call_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedFunctionCallBaseProto.resolved_function_call_node)
}
void AnyResolvedFunctionCallBaseProto::set_allocated_resolved_non_scalar_function_call_base_node(::zetasql::AnyResolvedNonScalarFunctionCallBaseProto* resolved_non_scalar_function_call_base_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_non_scalar_function_call_base_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedNonScalarFunctionCallBaseProto>::GetOwningArena(resolved_non_scalar_function_call_base_node);
    if (message_arena != submessage_arena) {
      resolved_non_scalar_function_call_base_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_non_scalar_function_call_base_node, submessage_arena);
    }
    set_has_resolved_non_scalar_function_call_base_node();
    node_.resolved_non_scalar_function_call_base_node_ = resolved_non_scalar_function_call_base_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedFunctionCallBaseProto.resolved_non_scalar_function_call_base_node)
}
AnyResolvedFunctionCallBaseProto::AnyResolvedFunctionCallBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedFunctionCallBaseProto)
}
AnyResolvedFunctionCallBaseProto::AnyResolvedFunctionCallBaseProto(const AnyResolvedFunctionCallBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedFunctionCallNode: {
      _internal_mutable_resolved_function_call_node()->::zetasql::ResolvedFunctionCallProto::MergeFrom(from._internal_resolved_function_call_node());
      break;
    }
    case kResolvedNonScalarFunctionCallBaseNode: {
      _internal_mutable_resolved_non_scalar_function_call_base_node()->::zetasql::AnyResolvedNonScalarFunctionCallBaseProto::MergeFrom(from._internal_resolved_non_scalar_function_call_base_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedFunctionCallBaseProto)
}

inline void AnyResolvedFunctionCallBaseProto::SharedCtor() {
clear_has_node();
}

AnyResolvedFunctionCallBaseProto::~AnyResolvedFunctionCallBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedFunctionCallBaseProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedFunctionCallBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedFunctionCallBaseProto::ArenaDtor(void* object) {
  AnyResolvedFunctionCallBaseProto* _this = reinterpret_cast< AnyResolvedFunctionCallBaseProto* >(object);
  (void)_this;
}
void AnyResolvedFunctionCallBaseProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedFunctionCallBaseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedFunctionCallBaseProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedFunctionCallBaseProto)
  switch (node_case()) {
    case kResolvedFunctionCallNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_function_call_node_;
      }
      break;
    }
    case kResolvedNonScalarFunctionCallBaseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_non_scalar_function_call_base_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedFunctionCallBaseProto::InternalSwap(AnyResolvedFunctionCallBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedFunctionCallBaseProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[14]);
}

// ===================================================================

class ResolvedFunctionCallBaseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFunctionCallBaseProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedFunctionCallBaseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::FunctionRefProto& function(const ResolvedFunctionCallBaseProto* msg);
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::FunctionSignatureProto& signature(const ResolvedFunctionCallBaseProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedFunctionCallBaseProto::_Internal::parent(const ResolvedFunctionCallBaseProto* msg) {
  return *msg->parent_;
}
const ::zetasql::FunctionRefProto&
ResolvedFunctionCallBaseProto::_Internal::function(const ResolvedFunctionCallBaseProto* msg) {
  return *msg->function_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedFunctionCallBaseProto::_Internal::signature(const ResolvedFunctionCallBaseProto* msg) {
  return *msg->signature_;
}
void ResolvedFunctionCallBaseProto::clear_function() {
  if (function_ != nullptr) function_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ResolvedFunctionCallBaseProto::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ResolvedFunctionCallBaseProto::clear_collation_list() {
  collation_list_.Clear();
}
ResolvedFunctionCallBaseProto::ResolvedFunctionCallBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  argument_list_(arena),
  generic_argument_list_(arena),
  hint_list_(arena),
  collation_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFunctionCallBaseProto)
}
ResolvedFunctionCallBaseProto::ResolvedFunctionCallBaseProto(const ResolvedFunctionCallBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argument_list_(from.argument_list_),
      generic_argument_list_(from.generic_argument_list_),
      hint_list_(from.hint_list_),
      collation_list_(from.collation_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_function()) {
    function_ = new ::zetasql::FunctionRefProto(*from.function_);
  } else {
    function_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::zetasql::FunctionSignatureProto(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  error_mode_ = from.error_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFunctionCallBaseProto)
}

inline void ResolvedFunctionCallBaseProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_mode_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(error_mode_));
}

ResolvedFunctionCallBaseProto::~ResolvedFunctionCallBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFunctionCallBaseProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedFunctionCallBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete function_;
  if (this != internal_default_instance()) delete signature_;
}

void ResolvedFunctionCallBaseProto::ArenaDtor(void* object) {
  ResolvedFunctionCallBaseProto* _this = reinterpret_cast< ResolvedFunctionCallBaseProto* >(object);
  (void)_this;
}
void ResolvedFunctionCallBaseProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedFunctionCallBaseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedFunctionCallBaseProto::InternalSwap(ResolvedFunctionCallBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFunctionCallBaseProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[15]);
}

// ===================================================================

class ResolvedFunctionCallProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFunctionCallProto>()._has_bits_);
  static const ::zetasql::ResolvedFunctionCallBaseProto& parent(const ResolvedFunctionCallProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedFunctionCallInfoProto& function_call_info(const ResolvedFunctionCallProto* msg);
  static void set_has_function_call_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedFunctionCallBaseProto&
ResolvedFunctionCallProto::_Internal::parent(const ResolvedFunctionCallProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedFunctionCallInfoProto&
ResolvedFunctionCallProto::_Internal::function_call_info(const ResolvedFunctionCallProto* msg) {
  return *msg->function_call_info_;
}
void ResolvedFunctionCallProto::clear_function_call_info() {
  if (function_call_info_ != nullptr) function_call_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResolvedFunctionCallProto::ResolvedFunctionCallProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFunctionCallProto)
}
ResolvedFunctionCallProto::ResolvedFunctionCallProto(const ResolvedFunctionCallProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedFunctionCallBaseProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_function_call_info()) {
    function_call_info_ = new ::zetasql::ResolvedFunctionCallInfoProto(*from.function_call_info_);
  } else {
    function_call_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFunctionCallProto)
}

inline void ResolvedFunctionCallProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&function_call_info_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(function_call_info_));
}

ResolvedFunctionCallProto::~ResolvedFunctionCallProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFunctionCallProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedFunctionCallProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete function_call_info_;
}

void ResolvedFunctionCallProto::ArenaDtor(void* object) {
  ResolvedFunctionCallProto* _this = reinterpret_cast< ResolvedFunctionCallProto* >(object);
  (void)_this;
}
void ResolvedFunctionCallProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedFunctionCallProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedFunctionCallProto::InternalSwap(ResolvedFunctionCallProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFunctionCallProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[16]);
}

// ===================================================================

class AnyResolvedNonScalarFunctionCallBaseProto::_Internal {
 public:
  static const ::zetasql::ResolvedAggregateFunctionCallProto& resolved_aggregate_function_call_node(const AnyResolvedNonScalarFunctionCallBaseProto* msg);
  static const ::zetasql::ResolvedAnalyticFunctionCallProto& resolved_analytic_function_call_node(const AnyResolvedNonScalarFunctionCallBaseProto* msg);
};

const ::zetasql::ResolvedAggregateFunctionCallProto&
AnyResolvedNonScalarFunctionCallBaseProto::_Internal::resolved_aggregate_function_call_node(const AnyResolvedNonScalarFunctionCallBaseProto* msg) {
  return *msg->node_.resolved_aggregate_function_call_node_;
}
const ::zetasql::ResolvedAnalyticFunctionCallProto&
AnyResolvedNonScalarFunctionCallBaseProto::_Internal::resolved_analytic_function_call_node(const AnyResolvedNonScalarFunctionCallBaseProto* msg) {
  return *msg->node_.resolved_analytic_function_call_node_;
}
void AnyResolvedNonScalarFunctionCallBaseProto::set_allocated_resolved_aggregate_function_call_node(::zetasql::ResolvedAggregateFunctionCallProto* resolved_aggregate_function_call_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_aggregate_function_call_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAggregateFunctionCallProto>::GetOwningArena(resolved_aggregate_function_call_node);
    if (message_arena != submessage_arena) {
      resolved_aggregate_function_call_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_aggregate_function_call_node, submessage_arena);
    }
    set_has_resolved_aggregate_function_call_node();
    node_.resolved_aggregate_function_call_node_ = resolved_aggregate_function_call_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedNonScalarFunctionCallBaseProto.resolved_aggregate_function_call_node)
}
void AnyResolvedNonScalarFunctionCallBaseProto::set_allocated_resolved_analytic_function_call_node(::zetasql::ResolvedAnalyticFunctionCallProto* resolved_analytic_function_call_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_analytic_function_call_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAnalyticFunctionCallProto>::GetOwningArena(resolved_analytic_function_call_node);
    if (message_arena != submessage_arena) {
      resolved_analytic_function_call_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_analytic_function_call_node, submessage_arena);
    }
    set_has_resolved_analytic_function_call_node();
    node_.resolved_analytic_function_call_node_ = resolved_analytic_function_call_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedNonScalarFunctionCallBaseProto.resolved_analytic_function_call_node)
}
AnyResolvedNonScalarFunctionCallBaseProto::AnyResolvedNonScalarFunctionCallBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedNonScalarFunctionCallBaseProto)
}
AnyResolvedNonScalarFunctionCallBaseProto::AnyResolvedNonScalarFunctionCallBaseProto(const AnyResolvedNonScalarFunctionCallBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedAggregateFunctionCallNode: {
      _internal_mutable_resolved_aggregate_function_call_node()->::zetasql::ResolvedAggregateFunctionCallProto::MergeFrom(from._internal_resolved_aggregate_function_call_node());
      break;
    }
    case kResolvedAnalyticFunctionCallNode: {
      _internal_mutable_resolved_analytic_function_call_node()->::zetasql::ResolvedAnalyticFunctionCallProto::MergeFrom(from._internal_resolved_analytic_function_call_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedNonScalarFunctionCallBaseProto)
}

inline void AnyResolvedNonScalarFunctionCallBaseProto::SharedCtor() {
clear_has_node();
}

AnyResolvedNonScalarFunctionCallBaseProto::~AnyResolvedNonScalarFunctionCallBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedNonScalarFunctionCallBaseProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedNonScalarFunctionCallBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedNonScalarFunctionCallBaseProto::ArenaDtor(void* object) {
  AnyResolvedNonScalarFunctionCallBaseProto* _this = reinterpret_cast< AnyResolvedNonScalarFunctionCallBaseProto* >(object);
  (void)_this;
}
void AnyResolvedNonScalarFunctionCallBaseProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedNonScalarFunctionCallBaseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedNonScalarFunctionCallBaseProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedNonScalarFunctionCallBaseProto)
  switch (node_case()) {
    case kResolvedAggregateFunctionCallNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_aggregate_function_call_node_;
      }
      break;
    }
    case kResolvedAnalyticFunctionCallNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_analytic_function_call_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedNonScalarFunctionCallBaseProto::InternalSwap(AnyResolvedNonScalarFunctionCallBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedNonScalarFunctionCallBaseProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[17]);
}

// ===================================================================

class ResolvedNonScalarFunctionCallBaseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedNonScalarFunctionCallBaseProto>()._has_bits_);
  static const ::zetasql::ResolvedFunctionCallBaseProto& parent(const ResolvedNonScalarFunctionCallBaseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distinct(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_null_handling_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedScanProto& with_group_rows_subquery(const ResolvedNonScalarFunctionCallBaseProto* msg);
  static void set_has_with_group_rows_subquery(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedFunctionCallBaseProto&
ResolvedNonScalarFunctionCallBaseProto::_Internal::parent(const ResolvedNonScalarFunctionCallBaseProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedNonScalarFunctionCallBaseProto::_Internal::with_group_rows_subquery(const ResolvedNonScalarFunctionCallBaseProto* msg) {
  return *msg->with_group_rows_subquery_;
}
ResolvedNonScalarFunctionCallBaseProto::ResolvedNonScalarFunctionCallBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  with_group_rows_parameter_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedNonScalarFunctionCallBaseProto)
}
ResolvedNonScalarFunctionCallBaseProto::ResolvedNonScalarFunctionCallBaseProto(const ResolvedNonScalarFunctionCallBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      with_group_rows_parameter_list_(from.with_group_rows_parameter_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedFunctionCallBaseProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_with_group_rows_subquery()) {
    with_group_rows_subquery_ = new ::zetasql::AnyResolvedScanProto(*from.with_group_rows_subquery_);
  } else {
    with_group_rows_subquery_ = nullptr;
  }
  ::memcpy(&distinct_, &from.distinct_,
    static_cast<size_t>(reinterpret_cast<char*>(&null_handling_modifier_) -
    reinterpret_cast<char*>(&distinct_)) + sizeof(null_handling_modifier_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedNonScalarFunctionCallBaseProto)
}

inline void ResolvedNonScalarFunctionCallBaseProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&null_handling_modifier_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(null_handling_modifier_));
}

ResolvedNonScalarFunctionCallBaseProto::~ResolvedNonScalarFunctionCallBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedNonScalarFunctionCallBaseProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedNonScalarFunctionCallBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete with_group_rows_subquery_;
}

void ResolvedNonScalarFunctionCallBaseProto::ArenaDtor(void* object) {
  ResolvedNonScalarFunctionCallBaseProto* _this = reinterpret_cast< ResolvedNonScalarFunctionCallBaseProto* >(object);
  (void)_this;
}
void ResolvedNonScalarFunctionCallBaseProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedNonScalarFunctionCallBaseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedNonScalarFunctionCallBaseProto::InternalSwap(ResolvedNonScalarFunctionCallBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedNonScalarFunctionCallBaseProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[18]);
}

// ===================================================================

class ResolvedAggregateFunctionCallProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAggregateFunctionCallProto>()._has_bits_);
  static const ::zetasql::ResolvedNonScalarFunctionCallBaseProto& parent(const ResolvedAggregateFunctionCallProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedAggregateHavingModifierProto& having_modifier(const ResolvedAggregateFunctionCallProto* msg);
  static void set_has_having_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& limit(const ResolvedAggregateFunctionCallProto* msg);
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedFunctionCallInfoProto& function_call_info(const ResolvedAggregateFunctionCallProto* msg);
  static void set_has_function_call_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedNonScalarFunctionCallBaseProto&
ResolvedAggregateFunctionCallProto::_Internal::parent(const ResolvedAggregateFunctionCallProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedAggregateHavingModifierProto&
ResolvedAggregateFunctionCallProto::_Internal::having_modifier(const ResolvedAggregateFunctionCallProto* msg) {
  return *msg->having_modifier_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedAggregateFunctionCallProto::_Internal::limit(const ResolvedAggregateFunctionCallProto* msg) {
  return *msg->limit_;
}
const ::zetasql::ResolvedFunctionCallInfoProto&
ResolvedAggregateFunctionCallProto::_Internal::function_call_info(const ResolvedAggregateFunctionCallProto* msg) {
  return *msg->function_call_info_;
}
void ResolvedAggregateFunctionCallProto::clear_function_call_info() {
  if (function_call_info_ != nullptr) function_call_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ResolvedAggregateFunctionCallProto::ResolvedAggregateFunctionCallProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  order_by_item_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAggregateFunctionCallProto)
}
ResolvedAggregateFunctionCallProto::ResolvedAggregateFunctionCallProto(const ResolvedAggregateFunctionCallProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      order_by_item_list_(from.order_by_item_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedNonScalarFunctionCallBaseProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_limit()) {
    limit_ = new ::zetasql::AnyResolvedExprProto(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_having_modifier()) {
    having_modifier_ = new ::zetasql::ResolvedAggregateHavingModifierProto(*from.having_modifier_);
  } else {
    having_modifier_ = nullptr;
  }
  if (from._internal_has_function_call_info()) {
    function_call_info_ = new ::zetasql::ResolvedFunctionCallInfoProto(*from.function_call_info_);
  } else {
    function_call_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAggregateFunctionCallProto)
}

inline void ResolvedAggregateFunctionCallProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&function_call_info_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(function_call_info_));
}

ResolvedAggregateFunctionCallProto::~ResolvedAggregateFunctionCallProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAggregateFunctionCallProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAggregateFunctionCallProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete having_modifier_;
  if (this != internal_default_instance()) delete function_call_info_;
}

void ResolvedAggregateFunctionCallProto::ArenaDtor(void* object) {
  ResolvedAggregateFunctionCallProto* _this = reinterpret_cast< ResolvedAggregateFunctionCallProto* >(object);
  (void)_this;
}
void ResolvedAggregateFunctionCallProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAggregateFunctionCallProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAggregateFunctionCallProto::InternalSwap(ResolvedAggregateFunctionCallProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAggregateFunctionCallProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[19]);
}

// ===================================================================

class ResolvedAnalyticFunctionCallProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAnalyticFunctionCallProto>()._has_bits_);
  static const ::zetasql::ResolvedNonScalarFunctionCallBaseProto& parent(const ResolvedAnalyticFunctionCallProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedWindowFrameProto& window_frame(const ResolvedAnalyticFunctionCallProto* msg);
  static void set_has_window_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedNonScalarFunctionCallBaseProto&
ResolvedAnalyticFunctionCallProto::_Internal::parent(const ResolvedAnalyticFunctionCallProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedWindowFrameProto&
ResolvedAnalyticFunctionCallProto::_Internal::window_frame(const ResolvedAnalyticFunctionCallProto* msg) {
  return *msg->window_frame_;
}
ResolvedAnalyticFunctionCallProto::ResolvedAnalyticFunctionCallProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAnalyticFunctionCallProto)
}
ResolvedAnalyticFunctionCallProto::ResolvedAnalyticFunctionCallProto(const ResolvedAnalyticFunctionCallProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedNonScalarFunctionCallBaseProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_window_frame()) {
    window_frame_ = new ::zetasql::ResolvedWindowFrameProto(*from.window_frame_);
  } else {
    window_frame_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAnalyticFunctionCallProto)
}

inline void ResolvedAnalyticFunctionCallProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&window_frame_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(window_frame_));
}

ResolvedAnalyticFunctionCallProto::~ResolvedAnalyticFunctionCallProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAnalyticFunctionCallProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAnalyticFunctionCallProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete window_frame_;
}

void ResolvedAnalyticFunctionCallProto::ArenaDtor(void* object) {
  ResolvedAnalyticFunctionCallProto* _this = reinterpret_cast< ResolvedAnalyticFunctionCallProto* >(object);
  (void)_this;
}
void ResolvedAnalyticFunctionCallProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAnalyticFunctionCallProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAnalyticFunctionCallProto::InternalSwap(ResolvedAnalyticFunctionCallProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAnalyticFunctionCallProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[20]);
}

// ===================================================================

class ResolvedExtendedCastElementProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExtendedCastElementProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedExtendedCastElementProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& from_type(const ResolvedExtendedCastElementProto* msg);
  static void set_has_from_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TypeProto& to_type(const ResolvedExtendedCastElementProto* msg);
  static void set_has_to_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::FunctionRefProto& function(const ResolvedExtendedCastElementProto* msg);
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedExtendedCastElementProto::_Internal::parent(const ResolvedExtendedCastElementProto* msg) {
  return *msg->parent_;
}
const ::zetasql::TypeProto&
ResolvedExtendedCastElementProto::_Internal::from_type(const ResolvedExtendedCastElementProto* msg) {
  return *msg->from_type_;
}
const ::zetasql::TypeProto&
ResolvedExtendedCastElementProto::_Internal::to_type(const ResolvedExtendedCastElementProto* msg) {
  return *msg->to_type_;
}
const ::zetasql::FunctionRefProto&
ResolvedExtendedCastElementProto::_Internal::function(const ResolvedExtendedCastElementProto* msg) {
  return *msg->function_;
}
void ResolvedExtendedCastElementProto::clear_from_type() {
  if (from_type_ != nullptr) from_type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ResolvedExtendedCastElementProto::clear_to_type() {
  if (to_type_ != nullptr) to_type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ResolvedExtendedCastElementProto::clear_function() {
  if (function_ != nullptr) function_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ResolvedExtendedCastElementProto::ResolvedExtendedCastElementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExtendedCastElementProto)
}
ResolvedExtendedCastElementProto::ResolvedExtendedCastElementProto(const ResolvedExtendedCastElementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_from_type()) {
    from_type_ = new ::zetasql::TypeProto(*from.from_type_);
  } else {
    from_type_ = nullptr;
  }
  if (from._internal_has_to_type()) {
    to_type_ = new ::zetasql::TypeProto(*from.to_type_);
  } else {
    to_type_ = nullptr;
  }
  if (from._internal_has_function()) {
    function_ = new ::zetasql::FunctionRefProto(*from.function_);
  } else {
    function_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExtendedCastElementProto)
}

inline void ResolvedExtendedCastElementProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&function_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(function_));
}

ResolvedExtendedCastElementProto::~ResolvedExtendedCastElementProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExtendedCastElementProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedExtendedCastElementProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete from_type_;
  if (this != internal_default_instance()) delete to_type_;
  if (this != internal_default_instance()) delete function_;
}

void ResolvedExtendedCastElementProto::ArenaDtor(void* object) {
  ResolvedExtendedCastElementProto* _this = reinterpret_cast< ResolvedExtendedCastElementProto* >(object);
  (void)_this;
}
void ResolvedExtendedCastElementProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedExtendedCastElementProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedExtendedCastElementProto::InternalSwap(ResolvedExtendedCastElementProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExtendedCastElementProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[21]);
}

// ===================================================================

class ResolvedExtendedCastProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExtendedCastProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedExtendedCastProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedExtendedCastProto::_Internal::parent(const ResolvedExtendedCastProto* msg) {
  return *msg->parent_;
}
ResolvedExtendedCastProto::ResolvedExtendedCastProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  element_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExtendedCastProto)
}
ResolvedExtendedCastProto::ResolvedExtendedCastProto(const ResolvedExtendedCastProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      element_list_(from.element_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExtendedCastProto)
}

inline void ResolvedExtendedCastProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedExtendedCastProto::~ResolvedExtendedCastProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExtendedCastProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedExtendedCastProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedExtendedCastProto::ArenaDtor(void* object) {
  ResolvedExtendedCastProto* _this = reinterpret_cast< ResolvedExtendedCastProto* >(object);
  (void)_this;
}
void ResolvedExtendedCastProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedExtendedCastProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedExtendedCastProto::InternalSwap(ResolvedExtendedCastProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExtendedCastProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[22]);
}

// ===================================================================

class ResolvedCastProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCastProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedCastProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedCastProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_return_null_on_error(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::zetasql::ResolvedExtendedCastProto& extended_cast(const ResolvedCastProto* msg);
  static void set_has_extended_cast(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& format(const ResolvedCastProto* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedExprProto& time_zone(const ResolvedCastProto* msg);
  static void set_has_time_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::TypeParametersProto& type_parameters(const ResolvedCastProto* msg);
  static void set_has_type_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedCastProto::_Internal::parent(const ResolvedCastProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCastProto::_Internal::expr(const ResolvedCastProto* msg) {
  return *msg->expr_;
}
const ::zetasql::ResolvedExtendedCastProto&
ResolvedCastProto::_Internal::extended_cast(const ResolvedCastProto* msg) {
  return *msg->extended_cast_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCastProto::_Internal::format(const ResolvedCastProto* msg) {
  return *msg->format_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCastProto::_Internal::time_zone(const ResolvedCastProto* msg) {
  return *msg->time_zone_;
}
const ::zetasql::TypeParametersProto&
ResolvedCastProto::_Internal::type_parameters(const ResolvedCastProto* msg) {
  return *msg->type_parameters_;
}
void ResolvedCastProto::clear_type_parameters() {
  if (type_parameters_ != nullptr) type_parameters_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
ResolvedCastProto::ResolvedCastProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCastProto)
}
ResolvedCastProto::ResolvedCastProto(const ResolvedCastProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expr()) {
    expr_ = new ::zetasql::AnyResolvedExprProto(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  if (from._internal_has_extended_cast()) {
    extended_cast_ = new ::zetasql::ResolvedExtendedCastProto(*from.extended_cast_);
  } else {
    extended_cast_ = nullptr;
  }
  if (from._internal_has_format()) {
    format_ = new ::zetasql::AnyResolvedExprProto(*from.format_);
  } else {
    format_ = nullptr;
  }
  if (from._internal_has_time_zone()) {
    time_zone_ = new ::zetasql::AnyResolvedExprProto(*from.time_zone_);
  } else {
    time_zone_ = nullptr;
  }
  if (from._internal_has_type_parameters()) {
    type_parameters_ = new ::zetasql::TypeParametersProto(*from.type_parameters_);
  } else {
    type_parameters_ = nullptr;
  }
  return_null_on_error_ = from.return_null_on_error_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCastProto)
}

inline void ResolvedCastProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&return_null_on_error_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(return_null_on_error_));
}

ResolvedCastProto::~ResolvedCastProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCastProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCastProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expr_;
  if (this != internal_default_instance()) delete extended_cast_;
  if (this != internal_default_instance()) delete format_;
  if (this != internal_default_instance()) delete time_zone_;
  if (this != internal_default_instance()) delete type_parameters_;
}

void ResolvedCastProto::ArenaDtor(void* object) {
  ResolvedCastProto* _this = reinterpret_cast< ResolvedCastProto* >(object);
  (void)_this;
}
void ResolvedCastProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCastProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCastProto::InternalSwap(ResolvedCastProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCastProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[23]);
}

// ===================================================================

class ResolvedMakeStructProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedMakeStructProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedMakeStructProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedMakeStructProto::_Internal::parent(const ResolvedMakeStructProto* msg) {
  return *msg->parent_;
}
ResolvedMakeStructProto::ResolvedMakeStructProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  field_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedMakeStructProto)
}
ResolvedMakeStructProto::ResolvedMakeStructProto(const ResolvedMakeStructProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      field_list_(from.field_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedMakeStructProto)
}

inline void ResolvedMakeStructProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedMakeStructProto::~ResolvedMakeStructProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedMakeStructProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedMakeStructProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedMakeStructProto::ArenaDtor(void* object) {
  ResolvedMakeStructProto* _this = reinterpret_cast< ResolvedMakeStructProto* >(object);
  (void)_this;
}
void ResolvedMakeStructProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedMakeStructProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedMakeStructProto::InternalSwap(ResolvedMakeStructProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedMakeStructProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[24]);
}

// ===================================================================

class ResolvedMakeProtoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedMakeProtoProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedMakeProtoProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedMakeProtoProto::_Internal::parent(const ResolvedMakeProtoProto* msg) {
  return *msg->parent_;
}
ResolvedMakeProtoProto::ResolvedMakeProtoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  field_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedMakeProtoProto)
}
ResolvedMakeProtoProto::ResolvedMakeProtoProto(const ResolvedMakeProtoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      field_list_(from.field_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedMakeProtoProto)
}

inline void ResolvedMakeProtoProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedMakeProtoProto::~ResolvedMakeProtoProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedMakeProtoProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedMakeProtoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedMakeProtoProto::ArenaDtor(void* object) {
  ResolvedMakeProtoProto* _this = reinterpret_cast< ResolvedMakeProtoProto* >(object);
  (void)_this;
}
void ResolvedMakeProtoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedMakeProtoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedMakeProtoProto::InternalSwap(ResolvedMakeProtoProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedMakeProtoProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[25]);
}

// ===================================================================

class ResolvedMakeProtoFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedMakeProtoFieldProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedMakeProtoFieldProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::FieldDescriptorRefProto& field_descriptor(const ResolvedMakeProtoFieldProto* msg);
  static void set_has_field_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedMakeProtoFieldProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedMakeProtoFieldProto::_Internal::parent(const ResolvedMakeProtoFieldProto* msg) {
  return *msg->parent_;
}
const ::zetasql::FieldDescriptorRefProto&
ResolvedMakeProtoFieldProto::_Internal::field_descriptor(const ResolvedMakeProtoFieldProto* msg) {
  return *msg->field_descriptor_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedMakeProtoFieldProto::_Internal::expr(const ResolvedMakeProtoFieldProto* msg) {
  return *msg->expr_;
}
void ResolvedMakeProtoFieldProto::clear_field_descriptor() {
  if (field_descriptor_ != nullptr) field_descriptor_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResolvedMakeProtoFieldProto::ResolvedMakeProtoFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedMakeProtoFieldProto)
}
ResolvedMakeProtoFieldProto::ResolvedMakeProtoFieldProto(const ResolvedMakeProtoFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_field_descriptor()) {
    field_descriptor_ = new ::zetasql::FieldDescriptorRefProto(*from.field_descriptor_);
  } else {
    field_descriptor_ = nullptr;
  }
  if (from._internal_has_expr()) {
    expr_ = new ::zetasql::AnyResolvedExprProto(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  format_ = from.format_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedMakeProtoFieldProto)
}

inline void ResolvedMakeProtoFieldProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(format_));
}

ResolvedMakeProtoFieldProto::~ResolvedMakeProtoFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedMakeProtoFieldProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedMakeProtoFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete field_descriptor_;
  if (this != internal_default_instance()) delete expr_;
}

void ResolvedMakeProtoFieldProto::ArenaDtor(void* object) {
  ResolvedMakeProtoFieldProto* _this = reinterpret_cast< ResolvedMakeProtoFieldProto* >(object);
  (void)_this;
}
void ResolvedMakeProtoFieldProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedMakeProtoFieldProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedMakeProtoFieldProto::InternalSwap(ResolvedMakeProtoFieldProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedMakeProtoFieldProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[26]);
}

// ===================================================================

class ResolvedGetStructFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGetStructFieldProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedGetStructFieldProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedGetStructFieldProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedGetStructFieldProto::_Internal::parent(const ResolvedGetStructFieldProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedGetStructFieldProto::_Internal::expr(const ResolvedGetStructFieldProto* msg) {
  return *msg->expr_;
}
ResolvedGetStructFieldProto::ResolvedGetStructFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGetStructFieldProto)
}
ResolvedGetStructFieldProto::ResolvedGetStructFieldProto(const ResolvedGetStructFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expr()) {
    expr_ = new ::zetasql::AnyResolvedExprProto(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  field_idx_ = from.field_idx_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGetStructFieldProto)
}

inline void ResolvedGetStructFieldProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&field_idx_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(field_idx_));
}

ResolvedGetStructFieldProto::~ResolvedGetStructFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGetStructFieldProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedGetStructFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expr_;
}

void ResolvedGetStructFieldProto::ArenaDtor(void* object) {
  ResolvedGetStructFieldProto* _this = reinterpret_cast< ResolvedGetStructFieldProto* >(object);
  (void)_this;
}
void ResolvedGetStructFieldProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedGetStructFieldProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedGetStructFieldProto::InternalSwap(ResolvedGetStructFieldProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGetStructFieldProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[27]);
}

// ===================================================================

class ResolvedGetProtoFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGetProtoFieldProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedGetProtoFieldProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedGetProtoFieldProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::FieldDescriptorRefProto& field_descriptor(const ResolvedGetProtoFieldProto* msg);
  static void set_has_field_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ValueWithTypeProto& default_value(const ResolvedGetProtoFieldProto* msg);
  static void set_has_default_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_get_has_bit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_return_default_value_when_unset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedGetProtoFieldProto::_Internal::parent(const ResolvedGetProtoFieldProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedGetProtoFieldProto::_Internal::expr(const ResolvedGetProtoFieldProto* msg) {
  return *msg->expr_;
}
const ::zetasql::FieldDescriptorRefProto&
ResolvedGetProtoFieldProto::_Internal::field_descriptor(const ResolvedGetProtoFieldProto* msg) {
  return *msg->field_descriptor_;
}
const ::zetasql::ValueWithTypeProto&
ResolvedGetProtoFieldProto::_Internal::default_value(const ResolvedGetProtoFieldProto* msg) {
  return *msg->default_value_;
}
void ResolvedGetProtoFieldProto::clear_field_descriptor() {
  if (field_descriptor_ != nullptr) field_descriptor_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ResolvedGetProtoFieldProto::clear_default_value() {
  if (default_value_ != nullptr) default_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ResolvedGetProtoFieldProto::ResolvedGetProtoFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGetProtoFieldProto)
}
ResolvedGetProtoFieldProto::ResolvedGetProtoFieldProto(const ResolvedGetProtoFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expr()) {
    expr_ = new ::zetasql::AnyResolvedExprProto(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  if (from._internal_has_field_descriptor()) {
    field_descriptor_ = new ::zetasql::FieldDescriptorRefProto(*from.field_descriptor_);
  } else {
    field_descriptor_ = nullptr;
  }
  if (from._internal_has_default_value()) {
    default_value_ = new ::zetasql::ValueWithTypeProto(*from.default_value_);
  } else {
    default_value_ = nullptr;
  }
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_default_value_when_unset_) -
    reinterpret_cast<char*>(&format_)) + sizeof(return_default_value_when_unset_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGetProtoFieldProto)
}

inline void ResolvedGetProtoFieldProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&return_default_value_when_unset_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(return_default_value_when_unset_));
}

ResolvedGetProtoFieldProto::~ResolvedGetProtoFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGetProtoFieldProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedGetProtoFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expr_;
  if (this != internal_default_instance()) delete field_descriptor_;
  if (this != internal_default_instance()) delete default_value_;
}

void ResolvedGetProtoFieldProto::ArenaDtor(void* object) {
  ResolvedGetProtoFieldProto* _this = reinterpret_cast< ResolvedGetProtoFieldProto* >(object);
  (void)_this;
}
void ResolvedGetProtoFieldProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedGetProtoFieldProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedGetProtoFieldProto::InternalSwap(ResolvedGetProtoFieldProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGetProtoFieldProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[28]);
}

// ===================================================================

class ResolvedGetJsonFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGetJsonFieldProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedGetJsonFieldProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedGetJsonFieldProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedGetJsonFieldProto::_Internal::parent(const ResolvedGetJsonFieldProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedGetJsonFieldProto::_Internal::expr(const ResolvedGetJsonFieldProto* msg) {
  return *msg->expr_;
}
ResolvedGetJsonFieldProto::ResolvedGetJsonFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGetJsonFieldProto)
}
ResolvedGetJsonFieldProto::ResolvedGetJsonFieldProto(const ResolvedGetJsonFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_field_name()) {
    field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expr()) {
    expr_ = new ::zetasql::AnyResolvedExprProto(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGetJsonFieldProto)
}

inline void ResolvedGetJsonFieldProto::SharedCtor() {
field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(expr_));
}

ResolvedGetJsonFieldProto::~ResolvedGetJsonFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGetJsonFieldProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedGetJsonFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expr_;
}

void ResolvedGetJsonFieldProto::ArenaDtor(void* object) {
  ResolvedGetJsonFieldProto* _this = reinterpret_cast< ResolvedGetJsonFieldProto* >(object);
  (void)_this;
}
void ResolvedGetJsonFieldProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedGetJsonFieldProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedGetJsonFieldProto::InternalSwap(ResolvedGetJsonFieldProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGetJsonFieldProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[29]);
}

// ===================================================================

class ResolvedFlattenProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFlattenProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedFlattenProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedFlattenProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedFlattenProto::_Internal::parent(const ResolvedFlattenProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedFlattenProto::_Internal::expr(const ResolvedFlattenProto* msg) {
  return *msg->expr_;
}
ResolvedFlattenProto::ResolvedFlattenProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  get_field_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFlattenProto)
}
ResolvedFlattenProto::ResolvedFlattenProto(const ResolvedFlattenProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      get_field_list_(from.get_field_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expr()) {
    expr_ = new ::zetasql::AnyResolvedExprProto(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFlattenProto)
}

inline void ResolvedFlattenProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(expr_));
}

ResolvedFlattenProto::~ResolvedFlattenProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFlattenProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedFlattenProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expr_;
}

void ResolvedFlattenProto::ArenaDtor(void* object) {
  ResolvedFlattenProto* _this = reinterpret_cast< ResolvedFlattenProto* >(object);
  (void)_this;
}
void ResolvedFlattenProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedFlattenProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedFlattenProto::InternalSwap(ResolvedFlattenProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFlattenProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[30]);
}

// ===================================================================

class ResolvedFlattenedArgProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFlattenedArgProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedFlattenedArgProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedFlattenedArgProto::_Internal::parent(const ResolvedFlattenedArgProto* msg) {
  return *msg->parent_;
}
ResolvedFlattenedArgProto::ResolvedFlattenedArgProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFlattenedArgProto)
}
ResolvedFlattenedArgProto::ResolvedFlattenedArgProto(const ResolvedFlattenedArgProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFlattenedArgProto)
}

inline void ResolvedFlattenedArgProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedFlattenedArgProto::~ResolvedFlattenedArgProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFlattenedArgProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedFlattenedArgProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedFlattenedArgProto::ArenaDtor(void* object) {
  ResolvedFlattenedArgProto* _this = reinterpret_cast< ResolvedFlattenedArgProto* >(object);
  (void)_this;
}
void ResolvedFlattenedArgProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedFlattenedArgProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedFlattenedArgProto::InternalSwap(ResolvedFlattenedArgProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFlattenedArgProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[31]);
}

// ===================================================================

class ResolvedReplaceFieldItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedReplaceFieldItemProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedReplaceFieldItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedReplaceFieldItemProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedReplaceFieldItemProto::_Internal::parent(const ResolvedReplaceFieldItemProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedReplaceFieldItemProto::_Internal::expr(const ResolvedReplaceFieldItemProto* msg) {
  return *msg->expr_;
}
void ResolvedReplaceFieldItemProto::clear_proto_field_path() {
  proto_field_path_.Clear();
}
ResolvedReplaceFieldItemProto::ResolvedReplaceFieldItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  struct_index_path_(arena),
  proto_field_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedReplaceFieldItemProto)
}
ResolvedReplaceFieldItemProto::ResolvedReplaceFieldItemProto(const ResolvedReplaceFieldItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      struct_index_path_(from.struct_index_path_),
      proto_field_path_(from.proto_field_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expr()) {
    expr_ = new ::zetasql::AnyResolvedExprProto(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedReplaceFieldItemProto)
}

inline void ResolvedReplaceFieldItemProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(expr_));
}

ResolvedReplaceFieldItemProto::~ResolvedReplaceFieldItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedReplaceFieldItemProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedReplaceFieldItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expr_;
}

void ResolvedReplaceFieldItemProto::ArenaDtor(void* object) {
  ResolvedReplaceFieldItemProto* _this = reinterpret_cast< ResolvedReplaceFieldItemProto* >(object);
  (void)_this;
}
void ResolvedReplaceFieldItemProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedReplaceFieldItemProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedReplaceFieldItemProto::InternalSwap(ResolvedReplaceFieldItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedReplaceFieldItemProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[32]);
}

// ===================================================================

class ResolvedReplaceFieldProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedReplaceFieldProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedReplaceFieldProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedReplaceFieldProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedReplaceFieldProto::_Internal::parent(const ResolvedReplaceFieldProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedReplaceFieldProto::_Internal::expr(const ResolvedReplaceFieldProto* msg) {
  return *msg->expr_;
}
ResolvedReplaceFieldProto::ResolvedReplaceFieldProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  replace_field_item_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedReplaceFieldProto)
}
ResolvedReplaceFieldProto::ResolvedReplaceFieldProto(const ResolvedReplaceFieldProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      replace_field_item_list_(from.replace_field_item_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expr()) {
    expr_ = new ::zetasql::AnyResolvedExprProto(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedReplaceFieldProto)
}

inline void ResolvedReplaceFieldProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(expr_));
}

ResolvedReplaceFieldProto::~ResolvedReplaceFieldProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedReplaceFieldProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedReplaceFieldProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expr_;
}

void ResolvedReplaceFieldProto::ArenaDtor(void* object) {
  ResolvedReplaceFieldProto* _this = reinterpret_cast< ResolvedReplaceFieldProto* >(object);
  (void)_this;
}
void ResolvedReplaceFieldProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedReplaceFieldProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedReplaceFieldProto::InternalSwap(ResolvedReplaceFieldProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedReplaceFieldProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[33]);
}

// ===================================================================

class ResolvedSubqueryExprProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSubqueryExprProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedSubqueryExprProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subquery_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedExprProto& in_expr(const ResolvedSubqueryExprProto* msg);
  static void set_has_in_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& subquery(const ResolvedSubqueryExprProto* msg);
  static void set_has_subquery(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedSubqueryExprProto::_Internal::parent(const ResolvedSubqueryExprProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedSubqueryExprProto::_Internal::in_expr(const ResolvedSubqueryExprProto* msg) {
  return *msg->in_expr_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedSubqueryExprProto::_Internal::subquery(const ResolvedSubqueryExprProto* msg) {
  return *msg->subquery_;
}
ResolvedSubqueryExprProto::ResolvedSubqueryExprProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  parameter_list_(arena),
  hint_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSubqueryExprProto)
}
ResolvedSubqueryExprProto::ResolvedSubqueryExprProto(const ResolvedSubqueryExprProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      parameter_list_(from.parameter_list_),
      hint_list_(from.hint_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_in_expr()) {
    in_expr_ = new ::zetasql::AnyResolvedExprProto(*from.in_expr_);
  } else {
    in_expr_ = nullptr;
  }
  if (from._internal_has_subquery()) {
    subquery_ = new ::zetasql::AnyResolvedScanProto(*from.subquery_);
  } else {
    subquery_ = nullptr;
  }
  subquery_type_ = from.subquery_type_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSubqueryExprProto)
}

inline void ResolvedSubqueryExprProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subquery_type_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(subquery_type_));
}

ResolvedSubqueryExprProto::~ResolvedSubqueryExprProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSubqueryExprProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedSubqueryExprProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete in_expr_;
  if (this != internal_default_instance()) delete subquery_;
}

void ResolvedSubqueryExprProto::ArenaDtor(void* object) {
  ResolvedSubqueryExprProto* _this = reinterpret_cast< ResolvedSubqueryExprProto* >(object);
  (void)_this;
}
void ResolvedSubqueryExprProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedSubqueryExprProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedSubqueryExprProto::InternalSwap(ResolvedSubqueryExprProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSubqueryExprProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[34]);
}

// ===================================================================

class AnyResolvedScanProto::_Internal {
 public:
  static const ::zetasql::ResolvedSingleRowScanProto& resolved_single_row_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedTableScanProto& resolved_table_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedJoinScanProto& resolved_join_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedArrayScanProto& resolved_array_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedFilterScanProto& resolved_filter_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedSetOperationScanProto& resolved_set_operation_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedOrderByScanProto& resolved_order_by_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedLimitOffsetScanProto& resolved_limit_offset_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedWithRefScanProto& resolved_with_ref_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedAnalyticScanProto& resolved_analytic_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedSampleScanProto& resolved_sample_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedProjectScanProto& resolved_project_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedWithScanProto& resolved_with_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedTVFScanProto& resolved_tvfscan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedRelationArgumentScanProto& resolved_relation_argument_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::AnyResolvedAggregateScanBaseProto& resolved_aggregate_scan_base_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedRecursiveRefScanProto& resolved_recursive_ref_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedRecursiveScanProto& resolved_recursive_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedPivotScanProto& resolved_pivot_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedUnpivotScanProto& resolved_unpivot_scan_node(const AnyResolvedScanProto* msg);
  static const ::zetasql::ResolvedGroupRowsScanProto& resolved_group_rows_scan_node(const AnyResolvedScanProto* msg);
};

const ::zetasql::ResolvedSingleRowScanProto&
AnyResolvedScanProto::_Internal::resolved_single_row_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_single_row_scan_node_;
}
const ::zetasql::ResolvedTableScanProto&
AnyResolvedScanProto::_Internal::resolved_table_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_table_scan_node_;
}
const ::zetasql::ResolvedJoinScanProto&
AnyResolvedScanProto::_Internal::resolved_join_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_join_scan_node_;
}
const ::zetasql::ResolvedArrayScanProto&
AnyResolvedScanProto::_Internal::resolved_array_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_array_scan_node_;
}
const ::zetasql::ResolvedFilterScanProto&
AnyResolvedScanProto::_Internal::resolved_filter_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_filter_scan_node_;
}
const ::zetasql::ResolvedSetOperationScanProto&
AnyResolvedScanProto::_Internal::resolved_set_operation_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_set_operation_scan_node_;
}
const ::zetasql::ResolvedOrderByScanProto&
AnyResolvedScanProto::_Internal::resolved_order_by_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_order_by_scan_node_;
}
const ::zetasql::ResolvedLimitOffsetScanProto&
AnyResolvedScanProto::_Internal::resolved_limit_offset_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_limit_offset_scan_node_;
}
const ::zetasql::ResolvedWithRefScanProto&
AnyResolvedScanProto::_Internal::resolved_with_ref_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_with_ref_scan_node_;
}
const ::zetasql::ResolvedAnalyticScanProto&
AnyResolvedScanProto::_Internal::resolved_analytic_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_analytic_scan_node_;
}
const ::zetasql::ResolvedSampleScanProto&
AnyResolvedScanProto::_Internal::resolved_sample_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_sample_scan_node_;
}
const ::zetasql::ResolvedProjectScanProto&
AnyResolvedScanProto::_Internal::resolved_project_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_project_scan_node_;
}
const ::zetasql::ResolvedWithScanProto&
AnyResolvedScanProto::_Internal::resolved_with_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_with_scan_node_;
}
const ::zetasql::ResolvedTVFScanProto&
AnyResolvedScanProto::_Internal::resolved_tvfscan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_tvfscan_node_;
}
const ::zetasql::ResolvedRelationArgumentScanProto&
AnyResolvedScanProto::_Internal::resolved_relation_argument_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_relation_argument_scan_node_;
}
const ::zetasql::AnyResolvedAggregateScanBaseProto&
AnyResolvedScanProto::_Internal::resolved_aggregate_scan_base_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_aggregate_scan_base_node_;
}
const ::zetasql::ResolvedRecursiveRefScanProto&
AnyResolvedScanProto::_Internal::resolved_recursive_ref_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_recursive_ref_scan_node_;
}
const ::zetasql::ResolvedRecursiveScanProto&
AnyResolvedScanProto::_Internal::resolved_recursive_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_recursive_scan_node_;
}
const ::zetasql::ResolvedPivotScanProto&
AnyResolvedScanProto::_Internal::resolved_pivot_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_pivot_scan_node_;
}
const ::zetasql::ResolvedUnpivotScanProto&
AnyResolvedScanProto::_Internal::resolved_unpivot_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_unpivot_scan_node_;
}
const ::zetasql::ResolvedGroupRowsScanProto&
AnyResolvedScanProto::_Internal::resolved_group_rows_scan_node(const AnyResolvedScanProto* msg) {
  return *msg->node_.resolved_group_rows_scan_node_;
}
void AnyResolvedScanProto::set_allocated_resolved_single_row_scan_node(::zetasql::ResolvedSingleRowScanProto* resolved_single_row_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_single_row_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedSingleRowScanProto>::GetOwningArena(resolved_single_row_scan_node);
    if (message_arena != submessage_arena) {
      resolved_single_row_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_single_row_scan_node, submessage_arena);
    }
    set_has_resolved_single_row_scan_node();
    node_.resolved_single_row_scan_node_ = resolved_single_row_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_single_row_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_table_scan_node(::zetasql::ResolvedTableScanProto* resolved_table_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_table_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedTableScanProto>::GetOwningArena(resolved_table_scan_node);
    if (message_arena != submessage_arena) {
      resolved_table_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_table_scan_node, submessage_arena);
    }
    set_has_resolved_table_scan_node();
    node_.resolved_table_scan_node_ = resolved_table_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_table_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_join_scan_node(::zetasql::ResolvedJoinScanProto* resolved_join_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_join_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedJoinScanProto>::GetOwningArena(resolved_join_scan_node);
    if (message_arena != submessage_arena) {
      resolved_join_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_join_scan_node, submessage_arena);
    }
    set_has_resolved_join_scan_node();
    node_.resolved_join_scan_node_ = resolved_join_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_join_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_array_scan_node(::zetasql::ResolvedArrayScanProto* resolved_array_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_array_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedArrayScanProto>::GetOwningArena(resolved_array_scan_node);
    if (message_arena != submessage_arena) {
      resolved_array_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_array_scan_node, submessage_arena);
    }
    set_has_resolved_array_scan_node();
    node_.resolved_array_scan_node_ = resolved_array_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_array_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_filter_scan_node(::zetasql::ResolvedFilterScanProto* resolved_filter_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_filter_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedFilterScanProto>::GetOwningArena(resolved_filter_scan_node);
    if (message_arena != submessage_arena) {
      resolved_filter_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_filter_scan_node, submessage_arena);
    }
    set_has_resolved_filter_scan_node();
    node_.resolved_filter_scan_node_ = resolved_filter_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_filter_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_set_operation_scan_node(::zetasql::ResolvedSetOperationScanProto* resolved_set_operation_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_set_operation_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedSetOperationScanProto>::GetOwningArena(resolved_set_operation_scan_node);
    if (message_arena != submessage_arena) {
      resolved_set_operation_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_set_operation_scan_node, submessage_arena);
    }
    set_has_resolved_set_operation_scan_node();
    node_.resolved_set_operation_scan_node_ = resolved_set_operation_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_set_operation_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_order_by_scan_node(::zetasql::ResolvedOrderByScanProto* resolved_order_by_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_order_by_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedOrderByScanProto>::GetOwningArena(resolved_order_by_scan_node);
    if (message_arena != submessage_arena) {
      resolved_order_by_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_order_by_scan_node, submessage_arena);
    }
    set_has_resolved_order_by_scan_node();
    node_.resolved_order_by_scan_node_ = resolved_order_by_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_order_by_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_limit_offset_scan_node(::zetasql::ResolvedLimitOffsetScanProto* resolved_limit_offset_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_limit_offset_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedLimitOffsetScanProto>::GetOwningArena(resolved_limit_offset_scan_node);
    if (message_arena != submessage_arena) {
      resolved_limit_offset_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_limit_offset_scan_node, submessage_arena);
    }
    set_has_resolved_limit_offset_scan_node();
    node_.resolved_limit_offset_scan_node_ = resolved_limit_offset_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_limit_offset_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_with_ref_scan_node(::zetasql::ResolvedWithRefScanProto* resolved_with_ref_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_with_ref_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedWithRefScanProto>::GetOwningArena(resolved_with_ref_scan_node);
    if (message_arena != submessage_arena) {
      resolved_with_ref_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_with_ref_scan_node, submessage_arena);
    }
    set_has_resolved_with_ref_scan_node();
    node_.resolved_with_ref_scan_node_ = resolved_with_ref_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_with_ref_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_analytic_scan_node(::zetasql::ResolvedAnalyticScanProto* resolved_analytic_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_analytic_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAnalyticScanProto>::GetOwningArena(resolved_analytic_scan_node);
    if (message_arena != submessage_arena) {
      resolved_analytic_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_analytic_scan_node, submessage_arena);
    }
    set_has_resolved_analytic_scan_node();
    node_.resolved_analytic_scan_node_ = resolved_analytic_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_analytic_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_sample_scan_node(::zetasql::ResolvedSampleScanProto* resolved_sample_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_sample_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedSampleScanProto>::GetOwningArena(resolved_sample_scan_node);
    if (message_arena != submessage_arena) {
      resolved_sample_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_sample_scan_node, submessage_arena);
    }
    set_has_resolved_sample_scan_node();
    node_.resolved_sample_scan_node_ = resolved_sample_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_sample_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_project_scan_node(::zetasql::ResolvedProjectScanProto* resolved_project_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_project_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedProjectScanProto>::GetOwningArena(resolved_project_scan_node);
    if (message_arena != submessage_arena) {
      resolved_project_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_project_scan_node, submessage_arena);
    }
    set_has_resolved_project_scan_node();
    node_.resolved_project_scan_node_ = resolved_project_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_project_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_with_scan_node(::zetasql::ResolvedWithScanProto* resolved_with_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_with_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedWithScanProto>::GetOwningArena(resolved_with_scan_node);
    if (message_arena != submessage_arena) {
      resolved_with_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_with_scan_node, submessage_arena);
    }
    set_has_resolved_with_scan_node();
    node_.resolved_with_scan_node_ = resolved_with_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_with_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_tvfscan_node(::zetasql::ResolvedTVFScanProto* resolved_tvfscan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_tvfscan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedTVFScanProto>::GetOwningArena(resolved_tvfscan_node);
    if (message_arena != submessage_arena) {
      resolved_tvfscan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_tvfscan_node, submessage_arena);
    }
    set_has_resolved_tvfscan_node();
    node_.resolved_tvfscan_node_ = resolved_tvfscan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_tvfscan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_relation_argument_scan_node(::zetasql::ResolvedRelationArgumentScanProto* resolved_relation_argument_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_relation_argument_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedRelationArgumentScanProto>::GetOwningArena(resolved_relation_argument_scan_node);
    if (message_arena != submessage_arena) {
      resolved_relation_argument_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_relation_argument_scan_node, submessage_arena);
    }
    set_has_resolved_relation_argument_scan_node();
    node_.resolved_relation_argument_scan_node_ = resolved_relation_argument_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_relation_argument_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_aggregate_scan_base_node(::zetasql::AnyResolvedAggregateScanBaseProto* resolved_aggregate_scan_base_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_aggregate_scan_base_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedAggregateScanBaseProto>::GetOwningArena(resolved_aggregate_scan_base_node);
    if (message_arena != submessage_arena) {
      resolved_aggregate_scan_base_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_aggregate_scan_base_node, submessage_arena);
    }
    set_has_resolved_aggregate_scan_base_node();
    node_.resolved_aggregate_scan_base_node_ = resolved_aggregate_scan_base_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_aggregate_scan_base_node)
}
void AnyResolvedScanProto::set_allocated_resolved_recursive_ref_scan_node(::zetasql::ResolvedRecursiveRefScanProto* resolved_recursive_ref_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_recursive_ref_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedRecursiveRefScanProto>::GetOwningArena(resolved_recursive_ref_scan_node);
    if (message_arena != submessage_arena) {
      resolved_recursive_ref_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_recursive_ref_scan_node, submessage_arena);
    }
    set_has_resolved_recursive_ref_scan_node();
    node_.resolved_recursive_ref_scan_node_ = resolved_recursive_ref_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_recursive_ref_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_recursive_scan_node(::zetasql::ResolvedRecursiveScanProto* resolved_recursive_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_recursive_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedRecursiveScanProto>::GetOwningArena(resolved_recursive_scan_node);
    if (message_arena != submessage_arena) {
      resolved_recursive_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_recursive_scan_node, submessage_arena);
    }
    set_has_resolved_recursive_scan_node();
    node_.resolved_recursive_scan_node_ = resolved_recursive_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_recursive_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_pivot_scan_node(::zetasql::ResolvedPivotScanProto* resolved_pivot_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_pivot_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedPivotScanProto>::GetOwningArena(resolved_pivot_scan_node);
    if (message_arena != submessage_arena) {
      resolved_pivot_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_pivot_scan_node, submessage_arena);
    }
    set_has_resolved_pivot_scan_node();
    node_.resolved_pivot_scan_node_ = resolved_pivot_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_pivot_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_unpivot_scan_node(::zetasql::ResolvedUnpivotScanProto* resolved_unpivot_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_unpivot_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedUnpivotScanProto>::GetOwningArena(resolved_unpivot_scan_node);
    if (message_arena != submessage_arena) {
      resolved_unpivot_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_unpivot_scan_node, submessage_arena);
    }
    set_has_resolved_unpivot_scan_node();
    node_.resolved_unpivot_scan_node_ = resolved_unpivot_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_unpivot_scan_node)
}
void AnyResolvedScanProto::set_allocated_resolved_group_rows_scan_node(::zetasql::ResolvedGroupRowsScanProto* resolved_group_rows_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_group_rows_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedGroupRowsScanProto>::GetOwningArena(resolved_group_rows_scan_node);
    if (message_arena != submessage_arena) {
      resolved_group_rows_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_group_rows_scan_node, submessage_arena);
    }
    set_has_resolved_group_rows_scan_node();
    node_.resolved_group_rows_scan_node_ = resolved_group_rows_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedScanProto.resolved_group_rows_scan_node)
}
AnyResolvedScanProto::AnyResolvedScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedScanProto)
}
AnyResolvedScanProto::AnyResolvedScanProto(const AnyResolvedScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedSingleRowScanNode: {
      _internal_mutable_resolved_single_row_scan_node()->::zetasql::ResolvedSingleRowScanProto::MergeFrom(from._internal_resolved_single_row_scan_node());
      break;
    }
    case kResolvedTableScanNode: {
      _internal_mutable_resolved_table_scan_node()->::zetasql::ResolvedTableScanProto::MergeFrom(from._internal_resolved_table_scan_node());
      break;
    }
    case kResolvedJoinScanNode: {
      _internal_mutable_resolved_join_scan_node()->::zetasql::ResolvedJoinScanProto::MergeFrom(from._internal_resolved_join_scan_node());
      break;
    }
    case kResolvedArrayScanNode: {
      _internal_mutable_resolved_array_scan_node()->::zetasql::ResolvedArrayScanProto::MergeFrom(from._internal_resolved_array_scan_node());
      break;
    }
    case kResolvedFilterScanNode: {
      _internal_mutable_resolved_filter_scan_node()->::zetasql::ResolvedFilterScanProto::MergeFrom(from._internal_resolved_filter_scan_node());
      break;
    }
    case kResolvedSetOperationScanNode: {
      _internal_mutable_resolved_set_operation_scan_node()->::zetasql::ResolvedSetOperationScanProto::MergeFrom(from._internal_resolved_set_operation_scan_node());
      break;
    }
    case kResolvedOrderByScanNode: {
      _internal_mutable_resolved_order_by_scan_node()->::zetasql::ResolvedOrderByScanProto::MergeFrom(from._internal_resolved_order_by_scan_node());
      break;
    }
    case kResolvedLimitOffsetScanNode: {
      _internal_mutable_resolved_limit_offset_scan_node()->::zetasql::ResolvedLimitOffsetScanProto::MergeFrom(from._internal_resolved_limit_offset_scan_node());
      break;
    }
    case kResolvedWithRefScanNode: {
      _internal_mutable_resolved_with_ref_scan_node()->::zetasql::ResolvedWithRefScanProto::MergeFrom(from._internal_resolved_with_ref_scan_node());
      break;
    }
    case kResolvedAnalyticScanNode: {
      _internal_mutable_resolved_analytic_scan_node()->::zetasql::ResolvedAnalyticScanProto::MergeFrom(from._internal_resolved_analytic_scan_node());
      break;
    }
    case kResolvedSampleScanNode: {
      _internal_mutable_resolved_sample_scan_node()->::zetasql::ResolvedSampleScanProto::MergeFrom(from._internal_resolved_sample_scan_node());
      break;
    }
    case kResolvedProjectScanNode: {
      _internal_mutable_resolved_project_scan_node()->::zetasql::ResolvedProjectScanProto::MergeFrom(from._internal_resolved_project_scan_node());
      break;
    }
    case kResolvedWithScanNode: {
      _internal_mutable_resolved_with_scan_node()->::zetasql::ResolvedWithScanProto::MergeFrom(from._internal_resolved_with_scan_node());
      break;
    }
    case kResolvedTvfscanNode: {
      _internal_mutable_resolved_tvfscan_node()->::zetasql::ResolvedTVFScanProto::MergeFrom(from._internal_resolved_tvfscan_node());
      break;
    }
    case kResolvedRelationArgumentScanNode: {
      _internal_mutable_resolved_relation_argument_scan_node()->::zetasql::ResolvedRelationArgumentScanProto::MergeFrom(from._internal_resolved_relation_argument_scan_node());
      break;
    }
    case kResolvedAggregateScanBaseNode: {
      _internal_mutable_resolved_aggregate_scan_base_node()->::zetasql::AnyResolvedAggregateScanBaseProto::MergeFrom(from._internal_resolved_aggregate_scan_base_node());
      break;
    }
    case kResolvedRecursiveRefScanNode: {
      _internal_mutable_resolved_recursive_ref_scan_node()->::zetasql::ResolvedRecursiveRefScanProto::MergeFrom(from._internal_resolved_recursive_ref_scan_node());
      break;
    }
    case kResolvedRecursiveScanNode: {
      _internal_mutable_resolved_recursive_scan_node()->::zetasql::ResolvedRecursiveScanProto::MergeFrom(from._internal_resolved_recursive_scan_node());
      break;
    }
    case kResolvedPivotScanNode: {
      _internal_mutable_resolved_pivot_scan_node()->::zetasql::ResolvedPivotScanProto::MergeFrom(from._internal_resolved_pivot_scan_node());
      break;
    }
    case kResolvedUnpivotScanNode: {
      _internal_mutable_resolved_unpivot_scan_node()->::zetasql::ResolvedUnpivotScanProto::MergeFrom(from._internal_resolved_unpivot_scan_node());
      break;
    }
    case kResolvedGroupRowsScanNode: {
      _internal_mutable_resolved_group_rows_scan_node()->::zetasql::ResolvedGroupRowsScanProto::MergeFrom(from._internal_resolved_group_rows_scan_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedScanProto)
}

inline void AnyResolvedScanProto::SharedCtor() {
clear_has_node();
}

AnyResolvedScanProto::~AnyResolvedScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedScanProto::ArenaDtor(void* object) {
  AnyResolvedScanProto* _this = reinterpret_cast< AnyResolvedScanProto* >(object);
  (void)_this;
}
void AnyResolvedScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedScanProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedScanProto)
  switch (node_case()) {
    case kResolvedSingleRowScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_single_row_scan_node_;
      }
      break;
    }
    case kResolvedTableScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_table_scan_node_;
      }
      break;
    }
    case kResolvedJoinScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_join_scan_node_;
      }
      break;
    }
    case kResolvedArrayScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_array_scan_node_;
      }
      break;
    }
    case kResolvedFilterScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_filter_scan_node_;
      }
      break;
    }
    case kResolvedSetOperationScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_set_operation_scan_node_;
      }
      break;
    }
    case kResolvedOrderByScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_order_by_scan_node_;
      }
      break;
    }
    case kResolvedLimitOffsetScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_limit_offset_scan_node_;
      }
      break;
    }
    case kResolvedWithRefScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_with_ref_scan_node_;
      }
      break;
    }
    case kResolvedAnalyticScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_analytic_scan_node_;
      }
      break;
    }
    case kResolvedSampleScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_sample_scan_node_;
      }
      break;
    }
    case kResolvedProjectScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_project_scan_node_;
      }
      break;
    }
    case kResolvedWithScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_with_scan_node_;
      }
      break;
    }
    case kResolvedTvfscanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_tvfscan_node_;
      }
      break;
    }
    case kResolvedRelationArgumentScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_relation_argument_scan_node_;
      }
      break;
    }
    case kResolvedAggregateScanBaseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_aggregate_scan_base_node_;
      }
      break;
    }
    case kResolvedRecursiveRefScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_recursive_ref_scan_node_;
      }
      break;
    }
    case kResolvedRecursiveScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_recursive_scan_node_;
      }
      break;
    }
    case kResolvedPivotScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_pivot_scan_node_;
      }
      break;
    }
    case kResolvedUnpivotScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_unpivot_scan_node_;
      }
      break;
    }
    case kResolvedGroupRowsScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_group_rows_scan_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedScanProto::InternalSwap(AnyResolvedScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[35]);
}

// ===================================================================

class ResolvedScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedScanProto>()._has_bits_);
  static const ::zetasql::ResolvedNodeProto& parent(const ResolvedScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_ordered(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedNodeProto&
ResolvedScanProto::_Internal::parent(const ResolvedScanProto* msg) {
  return *msg->parent_;
}
void ResolvedScanProto::clear_parent() {
  if (parent_ != nullptr) parent_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ResolvedScanProto::clear_column_list() {
  column_list_.Clear();
}
ResolvedScanProto::ResolvedScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_list_(arena),
  hint_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedScanProto)
}
ResolvedScanProto::ResolvedScanProto(const ResolvedScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      column_list_(from.column_list_),
      hint_list_(from.hint_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedNodeProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_ordered_ = from.is_ordered_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedScanProto)
}

inline void ResolvedScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_ordered_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_ordered_));
}

ResolvedScanProto::~ResolvedScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedScanProto::ArenaDtor(void* object) {
  ResolvedScanProto* _this = reinterpret_cast< ResolvedScanProto* >(object);
  (void)_this;
}
void ResolvedScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedScanProto::InternalSwap(ResolvedScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[36]);
}

// ===================================================================

class ResolvedModelProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedModelProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedModelProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ModelRefProto& model(const ResolvedModelProto* msg);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedModelProto::_Internal::parent(const ResolvedModelProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ModelRefProto&
ResolvedModelProto::_Internal::model(const ResolvedModelProto* msg) {
  return *msg->model_;
}
void ResolvedModelProto::clear_model() {
  if (model_ != nullptr) model_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResolvedModelProto::ResolvedModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedModelProto)
}
ResolvedModelProto::ResolvedModelProto(const ResolvedModelProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::zetasql::ModelRefProto(*from.model_);
  } else {
    model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedModelProto)
}

inline void ResolvedModelProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(model_));
}

ResolvedModelProto::~ResolvedModelProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedModelProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedModelProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete model_;
}

void ResolvedModelProto::ArenaDtor(void* object) {
  ResolvedModelProto* _this = reinterpret_cast< ResolvedModelProto* >(object);
  (void)_this;
}
void ResolvedModelProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedModelProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedModelProto::InternalSwap(ResolvedModelProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedModelProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[37]);
}

// ===================================================================

class ResolvedConnectionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedConnectionProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedConnectionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ConnectionRefProto& connection(const ResolvedConnectionProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedConnectionProto::_Internal::parent(const ResolvedConnectionProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ConnectionRefProto&
ResolvedConnectionProto::_Internal::connection(const ResolvedConnectionProto* msg) {
  return *msg->connection_;
}
void ResolvedConnectionProto::clear_connection() {
  if (connection_ != nullptr) connection_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResolvedConnectionProto::ResolvedConnectionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedConnectionProto)
}
ResolvedConnectionProto::ResolvedConnectionProto(const ResolvedConnectionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_connection()) {
    connection_ = new ::zetasql::ConnectionRefProto(*from.connection_);
  } else {
    connection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedConnectionProto)
}

inline void ResolvedConnectionProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connection_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(connection_));
}

ResolvedConnectionProto::~ResolvedConnectionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedConnectionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedConnectionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete connection_;
}

void ResolvedConnectionProto::ArenaDtor(void* object) {
  ResolvedConnectionProto* _this = reinterpret_cast< ResolvedConnectionProto* >(object);
  (void)_this;
}
void ResolvedConnectionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedConnectionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedConnectionProto::InternalSwap(ResolvedConnectionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedConnectionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[38]);
}

// ===================================================================

class ResolvedDescriptorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDescriptorProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedDescriptorProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedDescriptorProto::_Internal::parent(const ResolvedDescriptorProto* msg) {
  return *msg->parent_;
}
void ResolvedDescriptorProto::clear_descriptor_column_list() {
  descriptor_column_list_.Clear();
}
ResolvedDescriptorProto::ResolvedDescriptorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  descriptor_column_list_(arena),
  descriptor_column_name_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDescriptorProto)
}
ResolvedDescriptorProto::ResolvedDescriptorProto(const ResolvedDescriptorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      descriptor_column_list_(from.descriptor_column_list_),
      descriptor_column_name_list_(from.descriptor_column_name_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDescriptorProto)
}

inline void ResolvedDescriptorProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedDescriptorProto::~ResolvedDescriptorProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDescriptorProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDescriptorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedDescriptorProto::ArenaDtor(void* object) {
  ResolvedDescriptorProto* _this = reinterpret_cast< ResolvedDescriptorProto* >(object);
  (void)_this;
}
void ResolvedDescriptorProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDescriptorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDescriptorProto::InternalSwap(ResolvedDescriptorProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDescriptorProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[39]);
}

// ===================================================================

class ResolvedSingleRowScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSingleRowScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedSingleRowScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedSingleRowScanProto::_Internal::parent(const ResolvedSingleRowScanProto* msg) {
  return *msg->parent_;
}
ResolvedSingleRowScanProto::ResolvedSingleRowScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSingleRowScanProto)
}
ResolvedSingleRowScanProto::ResolvedSingleRowScanProto(const ResolvedSingleRowScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSingleRowScanProto)
}

inline void ResolvedSingleRowScanProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedSingleRowScanProto::~ResolvedSingleRowScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSingleRowScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedSingleRowScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedSingleRowScanProto::ArenaDtor(void* object) {
  ResolvedSingleRowScanProto* _this = reinterpret_cast< ResolvedSingleRowScanProto* >(object);
  (void)_this;
}
void ResolvedSingleRowScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedSingleRowScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedSingleRowScanProto::InternalSwap(ResolvedSingleRowScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSingleRowScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[40]);
}

// ===================================================================

class ResolvedTableScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedTableScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedTableScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TableRefProto& table(const ResolvedTableScanProto* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& for_system_time_expr(const ResolvedTableScanProto* msg);
  static void set_has_for_system_time_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_alias(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedTableScanProto::_Internal::parent(const ResolvedTableScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::TableRefProto&
ResolvedTableScanProto::_Internal::table(const ResolvedTableScanProto* msg) {
  return *msg->table_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedTableScanProto::_Internal::for_system_time_expr(const ResolvedTableScanProto* msg) {
  return *msg->for_system_time_expr_;
}
void ResolvedTableScanProto::clear_table() {
  if (table_ != nullptr) table_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ResolvedTableScanProto::ResolvedTableScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_index_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedTableScanProto)
}
ResolvedTableScanProto::ResolvedTableScanProto(const ResolvedTableScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      column_index_list_(from.column_index_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_alias()) {
    alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alias(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_table()) {
    table_ = new ::zetasql::TableRefProto(*from.table_);
  } else {
    table_ = nullptr;
  }
  if (from._internal_has_for_system_time_expr()) {
    for_system_time_expr_ = new ::zetasql::AnyResolvedExprProto(*from.for_system_time_expr_);
  } else {
    for_system_time_expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedTableScanProto)
}

inline void ResolvedTableScanProto::SharedCtor() {
alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&for_system_time_expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(for_system_time_expr_));
}

ResolvedTableScanProto::~ResolvedTableScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedTableScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedTableScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete table_;
  if (this != internal_default_instance()) delete for_system_time_expr_;
}

void ResolvedTableScanProto::ArenaDtor(void* object) {
  ResolvedTableScanProto* _this = reinterpret_cast< ResolvedTableScanProto* >(object);
  (void)_this;
}
void ResolvedTableScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedTableScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedTableScanProto::InternalSwap(ResolvedTableScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedTableScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[41]);
}

// ===================================================================

class ResolvedJoinScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedJoinScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedJoinScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_join_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::AnyResolvedScanProto& left_scan(const ResolvedJoinScanProto* msg);
  static void set_has_left_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& right_scan(const ResolvedJoinScanProto* msg);
  static void set_has_right_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& join_expr(const ResolvedJoinScanProto* msg);
  static void set_has_join_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedJoinScanProto::_Internal::parent(const ResolvedJoinScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedJoinScanProto::_Internal::left_scan(const ResolvedJoinScanProto* msg) {
  return *msg->left_scan_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedJoinScanProto::_Internal::right_scan(const ResolvedJoinScanProto* msg) {
  return *msg->right_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedJoinScanProto::_Internal::join_expr(const ResolvedJoinScanProto* msg) {
  return *msg->join_expr_;
}
ResolvedJoinScanProto::ResolvedJoinScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedJoinScanProto)
}
ResolvedJoinScanProto::ResolvedJoinScanProto(const ResolvedJoinScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_left_scan()) {
    left_scan_ = new ::zetasql::AnyResolvedScanProto(*from.left_scan_);
  } else {
    left_scan_ = nullptr;
  }
  if (from._internal_has_right_scan()) {
    right_scan_ = new ::zetasql::AnyResolvedScanProto(*from.right_scan_);
  } else {
    right_scan_ = nullptr;
  }
  if (from._internal_has_join_expr()) {
    join_expr_ = new ::zetasql::AnyResolvedExprProto(*from.join_expr_);
  } else {
    join_expr_ = nullptr;
  }
  join_type_ = from.join_type_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedJoinScanProto)
}

inline void ResolvedJoinScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&join_type_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(join_type_));
}

ResolvedJoinScanProto::~ResolvedJoinScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedJoinScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedJoinScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete left_scan_;
  if (this != internal_default_instance()) delete right_scan_;
  if (this != internal_default_instance()) delete join_expr_;
}

void ResolvedJoinScanProto::ArenaDtor(void* object) {
  ResolvedJoinScanProto* _this = reinterpret_cast< ResolvedJoinScanProto* >(object);
  (void)_this;
}
void ResolvedJoinScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedJoinScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedJoinScanProto::InternalSwap(ResolvedJoinScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedJoinScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[42]);
}

// ===================================================================

class ResolvedArrayScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedArrayScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedArrayScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedArrayScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& array_expr(const ResolvedArrayScanProto* msg);
  static void set_has_array_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedColumnProto& element_column(const ResolvedArrayScanProto* msg);
  static void set_has_element_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& array_offset_column(const ResolvedArrayScanProto* msg);
  static void set_has_array_offset_column(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::AnyResolvedExprProto& join_expr(const ResolvedArrayScanProto* msg);
  static void set_has_join_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_outer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedArrayScanProto::_Internal::parent(const ResolvedArrayScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedArrayScanProto::_Internal::input_scan(const ResolvedArrayScanProto* msg) {
  return *msg->input_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedArrayScanProto::_Internal::array_expr(const ResolvedArrayScanProto* msg) {
  return *msg->array_expr_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedArrayScanProto::_Internal::element_column(const ResolvedArrayScanProto* msg) {
  return *msg->element_column_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedArrayScanProto::_Internal::array_offset_column(const ResolvedArrayScanProto* msg) {
  return *msg->array_offset_column_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedArrayScanProto::_Internal::join_expr(const ResolvedArrayScanProto* msg) {
  return *msg->join_expr_;
}
void ResolvedArrayScanProto::clear_element_column() {
  if (element_column_ != nullptr) element_column_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ResolvedArrayScanProto::ResolvedArrayScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedArrayScanProto)
}
ResolvedArrayScanProto::ResolvedArrayScanProto(const ResolvedArrayScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_input_scan()) {
    input_scan_ = new ::zetasql::AnyResolvedScanProto(*from.input_scan_);
  } else {
    input_scan_ = nullptr;
  }
  if (from._internal_has_array_expr()) {
    array_expr_ = new ::zetasql::AnyResolvedExprProto(*from.array_expr_);
  } else {
    array_expr_ = nullptr;
  }
  if (from._internal_has_element_column()) {
    element_column_ = new ::zetasql::ResolvedColumnProto(*from.element_column_);
  } else {
    element_column_ = nullptr;
  }
  if (from._internal_has_array_offset_column()) {
    array_offset_column_ = new ::zetasql::ResolvedColumnHolderProto(*from.array_offset_column_);
  } else {
    array_offset_column_ = nullptr;
  }
  if (from._internal_has_join_expr()) {
    join_expr_ = new ::zetasql::AnyResolvedExprProto(*from.join_expr_);
  } else {
    join_expr_ = nullptr;
  }
  is_outer_ = from.is_outer_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedArrayScanProto)
}

inline void ResolvedArrayScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_outer_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_outer_));
}

ResolvedArrayScanProto::~ResolvedArrayScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedArrayScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedArrayScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete input_scan_;
  if (this != internal_default_instance()) delete array_expr_;
  if (this != internal_default_instance()) delete element_column_;
  if (this != internal_default_instance()) delete array_offset_column_;
  if (this != internal_default_instance()) delete join_expr_;
}

void ResolvedArrayScanProto::ArenaDtor(void* object) {
  ResolvedArrayScanProto* _this = reinterpret_cast< ResolvedArrayScanProto* >(object);
  (void)_this;
}
void ResolvedArrayScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedArrayScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedArrayScanProto::InternalSwap(ResolvedArrayScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedArrayScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[43]);
}

// ===================================================================

class ResolvedColumnHolderProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedColumnHolderProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedColumnHolderProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnProto& column(const ResolvedColumnHolderProto* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedColumnHolderProto::_Internal::parent(const ResolvedColumnHolderProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedColumnHolderProto::_Internal::column(const ResolvedColumnHolderProto* msg) {
  return *msg->column_;
}
void ResolvedColumnHolderProto::clear_column() {
  if (column_ != nullptr) column_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResolvedColumnHolderProto::ResolvedColumnHolderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedColumnHolderProto)
}
ResolvedColumnHolderProto::ResolvedColumnHolderProto(const ResolvedColumnHolderProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_column()) {
    column_ = new ::zetasql::ResolvedColumnProto(*from.column_);
  } else {
    column_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedColumnHolderProto)
}

inline void ResolvedColumnHolderProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(column_));
}

ResolvedColumnHolderProto::~ResolvedColumnHolderProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedColumnHolderProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedColumnHolderProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete column_;
}

void ResolvedColumnHolderProto::ArenaDtor(void* object) {
  ResolvedColumnHolderProto* _this = reinterpret_cast< ResolvedColumnHolderProto* >(object);
  (void)_this;
}
void ResolvedColumnHolderProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedColumnHolderProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedColumnHolderProto::InternalSwap(ResolvedColumnHolderProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedColumnHolderProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[44]);
}

// ===================================================================

class ResolvedFilterScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFilterScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedFilterScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedFilterScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& filter_expr(const ResolvedFilterScanProto* msg);
  static void set_has_filter_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedFilterScanProto::_Internal::parent(const ResolvedFilterScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedFilterScanProto::_Internal::input_scan(const ResolvedFilterScanProto* msg) {
  return *msg->input_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedFilterScanProto::_Internal::filter_expr(const ResolvedFilterScanProto* msg) {
  return *msg->filter_expr_;
}
ResolvedFilterScanProto::ResolvedFilterScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFilterScanProto)
}
ResolvedFilterScanProto::ResolvedFilterScanProto(const ResolvedFilterScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_input_scan()) {
    input_scan_ = new ::zetasql::AnyResolvedScanProto(*from.input_scan_);
  } else {
    input_scan_ = nullptr;
  }
  if (from._internal_has_filter_expr()) {
    filter_expr_ = new ::zetasql::AnyResolvedExprProto(*from.filter_expr_);
  } else {
    filter_expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFilterScanProto)
}

inline void ResolvedFilterScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&filter_expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(filter_expr_));
}

ResolvedFilterScanProto::~ResolvedFilterScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFilterScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedFilterScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete input_scan_;
  if (this != internal_default_instance()) delete filter_expr_;
}

void ResolvedFilterScanProto::ArenaDtor(void* object) {
  ResolvedFilterScanProto* _this = reinterpret_cast< ResolvedFilterScanProto* >(object);
  (void)_this;
}
void ResolvedFilterScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedFilterScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedFilterScanProto::InternalSwap(ResolvedFilterScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFilterScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[45]);
}

// ===================================================================

class ResolvedGroupingSetProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGroupingSetProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedGroupingSetProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedGroupingSetProto::_Internal::parent(const ResolvedGroupingSetProto* msg) {
  return *msg->parent_;
}
ResolvedGroupingSetProto::ResolvedGroupingSetProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  group_by_column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGroupingSetProto)
}
ResolvedGroupingSetProto::ResolvedGroupingSetProto(const ResolvedGroupingSetProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      group_by_column_list_(from.group_by_column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGroupingSetProto)
}

inline void ResolvedGroupingSetProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedGroupingSetProto::~ResolvedGroupingSetProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGroupingSetProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedGroupingSetProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedGroupingSetProto::ArenaDtor(void* object) {
  ResolvedGroupingSetProto* _this = reinterpret_cast< ResolvedGroupingSetProto* >(object);
  (void)_this;
}
void ResolvedGroupingSetProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedGroupingSetProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedGroupingSetProto::InternalSwap(ResolvedGroupingSetProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGroupingSetProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[46]);
}

// ===================================================================

class AnyResolvedAggregateScanBaseProto::_Internal {
 public:
  static const ::zetasql::ResolvedAggregateScanProto& resolved_aggregate_scan_node(const AnyResolvedAggregateScanBaseProto* msg);
  static const ::zetasql::ResolvedAnonymizedAggregateScanProto& resolved_anonymized_aggregate_scan_node(const AnyResolvedAggregateScanBaseProto* msg);
};

const ::zetasql::ResolvedAggregateScanProto&
AnyResolvedAggregateScanBaseProto::_Internal::resolved_aggregate_scan_node(const AnyResolvedAggregateScanBaseProto* msg) {
  return *msg->node_.resolved_aggregate_scan_node_;
}
const ::zetasql::ResolvedAnonymizedAggregateScanProto&
AnyResolvedAggregateScanBaseProto::_Internal::resolved_anonymized_aggregate_scan_node(const AnyResolvedAggregateScanBaseProto* msg) {
  return *msg->node_.resolved_anonymized_aggregate_scan_node_;
}
void AnyResolvedAggregateScanBaseProto::set_allocated_resolved_aggregate_scan_node(::zetasql::ResolvedAggregateScanProto* resolved_aggregate_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_aggregate_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAggregateScanProto>::GetOwningArena(resolved_aggregate_scan_node);
    if (message_arena != submessage_arena) {
      resolved_aggregate_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_aggregate_scan_node, submessage_arena);
    }
    set_has_resolved_aggregate_scan_node();
    node_.resolved_aggregate_scan_node_ = resolved_aggregate_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAggregateScanBaseProto.resolved_aggregate_scan_node)
}
void AnyResolvedAggregateScanBaseProto::set_allocated_resolved_anonymized_aggregate_scan_node(::zetasql::ResolvedAnonymizedAggregateScanProto* resolved_anonymized_aggregate_scan_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_anonymized_aggregate_scan_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAnonymizedAggregateScanProto>::GetOwningArena(resolved_anonymized_aggregate_scan_node);
    if (message_arena != submessage_arena) {
      resolved_anonymized_aggregate_scan_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_anonymized_aggregate_scan_node, submessage_arena);
    }
    set_has_resolved_anonymized_aggregate_scan_node();
    node_.resolved_anonymized_aggregate_scan_node_ = resolved_anonymized_aggregate_scan_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAggregateScanBaseProto.resolved_anonymized_aggregate_scan_node)
}
AnyResolvedAggregateScanBaseProto::AnyResolvedAggregateScanBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedAggregateScanBaseProto)
}
AnyResolvedAggregateScanBaseProto::AnyResolvedAggregateScanBaseProto(const AnyResolvedAggregateScanBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedAggregateScanNode: {
      _internal_mutable_resolved_aggregate_scan_node()->::zetasql::ResolvedAggregateScanProto::MergeFrom(from._internal_resolved_aggregate_scan_node());
      break;
    }
    case kResolvedAnonymizedAggregateScanNode: {
      _internal_mutable_resolved_anonymized_aggregate_scan_node()->::zetasql::ResolvedAnonymizedAggregateScanProto::MergeFrom(from._internal_resolved_anonymized_aggregate_scan_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedAggregateScanBaseProto)
}

inline void AnyResolvedAggregateScanBaseProto::SharedCtor() {
clear_has_node();
}

AnyResolvedAggregateScanBaseProto::~AnyResolvedAggregateScanBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedAggregateScanBaseProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedAggregateScanBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedAggregateScanBaseProto::ArenaDtor(void* object) {
  AnyResolvedAggregateScanBaseProto* _this = reinterpret_cast< AnyResolvedAggregateScanBaseProto* >(object);
  (void)_this;
}
void AnyResolvedAggregateScanBaseProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedAggregateScanBaseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedAggregateScanBaseProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedAggregateScanBaseProto)
  switch (node_case()) {
    case kResolvedAggregateScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_aggregate_scan_node_;
      }
      break;
    }
    case kResolvedAnonymizedAggregateScanNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_anonymized_aggregate_scan_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedAggregateScanBaseProto::InternalSwap(AnyResolvedAggregateScanBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedAggregateScanBaseProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[47]);
}

// ===================================================================

class ResolvedAggregateScanBaseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAggregateScanBaseProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedAggregateScanBaseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedAggregateScanBaseProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedAggregateScanBaseProto::_Internal::parent(const ResolvedAggregateScanBaseProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedAggregateScanBaseProto::_Internal::input_scan(const ResolvedAggregateScanBaseProto* msg) {
  return *msg->input_scan_;
}
void ResolvedAggregateScanBaseProto::clear_collation_list() {
  collation_list_.Clear();
}
ResolvedAggregateScanBaseProto::ResolvedAggregateScanBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  group_by_list_(arena),
  aggregate_list_(arena),
  collation_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAggregateScanBaseProto)
}
ResolvedAggregateScanBaseProto::ResolvedAggregateScanBaseProto(const ResolvedAggregateScanBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      group_by_list_(from.group_by_list_),
      aggregate_list_(from.aggregate_list_),
      collation_list_(from.collation_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_input_scan()) {
    input_scan_ = new ::zetasql::AnyResolvedScanProto(*from.input_scan_);
  } else {
    input_scan_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAggregateScanBaseProto)
}

inline void ResolvedAggregateScanBaseProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_scan_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(input_scan_));
}

ResolvedAggregateScanBaseProto::~ResolvedAggregateScanBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAggregateScanBaseProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAggregateScanBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete input_scan_;
}

void ResolvedAggregateScanBaseProto::ArenaDtor(void* object) {
  ResolvedAggregateScanBaseProto* _this = reinterpret_cast< ResolvedAggregateScanBaseProto* >(object);
  (void)_this;
}
void ResolvedAggregateScanBaseProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAggregateScanBaseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAggregateScanBaseProto::InternalSwap(ResolvedAggregateScanBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAggregateScanBaseProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[48]);
}

// ===================================================================

class ResolvedAggregateScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAggregateScanProto>()._has_bits_);
  static const ::zetasql::ResolvedAggregateScanBaseProto& parent(const ResolvedAggregateScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAggregateScanBaseProto&
ResolvedAggregateScanProto::_Internal::parent(const ResolvedAggregateScanProto* msg) {
  return *msg->parent_;
}
ResolvedAggregateScanProto::ResolvedAggregateScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  grouping_set_list_(arena),
  rollup_column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAggregateScanProto)
}
ResolvedAggregateScanProto::ResolvedAggregateScanProto(const ResolvedAggregateScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      grouping_set_list_(from.grouping_set_list_),
      rollup_column_list_(from.rollup_column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAggregateScanBaseProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAggregateScanProto)
}

inline void ResolvedAggregateScanProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedAggregateScanProto::~ResolvedAggregateScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAggregateScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAggregateScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAggregateScanProto::ArenaDtor(void* object) {
  ResolvedAggregateScanProto* _this = reinterpret_cast< ResolvedAggregateScanProto* >(object);
  (void)_this;
}
void ResolvedAggregateScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAggregateScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAggregateScanProto::InternalSwap(ResolvedAggregateScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAggregateScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[49]);
}

// ===================================================================

class ResolvedAnonymizedAggregateScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAnonymizedAggregateScanProto>()._has_bits_);
  static const ::zetasql::ResolvedAggregateScanBaseProto& parent(const ResolvedAnonymizedAggregateScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnRefProto& k_threshold_expr(const ResolvedAnonymizedAggregateScanProto* msg);
  static void set_has_k_threshold_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAggregateScanBaseProto&
ResolvedAnonymizedAggregateScanProto::_Internal::parent(const ResolvedAnonymizedAggregateScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedColumnRefProto&
ResolvedAnonymizedAggregateScanProto::_Internal::k_threshold_expr(const ResolvedAnonymizedAggregateScanProto* msg) {
  return *msg->k_threshold_expr_;
}
ResolvedAnonymizedAggregateScanProto::ResolvedAnonymizedAggregateScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  anonymization_option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAnonymizedAggregateScanProto)
}
ResolvedAnonymizedAggregateScanProto::ResolvedAnonymizedAggregateScanProto(const ResolvedAnonymizedAggregateScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      anonymization_option_list_(from.anonymization_option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAggregateScanBaseProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_k_threshold_expr()) {
    k_threshold_expr_ = new ::zetasql::ResolvedColumnRefProto(*from.k_threshold_expr_);
  } else {
    k_threshold_expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAnonymizedAggregateScanProto)
}

inline void ResolvedAnonymizedAggregateScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&k_threshold_expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(k_threshold_expr_));
}

ResolvedAnonymizedAggregateScanProto::~ResolvedAnonymizedAggregateScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAnonymizedAggregateScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAnonymizedAggregateScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete k_threshold_expr_;
}

void ResolvedAnonymizedAggregateScanProto::ArenaDtor(void* object) {
  ResolvedAnonymizedAggregateScanProto* _this = reinterpret_cast< ResolvedAnonymizedAggregateScanProto* >(object);
  (void)_this;
}
void ResolvedAnonymizedAggregateScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAnonymizedAggregateScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAnonymizedAggregateScanProto::InternalSwap(ResolvedAnonymizedAggregateScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAnonymizedAggregateScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[50]);
}

// ===================================================================

class ResolvedSetOperationItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSetOperationItemProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedSetOperationItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& scan(const ResolvedSetOperationItemProto* msg);
  static void set_has_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedSetOperationItemProto::_Internal::parent(const ResolvedSetOperationItemProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedSetOperationItemProto::_Internal::scan(const ResolvedSetOperationItemProto* msg) {
  return *msg->scan_;
}
void ResolvedSetOperationItemProto::clear_output_column_list() {
  output_column_list_.Clear();
}
ResolvedSetOperationItemProto::ResolvedSetOperationItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  output_column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSetOperationItemProto)
}
ResolvedSetOperationItemProto::ResolvedSetOperationItemProto(const ResolvedSetOperationItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      output_column_list_(from.output_column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_scan()) {
    scan_ = new ::zetasql::AnyResolvedScanProto(*from.scan_);
  } else {
    scan_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSetOperationItemProto)
}

inline void ResolvedSetOperationItemProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scan_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(scan_));
}

ResolvedSetOperationItemProto::~ResolvedSetOperationItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSetOperationItemProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedSetOperationItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete scan_;
}

void ResolvedSetOperationItemProto::ArenaDtor(void* object) {
  ResolvedSetOperationItemProto* _this = reinterpret_cast< ResolvedSetOperationItemProto* >(object);
  (void)_this;
}
void ResolvedSetOperationItemProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedSetOperationItemProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedSetOperationItemProto::InternalSwap(ResolvedSetOperationItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSetOperationItemProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[51]);
}

// ===================================================================

class ResolvedSetOperationScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSetOperationScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedSetOperationScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_op_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedSetOperationScanProto::_Internal::parent(const ResolvedSetOperationScanProto* msg) {
  return *msg->parent_;
}
ResolvedSetOperationScanProto::ResolvedSetOperationScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  input_item_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSetOperationScanProto)
}
ResolvedSetOperationScanProto::ResolvedSetOperationScanProto(const ResolvedSetOperationScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      input_item_list_(from.input_item_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  op_type_ = from.op_type_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSetOperationScanProto)
}

inline void ResolvedSetOperationScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_type_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(op_type_));
}

ResolvedSetOperationScanProto::~ResolvedSetOperationScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSetOperationScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedSetOperationScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedSetOperationScanProto::ArenaDtor(void* object) {
  ResolvedSetOperationScanProto* _this = reinterpret_cast< ResolvedSetOperationScanProto* >(object);
  (void)_this;
}
void ResolvedSetOperationScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedSetOperationScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedSetOperationScanProto::InternalSwap(ResolvedSetOperationScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSetOperationScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[52]);
}

// ===================================================================

class ResolvedOrderByScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedOrderByScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedOrderByScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedOrderByScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedOrderByScanProto::_Internal::parent(const ResolvedOrderByScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedOrderByScanProto::_Internal::input_scan(const ResolvedOrderByScanProto* msg) {
  return *msg->input_scan_;
}
ResolvedOrderByScanProto::ResolvedOrderByScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  order_by_item_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedOrderByScanProto)
}
ResolvedOrderByScanProto::ResolvedOrderByScanProto(const ResolvedOrderByScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      order_by_item_list_(from.order_by_item_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_input_scan()) {
    input_scan_ = new ::zetasql::AnyResolvedScanProto(*from.input_scan_);
  } else {
    input_scan_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedOrderByScanProto)
}

inline void ResolvedOrderByScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_scan_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(input_scan_));
}

ResolvedOrderByScanProto::~ResolvedOrderByScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedOrderByScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedOrderByScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete input_scan_;
}

void ResolvedOrderByScanProto::ArenaDtor(void* object) {
  ResolvedOrderByScanProto* _this = reinterpret_cast< ResolvedOrderByScanProto* >(object);
  (void)_this;
}
void ResolvedOrderByScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedOrderByScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedOrderByScanProto::InternalSwap(ResolvedOrderByScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedOrderByScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[53]);
}

// ===================================================================

class ResolvedLimitOffsetScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedLimitOffsetScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedLimitOffsetScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedLimitOffsetScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& limit(const ResolvedLimitOffsetScanProto* msg);
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& offset(const ResolvedLimitOffsetScanProto* msg);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedLimitOffsetScanProto::_Internal::parent(const ResolvedLimitOffsetScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedLimitOffsetScanProto::_Internal::input_scan(const ResolvedLimitOffsetScanProto* msg) {
  return *msg->input_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedLimitOffsetScanProto::_Internal::limit(const ResolvedLimitOffsetScanProto* msg) {
  return *msg->limit_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedLimitOffsetScanProto::_Internal::offset(const ResolvedLimitOffsetScanProto* msg) {
  return *msg->offset_;
}
ResolvedLimitOffsetScanProto::ResolvedLimitOffsetScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedLimitOffsetScanProto)
}
ResolvedLimitOffsetScanProto::ResolvedLimitOffsetScanProto(const ResolvedLimitOffsetScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_input_scan()) {
    input_scan_ = new ::zetasql::AnyResolvedScanProto(*from.input_scan_);
  } else {
    input_scan_ = nullptr;
  }
  if (from._internal_has_limit()) {
    limit_ = new ::zetasql::AnyResolvedExprProto(*from.limit_);
  } else {
    limit_ = nullptr;
  }
  if (from._internal_has_offset()) {
    offset_ = new ::zetasql::AnyResolvedExprProto(*from.offset_);
  } else {
    offset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedLimitOffsetScanProto)
}

inline void ResolvedLimitOffsetScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(offset_));
}

ResolvedLimitOffsetScanProto::~ResolvedLimitOffsetScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedLimitOffsetScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedLimitOffsetScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete input_scan_;
  if (this != internal_default_instance()) delete limit_;
  if (this != internal_default_instance()) delete offset_;
}

void ResolvedLimitOffsetScanProto::ArenaDtor(void* object) {
  ResolvedLimitOffsetScanProto* _this = reinterpret_cast< ResolvedLimitOffsetScanProto* >(object);
  (void)_this;
}
void ResolvedLimitOffsetScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedLimitOffsetScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedLimitOffsetScanProto::InternalSwap(ResolvedLimitOffsetScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedLimitOffsetScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[54]);
}

// ===================================================================

class ResolvedWithRefScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWithRefScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedWithRefScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_with_query_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedWithRefScanProto::_Internal::parent(const ResolvedWithRefScanProto* msg) {
  return *msg->parent_;
}
ResolvedWithRefScanProto::ResolvedWithRefScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWithRefScanProto)
}
ResolvedWithRefScanProto::ResolvedWithRefScanProto(const ResolvedWithRefScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  with_query_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    with_query_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_with_query_name()) {
    with_query_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_with_query_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWithRefScanProto)
}

inline void ResolvedWithRefScanProto::SharedCtor() {
with_query_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  with_query_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_ = nullptr;
}

ResolvedWithRefScanProto::~ResolvedWithRefScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWithRefScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedWithRefScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  with_query_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedWithRefScanProto::ArenaDtor(void* object) {
  ResolvedWithRefScanProto* _this = reinterpret_cast< ResolvedWithRefScanProto* >(object);
  (void)_this;
}
void ResolvedWithRefScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedWithRefScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedWithRefScanProto::InternalSwap(ResolvedWithRefScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWithRefScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[55]);
}

// ===================================================================

class ResolvedAnalyticScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAnalyticScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedAnalyticScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedAnalyticScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedAnalyticScanProto::_Internal::parent(const ResolvedAnalyticScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedAnalyticScanProto::_Internal::input_scan(const ResolvedAnalyticScanProto* msg) {
  return *msg->input_scan_;
}
ResolvedAnalyticScanProto::ResolvedAnalyticScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  function_group_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAnalyticScanProto)
}
ResolvedAnalyticScanProto::ResolvedAnalyticScanProto(const ResolvedAnalyticScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      function_group_list_(from.function_group_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_input_scan()) {
    input_scan_ = new ::zetasql::AnyResolvedScanProto(*from.input_scan_);
  } else {
    input_scan_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAnalyticScanProto)
}

inline void ResolvedAnalyticScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_scan_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(input_scan_));
}

ResolvedAnalyticScanProto::~ResolvedAnalyticScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAnalyticScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAnalyticScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete input_scan_;
}

void ResolvedAnalyticScanProto::ArenaDtor(void* object) {
  ResolvedAnalyticScanProto* _this = reinterpret_cast< ResolvedAnalyticScanProto* >(object);
  (void)_this;
}
void ResolvedAnalyticScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAnalyticScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAnalyticScanProto::InternalSwap(ResolvedAnalyticScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAnalyticScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[56]);
}

// ===================================================================

class ResolvedSampleScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSampleScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedSampleScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedSampleScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& size(const ResolvedSampleScanProto* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::zetasql::AnyResolvedExprProto& repeatable_argument(const ResolvedSampleScanProto* msg);
  static void set_has_repeatable_argument(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& weight_column(const ResolvedSampleScanProto* msg);
  static void set_has_weight_column(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedSampleScanProto::_Internal::parent(const ResolvedSampleScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedSampleScanProto::_Internal::input_scan(const ResolvedSampleScanProto* msg) {
  return *msg->input_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedSampleScanProto::_Internal::size(const ResolvedSampleScanProto* msg) {
  return *msg->size_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedSampleScanProto::_Internal::repeatable_argument(const ResolvedSampleScanProto* msg) {
  return *msg->repeatable_argument_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedSampleScanProto::_Internal::weight_column(const ResolvedSampleScanProto* msg) {
  return *msg->weight_column_;
}
ResolvedSampleScanProto::ResolvedSampleScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  partition_by_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSampleScanProto)
}
ResolvedSampleScanProto::ResolvedSampleScanProto(const ResolvedSampleScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      partition_by_list_(from.partition_by_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method()) {
    method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_method(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_input_scan()) {
    input_scan_ = new ::zetasql::AnyResolvedScanProto(*from.input_scan_);
  } else {
    input_scan_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::zetasql::AnyResolvedExprProto(*from.size_);
  } else {
    size_ = nullptr;
  }
  if (from._internal_has_repeatable_argument()) {
    repeatable_argument_ = new ::zetasql::AnyResolvedExprProto(*from.repeatable_argument_);
  } else {
    repeatable_argument_ = nullptr;
  }
  if (from._internal_has_weight_column()) {
    weight_column_ = new ::zetasql::ResolvedColumnHolderProto(*from.weight_column_);
  } else {
    weight_column_ = nullptr;
  }
  unit_ = from.unit_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSampleScanProto)
}

inline void ResolvedSampleScanProto::SharedCtor() {
method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(unit_));
}

ResolvedSampleScanProto::~ResolvedSampleScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSampleScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedSampleScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete input_scan_;
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete repeatable_argument_;
  if (this != internal_default_instance()) delete weight_column_;
}

void ResolvedSampleScanProto::ArenaDtor(void* object) {
  ResolvedSampleScanProto* _this = reinterpret_cast< ResolvedSampleScanProto* >(object);
  (void)_this;
}
void ResolvedSampleScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedSampleScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedSampleScanProto::InternalSwap(ResolvedSampleScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSampleScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[57]);
}

// ===================================================================

class ResolvedComputedColumnProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedComputedColumnProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedComputedColumnProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnProto& column(const ResolvedComputedColumnProto* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedComputedColumnProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedComputedColumnProto::_Internal::parent(const ResolvedComputedColumnProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedComputedColumnProto::_Internal::column(const ResolvedComputedColumnProto* msg) {
  return *msg->column_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedComputedColumnProto::_Internal::expr(const ResolvedComputedColumnProto* msg) {
  return *msg->expr_;
}
void ResolvedComputedColumnProto::clear_column() {
  if (column_ != nullptr) column_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResolvedComputedColumnProto::ResolvedComputedColumnProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedComputedColumnProto)
}
ResolvedComputedColumnProto::ResolvedComputedColumnProto(const ResolvedComputedColumnProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_column()) {
    column_ = new ::zetasql::ResolvedColumnProto(*from.column_);
  } else {
    column_ = nullptr;
  }
  if (from._internal_has_expr()) {
    expr_ = new ::zetasql::AnyResolvedExprProto(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedComputedColumnProto)
}

inline void ResolvedComputedColumnProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(expr_));
}

ResolvedComputedColumnProto::~ResolvedComputedColumnProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedComputedColumnProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedComputedColumnProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete column_;
  if (this != internal_default_instance()) delete expr_;
}

void ResolvedComputedColumnProto::ArenaDtor(void* object) {
  ResolvedComputedColumnProto* _this = reinterpret_cast< ResolvedComputedColumnProto* >(object);
  (void)_this;
}
void ResolvedComputedColumnProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedComputedColumnProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedComputedColumnProto::InternalSwap(ResolvedComputedColumnProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedComputedColumnProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[58]);
}

// ===================================================================

class ResolvedOrderByItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedOrderByItemProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedOrderByItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnRefProto& column_ref(const ResolvedOrderByItemProto* msg);
  static void set_has_column_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& collation_name(const ResolvedOrderByItemProto* msg);
  static void set_has_collation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_descending(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_null_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zetasql::ResolvedCollationProto& collation(const ResolvedOrderByItemProto* msg);
  static void set_has_collation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedOrderByItemProto::_Internal::parent(const ResolvedOrderByItemProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedColumnRefProto&
ResolvedOrderByItemProto::_Internal::column_ref(const ResolvedOrderByItemProto* msg) {
  return *msg->column_ref_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedOrderByItemProto::_Internal::collation_name(const ResolvedOrderByItemProto* msg) {
  return *msg->collation_name_;
}
const ::zetasql::ResolvedCollationProto&
ResolvedOrderByItemProto::_Internal::collation(const ResolvedOrderByItemProto* msg) {
  return *msg->collation_;
}
void ResolvedOrderByItemProto::clear_collation() {
  if (collation_ != nullptr) collation_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ResolvedOrderByItemProto::ResolvedOrderByItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedOrderByItemProto)
}
ResolvedOrderByItemProto::ResolvedOrderByItemProto(const ResolvedOrderByItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_column_ref()) {
    column_ref_ = new ::zetasql::ResolvedColumnRefProto(*from.column_ref_);
  } else {
    column_ref_ = nullptr;
  }
  if (from._internal_has_collation_name()) {
    collation_name_ = new ::zetasql::AnyResolvedExprProto(*from.collation_name_);
  } else {
    collation_name_ = nullptr;
  }
  if (from._internal_has_collation()) {
    collation_ = new ::zetasql::ResolvedCollationProto(*from.collation_);
  } else {
    collation_ = nullptr;
  }
  ::memcpy(&is_descending_, &from.is_descending_,
    static_cast<size_t>(reinterpret_cast<char*>(&null_order_) -
    reinterpret_cast<char*>(&is_descending_)) + sizeof(null_order_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedOrderByItemProto)
}

inline void ResolvedOrderByItemProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&null_order_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(null_order_));
}

ResolvedOrderByItemProto::~ResolvedOrderByItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedOrderByItemProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedOrderByItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete column_ref_;
  if (this != internal_default_instance()) delete collation_name_;
  if (this != internal_default_instance()) delete collation_;
}

void ResolvedOrderByItemProto::ArenaDtor(void* object) {
  ResolvedOrderByItemProto* _this = reinterpret_cast< ResolvedOrderByItemProto* >(object);
  (void)_this;
}
void ResolvedOrderByItemProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedOrderByItemProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedOrderByItemProto::InternalSwap(ResolvedOrderByItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedOrderByItemProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[59]);
}

// ===================================================================

class ResolvedColumnAnnotationsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedColumnAnnotationsProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedColumnAnnotationsProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& collation_name(const ResolvedColumnAnnotationsProto* msg);
  static void set_has_collation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_not_null(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::TypeParametersProto& type_parameters(const ResolvedColumnAnnotationsProto* msg);
  static void set_has_type_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedColumnAnnotationsProto::_Internal::parent(const ResolvedColumnAnnotationsProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedColumnAnnotationsProto::_Internal::collation_name(const ResolvedColumnAnnotationsProto* msg) {
  return *msg->collation_name_;
}
const ::zetasql::TypeParametersProto&
ResolvedColumnAnnotationsProto::_Internal::type_parameters(const ResolvedColumnAnnotationsProto* msg) {
  return *msg->type_parameters_;
}
void ResolvedColumnAnnotationsProto::clear_type_parameters() {
  if (type_parameters_ != nullptr) type_parameters_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResolvedColumnAnnotationsProto::ResolvedColumnAnnotationsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_list_(arena),
  child_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedColumnAnnotationsProto)
}
ResolvedColumnAnnotationsProto::ResolvedColumnAnnotationsProto(const ResolvedColumnAnnotationsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_list_(from.option_list_),
      child_list_(from.child_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_type_parameters()) {
    type_parameters_ = new ::zetasql::TypeParametersProto(*from.type_parameters_);
  } else {
    type_parameters_ = nullptr;
  }
  if (from._internal_has_collation_name()) {
    collation_name_ = new ::zetasql::AnyResolvedExprProto(*from.collation_name_);
  } else {
    collation_name_ = nullptr;
  }
  not_null_ = from.not_null_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedColumnAnnotationsProto)
}

inline void ResolvedColumnAnnotationsProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&not_null_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(not_null_));
}

ResolvedColumnAnnotationsProto::~ResolvedColumnAnnotationsProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedColumnAnnotationsProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedColumnAnnotationsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete type_parameters_;
  if (this != internal_default_instance()) delete collation_name_;
}

void ResolvedColumnAnnotationsProto::ArenaDtor(void* object) {
  ResolvedColumnAnnotationsProto* _this = reinterpret_cast< ResolvedColumnAnnotationsProto* >(object);
  (void)_this;
}
void ResolvedColumnAnnotationsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedColumnAnnotationsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedColumnAnnotationsProto::InternalSwap(ResolvedColumnAnnotationsProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedColumnAnnotationsProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[60]);
}

// ===================================================================

class ResolvedGeneratedColumnInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGeneratedColumnInfoProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedGeneratedColumnInfoProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expression(const ResolvedGeneratedColumnInfoProto* msg);
  static void set_has_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stored_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedGeneratedColumnInfoProto::_Internal::parent(const ResolvedGeneratedColumnInfoProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedGeneratedColumnInfoProto::_Internal::expression(const ResolvedGeneratedColumnInfoProto* msg) {
  return *msg->expression_;
}
ResolvedGeneratedColumnInfoProto::ResolvedGeneratedColumnInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGeneratedColumnInfoProto)
}
ResolvedGeneratedColumnInfoProto::ResolvedGeneratedColumnInfoProto(const ResolvedGeneratedColumnInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::zetasql::AnyResolvedExprProto(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  stored_mode_ = from.stored_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGeneratedColumnInfoProto)
}

inline void ResolvedGeneratedColumnInfoProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stored_mode_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(stored_mode_));
}

ResolvedGeneratedColumnInfoProto::~ResolvedGeneratedColumnInfoProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGeneratedColumnInfoProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedGeneratedColumnInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expression_;
}

void ResolvedGeneratedColumnInfoProto::ArenaDtor(void* object) {
  ResolvedGeneratedColumnInfoProto* _this = reinterpret_cast< ResolvedGeneratedColumnInfoProto* >(object);
  (void)_this;
}
void ResolvedGeneratedColumnInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedGeneratedColumnInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedGeneratedColumnInfoProto::InternalSwap(ResolvedGeneratedColumnInfoProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGeneratedColumnInfoProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[61]);
}

// ===================================================================

class ResolvedColumnDefaultValueProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedColumnDefaultValueProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedColumnDefaultValueProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& expression(const ResolvedColumnDefaultValueProto* msg);
  static void set_has_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sql(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedColumnDefaultValueProto::_Internal::parent(const ResolvedColumnDefaultValueProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedColumnDefaultValueProto::_Internal::expression(const ResolvedColumnDefaultValueProto* msg) {
  return *msg->expression_;
}
ResolvedColumnDefaultValueProto::ResolvedColumnDefaultValueProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedColumnDefaultValueProto)
}
ResolvedColumnDefaultValueProto::ResolvedColumnDefaultValueProto(const ResolvedColumnDefaultValueProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sql_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sql_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sql()) {
    sql_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sql(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::zetasql::AnyResolvedExprProto(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedColumnDefaultValueProto)
}

inline void ResolvedColumnDefaultValueProto::SharedCtor() {
sql_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sql_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expression_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(expression_));
}

ResolvedColumnDefaultValueProto::~ResolvedColumnDefaultValueProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedColumnDefaultValueProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedColumnDefaultValueProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sql_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expression_;
}

void ResolvedColumnDefaultValueProto::ArenaDtor(void* object) {
  ResolvedColumnDefaultValueProto* _this = reinterpret_cast< ResolvedColumnDefaultValueProto* >(object);
  (void)_this;
}
void ResolvedColumnDefaultValueProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedColumnDefaultValueProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedColumnDefaultValueProto::InternalSwap(ResolvedColumnDefaultValueProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedColumnDefaultValueProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[62]);
}

// ===================================================================

class ResolvedColumnDefinitionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedColumnDefinitionProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedColumnDefinitionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& type(const ResolvedColumnDefinitionProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedColumnAnnotationsProto& annotations(const ResolvedColumnDefinitionProto* msg);
  static void set_has_annotations(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::zetasql::ResolvedColumnProto& column(const ResolvedColumnDefinitionProto* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::ResolvedGeneratedColumnInfoProto& generated_column_info(const ResolvedColumnDefinitionProto* msg);
  static void set_has_generated_column_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zetasql::ResolvedColumnDefaultValueProto& default_value(const ResolvedColumnDefinitionProto* msg);
  static void set_has_default_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedColumnDefinitionProto::_Internal::parent(const ResolvedColumnDefinitionProto* msg) {
  return *msg->parent_;
}
const ::zetasql::TypeProto&
ResolvedColumnDefinitionProto::_Internal::type(const ResolvedColumnDefinitionProto* msg) {
  return *msg->type_;
}
const ::zetasql::ResolvedColumnAnnotationsProto&
ResolvedColumnDefinitionProto::_Internal::annotations(const ResolvedColumnDefinitionProto* msg) {
  return *msg->annotations_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedColumnDefinitionProto::_Internal::column(const ResolvedColumnDefinitionProto* msg) {
  return *msg->column_;
}
const ::zetasql::ResolvedGeneratedColumnInfoProto&
ResolvedColumnDefinitionProto::_Internal::generated_column_info(const ResolvedColumnDefinitionProto* msg) {
  return *msg->generated_column_info_;
}
const ::zetasql::ResolvedColumnDefaultValueProto&
ResolvedColumnDefinitionProto::_Internal::default_value(const ResolvedColumnDefinitionProto* msg) {
  return *msg->default_value_;
}
void ResolvedColumnDefinitionProto::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ResolvedColumnDefinitionProto::clear_column() {
  if (column_ != nullptr) column_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ResolvedColumnDefinitionProto::ResolvedColumnDefinitionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedColumnDefinitionProto)
}
ResolvedColumnDefinitionProto::ResolvedColumnDefinitionProto(const ResolvedColumnDefinitionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::zetasql::TypeProto(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_annotations()) {
    annotations_ = new ::zetasql::ResolvedColumnAnnotationsProto(*from.annotations_);
  } else {
    annotations_ = nullptr;
  }
  if (from._internal_has_column()) {
    column_ = new ::zetasql::ResolvedColumnProto(*from.column_);
  } else {
    column_ = nullptr;
  }
  if (from._internal_has_generated_column_info()) {
    generated_column_info_ = new ::zetasql::ResolvedGeneratedColumnInfoProto(*from.generated_column_info_);
  } else {
    generated_column_info_ = nullptr;
  }
  if (from._internal_has_default_value()) {
    default_value_ = new ::zetasql::ResolvedColumnDefaultValueProto(*from.default_value_);
  } else {
    default_value_ = nullptr;
  }
  is_hidden_ = from.is_hidden_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedColumnDefinitionProto)
}

inline void ResolvedColumnDefinitionProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_hidden_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_hidden_));
}

ResolvedColumnDefinitionProto::~ResolvedColumnDefinitionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedColumnDefinitionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedColumnDefinitionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete annotations_;
  if (this != internal_default_instance()) delete column_;
  if (this != internal_default_instance()) delete generated_column_info_;
  if (this != internal_default_instance()) delete default_value_;
}

void ResolvedColumnDefinitionProto::ArenaDtor(void* object) {
  ResolvedColumnDefinitionProto* _this = reinterpret_cast< ResolvedColumnDefinitionProto* >(object);
  (void)_this;
}
void ResolvedColumnDefinitionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedColumnDefinitionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedColumnDefinitionProto::InternalSwap(ResolvedColumnDefinitionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedColumnDefinitionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[63]);
}

// ===================================================================

class AnyResolvedConstraintProto::_Internal {
 public:
  static const ::zetasql::ResolvedPrimaryKeyProto& resolved_primary_key_node(const AnyResolvedConstraintProto* msg);
  static const ::zetasql::ResolvedForeignKeyProto& resolved_foreign_key_node(const AnyResolvedConstraintProto* msg);
  static const ::zetasql::ResolvedCheckConstraintProto& resolved_check_constraint_node(const AnyResolvedConstraintProto* msg);
};

const ::zetasql::ResolvedPrimaryKeyProto&
AnyResolvedConstraintProto::_Internal::resolved_primary_key_node(const AnyResolvedConstraintProto* msg) {
  return *msg->node_.resolved_primary_key_node_;
}
const ::zetasql::ResolvedForeignKeyProto&
AnyResolvedConstraintProto::_Internal::resolved_foreign_key_node(const AnyResolvedConstraintProto* msg) {
  return *msg->node_.resolved_foreign_key_node_;
}
const ::zetasql::ResolvedCheckConstraintProto&
AnyResolvedConstraintProto::_Internal::resolved_check_constraint_node(const AnyResolvedConstraintProto* msg) {
  return *msg->node_.resolved_check_constraint_node_;
}
void AnyResolvedConstraintProto::set_allocated_resolved_primary_key_node(::zetasql::ResolvedPrimaryKeyProto* resolved_primary_key_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_primary_key_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedPrimaryKeyProto>::GetOwningArena(resolved_primary_key_node);
    if (message_arena != submessage_arena) {
      resolved_primary_key_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_primary_key_node, submessage_arena);
    }
    set_has_resolved_primary_key_node();
    node_.resolved_primary_key_node_ = resolved_primary_key_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedConstraintProto.resolved_primary_key_node)
}
void AnyResolvedConstraintProto::set_allocated_resolved_foreign_key_node(::zetasql::ResolvedForeignKeyProto* resolved_foreign_key_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_foreign_key_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedForeignKeyProto>::GetOwningArena(resolved_foreign_key_node);
    if (message_arena != submessage_arena) {
      resolved_foreign_key_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_foreign_key_node, submessage_arena);
    }
    set_has_resolved_foreign_key_node();
    node_.resolved_foreign_key_node_ = resolved_foreign_key_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedConstraintProto.resolved_foreign_key_node)
}
void AnyResolvedConstraintProto::set_allocated_resolved_check_constraint_node(::zetasql::ResolvedCheckConstraintProto* resolved_check_constraint_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_check_constraint_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCheckConstraintProto>::GetOwningArena(resolved_check_constraint_node);
    if (message_arena != submessage_arena) {
      resolved_check_constraint_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_check_constraint_node, submessage_arena);
    }
    set_has_resolved_check_constraint_node();
    node_.resolved_check_constraint_node_ = resolved_check_constraint_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedConstraintProto.resolved_check_constraint_node)
}
AnyResolvedConstraintProto::AnyResolvedConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedConstraintProto)
}
AnyResolvedConstraintProto::AnyResolvedConstraintProto(const AnyResolvedConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedPrimaryKeyNode: {
      _internal_mutable_resolved_primary_key_node()->::zetasql::ResolvedPrimaryKeyProto::MergeFrom(from._internal_resolved_primary_key_node());
      break;
    }
    case kResolvedForeignKeyNode: {
      _internal_mutable_resolved_foreign_key_node()->::zetasql::ResolvedForeignKeyProto::MergeFrom(from._internal_resolved_foreign_key_node());
      break;
    }
    case kResolvedCheckConstraintNode: {
      _internal_mutable_resolved_check_constraint_node()->::zetasql::ResolvedCheckConstraintProto::MergeFrom(from._internal_resolved_check_constraint_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedConstraintProto)
}

inline void AnyResolvedConstraintProto::SharedCtor() {
clear_has_node();
}

AnyResolvedConstraintProto::~AnyResolvedConstraintProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedConstraintProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedConstraintProto::ArenaDtor(void* object) {
  AnyResolvedConstraintProto* _this = reinterpret_cast< AnyResolvedConstraintProto* >(object);
  (void)_this;
}
void AnyResolvedConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedConstraintProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedConstraintProto)
  switch (node_case()) {
    case kResolvedPrimaryKeyNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_primary_key_node_;
      }
      break;
    }
    case kResolvedForeignKeyNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_foreign_key_node_;
      }
      break;
    }
    case kResolvedCheckConstraintNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_check_constraint_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedConstraintProto::InternalSwap(AnyResolvedConstraintProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedConstraintProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[64]);
}

// ===================================================================

class ResolvedConstraintProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedConstraintProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedConstraintProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedConstraintProto::_Internal::parent(const ResolvedConstraintProto* msg) {
  return *msg->parent_;
}
ResolvedConstraintProto::ResolvedConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedConstraintProto)
}
ResolvedConstraintProto::ResolvedConstraintProto(const ResolvedConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedConstraintProto)
}

inline void ResolvedConstraintProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedConstraintProto::~ResolvedConstraintProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedConstraintProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedConstraintProto::ArenaDtor(void* object) {
  ResolvedConstraintProto* _this = reinterpret_cast< ResolvedConstraintProto* >(object);
  (void)_this;
}
void ResolvedConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedConstraintProto::InternalSwap(ResolvedConstraintProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedConstraintProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[65]);
}

// ===================================================================

class ResolvedPrimaryKeyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedPrimaryKeyProto>()._has_bits_);
  static const ::zetasql::ResolvedConstraintProto& parent(const ResolvedPrimaryKeyProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unenforced(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_constraint_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedConstraintProto&
ResolvedPrimaryKeyProto::_Internal::parent(const ResolvedPrimaryKeyProto* msg) {
  return *msg->parent_;
}
ResolvedPrimaryKeyProto::ResolvedPrimaryKeyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_offset_list_(arena),
  option_list_(arena),
  column_name_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedPrimaryKeyProto)
}
ResolvedPrimaryKeyProto::ResolvedPrimaryKeyProto(const ResolvedPrimaryKeyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      column_offset_list_(from.column_offset_list_),
      option_list_(from.option_list_),
      column_name_list_(from.column_name_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  constraint_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    constraint_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_constraint_name()) {
    constraint_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_constraint_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedConstraintProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  unenforced_ = from.unenforced_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedPrimaryKeyProto)
}

inline void ResolvedPrimaryKeyProto::SharedCtor() {
constraint_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  constraint_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unenforced_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(unenforced_));
}

ResolvedPrimaryKeyProto::~ResolvedPrimaryKeyProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedPrimaryKeyProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedPrimaryKeyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  constraint_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedPrimaryKeyProto::ArenaDtor(void* object) {
  ResolvedPrimaryKeyProto* _this = reinterpret_cast< ResolvedPrimaryKeyProto* >(object);
  (void)_this;
}
void ResolvedPrimaryKeyProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedPrimaryKeyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedPrimaryKeyProto::InternalSwap(ResolvedPrimaryKeyProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedPrimaryKeyProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[66]);
}

// ===================================================================

class ResolvedForeignKeyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedForeignKeyProto>()._has_bits_);
  static const ::zetasql::ResolvedConstraintProto& parent(const ResolvedForeignKeyProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_constraint_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TableRefProto& referenced_table(const ResolvedForeignKeyProto* msg);
  static void set_has_referenced_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_update_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delete_action(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_enforced(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::zetasql::ResolvedConstraintProto&
ResolvedForeignKeyProto::_Internal::parent(const ResolvedForeignKeyProto* msg) {
  return *msg->parent_;
}
const ::zetasql::TableRefProto&
ResolvedForeignKeyProto::_Internal::referenced_table(const ResolvedForeignKeyProto* msg) {
  return *msg->referenced_table_;
}
void ResolvedForeignKeyProto::clear_referenced_table() {
  if (referenced_table_ != nullptr) referenced_table_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ResolvedForeignKeyProto::ResolvedForeignKeyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  referencing_column_offset_list_(arena),
  referenced_column_offset_list_(arena),
  option_list_(arena),
  referencing_column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedForeignKeyProto)
}
ResolvedForeignKeyProto::ResolvedForeignKeyProto(const ResolvedForeignKeyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      referencing_column_offset_list_(from.referencing_column_offset_list_),
      referenced_column_offset_list_(from.referenced_column_offset_list_),
      option_list_(from.option_list_),
      referencing_column_list_(from.referencing_column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  constraint_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    constraint_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_constraint_name()) {
    constraint_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_constraint_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedConstraintProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_referenced_table()) {
    referenced_table_ = new ::zetasql::TableRefProto(*from.referenced_table_);
  } else {
    referenced_table_ = nullptr;
  }
  ::memcpy(&match_mode_, &from.match_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&enforced_) -
    reinterpret_cast<char*>(&match_mode_)) + sizeof(enforced_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedForeignKeyProto)
}

inline void ResolvedForeignKeyProto::SharedCtor() {
constraint_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  constraint_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enforced_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(enforced_));
}

ResolvedForeignKeyProto::~ResolvedForeignKeyProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedForeignKeyProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedForeignKeyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  constraint_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete referenced_table_;
}

void ResolvedForeignKeyProto::ArenaDtor(void* object) {
  ResolvedForeignKeyProto* _this = reinterpret_cast< ResolvedForeignKeyProto* >(object);
  (void)_this;
}
void ResolvedForeignKeyProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedForeignKeyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedForeignKeyProto::InternalSwap(ResolvedForeignKeyProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedForeignKeyProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[67]);
}

// ===================================================================

class ResolvedCheckConstraintProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCheckConstraintProto>()._has_bits_);
  static const ::zetasql::ResolvedConstraintProto& parent(const ResolvedCheckConstraintProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_constraint_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expression(const ResolvedCheckConstraintProto* msg);
  static void set_has_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enforced(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedConstraintProto&
ResolvedCheckConstraintProto::_Internal::parent(const ResolvedCheckConstraintProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCheckConstraintProto::_Internal::expression(const ResolvedCheckConstraintProto* msg) {
  return *msg->expression_;
}
ResolvedCheckConstraintProto::ResolvedCheckConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCheckConstraintProto)
}
ResolvedCheckConstraintProto::ResolvedCheckConstraintProto(const ResolvedCheckConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_list_(from.option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  constraint_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    constraint_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_constraint_name()) {
    constraint_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_constraint_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedConstraintProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::zetasql::AnyResolvedExprProto(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  enforced_ = from.enforced_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCheckConstraintProto)
}

inline void ResolvedCheckConstraintProto::SharedCtor() {
constraint_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  constraint_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enforced_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(enforced_));
}

ResolvedCheckConstraintProto::~ResolvedCheckConstraintProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCheckConstraintProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCheckConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  constraint_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expression_;
}

void ResolvedCheckConstraintProto::ArenaDtor(void* object) {
  ResolvedCheckConstraintProto* _this = reinterpret_cast< ResolvedCheckConstraintProto* >(object);
  (void)_this;
}
void ResolvedCheckConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCheckConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCheckConstraintProto::InternalSwap(ResolvedCheckConstraintProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCheckConstraintProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[68]);
}

// ===================================================================

class ResolvedOutputColumnProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedOutputColumnProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedOutputColumnProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnProto& column(const ResolvedOutputColumnProto* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedOutputColumnProto::_Internal::parent(const ResolvedOutputColumnProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedOutputColumnProto::_Internal::column(const ResolvedOutputColumnProto* msg) {
  return *msg->column_;
}
void ResolvedOutputColumnProto::clear_column() {
  if (column_ != nullptr) column_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ResolvedOutputColumnProto::ResolvedOutputColumnProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedOutputColumnProto)
}
ResolvedOutputColumnProto::ResolvedOutputColumnProto(const ResolvedOutputColumnProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_column()) {
    column_ = new ::zetasql::ResolvedColumnProto(*from.column_);
  } else {
    column_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedOutputColumnProto)
}

inline void ResolvedOutputColumnProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(column_));
}

ResolvedOutputColumnProto::~ResolvedOutputColumnProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedOutputColumnProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedOutputColumnProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete column_;
}

void ResolvedOutputColumnProto::ArenaDtor(void* object) {
  ResolvedOutputColumnProto* _this = reinterpret_cast< ResolvedOutputColumnProto* >(object);
  (void)_this;
}
void ResolvedOutputColumnProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedOutputColumnProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedOutputColumnProto::InternalSwap(ResolvedOutputColumnProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedOutputColumnProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[69]);
}

// ===================================================================

class ResolvedProjectScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedProjectScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedProjectScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedProjectScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedProjectScanProto::_Internal::parent(const ResolvedProjectScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedProjectScanProto::_Internal::input_scan(const ResolvedProjectScanProto* msg) {
  return *msg->input_scan_;
}
ResolvedProjectScanProto::ResolvedProjectScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  expr_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedProjectScanProto)
}
ResolvedProjectScanProto::ResolvedProjectScanProto(const ResolvedProjectScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      expr_list_(from.expr_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_input_scan()) {
    input_scan_ = new ::zetasql::AnyResolvedScanProto(*from.input_scan_);
  } else {
    input_scan_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedProjectScanProto)
}

inline void ResolvedProjectScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_scan_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(input_scan_));
}

ResolvedProjectScanProto::~ResolvedProjectScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedProjectScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedProjectScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete input_scan_;
}

void ResolvedProjectScanProto::ArenaDtor(void* object) {
  ResolvedProjectScanProto* _this = reinterpret_cast< ResolvedProjectScanProto* >(object);
  (void)_this;
}
void ResolvedProjectScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedProjectScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedProjectScanProto::InternalSwap(ResolvedProjectScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedProjectScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[70]);
}

// ===================================================================

class ResolvedTVFScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedTVFScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedTVFScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TableValuedFunctionRefProto& tvf(const ResolvedTVFScanProto* msg);
  static void set_has_tvf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::TVFSignatureProto& signature(const ResolvedTVFScanProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_alias(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::FunctionSignatureProto& function_call_signature(const ResolvedTVFScanProto* msg);
  static void set_has_function_call_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedTVFScanProto::_Internal::parent(const ResolvedTVFScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::TableValuedFunctionRefProto&
ResolvedTVFScanProto::_Internal::tvf(const ResolvedTVFScanProto* msg) {
  return *msg->tvf_;
}
const ::zetasql::TVFSignatureProto&
ResolvedTVFScanProto::_Internal::signature(const ResolvedTVFScanProto* msg) {
  return *msg->signature_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedTVFScanProto::_Internal::function_call_signature(const ResolvedTVFScanProto* msg) {
  return *msg->function_call_signature_;
}
void ResolvedTVFScanProto::clear_tvf() {
  if (tvf_ != nullptr) tvf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ResolvedTVFScanProto::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ResolvedTVFScanProto::clear_function_call_signature() {
  if (function_call_signature_ != nullptr) function_call_signature_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ResolvedTVFScanProto::ResolvedTVFScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  argument_list_(arena),
  column_index_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedTVFScanProto)
}
ResolvedTVFScanProto::ResolvedTVFScanProto(const ResolvedTVFScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argument_list_(from.argument_list_),
      column_index_list_(from.column_index_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_alias()) {
    alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alias(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_tvf()) {
    tvf_ = new ::zetasql::TableValuedFunctionRefProto(*from.tvf_);
  } else {
    tvf_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::zetasql::TVFSignatureProto(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  if (from._internal_has_function_call_signature()) {
    function_call_signature_ = new ::zetasql::FunctionSignatureProto(*from.function_call_signature_);
  } else {
    function_call_signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedTVFScanProto)
}

inline void ResolvedTVFScanProto::SharedCtor() {
alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&function_call_signature_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(function_call_signature_));
}

ResolvedTVFScanProto::~ResolvedTVFScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedTVFScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedTVFScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete tvf_;
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete function_call_signature_;
}

void ResolvedTVFScanProto::ArenaDtor(void* object) {
  ResolvedTVFScanProto* _this = reinterpret_cast< ResolvedTVFScanProto* >(object);
  (void)_this;
}
void ResolvedTVFScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedTVFScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedTVFScanProto::InternalSwap(ResolvedTVFScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedTVFScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[71]);
}

// ===================================================================

class ResolvedGroupRowsScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGroupRowsScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedGroupRowsScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alias(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedGroupRowsScanProto::_Internal::parent(const ResolvedGroupRowsScanProto* msg) {
  return *msg->parent_;
}
ResolvedGroupRowsScanProto::ResolvedGroupRowsScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  input_column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGroupRowsScanProto)
}
ResolvedGroupRowsScanProto::ResolvedGroupRowsScanProto(const ResolvedGroupRowsScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      input_column_list_(from.input_column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_alias()) {
    alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alias(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGroupRowsScanProto)
}

inline void ResolvedGroupRowsScanProto::SharedCtor() {
alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_ = nullptr;
}

ResolvedGroupRowsScanProto::~ResolvedGroupRowsScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGroupRowsScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedGroupRowsScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedGroupRowsScanProto::ArenaDtor(void* object) {
  ResolvedGroupRowsScanProto* _this = reinterpret_cast< ResolvedGroupRowsScanProto* >(object);
  (void)_this;
}
void ResolvedGroupRowsScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedGroupRowsScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedGroupRowsScanProto::InternalSwap(ResolvedGroupRowsScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGroupRowsScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[72]);
}

// ===================================================================

class ResolvedFunctionArgumentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFunctionArgumentProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedFunctionArgumentProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedFunctionArgumentProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& scan(const ResolvedFunctionArgumentProto* msg);
  static void set_has_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedModelProto& model(const ResolvedFunctionArgumentProto* msg);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::ResolvedConnectionProto& connection(const ResolvedFunctionArgumentProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::ResolvedDescriptorProto& descriptor_arg(const ResolvedFunctionArgumentProto* msg);
  static void set_has_descriptor_arg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zetasql::ResolvedInlineLambdaProto& inline_lambda(const ResolvedFunctionArgumentProto* msg);
  static void set_has_inline_lambda(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedFunctionArgumentProto::_Internal::parent(const ResolvedFunctionArgumentProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedFunctionArgumentProto::_Internal::expr(const ResolvedFunctionArgumentProto* msg) {
  return *msg->expr_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedFunctionArgumentProto::_Internal::scan(const ResolvedFunctionArgumentProto* msg) {
  return *msg->scan_;
}
const ::zetasql::ResolvedModelProto&
ResolvedFunctionArgumentProto::_Internal::model(const ResolvedFunctionArgumentProto* msg) {
  return *msg->model_;
}
const ::zetasql::ResolvedConnectionProto&
ResolvedFunctionArgumentProto::_Internal::connection(const ResolvedFunctionArgumentProto* msg) {
  return *msg->connection_;
}
const ::zetasql::ResolvedDescriptorProto&
ResolvedFunctionArgumentProto::_Internal::descriptor_arg(const ResolvedFunctionArgumentProto* msg) {
  return *msg->descriptor_arg_;
}
const ::zetasql::ResolvedInlineLambdaProto&
ResolvedFunctionArgumentProto::_Internal::inline_lambda(const ResolvedFunctionArgumentProto* msg) {
  return *msg->inline_lambda_;
}
void ResolvedFunctionArgumentProto::clear_argument_column_list() {
  argument_column_list_.Clear();
}
ResolvedFunctionArgumentProto::ResolvedFunctionArgumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  argument_column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFunctionArgumentProto)
}
ResolvedFunctionArgumentProto::ResolvedFunctionArgumentProto(const ResolvedFunctionArgumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argument_column_list_(from.argument_column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expr()) {
    expr_ = new ::zetasql::AnyResolvedExprProto(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  if (from._internal_has_scan()) {
    scan_ = new ::zetasql::AnyResolvedScanProto(*from.scan_);
  } else {
    scan_ = nullptr;
  }
  if (from._internal_has_model()) {
    model_ = new ::zetasql::ResolvedModelProto(*from.model_);
  } else {
    model_ = nullptr;
  }
  if (from._internal_has_connection()) {
    connection_ = new ::zetasql::ResolvedConnectionProto(*from.connection_);
  } else {
    connection_ = nullptr;
  }
  if (from._internal_has_descriptor_arg()) {
    descriptor_arg_ = new ::zetasql::ResolvedDescriptorProto(*from.descriptor_arg_);
  } else {
    descriptor_arg_ = nullptr;
  }
  if (from._internal_has_inline_lambda()) {
    inline_lambda_ = new ::zetasql::ResolvedInlineLambdaProto(*from.inline_lambda_);
  } else {
    inline_lambda_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFunctionArgumentProto)
}

inline void ResolvedFunctionArgumentProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inline_lambda_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(inline_lambda_));
}

ResolvedFunctionArgumentProto::~ResolvedFunctionArgumentProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFunctionArgumentProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedFunctionArgumentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expr_;
  if (this != internal_default_instance()) delete scan_;
  if (this != internal_default_instance()) delete model_;
  if (this != internal_default_instance()) delete connection_;
  if (this != internal_default_instance()) delete descriptor_arg_;
  if (this != internal_default_instance()) delete inline_lambda_;
}

void ResolvedFunctionArgumentProto::ArenaDtor(void* object) {
  ResolvedFunctionArgumentProto* _this = reinterpret_cast< ResolvedFunctionArgumentProto* >(object);
  (void)_this;
}
void ResolvedFunctionArgumentProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedFunctionArgumentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedFunctionArgumentProto::InternalSwap(ResolvedFunctionArgumentProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFunctionArgumentProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[73]);
}

// ===================================================================

class AnyResolvedStatementProto::_Internal {
 public:
  static const ::zetasql::ResolvedExplainStmtProto& resolved_explain_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedQueryStmtProto& resolved_query_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::AnyResolvedCreateStatementProto& resolved_create_statement_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedExportDataStmtProto& resolved_export_data_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDefineTableStmtProto& resolved_define_table_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDescribeStmtProto& resolved_describe_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedShowStmtProto& resolved_show_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedBeginStmtProto& resolved_begin_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedCommitStmtProto& resolved_commit_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedRollbackStmtProto& resolved_rollback_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropStmtProto& resolved_drop_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedInsertStmtProto& resolved_insert_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDeleteStmtProto& resolved_delete_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedUpdateStmtProto& resolved_update_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::AnyResolvedGrantOrRevokeStmtProto& resolved_grant_or_revoke_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedAlterTableSetOptionsStmtProto& resolved_alter_table_set_options_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedRenameStmtProto& resolved_rename_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedCreateRowAccessPolicyStmtProto& resolved_create_row_access_policy_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropRowAccessPolicyStmtProto& resolved_drop_row_access_policy_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropFunctionStmtProto& resolved_drop_function_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedCallStmtProto& resolved_call_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedImportStmtProto& resolved_import_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedModuleStmtProto& resolved_module_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedCreateDatabaseStmtProto& resolved_create_database_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedAssertStmtProto& resolved_assert_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedMergeStmtProto& resolved_merge_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::AnyResolvedAlterObjectStmtProto& resolved_alter_object_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedSetTransactionStmtProto& resolved_set_transaction_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropMaterializedViewStmtProto& resolved_drop_materialized_view_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedStartBatchStmtProto& resolved_start_batch_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedRunBatchStmtProto& resolved_run_batch_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedAbortBatchStmtProto& resolved_abort_batch_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedTruncateStmtProto& resolved_truncate_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedExecuteImmediateStmtProto& resolved_execute_immediate_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedAssignmentStmtProto& resolved_assignment_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedExportModelStmtProto& resolved_export_model_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropTableFunctionStmtProto& resolved_drop_table_function_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedCloneDataStmtProto& resolved_clone_data_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedAnalyzeStmtProto& resolved_analyze_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropSnapshotTableStmtProto& resolved_drop_snapshot_table_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedAuxLoadDataStmtProto& resolved_aux_load_data_stmt_node(const AnyResolvedStatementProto* msg);
  static const ::zetasql::ResolvedDropSearchIndexStmtProto& resolved_drop_search_index_stmt_node(const AnyResolvedStatementProto* msg);
};

const ::zetasql::ResolvedExplainStmtProto&
AnyResolvedStatementProto::_Internal::resolved_explain_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_explain_stmt_node_;
}
const ::zetasql::ResolvedQueryStmtProto&
AnyResolvedStatementProto::_Internal::resolved_query_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_query_stmt_node_;
}
const ::zetasql::AnyResolvedCreateStatementProto&
AnyResolvedStatementProto::_Internal::resolved_create_statement_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_create_statement_node_;
}
const ::zetasql::ResolvedExportDataStmtProto&
AnyResolvedStatementProto::_Internal::resolved_export_data_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_export_data_stmt_node_;
}
const ::zetasql::ResolvedDefineTableStmtProto&
AnyResolvedStatementProto::_Internal::resolved_define_table_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_define_table_stmt_node_;
}
const ::zetasql::ResolvedDescribeStmtProto&
AnyResolvedStatementProto::_Internal::resolved_describe_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_describe_stmt_node_;
}
const ::zetasql::ResolvedShowStmtProto&
AnyResolvedStatementProto::_Internal::resolved_show_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_show_stmt_node_;
}
const ::zetasql::ResolvedBeginStmtProto&
AnyResolvedStatementProto::_Internal::resolved_begin_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_begin_stmt_node_;
}
const ::zetasql::ResolvedCommitStmtProto&
AnyResolvedStatementProto::_Internal::resolved_commit_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_commit_stmt_node_;
}
const ::zetasql::ResolvedRollbackStmtProto&
AnyResolvedStatementProto::_Internal::resolved_rollback_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_rollback_stmt_node_;
}
const ::zetasql::ResolvedDropStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_drop_stmt_node_;
}
const ::zetasql::ResolvedInsertStmtProto&
AnyResolvedStatementProto::_Internal::resolved_insert_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_insert_stmt_node_;
}
const ::zetasql::ResolvedDeleteStmtProto&
AnyResolvedStatementProto::_Internal::resolved_delete_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_delete_stmt_node_;
}
const ::zetasql::ResolvedUpdateStmtProto&
AnyResolvedStatementProto::_Internal::resolved_update_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_update_stmt_node_;
}
const ::zetasql::AnyResolvedGrantOrRevokeStmtProto&
AnyResolvedStatementProto::_Internal::resolved_grant_or_revoke_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_grant_or_revoke_stmt_node_;
}
const ::zetasql::ResolvedAlterTableSetOptionsStmtProto&
AnyResolvedStatementProto::_Internal::resolved_alter_table_set_options_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_alter_table_set_options_stmt_node_;
}
const ::zetasql::ResolvedRenameStmtProto&
AnyResolvedStatementProto::_Internal::resolved_rename_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_rename_stmt_node_;
}
const ::zetasql::ResolvedCreateRowAccessPolicyStmtProto&
AnyResolvedStatementProto::_Internal::resolved_create_row_access_policy_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_create_row_access_policy_stmt_node_;
}
const ::zetasql::ResolvedDropRowAccessPolicyStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_row_access_policy_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_drop_row_access_policy_stmt_node_;
}
const ::zetasql::ResolvedDropFunctionStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_function_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_drop_function_stmt_node_;
}
const ::zetasql::ResolvedCallStmtProto&
AnyResolvedStatementProto::_Internal::resolved_call_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_call_stmt_node_;
}
const ::zetasql::ResolvedImportStmtProto&
AnyResolvedStatementProto::_Internal::resolved_import_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_import_stmt_node_;
}
const ::zetasql::ResolvedModuleStmtProto&
AnyResolvedStatementProto::_Internal::resolved_module_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_module_stmt_node_;
}
const ::zetasql::ResolvedCreateDatabaseStmtProto&
AnyResolvedStatementProto::_Internal::resolved_create_database_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_create_database_stmt_node_;
}
const ::zetasql::ResolvedAssertStmtProto&
AnyResolvedStatementProto::_Internal::resolved_assert_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_assert_stmt_node_;
}
const ::zetasql::ResolvedMergeStmtProto&
AnyResolvedStatementProto::_Internal::resolved_merge_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_merge_stmt_node_;
}
const ::zetasql::AnyResolvedAlterObjectStmtProto&
AnyResolvedStatementProto::_Internal::resolved_alter_object_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_alter_object_stmt_node_;
}
const ::zetasql::ResolvedSetTransactionStmtProto&
AnyResolvedStatementProto::_Internal::resolved_set_transaction_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_set_transaction_stmt_node_;
}
const ::zetasql::ResolvedDropMaterializedViewStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_materialized_view_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_drop_materialized_view_stmt_node_;
}
const ::zetasql::ResolvedStartBatchStmtProto&
AnyResolvedStatementProto::_Internal::resolved_start_batch_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_start_batch_stmt_node_;
}
const ::zetasql::ResolvedRunBatchStmtProto&
AnyResolvedStatementProto::_Internal::resolved_run_batch_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_run_batch_stmt_node_;
}
const ::zetasql::ResolvedAbortBatchStmtProto&
AnyResolvedStatementProto::_Internal::resolved_abort_batch_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_abort_batch_stmt_node_;
}
const ::zetasql::ResolvedTruncateStmtProto&
AnyResolvedStatementProto::_Internal::resolved_truncate_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_truncate_stmt_node_;
}
const ::zetasql::ResolvedExecuteImmediateStmtProto&
AnyResolvedStatementProto::_Internal::resolved_execute_immediate_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_execute_immediate_stmt_node_;
}
const ::zetasql::ResolvedAssignmentStmtProto&
AnyResolvedStatementProto::_Internal::resolved_assignment_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_assignment_stmt_node_;
}
const ::zetasql::ResolvedExportModelStmtProto&
AnyResolvedStatementProto::_Internal::resolved_export_model_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_export_model_stmt_node_;
}
const ::zetasql::ResolvedDropTableFunctionStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_table_function_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_drop_table_function_stmt_node_;
}
const ::zetasql::ResolvedCloneDataStmtProto&
AnyResolvedStatementProto::_Internal::resolved_clone_data_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_clone_data_stmt_node_;
}
const ::zetasql::ResolvedAnalyzeStmtProto&
AnyResolvedStatementProto::_Internal::resolved_analyze_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_analyze_stmt_node_;
}
const ::zetasql::ResolvedDropSnapshotTableStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_snapshot_table_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_drop_snapshot_table_stmt_node_;
}
const ::zetasql::ResolvedAuxLoadDataStmtProto&
AnyResolvedStatementProto::_Internal::resolved_aux_load_data_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_aux_load_data_stmt_node_;
}
const ::zetasql::ResolvedDropSearchIndexStmtProto&
AnyResolvedStatementProto::_Internal::resolved_drop_search_index_stmt_node(const AnyResolvedStatementProto* msg) {
  return *msg->node_.resolved_drop_search_index_stmt_node_;
}
void AnyResolvedStatementProto::set_allocated_resolved_explain_stmt_node(::zetasql::ResolvedExplainStmtProto* resolved_explain_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_explain_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedExplainStmtProto>::GetOwningArena(resolved_explain_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_explain_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_explain_stmt_node, submessage_arena);
    }
    set_has_resolved_explain_stmt_node();
    node_.resolved_explain_stmt_node_ = resolved_explain_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_explain_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_query_stmt_node(::zetasql::ResolvedQueryStmtProto* resolved_query_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_query_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedQueryStmtProto>::GetOwningArena(resolved_query_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_query_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_query_stmt_node, submessage_arena);
    }
    set_has_resolved_query_stmt_node();
    node_.resolved_query_stmt_node_ = resolved_query_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_query_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_create_statement_node(::zetasql::AnyResolvedCreateStatementProto* resolved_create_statement_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_statement_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedCreateStatementProto>::GetOwningArena(resolved_create_statement_node);
    if (message_arena != submessage_arena) {
      resolved_create_statement_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_statement_node, submessage_arena);
    }
    set_has_resolved_create_statement_node();
    node_.resolved_create_statement_node_ = resolved_create_statement_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_create_statement_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_export_data_stmt_node(::zetasql::ResolvedExportDataStmtProto* resolved_export_data_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_export_data_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedExportDataStmtProto>::GetOwningArena(resolved_export_data_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_export_data_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_export_data_stmt_node, submessage_arena);
    }
    set_has_resolved_export_data_stmt_node();
    node_.resolved_export_data_stmt_node_ = resolved_export_data_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_export_data_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_define_table_stmt_node(::zetasql::ResolvedDefineTableStmtProto* resolved_define_table_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_define_table_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDefineTableStmtProto>::GetOwningArena(resolved_define_table_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_define_table_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_define_table_stmt_node, submessage_arena);
    }
    set_has_resolved_define_table_stmt_node();
    node_.resolved_define_table_stmt_node_ = resolved_define_table_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_define_table_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_describe_stmt_node(::zetasql::ResolvedDescribeStmtProto* resolved_describe_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_describe_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDescribeStmtProto>::GetOwningArena(resolved_describe_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_describe_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_describe_stmt_node, submessage_arena);
    }
    set_has_resolved_describe_stmt_node();
    node_.resolved_describe_stmt_node_ = resolved_describe_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_describe_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_show_stmt_node(::zetasql::ResolvedShowStmtProto* resolved_show_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_show_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedShowStmtProto>::GetOwningArena(resolved_show_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_show_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_show_stmt_node, submessage_arena);
    }
    set_has_resolved_show_stmt_node();
    node_.resolved_show_stmt_node_ = resolved_show_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_show_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_begin_stmt_node(::zetasql::ResolvedBeginStmtProto* resolved_begin_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_begin_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedBeginStmtProto>::GetOwningArena(resolved_begin_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_begin_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_begin_stmt_node, submessage_arena);
    }
    set_has_resolved_begin_stmt_node();
    node_.resolved_begin_stmt_node_ = resolved_begin_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_begin_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_commit_stmt_node(::zetasql::ResolvedCommitStmtProto* resolved_commit_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_commit_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCommitStmtProto>::GetOwningArena(resolved_commit_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_commit_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_commit_stmt_node, submessage_arena);
    }
    set_has_resolved_commit_stmt_node();
    node_.resolved_commit_stmt_node_ = resolved_commit_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_commit_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_rollback_stmt_node(::zetasql::ResolvedRollbackStmtProto* resolved_rollback_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_rollback_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedRollbackStmtProto>::GetOwningArena(resolved_rollback_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_rollback_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_rollback_stmt_node, submessage_arena);
    }
    set_has_resolved_rollback_stmt_node();
    node_.resolved_rollback_stmt_node_ = resolved_rollback_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_rollback_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_stmt_node(::zetasql::ResolvedDropStmtProto* resolved_drop_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDropStmtProto>::GetOwningArena(resolved_drop_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_stmt_node();
    node_.resolved_drop_stmt_node_ = resolved_drop_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_insert_stmt_node(::zetasql::ResolvedInsertStmtProto* resolved_insert_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_insert_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedInsertStmtProto>::GetOwningArena(resolved_insert_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_insert_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_insert_stmt_node, submessage_arena);
    }
    set_has_resolved_insert_stmt_node();
    node_.resolved_insert_stmt_node_ = resolved_insert_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_insert_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_delete_stmt_node(::zetasql::ResolvedDeleteStmtProto* resolved_delete_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_delete_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDeleteStmtProto>::GetOwningArena(resolved_delete_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_delete_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_delete_stmt_node, submessage_arena);
    }
    set_has_resolved_delete_stmt_node();
    node_.resolved_delete_stmt_node_ = resolved_delete_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_delete_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_update_stmt_node(::zetasql::ResolvedUpdateStmtProto* resolved_update_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_update_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedUpdateStmtProto>::GetOwningArena(resolved_update_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_update_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_update_stmt_node, submessage_arena);
    }
    set_has_resolved_update_stmt_node();
    node_.resolved_update_stmt_node_ = resolved_update_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_update_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_grant_or_revoke_stmt_node(::zetasql::AnyResolvedGrantOrRevokeStmtProto* resolved_grant_or_revoke_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_grant_or_revoke_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedGrantOrRevokeStmtProto>::GetOwningArena(resolved_grant_or_revoke_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_grant_or_revoke_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_grant_or_revoke_stmt_node, submessage_arena);
    }
    set_has_resolved_grant_or_revoke_stmt_node();
    node_.resolved_grant_or_revoke_stmt_node_ = resolved_grant_or_revoke_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_grant_or_revoke_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_alter_table_set_options_stmt_node(::zetasql::ResolvedAlterTableSetOptionsStmtProto* resolved_alter_table_set_options_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_table_set_options_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAlterTableSetOptionsStmtProto>::GetOwningArena(resolved_alter_table_set_options_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_table_set_options_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_table_set_options_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_table_set_options_stmt_node();
    node_.resolved_alter_table_set_options_stmt_node_ = resolved_alter_table_set_options_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_alter_table_set_options_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_rename_stmt_node(::zetasql::ResolvedRenameStmtProto* resolved_rename_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_rename_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedRenameStmtProto>::GetOwningArena(resolved_rename_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_rename_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_rename_stmt_node, submessage_arena);
    }
    set_has_resolved_rename_stmt_node();
    node_.resolved_rename_stmt_node_ = resolved_rename_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_rename_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_create_row_access_policy_stmt_node(::zetasql::ResolvedCreateRowAccessPolicyStmtProto* resolved_create_row_access_policy_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_row_access_policy_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateRowAccessPolicyStmtProto>::GetOwningArena(resolved_create_row_access_policy_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_row_access_policy_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_row_access_policy_stmt_node, submessage_arena);
    }
    set_has_resolved_create_row_access_policy_stmt_node();
    node_.resolved_create_row_access_policy_stmt_node_ = resolved_create_row_access_policy_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_create_row_access_policy_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_row_access_policy_stmt_node(::zetasql::ResolvedDropRowAccessPolicyStmtProto* resolved_drop_row_access_policy_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_row_access_policy_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDropRowAccessPolicyStmtProto>::GetOwningArena(resolved_drop_row_access_policy_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_row_access_policy_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_row_access_policy_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_row_access_policy_stmt_node();
    node_.resolved_drop_row_access_policy_stmt_node_ = resolved_drop_row_access_policy_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_row_access_policy_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_function_stmt_node(::zetasql::ResolvedDropFunctionStmtProto* resolved_drop_function_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_function_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDropFunctionStmtProto>::GetOwningArena(resolved_drop_function_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_function_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_function_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_function_stmt_node();
    node_.resolved_drop_function_stmt_node_ = resolved_drop_function_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_function_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_call_stmt_node(::zetasql::ResolvedCallStmtProto* resolved_call_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_call_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCallStmtProto>::GetOwningArena(resolved_call_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_call_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_call_stmt_node, submessage_arena);
    }
    set_has_resolved_call_stmt_node();
    node_.resolved_call_stmt_node_ = resolved_call_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_call_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_import_stmt_node(::zetasql::ResolvedImportStmtProto* resolved_import_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_import_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedImportStmtProto>::GetOwningArena(resolved_import_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_import_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_import_stmt_node, submessage_arena);
    }
    set_has_resolved_import_stmt_node();
    node_.resolved_import_stmt_node_ = resolved_import_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_import_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_module_stmt_node(::zetasql::ResolvedModuleStmtProto* resolved_module_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_module_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedModuleStmtProto>::GetOwningArena(resolved_module_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_module_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_module_stmt_node, submessage_arena);
    }
    set_has_resolved_module_stmt_node();
    node_.resolved_module_stmt_node_ = resolved_module_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_module_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_create_database_stmt_node(::zetasql::ResolvedCreateDatabaseStmtProto* resolved_create_database_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_database_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateDatabaseStmtProto>::GetOwningArena(resolved_create_database_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_database_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_database_stmt_node, submessage_arena);
    }
    set_has_resolved_create_database_stmt_node();
    node_.resolved_create_database_stmt_node_ = resolved_create_database_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_create_database_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_assert_stmt_node(::zetasql::ResolvedAssertStmtProto* resolved_assert_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_assert_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAssertStmtProto>::GetOwningArena(resolved_assert_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_assert_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_assert_stmt_node, submessage_arena);
    }
    set_has_resolved_assert_stmt_node();
    node_.resolved_assert_stmt_node_ = resolved_assert_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_assert_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_merge_stmt_node(::zetasql::ResolvedMergeStmtProto* resolved_merge_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_merge_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedMergeStmtProto>::GetOwningArena(resolved_merge_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_merge_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_merge_stmt_node, submessage_arena);
    }
    set_has_resolved_merge_stmt_node();
    node_.resolved_merge_stmt_node_ = resolved_merge_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_merge_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_alter_object_stmt_node(::zetasql::AnyResolvedAlterObjectStmtProto* resolved_alter_object_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_object_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedAlterObjectStmtProto>::GetOwningArena(resolved_alter_object_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_object_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_object_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_object_stmt_node();
    node_.resolved_alter_object_stmt_node_ = resolved_alter_object_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_alter_object_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_set_transaction_stmt_node(::zetasql::ResolvedSetTransactionStmtProto* resolved_set_transaction_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_set_transaction_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedSetTransactionStmtProto>::GetOwningArena(resolved_set_transaction_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_set_transaction_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_set_transaction_stmt_node, submessage_arena);
    }
    set_has_resolved_set_transaction_stmt_node();
    node_.resolved_set_transaction_stmt_node_ = resolved_set_transaction_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_set_transaction_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_materialized_view_stmt_node(::zetasql::ResolvedDropMaterializedViewStmtProto* resolved_drop_materialized_view_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_materialized_view_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDropMaterializedViewStmtProto>::GetOwningArena(resolved_drop_materialized_view_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_materialized_view_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_materialized_view_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_materialized_view_stmt_node();
    node_.resolved_drop_materialized_view_stmt_node_ = resolved_drop_materialized_view_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_materialized_view_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_start_batch_stmt_node(::zetasql::ResolvedStartBatchStmtProto* resolved_start_batch_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_start_batch_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedStartBatchStmtProto>::GetOwningArena(resolved_start_batch_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_start_batch_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_start_batch_stmt_node, submessage_arena);
    }
    set_has_resolved_start_batch_stmt_node();
    node_.resolved_start_batch_stmt_node_ = resolved_start_batch_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_start_batch_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_run_batch_stmt_node(::zetasql::ResolvedRunBatchStmtProto* resolved_run_batch_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_run_batch_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedRunBatchStmtProto>::GetOwningArena(resolved_run_batch_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_run_batch_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_run_batch_stmt_node, submessage_arena);
    }
    set_has_resolved_run_batch_stmt_node();
    node_.resolved_run_batch_stmt_node_ = resolved_run_batch_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_run_batch_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_abort_batch_stmt_node(::zetasql::ResolvedAbortBatchStmtProto* resolved_abort_batch_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_abort_batch_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAbortBatchStmtProto>::GetOwningArena(resolved_abort_batch_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_abort_batch_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_abort_batch_stmt_node, submessage_arena);
    }
    set_has_resolved_abort_batch_stmt_node();
    node_.resolved_abort_batch_stmt_node_ = resolved_abort_batch_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_abort_batch_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_truncate_stmt_node(::zetasql::ResolvedTruncateStmtProto* resolved_truncate_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_truncate_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedTruncateStmtProto>::GetOwningArena(resolved_truncate_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_truncate_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_truncate_stmt_node, submessage_arena);
    }
    set_has_resolved_truncate_stmt_node();
    node_.resolved_truncate_stmt_node_ = resolved_truncate_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_truncate_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_execute_immediate_stmt_node(::zetasql::ResolvedExecuteImmediateStmtProto* resolved_execute_immediate_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_execute_immediate_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedExecuteImmediateStmtProto>::GetOwningArena(resolved_execute_immediate_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_execute_immediate_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_execute_immediate_stmt_node, submessage_arena);
    }
    set_has_resolved_execute_immediate_stmt_node();
    node_.resolved_execute_immediate_stmt_node_ = resolved_execute_immediate_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_execute_immediate_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_assignment_stmt_node(::zetasql::ResolvedAssignmentStmtProto* resolved_assignment_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_assignment_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAssignmentStmtProto>::GetOwningArena(resolved_assignment_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_assignment_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_assignment_stmt_node, submessage_arena);
    }
    set_has_resolved_assignment_stmt_node();
    node_.resolved_assignment_stmt_node_ = resolved_assignment_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_assignment_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_export_model_stmt_node(::zetasql::ResolvedExportModelStmtProto* resolved_export_model_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_export_model_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedExportModelStmtProto>::GetOwningArena(resolved_export_model_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_export_model_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_export_model_stmt_node, submessage_arena);
    }
    set_has_resolved_export_model_stmt_node();
    node_.resolved_export_model_stmt_node_ = resolved_export_model_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_export_model_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_table_function_stmt_node(::zetasql::ResolvedDropTableFunctionStmtProto* resolved_drop_table_function_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_table_function_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDropTableFunctionStmtProto>::GetOwningArena(resolved_drop_table_function_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_table_function_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_table_function_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_table_function_stmt_node();
    node_.resolved_drop_table_function_stmt_node_ = resolved_drop_table_function_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_table_function_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_clone_data_stmt_node(::zetasql::ResolvedCloneDataStmtProto* resolved_clone_data_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_clone_data_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCloneDataStmtProto>::GetOwningArena(resolved_clone_data_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_clone_data_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_clone_data_stmt_node, submessage_arena);
    }
    set_has_resolved_clone_data_stmt_node();
    node_.resolved_clone_data_stmt_node_ = resolved_clone_data_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_clone_data_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_analyze_stmt_node(::zetasql::ResolvedAnalyzeStmtProto* resolved_analyze_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_analyze_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAnalyzeStmtProto>::GetOwningArena(resolved_analyze_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_analyze_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_analyze_stmt_node, submessage_arena);
    }
    set_has_resolved_analyze_stmt_node();
    node_.resolved_analyze_stmt_node_ = resolved_analyze_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_analyze_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_snapshot_table_stmt_node(::zetasql::ResolvedDropSnapshotTableStmtProto* resolved_drop_snapshot_table_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_snapshot_table_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDropSnapshotTableStmtProto>::GetOwningArena(resolved_drop_snapshot_table_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_snapshot_table_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_snapshot_table_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_snapshot_table_stmt_node();
    node_.resolved_drop_snapshot_table_stmt_node_ = resolved_drop_snapshot_table_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_snapshot_table_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_aux_load_data_stmt_node(::zetasql::ResolvedAuxLoadDataStmtProto* resolved_aux_load_data_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_aux_load_data_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAuxLoadDataStmtProto>::GetOwningArena(resolved_aux_load_data_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_aux_load_data_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_aux_load_data_stmt_node, submessage_arena);
    }
    set_has_resolved_aux_load_data_stmt_node();
    node_.resolved_aux_load_data_stmt_node_ = resolved_aux_load_data_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_aux_load_data_stmt_node)
}
void AnyResolvedStatementProto::set_allocated_resolved_drop_search_index_stmt_node(::zetasql::ResolvedDropSearchIndexStmtProto* resolved_drop_search_index_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_search_index_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDropSearchIndexStmtProto>::GetOwningArena(resolved_drop_search_index_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_drop_search_index_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_search_index_stmt_node, submessage_arena);
    }
    set_has_resolved_drop_search_index_stmt_node();
    node_.resolved_drop_search_index_stmt_node_ = resolved_drop_search_index_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedStatementProto.resolved_drop_search_index_stmt_node)
}
AnyResolvedStatementProto::AnyResolvedStatementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedStatementProto)
}
AnyResolvedStatementProto::AnyResolvedStatementProto(const AnyResolvedStatementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedExplainStmtNode: {
      _internal_mutable_resolved_explain_stmt_node()->::zetasql::ResolvedExplainStmtProto::MergeFrom(from._internal_resolved_explain_stmt_node());
      break;
    }
    case kResolvedQueryStmtNode: {
      _internal_mutable_resolved_query_stmt_node()->::zetasql::ResolvedQueryStmtProto::MergeFrom(from._internal_resolved_query_stmt_node());
      break;
    }
    case kResolvedCreateStatementNode: {
      _internal_mutable_resolved_create_statement_node()->::zetasql::AnyResolvedCreateStatementProto::MergeFrom(from._internal_resolved_create_statement_node());
      break;
    }
    case kResolvedExportDataStmtNode: {
      _internal_mutable_resolved_export_data_stmt_node()->::zetasql::ResolvedExportDataStmtProto::MergeFrom(from._internal_resolved_export_data_stmt_node());
      break;
    }
    case kResolvedDefineTableStmtNode: {
      _internal_mutable_resolved_define_table_stmt_node()->::zetasql::ResolvedDefineTableStmtProto::MergeFrom(from._internal_resolved_define_table_stmt_node());
      break;
    }
    case kResolvedDescribeStmtNode: {
      _internal_mutable_resolved_describe_stmt_node()->::zetasql::ResolvedDescribeStmtProto::MergeFrom(from._internal_resolved_describe_stmt_node());
      break;
    }
    case kResolvedShowStmtNode: {
      _internal_mutable_resolved_show_stmt_node()->::zetasql::ResolvedShowStmtProto::MergeFrom(from._internal_resolved_show_stmt_node());
      break;
    }
    case kResolvedBeginStmtNode: {
      _internal_mutable_resolved_begin_stmt_node()->::zetasql::ResolvedBeginStmtProto::MergeFrom(from._internal_resolved_begin_stmt_node());
      break;
    }
    case kResolvedCommitStmtNode: {
      _internal_mutable_resolved_commit_stmt_node()->::zetasql::ResolvedCommitStmtProto::MergeFrom(from._internal_resolved_commit_stmt_node());
      break;
    }
    case kResolvedRollbackStmtNode: {
      _internal_mutable_resolved_rollback_stmt_node()->::zetasql::ResolvedRollbackStmtProto::MergeFrom(from._internal_resolved_rollback_stmt_node());
      break;
    }
    case kResolvedDropStmtNode: {
      _internal_mutable_resolved_drop_stmt_node()->::zetasql::ResolvedDropStmtProto::MergeFrom(from._internal_resolved_drop_stmt_node());
      break;
    }
    case kResolvedInsertStmtNode: {
      _internal_mutable_resolved_insert_stmt_node()->::zetasql::ResolvedInsertStmtProto::MergeFrom(from._internal_resolved_insert_stmt_node());
      break;
    }
    case kResolvedDeleteStmtNode: {
      _internal_mutable_resolved_delete_stmt_node()->::zetasql::ResolvedDeleteStmtProto::MergeFrom(from._internal_resolved_delete_stmt_node());
      break;
    }
    case kResolvedUpdateStmtNode: {
      _internal_mutable_resolved_update_stmt_node()->::zetasql::ResolvedUpdateStmtProto::MergeFrom(from._internal_resolved_update_stmt_node());
      break;
    }
    case kResolvedGrantOrRevokeStmtNode: {
      _internal_mutable_resolved_grant_or_revoke_stmt_node()->::zetasql::AnyResolvedGrantOrRevokeStmtProto::MergeFrom(from._internal_resolved_grant_or_revoke_stmt_node());
      break;
    }
    case kResolvedAlterTableSetOptionsStmtNode: {
      _internal_mutable_resolved_alter_table_set_options_stmt_node()->::zetasql::ResolvedAlterTableSetOptionsStmtProto::MergeFrom(from._internal_resolved_alter_table_set_options_stmt_node());
      break;
    }
    case kResolvedRenameStmtNode: {
      _internal_mutable_resolved_rename_stmt_node()->::zetasql::ResolvedRenameStmtProto::MergeFrom(from._internal_resolved_rename_stmt_node());
      break;
    }
    case kResolvedCreateRowAccessPolicyStmtNode: {
      _internal_mutable_resolved_create_row_access_policy_stmt_node()->::zetasql::ResolvedCreateRowAccessPolicyStmtProto::MergeFrom(from._internal_resolved_create_row_access_policy_stmt_node());
      break;
    }
    case kResolvedDropRowAccessPolicyStmtNode: {
      _internal_mutable_resolved_drop_row_access_policy_stmt_node()->::zetasql::ResolvedDropRowAccessPolicyStmtProto::MergeFrom(from._internal_resolved_drop_row_access_policy_stmt_node());
      break;
    }
    case kResolvedDropFunctionStmtNode: {
      _internal_mutable_resolved_drop_function_stmt_node()->::zetasql::ResolvedDropFunctionStmtProto::MergeFrom(from._internal_resolved_drop_function_stmt_node());
      break;
    }
    case kResolvedCallStmtNode: {
      _internal_mutable_resolved_call_stmt_node()->::zetasql::ResolvedCallStmtProto::MergeFrom(from._internal_resolved_call_stmt_node());
      break;
    }
    case kResolvedImportStmtNode: {
      _internal_mutable_resolved_import_stmt_node()->::zetasql::ResolvedImportStmtProto::MergeFrom(from._internal_resolved_import_stmt_node());
      break;
    }
    case kResolvedModuleStmtNode: {
      _internal_mutable_resolved_module_stmt_node()->::zetasql::ResolvedModuleStmtProto::MergeFrom(from._internal_resolved_module_stmt_node());
      break;
    }
    case kResolvedCreateDatabaseStmtNode: {
      _internal_mutable_resolved_create_database_stmt_node()->::zetasql::ResolvedCreateDatabaseStmtProto::MergeFrom(from._internal_resolved_create_database_stmt_node());
      break;
    }
    case kResolvedAssertStmtNode: {
      _internal_mutable_resolved_assert_stmt_node()->::zetasql::ResolvedAssertStmtProto::MergeFrom(from._internal_resolved_assert_stmt_node());
      break;
    }
    case kResolvedMergeStmtNode: {
      _internal_mutable_resolved_merge_stmt_node()->::zetasql::ResolvedMergeStmtProto::MergeFrom(from._internal_resolved_merge_stmt_node());
      break;
    }
    case kResolvedAlterObjectStmtNode: {
      _internal_mutable_resolved_alter_object_stmt_node()->::zetasql::AnyResolvedAlterObjectStmtProto::MergeFrom(from._internal_resolved_alter_object_stmt_node());
      break;
    }
    case kResolvedSetTransactionStmtNode: {
      _internal_mutable_resolved_set_transaction_stmt_node()->::zetasql::ResolvedSetTransactionStmtProto::MergeFrom(from._internal_resolved_set_transaction_stmt_node());
      break;
    }
    case kResolvedDropMaterializedViewStmtNode: {
      _internal_mutable_resolved_drop_materialized_view_stmt_node()->::zetasql::ResolvedDropMaterializedViewStmtProto::MergeFrom(from._internal_resolved_drop_materialized_view_stmt_node());
      break;
    }
    case kResolvedStartBatchStmtNode: {
      _internal_mutable_resolved_start_batch_stmt_node()->::zetasql::ResolvedStartBatchStmtProto::MergeFrom(from._internal_resolved_start_batch_stmt_node());
      break;
    }
    case kResolvedRunBatchStmtNode: {
      _internal_mutable_resolved_run_batch_stmt_node()->::zetasql::ResolvedRunBatchStmtProto::MergeFrom(from._internal_resolved_run_batch_stmt_node());
      break;
    }
    case kResolvedAbortBatchStmtNode: {
      _internal_mutable_resolved_abort_batch_stmt_node()->::zetasql::ResolvedAbortBatchStmtProto::MergeFrom(from._internal_resolved_abort_batch_stmt_node());
      break;
    }
    case kResolvedTruncateStmtNode: {
      _internal_mutable_resolved_truncate_stmt_node()->::zetasql::ResolvedTruncateStmtProto::MergeFrom(from._internal_resolved_truncate_stmt_node());
      break;
    }
    case kResolvedExecuteImmediateStmtNode: {
      _internal_mutable_resolved_execute_immediate_stmt_node()->::zetasql::ResolvedExecuteImmediateStmtProto::MergeFrom(from._internal_resolved_execute_immediate_stmt_node());
      break;
    }
    case kResolvedAssignmentStmtNode: {
      _internal_mutable_resolved_assignment_stmt_node()->::zetasql::ResolvedAssignmentStmtProto::MergeFrom(from._internal_resolved_assignment_stmt_node());
      break;
    }
    case kResolvedExportModelStmtNode: {
      _internal_mutable_resolved_export_model_stmt_node()->::zetasql::ResolvedExportModelStmtProto::MergeFrom(from._internal_resolved_export_model_stmt_node());
      break;
    }
    case kResolvedDropTableFunctionStmtNode: {
      _internal_mutable_resolved_drop_table_function_stmt_node()->::zetasql::ResolvedDropTableFunctionStmtProto::MergeFrom(from._internal_resolved_drop_table_function_stmt_node());
      break;
    }
    case kResolvedCloneDataStmtNode: {
      _internal_mutable_resolved_clone_data_stmt_node()->::zetasql::ResolvedCloneDataStmtProto::MergeFrom(from._internal_resolved_clone_data_stmt_node());
      break;
    }
    case kResolvedAnalyzeStmtNode: {
      _internal_mutable_resolved_analyze_stmt_node()->::zetasql::ResolvedAnalyzeStmtProto::MergeFrom(from._internal_resolved_analyze_stmt_node());
      break;
    }
    case kResolvedDropSnapshotTableStmtNode: {
      _internal_mutable_resolved_drop_snapshot_table_stmt_node()->::zetasql::ResolvedDropSnapshotTableStmtProto::MergeFrom(from._internal_resolved_drop_snapshot_table_stmt_node());
      break;
    }
    case kResolvedAuxLoadDataStmtNode: {
      _internal_mutable_resolved_aux_load_data_stmt_node()->::zetasql::ResolvedAuxLoadDataStmtProto::MergeFrom(from._internal_resolved_aux_load_data_stmt_node());
      break;
    }
    case kResolvedDropSearchIndexStmtNode: {
      _internal_mutable_resolved_drop_search_index_stmt_node()->::zetasql::ResolvedDropSearchIndexStmtProto::MergeFrom(from._internal_resolved_drop_search_index_stmt_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedStatementProto)
}

inline void AnyResolvedStatementProto::SharedCtor() {
clear_has_node();
}

AnyResolvedStatementProto::~AnyResolvedStatementProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedStatementProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedStatementProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedStatementProto::ArenaDtor(void* object) {
  AnyResolvedStatementProto* _this = reinterpret_cast< AnyResolvedStatementProto* >(object);
  (void)_this;
}
void AnyResolvedStatementProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedStatementProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedStatementProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedStatementProto)
  switch (node_case()) {
    case kResolvedExplainStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_explain_stmt_node_;
      }
      break;
    }
    case kResolvedQueryStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_query_stmt_node_;
      }
      break;
    }
    case kResolvedCreateStatementNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_statement_node_;
      }
      break;
    }
    case kResolvedExportDataStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_export_data_stmt_node_;
      }
      break;
    }
    case kResolvedDefineTableStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_define_table_stmt_node_;
      }
      break;
    }
    case kResolvedDescribeStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_describe_stmt_node_;
      }
      break;
    }
    case kResolvedShowStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_show_stmt_node_;
      }
      break;
    }
    case kResolvedBeginStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_begin_stmt_node_;
      }
      break;
    }
    case kResolvedCommitStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_commit_stmt_node_;
      }
      break;
    }
    case kResolvedRollbackStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_rollback_stmt_node_;
      }
      break;
    }
    case kResolvedDropStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_drop_stmt_node_;
      }
      break;
    }
    case kResolvedInsertStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_insert_stmt_node_;
      }
      break;
    }
    case kResolvedDeleteStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_delete_stmt_node_;
      }
      break;
    }
    case kResolvedUpdateStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_update_stmt_node_;
      }
      break;
    }
    case kResolvedGrantOrRevokeStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_grant_or_revoke_stmt_node_;
      }
      break;
    }
    case kResolvedAlterTableSetOptionsStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_table_set_options_stmt_node_;
      }
      break;
    }
    case kResolvedRenameStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_rename_stmt_node_;
      }
      break;
    }
    case kResolvedCreateRowAccessPolicyStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_row_access_policy_stmt_node_;
      }
      break;
    }
    case kResolvedDropRowAccessPolicyStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_drop_row_access_policy_stmt_node_;
      }
      break;
    }
    case kResolvedDropFunctionStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_drop_function_stmt_node_;
      }
      break;
    }
    case kResolvedCallStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_call_stmt_node_;
      }
      break;
    }
    case kResolvedImportStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_import_stmt_node_;
      }
      break;
    }
    case kResolvedModuleStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_module_stmt_node_;
      }
      break;
    }
    case kResolvedCreateDatabaseStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_database_stmt_node_;
      }
      break;
    }
    case kResolvedAssertStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_assert_stmt_node_;
      }
      break;
    }
    case kResolvedMergeStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_merge_stmt_node_;
      }
      break;
    }
    case kResolvedAlterObjectStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_object_stmt_node_;
      }
      break;
    }
    case kResolvedSetTransactionStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_set_transaction_stmt_node_;
      }
      break;
    }
    case kResolvedDropMaterializedViewStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_drop_materialized_view_stmt_node_;
      }
      break;
    }
    case kResolvedStartBatchStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_start_batch_stmt_node_;
      }
      break;
    }
    case kResolvedRunBatchStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_run_batch_stmt_node_;
      }
      break;
    }
    case kResolvedAbortBatchStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_abort_batch_stmt_node_;
      }
      break;
    }
    case kResolvedTruncateStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_truncate_stmt_node_;
      }
      break;
    }
    case kResolvedExecuteImmediateStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_execute_immediate_stmt_node_;
      }
      break;
    }
    case kResolvedAssignmentStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_assignment_stmt_node_;
      }
      break;
    }
    case kResolvedExportModelStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_export_model_stmt_node_;
      }
      break;
    }
    case kResolvedDropTableFunctionStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_drop_table_function_stmt_node_;
      }
      break;
    }
    case kResolvedCloneDataStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_clone_data_stmt_node_;
      }
      break;
    }
    case kResolvedAnalyzeStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_analyze_stmt_node_;
      }
      break;
    }
    case kResolvedDropSnapshotTableStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_drop_snapshot_table_stmt_node_;
      }
      break;
    }
    case kResolvedAuxLoadDataStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_aux_load_data_stmt_node_;
      }
      break;
    }
    case kResolvedDropSearchIndexStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_drop_search_index_stmt_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedStatementProto::InternalSwap(AnyResolvedStatementProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedStatementProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[74]);
}

// ===================================================================

class ResolvedStatementProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedStatementProto>()._has_bits_);
  static const ::zetasql::ResolvedNodeProto& parent(const ResolvedStatementProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedNodeProto&
ResolvedStatementProto::_Internal::parent(const ResolvedStatementProto* msg) {
  return *msg->parent_;
}
void ResolvedStatementProto::clear_parent() {
  if (parent_ != nullptr) parent_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ResolvedStatementProto::ResolvedStatementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hint_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedStatementProto)
}
ResolvedStatementProto::ResolvedStatementProto(const ResolvedStatementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      hint_list_(from.hint_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedNodeProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedStatementProto)
}

inline void ResolvedStatementProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedStatementProto::~ResolvedStatementProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedStatementProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedStatementProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedStatementProto::ArenaDtor(void* object) {
  ResolvedStatementProto* _this = reinterpret_cast< ResolvedStatementProto* >(object);
  (void)_this;
}
void ResolvedStatementProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedStatementProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedStatementProto::InternalSwap(ResolvedStatementProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedStatementProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[75]);
}

// ===================================================================

class ResolvedExplainStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExplainStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedExplainStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedStatementProto& statement(const ResolvedExplainStmtProto* msg);
  static void set_has_statement(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedExplainStmtProto::_Internal::parent(const ResolvedExplainStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedStatementProto&
ResolvedExplainStmtProto::_Internal::statement(const ResolvedExplainStmtProto* msg) {
  return *msg->statement_;
}
ResolvedExplainStmtProto::ResolvedExplainStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExplainStmtProto)
}
ResolvedExplainStmtProto::ResolvedExplainStmtProto(const ResolvedExplainStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_statement()) {
    statement_ = new ::zetasql::AnyResolvedStatementProto(*from.statement_);
  } else {
    statement_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExplainStmtProto)
}

inline void ResolvedExplainStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&statement_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(statement_));
}

ResolvedExplainStmtProto::~ResolvedExplainStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExplainStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedExplainStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete statement_;
}

void ResolvedExplainStmtProto::ArenaDtor(void* object) {
  ResolvedExplainStmtProto* _this = reinterpret_cast< ResolvedExplainStmtProto* >(object);
  (void)_this;
}
void ResolvedExplainStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedExplainStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedExplainStmtProto::InternalSwap(ResolvedExplainStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExplainStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[76]);
}

// ===================================================================

class ResolvedQueryStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedQueryStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedQueryStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedQueryStmtProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedQueryStmtProto::_Internal::parent(const ResolvedQueryStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedQueryStmtProto::_Internal::query(const ResolvedQueryStmtProto* msg) {
  return *msg->query_;
}
ResolvedQueryStmtProto::ResolvedQueryStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  output_column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedQueryStmtProto)
}
ResolvedQueryStmtProto::ResolvedQueryStmtProto(const ResolvedQueryStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      output_column_list_(from.output_column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::zetasql::AnyResolvedScanProto(*from.query_);
  } else {
    query_ = nullptr;
  }
  is_value_table_ = from.is_value_table_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedQueryStmtProto)
}

inline void ResolvedQueryStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_value_table_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_value_table_));
}

ResolvedQueryStmtProto::~ResolvedQueryStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedQueryStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedQueryStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete query_;
}

void ResolvedQueryStmtProto::ArenaDtor(void* object) {
  ResolvedQueryStmtProto* _this = reinterpret_cast< ResolvedQueryStmtProto* >(object);
  (void)_this;
}
void ResolvedQueryStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedQueryStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedQueryStmtProto::InternalSwap(ResolvedQueryStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedQueryStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[77]);
}

// ===================================================================

class ResolvedCreateDatabaseStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateDatabaseStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedCreateDatabaseStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedCreateDatabaseStmtProto::_Internal::parent(const ResolvedCreateDatabaseStmtProto* msg) {
  return *msg->parent_;
}
ResolvedCreateDatabaseStmtProto::ResolvedCreateDatabaseStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena),
  option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateDatabaseStmtProto)
}
ResolvedCreateDatabaseStmtProto::ResolvedCreateDatabaseStmtProto(const ResolvedCreateDatabaseStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_),
      option_list_(from.option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateDatabaseStmtProto)
}

inline void ResolvedCreateDatabaseStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedCreateDatabaseStmtProto::~ResolvedCreateDatabaseStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateDatabaseStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateDatabaseStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedCreateDatabaseStmtProto::ArenaDtor(void* object) {
  ResolvedCreateDatabaseStmtProto* _this = reinterpret_cast< ResolvedCreateDatabaseStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateDatabaseStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateDatabaseStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateDatabaseStmtProto::InternalSwap(ResolvedCreateDatabaseStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateDatabaseStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[78]);
}

// ===================================================================

class AnyResolvedCreateStatementProto::_Internal {
 public:
  static const ::zetasql::ResolvedCreateFunctionStmtProto& resolved_create_function_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateTableFunctionStmtProto& resolved_create_table_function_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateIndexStmtProto& resolved_create_index_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateConstantStmtProto& resolved_create_constant_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::AnyResolvedCreateTableStmtBaseProto& resolved_create_table_stmt_base_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateModelStmtProto& resolved_create_model_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::AnyResolvedCreateViewBaseProto& resolved_create_view_base_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateProcedureStmtProto& resolved_create_procedure_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateEntityStmtProto& resolved_create_entity_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateSchemaStmtProto& resolved_create_schema_stmt_node(const AnyResolvedCreateStatementProto* msg);
  static const ::zetasql::ResolvedCreateSnapshotTableStmtProto& resolved_create_snapshot_table_stmt_node(const AnyResolvedCreateStatementProto* msg);
};

const ::zetasql::ResolvedCreateFunctionStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_function_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->node_.resolved_create_function_stmt_node_;
}
const ::zetasql::ResolvedCreateTableFunctionStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_table_function_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->node_.resolved_create_table_function_stmt_node_;
}
const ::zetasql::ResolvedCreateIndexStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_index_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->node_.resolved_create_index_stmt_node_;
}
const ::zetasql::ResolvedCreateConstantStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_constant_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->node_.resolved_create_constant_stmt_node_;
}
const ::zetasql::AnyResolvedCreateTableStmtBaseProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_table_stmt_base_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->node_.resolved_create_table_stmt_base_node_;
}
const ::zetasql::ResolvedCreateModelStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_model_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->node_.resolved_create_model_stmt_node_;
}
const ::zetasql::AnyResolvedCreateViewBaseProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_view_base_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->node_.resolved_create_view_base_node_;
}
const ::zetasql::ResolvedCreateProcedureStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_procedure_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->node_.resolved_create_procedure_stmt_node_;
}
const ::zetasql::ResolvedCreateEntityStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_entity_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->node_.resolved_create_entity_stmt_node_;
}
const ::zetasql::ResolvedCreateSchemaStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_schema_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->node_.resolved_create_schema_stmt_node_;
}
const ::zetasql::ResolvedCreateSnapshotTableStmtProto&
AnyResolvedCreateStatementProto::_Internal::resolved_create_snapshot_table_stmt_node(const AnyResolvedCreateStatementProto* msg) {
  return *msg->node_.resolved_create_snapshot_table_stmt_node_;
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_function_stmt_node(::zetasql::ResolvedCreateFunctionStmtProto* resolved_create_function_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_function_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateFunctionStmtProto>::GetOwningArena(resolved_create_function_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_function_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_function_stmt_node, submessage_arena);
    }
    set_has_resolved_create_function_stmt_node();
    node_.resolved_create_function_stmt_node_ = resolved_create_function_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_function_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_table_function_stmt_node(::zetasql::ResolvedCreateTableFunctionStmtProto* resolved_create_table_function_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_table_function_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateTableFunctionStmtProto>::GetOwningArena(resolved_create_table_function_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_table_function_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_table_function_stmt_node, submessage_arena);
    }
    set_has_resolved_create_table_function_stmt_node();
    node_.resolved_create_table_function_stmt_node_ = resolved_create_table_function_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_table_function_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_index_stmt_node(::zetasql::ResolvedCreateIndexStmtProto* resolved_create_index_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_index_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateIndexStmtProto>::GetOwningArena(resolved_create_index_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_index_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_index_stmt_node, submessage_arena);
    }
    set_has_resolved_create_index_stmt_node();
    node_.resolved_create_index_stmt_node_ = resolved_create_index_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_index_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_constant_stmt_node(::zetasql::ResolvedCreateConstantStmtProto* resolved_create_constant_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_constant_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateConstantStmtProto>::GetOwningArena(resolved_create_constant_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_constant_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_constant_stmt_node, submessage_arena);
    }
    set_has_resolved_create_constant_stmt_node();
    node_.resolved_create_constant_stmt_node_ = resolved_create_constant_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_constant_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_table_stmt_base_node(::zetasql::AnyResolvedCreateTableStmtBaseProto* resolved_create_table_stmt_base_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_table_stmt_base_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedCreateTableStmtBaseProto>::GetOwningArena(resolved_create_table_stmt_base_node);
    if (message_arena != submessage_arena) {
      resolved_create_table_stmt_base_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_table_stmt_base_node, submessage_arena);
    }
    set_has_resolved_create_table_stmt_base_node();
    node_.resolved_create_table_stmt_base_node_ = resolved_create_table_stmt_base_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_table_stmt_base_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_model_stmt_node(::zetasql::ResolvedCreateModelStmtProto* resolved_create_model_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_model_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateModelStmtProto>::GetOwningArena(resolved_create_model_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_model_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_model_stmt_node, submessage_arena);
    }
    set_has_resolved_create_model_stmt_node();
    node_.resolved_create_model_stmt_node_ = resolved_create_model_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_model_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_view_base_node(::zetasql::AnyResolvedCreateViewBaseProto* resolved_create_view_base_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_view_base_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::AnyResolvedCreateViewBaseProto>::GetOwningArena(resolved_create_view_base_node);
    if (message_arena != submessage_arena) {
      resolved_create_view_base_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_view_base_node, submessage_arena);
    }
    set_has_resolved_create_view_base_node();
    node_.resolved_create_view_base_node_ = resolved_create_view_base_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_view_base_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_procedure_stmt_node(::zetasql::ResolvedCreateProcedureStmtProto* resolved_create_procedure_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_procedure_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateProcedureStmtProto>::GetOwningArena(resolved_create_procedure_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_procedure_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_procedure_stmt_node, submessage_arena);
    }
    set_has_resolved_create_procedure_stmt_node();
    node_.resolved_create_procedure_stmt_node_ = resolved_create_procedure_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_procedure_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_entity_stmt_node(::zetasql::ResolvedCreateEntityStmtProto* resolved_create_entity_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_entity_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateEntityStmtProto>::GetOwningArena(resolved_create_entity_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_entity_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_entity_stmt_node, submessage_arena);
    }
    set_has_resolved_create_entity_stmt_node();
    node_.resolved_create_entity_stmt_node_ = resolved_create_entity_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_entity_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_schema_stmt_node(::zetasql::ResolvedCreateSchemaStmtProto* resolved_create_schema_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_schema_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateSchemaStmtProto>::GetOwningArena(resolved_create_schema_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_schema_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_schema_stmt_node, submessage_arena);
    }
    set_has_resolved_create_schema_stmt_node();
    node_.resolved_create_schema_stmt_node_ = resolved_create_schema_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_schema_stmt_node)
}
void AnyResolvedCreateStatementProto::set_allocated_resolved_create_snapshot_table_stmt_node(::zetasql::ResolvedCreateSnapshotTableStmtProto* resolved_create_snapshot_table_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_snapshot_table_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateSnapshotTableStmtProto>::GetOwningArena(resolved_create_snapshot_table_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_snapshot_table_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_snapshot_table_stmt_node, submessage_arena);
    }
    set_has_resolved_create_snapshot_table_stmt_node();
    node_.resolved_create_snapshot_table_stmt_node_ = resolved_create_snapshot_table_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateStatementProto.resolved_create_snapshot_table_stmt_node)
}
AnyResolvedCreateStatementProto::AnyResolvedCreateStatementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedCreateStatementProto)
}
AnyResolvedCreateStatementProto::AnyResolvedCreateStatementProto(const AnyResolvedCreateStatementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedCreateFunctionStmtNode: {
      _internal_mutable_resolved_create_function_stmt_node()->::zetasql::ResolvedCreateFunctionStmtProto::MergeFrom(from._internal_resolved_create_function_stmt_node());
      break;
    }
    case kResolvedCreateTableFunctionStmtNode: {
      _internal_mutable_resolved_create_table_function_stmt_node()->::zetasql::ResolvedCreateTableFunctionStmtProto::MergeFrom(from._internal_resolved_create_table_function_stmt_node());
      break;
    }
    case kResolvedCreateIndexStmtNode: {
      _internal_mutable_resolved_create_index_stmt_node()->::zetasql::ResolvedCreateIndexStmtProto::MergeFrom(from._internal_resolved_create_index_stmt_node());
      break;
    }
    case kResolvedCreateConstantStmtNode: {
      _internal_mutable_resolved_create_constant_stmt_node()->::zetasql::ResolvedCreateConstantStmtProto::MergeFrom(from._internal_resolved_create_constant_stmt_node());
      break;
    }
    case kResolvedCreateTableStmtBaseNode: {
      _internal_mutable_resolved_create_table_stmt_base_node()->::zetasql::AnyResolvedCreateTableStmtBaseProto::MergeFrom(from._internal_resolved_create_table_stmt_base_node());
      break;
    }
    case kResolvedCreateModelStmtNode: {
      _internal_mutable_resolved_create_model_stmt_node()->::zetasql::ResolvedCreateModelStmtProto::MergeFrom(from._internal_resolved_create_model_stmt_node());
      break;
    }
    case kResolvedCreateViewBaseNode: {
      _internal_mutable_resolved_create_view_base_node()->::zetasql::AnyResolvedCreateViewBaseProto::MergeFrom(from._internal_resolved_create_view_base_node());
      break;
    }
    case kResolvedCreateProcedureStmtNode: {
      _internal_mutable_resolved_create_procedure_stmt_node()->::zetasql::ResolvedCreateProcedureStmtProto::MergeFrom(from._internal_resolved_create_procedure_stmt_node());
      break;
    }
    case kResolvedCreateEntityStmtNode: {
      _internal_mutable_resolved_create_entity_stmt_node()->::zetasql::ResolvedCreateEntityStmtProto::MergeFrom(from._internal_resolved_create_entity_stmt_node());
      break;
    }
    case kResolvedCreateSchemaStmtNode: {
      _internal_mutable_resolved_create_schema_stmt_node()->::zetasql::ResolvedCreateSchemaStmtProto::MergeFrom(from._internal_resolved_create_schema_stmt_node());
      break;
    }
    case kResolvedCreateSnapshotTableStmtNode: {
      _internal_mutable_resolved_create_snapshot_table_stmt_node()->::zetasql::ResolvedCreateSnapshotTableStmtProto::MergeFrom(from._internal_resolved_create_snapshot_table_stmt_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedCreateStatementProto)
}

inline void AnyResolvedCreateStatementProto::SharedCtor() {
clear_has_node();
}

AnyResolvedCreateStatementProto::~AnyResolvedCreateStatementProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedCreateStatementProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedCreateStatementProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedCreateStatementProto::ArenaDtor(void* object) {
  AnyResolvedCreateStatementProto* _this = reinterpret_cast< AnyResolvedCreateStatementProto* >(object);
  (void)_this;
}
void AnyResolvedCreateStatementProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedCreateStatementProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedCreateStatementProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedCreateStatementProto)
  switch (node_case()) {
    case kResolvedCreateFunctionStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_function_stmt_node_;
      }
      break;
    }
    case kResolvedCreateTableFunctionStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_table_function_stmt_node_;
      }
      break;
    }
    case kResolvedCreateIndexStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_index_stmt_node_;
      }
      break;
    }
    case kResolvedCreateConstantStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_constant_stmt_node_;
      }
      break;
    }
    case kResolvedCreateTableStmtBaseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_table_stmt_base_node_;
      }
      break;
    }
    case kResolvedCreateModelStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_model_stmt_node_;
      }
      break;
    }
    case kResolvedCreateViewBaseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_view_base_node_;
      }
      break;
    }
    case kResolvedCreateProcedureStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_procedure_stmt_node_;
      }
      break;
    }
    case kResolvedCreateEntityStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_entity_stmt_node_;
      }
      break;
    }
    case kResolvedCreateSchemaStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_schema_stmt_node_;
      }
      break;
    }
    case kResolvedCreateSnapshotTableStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_snapshot_table_stmt_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedCreateStatementProto::InternalSwap(AnyResolvedCreateStatementProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedCreateStatementProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[79]);
}

// ===================================================================

class ResolvedCreateStatementProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateStatementProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedCreateStatementProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_create_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_create_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedCreateStatementProto::_Internal::parent(const ResolvedCreateStatementProto* msg) {
  return *msg->parent_;
}
ResolvedCreateStatementProto::ResolvedCreateStatementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateStatementProto)
}
ResolvedCreateStatementProto::ResolvedCreateStatementProto(const ResolvedCreateStatementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  ::memcpy(&create_mode_, &from.create_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_scope_) -
    reinterpret_cast<char*>(&create_mode_)) + sizeof(create_scope_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateStatementProto)
}

inline void ResolvedCreateStatementProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&create_scope_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(create_scope_));
}

ResolvedCreateStatementProto::~ResolvedCreateStatementProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateStatementProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateStatementProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedCreateStatementProto::ArenaDtor(void* object) {
  ResolvedCreateStatementProto* _this = reinterpret_cast< ResolvedCreateStatementProto* >(object);
  (void)_this;
}
void ResolvedCreateStatementProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateStatementProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateStatementProto::InternalSwap(ResolvedCreateStatementProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateStatementProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[80]);
}

// ===================================================================

class ResolvedIndexItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedIndexItemProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedIndexItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnRefProto& column_ref(const ResolvedIndexItemProto* msg);
  static void set_has_column_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_descending(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedIndexItemProto::_Internal::parent(const ResolvedIndexItemProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedColumnRefProto&
ResolvedIndexItemProto::_Internal::column_ref(const ResolvedIndexItemProto* msg) {
  return *msg->column_ref_;
}
ResolvedIndexItemProto::ResolvedIndexItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedIndexItemProto)
}
ResolvedIndexItemProto::ResolvedIndexItemProto(const ResolvedIndexItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_column_ref()) {
    column_ref_ = new ::zetasql::ResolvedColumnRefProto(*from.column_ref_);
  } else {
    column_ref_ = nullptr;
  }
  descending_ = from.descending_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedIndexItemProto)
}

inline void ResolvedIndexItemProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&descending_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(descending_));
}

ResolvedIndexItemProto::~ResolvedIndexItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedIndexItemProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedIndexItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete column_ref_;
}

void ResolvedIndexItemProto::ArenaDtor(void* object) {
  ResolvedIndexItemProto* _this = reinterpret_cast< ResolvedIndexItemProto* >(object);
  (void)_this;
}
void ResolvedIndexItemProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedIndexItemProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedIndexItemProto::InternalSwap(ResolvedIndexItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedIndexItemProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[81]);
}

// ===================================================================

class ResolvedUnnestItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedUnnestItemProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedUnnestItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& array_expr(const ResolvedUnnestItemProto* msg);
  static void set_has_array_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedColumnProto& element_column(const ResolvedUnnestItemProto* msg);
  static void set_has_element_column(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& array_offset_column(const ResolvedUnnestItemProto* msg);
  static void set_has_array_offset_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedUnnestItemProto::_Internal::parent(const ResolvedUnnestItemProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedUnnestItemProto::_Internal::array_expr(const ResolvedUnnestItemProto* msg) {
  return *msg->array_expr_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedUnnestItemProto::_Internal::element_column(const ResolvedUnnestItemProto* msg) {
  return *msg->element_column_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedUnnestItemProto::_Internal::array_offset_column(const ResolvedUnnestItemProto* msg) {
  return *msg->array_offset_column_;
}
void ResolvedUnnestItemProto::clear_element_column() {
  if (element_column_ != nullptr) element_column_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ResolvedUnnestItemProto::ResolvedUnnestItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedUnnestItemProto)
}
ResolvedUnnestItemProto::ResolvedUnnestItemProto(const ResolvedUnnestItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_array_expr()) {
    array_expr_ = new ::zetasql::AnyResolvedExprProto(*from.array_expr_);
  } else {
    array_expr_ = nullptr;
  }
  if (from._internal_has_element_column()) {
    element_column_ = new ::zetasql::ResolvedColumnProto(*from.element_column_);
  } else {
    element_column_ = nullptr;
  }
  if (from._internal_has_array_offset_column()) {
    array_offset_column_ = new ::zetasql::ResolvedColumnHolderProto(*from.array_offset_column_);
  } else {
    array_offset_column_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedUnnestItemProto)
}

inline void ResolvedUnnestItemProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&array_offset_column_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(array_offset_column_));
}

ResolvedUnnestItemProto::~ResolvedUnnestItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedUnnestItemProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedUnnestItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete array_expr_;
  if (this != internal_default_instance()) delete element_column_;
  if (this != internal_default_instance()) delete array_offset_column_;
}

void ResolvedUnnestItemProto::ArenaDtor(void* object) {
  ResolvedUnnestItemProto* _this = reinterpret_cast< ResolvedUnnestItemProto* >(object);
  (void)_this;
}
void ResolvedUnnestItemProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedUnnestItemProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedUnnestItemProto::InternalSwap(ResolvedUnnestItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedUnnestItemProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[82]);
}

// ===================================================================

class ResolvedCreateIndexStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateIndexStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateIndexStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedCreateIndexStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_unique(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_search(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index_all_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateIndexStmtProto::_Internal::parent(const ResolvedCreateIndexStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedCreateIndexStmtProto::_Internal::table_scan(const ResolvedCreateIndexStmtProto* msg) {
  return *msg->table_scan_;
}
ResolvedCreateIndexStmtProto::ResolvedCreateIndexStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  table_name_path_(arena),
  index_item_list_(arena),
  option_list_(arena),
  computed_columns_list_(arena),
  unnest_expressions_list_(arena),
  storing_expression_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateIndexStmtProto)
}
ResolvedCreateIndexStmtProto::ResolvedCreateIndexStmtProto(const ResolvedCreateIndexStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      table_name_path_(from.table_name_path_),
      index_item_list_(from.index_item_list_),
      option_list_(from.option_list_),
      computed_columns_list_(from.computed_columns_list_),
      unnest_expressions_list_(from.unnest_expressions_list_),
      storing_expression_list_(from.storing_expression_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_table_scan()) {
    table_scan_ = new ::zetasql::ResolvedTableScanProto(*from.table_scan_);
  } else {
    table_scan_ = nullptr;
  }
  ::memcpy(&is_unique_, &from.is_unique_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_all_columns_) -
    reinterpret_cast<char*>(&is_unique_)) + sizeof(index_all_columns_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateIndexStmtProto)
}

inline void ResolvedCreateIndexStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_all_columns_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(index_all_columns_));
}

ResolvedCreateIndexStmtProto::~ResolvedCreateIndexStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateIndexStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateIndexStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete table_scan_;
}

void ResolvedCreateIndexStmtProto::ArenaDtor(void* object) {
  ResolvedCreateIndexStmtProto* _this = reinterpret_cast< ResolvedCreateIndexStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateIndexStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateIndexStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateIndexStmtProto::InternalSwap(ResolvedCreateIndexStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateIndexStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[83]);
}

// ===================================================================

class ResolvedCreateSchemaStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateSchemaStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateSchemaStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& collation_name(const ResolvedCreateSchemaStmtProto* msg);
  static void set_has_collation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateSchemaStmtProto::_Internal::parent(const ResolvedCreateSchemaStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCreateSchemaStmtProto::_Internal::collation_name(const ResolvedCreateSchemaStmtProto* msg) {
  return *msg->collation_name_;
}
ResolvedCreateSchemaStmtProto::ResolvedCreateSchemaStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateSchemaStmtProto)
}
ResolvedCreateSchemaStmtProto::ResolvedCreateSchemaStmtProto(const ResolvedCreateSchemaStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_list_(from.option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_collation_name()) {
    collation_name_ = new ::zetasql::AnyResolvedExprProto(*from.collation_name_);
  } else {
    collation_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateSchemaStmtProto)
}

inline void ResolvedCreateSchemaStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&collation_name_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(collation_name_));
}

ResolvedCreateSchemaStmtProto::~ResolvedCreateSchemaStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateSchemaStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateSchemaStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete collation_name_;
}

void ResolvedCreateSchemaStmtProto::ArenaDtor(void* object) {
  ResolvedCreateSchemaStmtProto* _this = reinterpret_cast< ResolvedCreateSchemaStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateSchemaStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateSchemaStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateSchemaStmtProto::InternalSwap(ResolvedCreateSchemaStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateSchemaStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[84]);
}

// ===================================================================

class AnyResolvedCreateTableStmtBaseProto::_Internal {
 public:
  static const ::zetasql::ResolvedCreateTableAsSelectStmtProto& resolved_create_table_as_select_stmt_node(const AnyResolvedCreateTableStmtBaseProto* msg);
  static const ::zetasql::ResolvedCreateExternalTableStmtProto& resolved_create_external_table_stmt_node(const AnyResolvedCreateTableStmtBaseProto* msg);
  static const ::zetasql::ResolvedCreateTableStmtProto& resolved_create_table_stmt_node(const AnyResolvedCreateTableStmtBaseProto* msg);
};

const ::zetasql::ResolvedCreateTableAsSelectStmtProto&
AnyResolvedCreateTableStmtBaseProto::_Internal::resolved_create_table_as_select_stmt_node(const AnyResolvedCreateTableStmtBaseProto* msg) {
  return *msg->node_.resolved_create_table_as_select_stmt_node_;
}
const ::zetasql::ResolvedCreateExternalTableStmtProto&
AnyResolvedCreateTableStmtBaseProto::_Internal::resolved_create_external_table_stmt_node(const AnyResolvedCreateTableStmtBaseProto* msg) {
  return *msg->node_.resolved_create_external_table_stmt_node_;
}
const ::zetasql::ResolvedCreateTableStmtProto&
AnyResolvedCreateTableStmtBaseProto::_Internal::resolved_create_table_stmt_node(const AnyResolvedCreateTableStmtBaseProto* msg) {
  return *msg->node_.resolved_create_table_stmt_node_;
}
void AnyResolvedCreateTableStmtBaseProto::set_allocated_resolved_create_table_as_select_stmt_node(::zetasql::ResolvedCreateTableAsSelectStmtProto* resolved_create_table_as_select_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_table_as_select_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateTableAsSelectStmtProto>::GetOwningArena(resolved_create_table_as_select_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_table_as_select_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_table_as_select_stmt_node, submessage_arena);
    }
    set_has_resolved_create_table_as_select_stmt_node();
    node_.resolved_create_table_as_select_stmt_node_ = resolved_create_table_as_select_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_table_as_select_stmt_node)
}
void AnyResolvedCreateTableStmtBaseProto::set_allocated_resolved_create_external_table_stmt_node(::zetasql::ResolvedCreateExternalTableStmtProto* resolved_create_external_table_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_external_table_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateExternalTableStmtProto>::GetOwningArena(resolved_create_external_table_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_external_table_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_external_table_stmt_node, submessage_arena);
    }
    set_has_resolved_create_external_table_stmt_node();
    node_.resolved_create_external_table_stmt_node_ = resolved_create_external_table_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_external_table_stmt_node)
}
void AnyResolvedCreateTableStmtBaseProto::set_allocated_resolved_create_table_stmt_node(::zetasql::ResolvedCreateTableStmtProto* resolved_create_table_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_table_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateTableStmtProto>::GetOwningArena(resolved_create_table_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_table_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_table_stmt_node, submessage_arena);
    }
    set_has_resolved_create_table_stmt_node();
    node_.resolved_create_table_stmt_node_ = resolved_create_table_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateTableStmtBaseProto.resolved_create_table_stmt_node)
}
AnyResolvedCreateTableStmtBaseProto::AnyResolvedCreateTableStmtBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedCreateTableStmtBaseProto)
}
AnyResolvedCreateTableStmtBaseProto::AnyResolvedCreateTableStmtBaseProto(const AnyResolvedCreateTableStmtBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedCreateTableAsSelectStmtNode: {
      _internal_mutable_resolved_create_table_as_select_stmt_node()->::zetasql::ResolvedCreateTableAsSelectStmtProto::MergeFrom(from._internal_resolved_create_table_as_select_stmt_node());
      break;
    }
    case kResolvedCreateExternalTableStmtNode: {
      _internal_mutable_resolved_create_external_table_stmt_node()->::zetasql::ResolvedCreateExternalTableStmtProto::MergeFrom(from._internal_resolved_create_external_table_stmt_node());
      break;
    }
    case kResolvedCreateTableStmtNode: {
      _internal_mutable_resolved_create_table_stmt_node()->::zetasql::ResolvedCreateTableStmtProto::MergeFrom(from._internal_resolved_create_table_stmt_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedCreateTableStmtBaseProto)
}

inline void AnyResolvedCreateTableStmtBaseProto::SharedCtor() {
clear_has_node();
}

AnyResolvedCreateTableStmtBaseProto::~AnyResolvedCreateTableStmtBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedCreateTableStmtBaseProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedCreateTableStmtBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedCreateTableStmtBaseProto::ArenaDtor(void* object) {
  AnyResolvedCreateTableStmtBaseProto* _this = reinterpret_cast< AnyResolvedCreateTableStmtBaseProto* >(object);
  (void)_this;
}
void AnyResolvedCreateTableStmtBaseProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedCreateTableStmtBaseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedCreateTableStmtBaseProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedCreateTableStmtBaseProto)
  switch (node_case()) {
    case kResolvedCreateTableAsSelectStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_table_as_select_stmt_node_;
      }
      break;
    }
    case kResolvedCreateExternalTableStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_external_table_stmt_node_;
      }
      break;
    }
    case kResolvedCreateTableStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_table_stmt_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedCreateTableStmtBaseProto::InternalSwap(AnyResolvedCreateTableStmtBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedCreateTableStmtBaseProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[85]);
}

// ===================================================================

class ResolvedCreateTableStmtBaseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateTableStmtBaseProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateTableStmtBaseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedPrimaryKeyProto& primary_key(const ResolvedCreateTableStmtBaseProto* msg);
  static void set_has_primary_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::TableRefProto& like_table(const ResolvedCreateTableStmtBaseProto* msg);
  static void set_has_like_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& collation_name(const ResolvedCreateTableStmtBaseProto* msg);
  static void set_has_collation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateTableStmtBaseProto::_Internal::parent(const ResolvedCreateTableStmtBaseProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedPrimaryKeyProto&
ResolvedCreateTableStmtBaseProto::_Internal::primary_key(const ResolvedCreateTableStmtBaseProto* msg) {
  return *msg->primary_key_;
}
const ::zetasql::TableRefProto&
ResolvedCreateTableStmtBaseProto::_Internal::like_table(const ResolvedCreateTableStmtBaseProto* msg) {
  return *msg->like_table_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCreateTableStmtBaseProto::_Internal::collation_name(const ResolvedCreateTableStmtBaseProto* msg) {
  return *msg->collation_name_;
}
void ResolvedCreateTableStmtBaseProto::clear_pseudo_column_list() {
  pseudo_column_list_.Clear();
}
void ResolvedCreateTableStmtBaseProto::clear_like_table() {
  if (like_table_ != nullptr) like_table_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ResolvedCreateTableStmtBaseProto::ResolvedCreateTableStmtBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_list_(arena),
  column_definition_list_(arena),
  pseudo_column_list_(arena),
  foreign_key_list_(arena),
  check_constraint_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateTableStmtBaseProto)
}
ResolvedCreateTableStmtBaseProto::ResolvedCreateTableStmtBaseProto(const ResolvedCreateTableStmtBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_list_(from.option_list_),
      column_definition_list_(from.column_definition_list_),
      pseudo_column_list_(from.pseudo_column_list_),
      foreign_key_list_(from.foreign_key_list_),
      check_constraint_list_(from.check_constraint_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_primary_key()) {
    primary_key_ = new ::zetasql::ResolvedPrimaryKeyProto(*from.primary_key_);
  } else {
    primary_key_ = nullptr;
  }
  if (from._internal_has_like_table()) {
    like_table_ = new ::zetasql::TableRefProto(*from.like_table_);
  } else {
    like_table_ = nullptr;
  }
  if (from._internal_has_collation_name()) {
    collation_name_ = new ::zetasql::AnyResolvedExprProto(*from.collation_name_);
  } else {
    collation_name_ = nullptr;
  }
  is_value_table_ = from.is_value_table_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateTableStmtBaseProto)
}

inline void ResolvedCreateTableStmtBaseProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_value_table_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_value_table_));
}

ResolvedCreateTableStmtBaseProto::~ResolvedCreateTableStmtBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateTableStmtBaseProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateTableStmtBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete primary_key_;
  if (this != internal_default_instance()) delete like_table_;
  if (this != internal_default_instance()) delete collation_name_;
}

void ResolvedCreateTableStmtBaseProto::ArenaDtor(void* object) {
  ResolvedCreateTableStmtBaseProto* _this = reinterpret_cast< ResolvedCreateTableStmtBaseProto* >(object);
  (void)_this;
}
void ResolvedCreateTableStmtBaseProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateTableStmtBaseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateTableStmtBaseProto::InternalSwap(ResolvedCreateTableStmtBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateTableStmtBaseProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[86]);
}

// ===================================================================

class ResolvedCreateTableStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateTableStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateTableStmtBaseProto& parent(const ResolvedCreateTableStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& clone_from(const ResolvedCreateTableStmtProto* msg);
  static void set_has_clone_from(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& copy_from(const ResolvedCreateTableStmtProto* msg);
  static void set_has_copy_from(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedCreateTableStmtBaseProto&
ResolvedCreateTableStmtProto::_Internal::parent(const ResolvedCreateTableStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateTableStmtProto::_Internal::clone_from(const ResolvedCreateTableStmtProto* msg) {
  return *msg->clone_from_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateTableStmtProto::_Internal::copy_from(const ResolvedCreateTableStmtProto* msg) {
  return *msg->copy_from_;
}
ResolvedCreateTableStmtProto::ResolvedCreateTableStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  partition_by_list_(arena),
  cluster_by_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateTableStmtProto)
}
ResolvedCreateTableStmtProto::ResolvedCreateTableStmtProto(const ResolvedCreateTableStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      partition_by_list_(from.partition_by_list_),
      cluster_by_list_(from.cluster_by_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateTableStmtBaseProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_clone_from()) {
    clone_from_ = new ::zetasql::AnyResolvedScanProto(*from.clone_from_);
  } else {
    clone_from_ = nullptr;
  }
  if (from._internal_has_copy_from()) {
    copy_from_ = new ::zetasql::AnyResolvedScanProto(*from.copy_from_);
  } else {
    copy_from_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateTableStmtProto)
}

inline void ResolvedCreateTableStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&copy_from_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(copy_from_));
}

ResolvedCreateTableStmtProto::~ResolvedCreateTableStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateTableStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateTableStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete clone_from_;
  if (this != internal_default_instance()) delete copy_from_;
}

void ResolvedCreateTableStmtProto::ArenaDtor(void* object) {
  ResolvedCreateTableStmtProto* _this = reinterpret_cast< ResolvedCreateTableStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateTableStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateTableStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateTableStmtProto::InternalSwap(ResolvedCreateTableStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateTableStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[87]);
}

// ===================================================================

class ResolvedCreateTableAsSelectStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateTableAsSelectStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateTableStmtBaseProto& parent(const ResolvedCreateTableAsSelectStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedCreateTableAsSelectStmtProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedCreateTableStmtBaseProto&
ResolvedCreateTableAsSelectStmtProto::_Internal::parent(const ResolvedCreateTableAsSelectStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateTableAsSelectStmtProto::_Internal::query(const ResolvedCreateTableAsSelectStmtProto* msg) {
  return *msg->query_;
}
ResolvedCreateTableAsSelectStmtProto::ResolvedCreateTableAsSelectStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  output_column_list_(arena),
  partition_by_list_(arena),
  cluster_by_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateTableAsSelectStmtProto)
}
ResolvedCreateTableAsSelectStmtProto::ResolvedCreateTableAsSelectStmtProto(const ResolvedCreateTableAsSelectStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      output_column_list_(from.output_column_list_),
      partition_by_list_(from.partition_by_list_),
      cluster_by_list_(from.cluster_by_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateTableStmtBaseProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::zetasql::AnyResolvedScanProto(*from.query_);
  } else {
    query_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateTableAsSelectStmtProto)
}

inline void ResolvedCreateTableAsSelectStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&query_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(query_));
}

ResolvedCreateTableAsSelectStmtProto::~ResolvedCreateTableAsSelectStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateTableAsSelectStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateTableAsSelectStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete query_;
}

void ResolvedCreateTableAsSelectStmtProto::ArenaDtor(void* object) {
  ResolvedCreateTableAsSelectStmtProto* _this = reinterpret_cast< ResolvedCreateTableAsSelectStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateTableAsSelectStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateTableAsSelectStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateTableAsSelectStmtProto::InternalSwap(ResolvedCreateTableAsSelectStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateTableAsSelectStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[88]);
}

// ===================================================================

class ResolvedCreateModelStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateModelStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateModelStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedCreateModelStmtProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateModelStmtProto::_Internal::parent(const ResolvedCreateModelStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateModelStmtProto::_Internal::query(const ResolvedCreateModelStmtProto* msg) {
  return *msg->query_;
}
ResolvedCreateModelStmtProto::ResolvedCreateModelStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_list_(arena),
  output_column_list_(arena),
  transform_list_(arena),
  transform_output_column_list_(arena),
  transform_analytic_function_group_list_(arena),
  transform_input_column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateModelStmtProto)
}
ResolvedCreateModelStmtProto::ResolvedCreateModelStmtProto(const ResolvedCreateModelStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_list_(from.option_list_),
      output_column_list_(from.output_column_list_),
      transform_list_(from.transform_list_),
      transform_output_column_list_(from.transform_output_column_list_),
      transform_analytic_function_group_list_(from.transform_analytic_function_group_list_),
      transform_input_column_list_(from.transform_input_column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::zetasql::AnyResolvedScanProto(*from.query_);
  } else {
    query_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateModelStmtProto)
}

inline void ResolvedCreateModelStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&query_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(query_));
}

ResolvedCreateModelStmtProto::~ResolvedCreateModelStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateModelStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateModelStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete query_;
}

void ResolvedCreateModelStmtProto::ArenaDtor(void* object) {
  ResolvedCreateModelStmtProto* _this = reinterpret_cast< ResolvedCreateModelStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateModelStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateModelStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateModelStmtProto::InternalSwap(ResolvedCreateModelStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateModelStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[89]);
}

// ===================================================================

class AnyResolvedCreateViewBaseProto::_Internal {
 public:
  static const ::zetasql::ResolvedCreateViewStmtProto& resolved_create_view_stmt_node(const AnyResolvedCreateViewBaseProto* msg);
  static const ::zetasql::ResolvedCreateMaterializedViewStmtProto& resolved_create_materialized_view_stmt_node(const AnyResolvedCreateViewBaseProto* msg);
};

const ::zetasql::ResolvedCreateViewStmtProto&
AnyResolvedCreateViewBaseProto::_Internal::resolved_create_view_stmt_node(const AnyResolvedCreateViewBaseProto* msg) {
  return *msg->node_.resolved_create_view_stmt_node_;
}
const ::zetasql::ResolvedCreateMaterializedViewStmtProto&
AnyResolvedCreateViewBaseProto::_Internal::resolved_create_materialized_view_stmt_node(const AnyResolvedCreateViewBaseProto* msg) {
  return *msg->node_.resolved_create_materialized_view_stmt_node_;
}
void AnyResolvedCreateViewBaseProto::set_allocated_resolved_create_view_stmt_node(::zetasql::ResolvedCreateViewStmtProto* resolved_create_view_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_view_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateViewStmtProto>::GetOwningArena(resolved_create_view_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_view_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_view_stmt_node, submessage_arena);
    }
    set_has_resolved_create_view_stmt_node();
    node_.resolved_create_view_stmt_node_ = resolved_create_view_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateViewBaseProto.resolved_create_view_stmt_node)
}
void AnyResolvedCreateViewBaseProto::set_allocated_resolved_create_materialized_view_stmt_node(::zetasql::ResolvedCreateMaterializedViewStmtProto* resolved_create_materialized_view_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_create_materialized_view_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedCreateMaterializedViewStmtProto>::GetOwningArena(resolved_create_materialized_view_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_create_materialized_view_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_create_materialized_view_stmt_node, submessage_arena);
    }
    set_has_resolved_create_materialized_view_stmt_node();
    node_.resolved_create_materialized_view_stmt_node_ = resolved_create_materialized_view_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedCreateViewBaseProto.resolved_create_materialized_view_stmt_node)
}
AnyResolvedCreateViewBaseProto::AnyResolvedCreateViewBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedCreateViewBaseProto)
}
AnyResolvedCreateViewBaseProto::AnyResolvedCreateViewBaseProto(const AnyResolvedCreateViewBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedCreateViewStmtNode: {
      _internal_mutable_resolved_create_view_stmt_node()->::zetasql::ResolvedCreateViewStmtProto::MergeFrom(from._internal_resolved_create_view_stmt_node());
      break;
    }
    case kResolvedCreateMaterializedViewStmtNode: {
      _internal_mutable_resolved_create_materialized_view_stmt_node()->::zetasql::ResolvedCreateMaterializedViewStmtProto::MergeFrom(from._internal_resolved_create_materialized_view_stmt_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedCreateViewBaseProto)
}

inline void AnyResolvedCreateViewBaseProto::SharedCtor() {
clear_has_node();
}

AnyResolvedCreateViewBaseProto::~AnyResolvedCreateViewBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedCreateViewBaseProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedCreateViewBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedCreateViewBaseProto::ArenaDtor(void* object) {
  AnyResolvedCreateViewBaseProto* _this = reinterpret_cast< AnyResolvedCreateViewBaseProto* >(object);
  (void)_this;
}
void AnyResolvedCreateViewBaseProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedCreateViewBaseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedCreateViewBaseProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedCreateViewBaseProto)
  switch (node_case()) {
    case kResolvedCreateViewStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_view_stmt_node_;
      }
      break;
    }
    case kResolvedCreateMaterializedViewStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_create_materialized_view_stmt_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedCreateViewBaseProto::InternalSwap(AnyResolvedCreateViewBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedCreateViewBaseProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[90]);
}

// ===================================================================

class ResolvedCreateViewBaseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateViewBaseProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateViewBaseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_explicit_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedCreateViewBaseProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sql(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sql_security(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_recursive(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateViewBaseProto::_Internal::parent(const ResolvedCreateViewBaseProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateViewBaseProto::_Internal::query(const ResolvedCreateViewBaseProto* msg) {
  return *msg->query_;
}
ResolvedCreateViewBaseProto::ResolvedCreateViewBaseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_list_(arena),
  output_column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateViewBaseProto)
}
ResolvedCreateViewBaseProto::ResolvedCreateViewBaseProto(const ResolvedCreateViewBaseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_list_(from.option_list_),
      output_column_list_(from.output_column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sql_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sql_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sql()) {
    sql_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sql(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::zetasql::AnyResolvedScanProto(*from.query_);
  } else {
    query_ = nullptr;
  }
  ::memcpy(&sql_security_, &from.sql_security_,
    static_cast<size_t>(reinterpret_cast<char*>(&recursive_) -
    reinterpret_cast<char*>(&sql_security_)) + sizeof(recursive_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateViewBaseProto)
}

inline void ResolvedCreateViewBaseProto::SharedCtor() {
sql_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sql_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recursive_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(recursive_));
}

ResolvedCreateViewBaseProto::~ResolvedCreateViewBaseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateViewBaseProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateViewBaseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sql_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete query_;
}

void ResolvedCreateViewBaseProto::ArenaDtor(void* object) {
  ResolvedCreateViewBaseProto* _this = reinterpret_cast< ResolvedCreateViewBaseProto* >(object);
  (void)_this;
}
void ResolvedCreateViewBaseProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateViewBaseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateViewBaseProto::InternalSwap(ResolvedCreateViewBaseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateViewBaseProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[91]);
}

// ===================================================================

class ResolvedCreateViewStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateViewStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateViewBaseProto& parent(const ResolvedCreateViewStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedCreateViewBaseProto&
ResolvedCreateViewStmtProto::_Internal::parent(const ResolvedCreateViewStmtProto* msg) {
  return *msg->parent_;
}
ResolvedCreateViewStmtProto::ResolvedCreateViewStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateViewStmtProto)
}
ResolvedCreateViewStmtProto::ResolvedCreateViewStmtProto(const ResolvedCreateViewStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateViewBaseProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateViewStmtProto)
}

inline void ResolvedCreateViewStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedCreateViewStmtProto::~ResolvedCreateViewStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateViewStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateViewStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedCreateViewStmtProto::ArenaDtor(void* object) {
  ResolvedCreateViewStmtProto* _this = reinterpret_cast< ResolvedCreateViewStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateViewStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateViewStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateViewStmtProto::InternalSwap(ResolvedCreateViewStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateViewStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[92]);
}

// ===================================================================

class ResolvedWithPartitionColumnsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWithPartitionColumnsProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedWithPartitionColumnsProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedWithPartitionColumnsProto::_Internal::parent(const ResolvedWithPartitionColumnsProto* msg) {
  return *msg->parent_;
}
ResolvedWithPartitionColumnsProto::ResolvedWithPartitionColumnsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_definition_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWithPartitionColumnsProto)
}
ResolvedWithPartitionColumnsProto::ResolvedWithPartitionColumnsProto(const ResolvedWithPartitionColumnsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      column_definition_list_(from.column_definition_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWithPartitionColumnsProto)
}

inline void ResolvedWithPartitionColumnsProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedWithPartitionColumnsProto::~ResolvedWithPartitionColumnsProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWithPartitionColumnsProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedWithPartitionColumnsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedWithPartitionColumnsProto::ArenaDtor(void* object) {
  ResolvedWithPartitionColumnsProto* _this = reinterpret_cast< ResolvedWithPartitionColumnsProto* >(object);
  (void)_this;
}
void ResolvedWithPartitionColumnsProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedWithPartitionColumnsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedWithPartitionColumnsProto::InternalSwap(ResolvedWithPartitionColumnsProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWithPartitionColumnsProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[93]);
}

// ===================================================================

class ResolvedCreateSnapshotTableStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateSnapshotTableStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateSnapshotTableStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& clone_from(const ResolvedCreateSnapshotTableStmtProto* msg);
  static void set_has_clone_from(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateSnapshotTableStmtProto::_Internal::parent(const ResolvedCreateSnapshotTableStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateSnapshotTableStmtProto::_Internal::clone_from(const ResolvedCreateSnapshotTableStmtProto* msg) {
  return *msg->clone_from_;
}
ResolvedCreateSnapshotTableStmtProto::ResolvedCreateSnapshotTableStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateSnapshotTableStmtProto)
}
ResolvedCreateSnapshotTableStmtProto::ResolvedCreateSnapshotTableStmtProto(const ResolvedCreateSnapshotTableStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_list_(from.option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_clone_from()) {
    clone_from_ = new ::zetasql::AnyResolvedScanProto(*from.clone_from_);
  } else {
    clone_from_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateSnapshotTableStmtProto)
}

inline void ResolvedCreateSnapshotTableStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clone_from_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(clone_from_));
}

ResolvedCreateSnapshotTableStmtProto::~ResolvedCreateSnapshotTableStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateSnapshotTableStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateSnapshotTableStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete clone_from_;
}

void ResolvedCreateSnapshotTableStmtProto::ArenaDtor(void* object) {
  ResolvedCreateSnapshotTableStmtProto* _this = reinterpret_cast< ResolvedCreateSnapshotTableStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateSnapshotTableStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateSnapshotTableStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateSnapshotTableStmtProto::InternalSwap(ResolvedCreateSnapshotTableStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateSnapshotTableStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[94]);
}

// ===================================================================

class ResolvedCreateExternalTableStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateExternalTableStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateTableStmtBaseProto& parent(const ResolvedCreateExternalTableStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedWithPartitionColumnsProto& with_partition_columns(const ResolvedCreateExternalTableStmtProto* msg);
  static void set_has_with_partition_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedConnectionProto& connection(const ResolvedCreateExternalTableStmtProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedCreateTableStmtBaseProto&
ResolvedCreateExternalTableStmtProto::_Internal::parent(const ResolvedCreateExternalTableStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedWithPartitionColumnsProto&
ResolvedCreateExternalTableStmtProto::_Internal::with_partition_columns(const ResolvedCreateExternalTableStmtProto* msg) {
  return *msg->with_partition_columns_;
}
const ::zetasql::ResolvedConnectionProto&
ResolvedCreateExternalTableStmtProto::_Internal::connection(const ResolvedCreateExternalTableStmtProto* msg) {
  return *msg->connection_;
}
ResolvedCreateExternalTableStmtProto::ResolvedCreateExternalTableStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateExternalTableStmtProto)
}
ResolvedCreateExternalTableStmtProto::ResolvedCreateExternalTableStmtProto(const ResolvedCreateExternalTableStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateTableStmtBaseProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_with_partition_columns()) {
    with_partition_columns_ = new ::zetasql::ResolvedWithPartitionColumnsProto(*from.with_partition_columns_);
  } else {
    with_partition_columns_ = nullptr;
  }
  if (from._internal_has_connection()) {
    connection_ = new ::zetasql::ResolvedConnectionProto(*from.connection_);
  } else {
    connection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateExternalTableStmtProto)
}

inline void ResolvedCreateExternalTableStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connection_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(connection_));
}

ResolvedCreateExternalTableStmtProto::~ResolvedCreateExternalTableStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateExternalTableStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateExternalTableStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete with_partition_columns_;
  if (this != internal_default_instance()) delete connection_;
}

void ResolvedCreateExternalTableStmtProto::ArenaDtor(void* object) {
  ResolvedCreateExternalTableStmtProto* _this = reinterpret_cast< ResolvedCreateExternalTableStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateExternalTableStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateExternalTableStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateExternalTableStmtProto::InternalSwap(ResolvedCreateExternalTableStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateExternalTableStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[95]);
}

// ===================================================================

class ResolvedExportModelStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExportModelStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedExportModelStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedConnectionProto& connection(const ResolvedExportModelStmtProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedExportModelStmtProto::_Internal::parent(const ResolvedExportModelStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedConnectionProto&
ResolvedExportModelStmtProto::_Internal::connection(const ResolvedExportModelStmtProto* msg) {
  return *msg->connection_;
}
ResolvedExportModelStmtProto::ResolvedExportModelStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  model_name_path_(arena),
  option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExportModelStmtProto)
}
ResolvedExportModelStmtProto::ResolvedExportModelStmtProto(const ResolvedExportModelStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      model_name_path_(from.model_name_path_),
      option_list_(from.option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_connection()) {
    connection_ = new ::zetasql::ResolvedConnectionProto(*from.connection_);
  } else {
    connection_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExportModelStmtProto)
}

inline void ResolvedExportModelStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&connection_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(connection_));
}

ResolvedExportModelStmtProto::~ResolvedExportModelStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExportModelStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedExportModelStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete connection_;
}

void ResolvedExportModelStmtProto::ArenaDtor(void* object) {
  ResolvedExportModelStmtProto* _this = reinterpret_cast< ResolvedExportModelStmtProto* >(object);
  (void)_this;
}
void ResolvedExportModelStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedExportModelStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedExportModelStmtProto::InternalSwap(ResolvedExportModelStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExportModelStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[96]);
}

// ===================================================================

class ResolvedExportDataStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExportDataStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedExportDataStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedConnectionProto& connection(const ResolvedExportDataStmtProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedExportDataStmtProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedExportDataStmtProto::_Internal::parent(const ResolvedExportDataStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedConnectionProto&
ResolvedExportDataStmtProto::_Internal::connection(const ResolvedExportDataStmtProto* msg) {
  return *msg->connection_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedExportDataStmtProto::_Internal::query(const ResolvedExportDataStmtProto* msg) {
  return *msg->query_;
}
ResolvedExportDataStmtProto::ResolvedExportDataStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_list_(arena),
  output_column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExportDataStmtProto)
}
ResolvedExportDataStmtProto::ResolvedExportDataStmtProto(const ResolvedExportDataStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_list_(from.option_list_),
      output_column_list_(from.output_column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::zetasql::AnyResolvedScanProto(*from.query_);
  } else {
    query_ = nullptr;
  }
  if (from._internal_has_connection()) {
    connection_ = new ::zetasql::ResolvedConnectionProto(*from.connection_);
  } else {
    connection_ = nullptr;
  }
  is_value_table_ = from.is_value_table_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExportDataStmtProto)
}

inline void ResolvedExportDataStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_value_table_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_value_table_));
}

ResolvedExportDataStmtProto::~ResolvedExportDataStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExportDataStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedExportDataStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete connection_;
}

void ResolvedExportDataStmtProto::ArenaDtor(void* object) {
  ResolvedExportDataStmtProto* _this = reinterpret_cast< ResolvedExportDataStmtProto* >(object);
  (void)_this;
}
void ResolvedExportDataStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedExportDataStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedExportDataStmtProto::InternalSwap(ResolvedExportDataStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExportDataStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[97]);
}

// ===================================================================

class ResolvedDefineTableStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDefineTableStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDefineTableStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDefineTableStmtProto::_Internal::parent(const ResolvedDefineTableStmtProto* msg) {
  return *msg->parent_;
}
ResolvedDefineTableStmtProto::ResolvedDefineTableStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena),
  option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDefineTableStmtProto)
}
ResolvedDefineTableStmtProto::ResolvedDefineTableStmtProto(const ResolvedDefineTableStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_),
      option_list_(from.option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDefineTableStmtProto)
}

inline void ResolvedDefineTableStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedDefineTableStmtProto::~ResolvedDefineTableStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDefineTableStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDefineTableStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedDefineTableStmtProto::ArenaDtor(void* object) {
  ResolvedDefineTableStmtProto* _this = reinterpret_cast< ResolvedDefineTableStmtProto* >(object);
  (void)_this;
}
void ResolvedDefineTableStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDefineTableStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDefineTableStmtProto::InternalSwap(ResolvedDefineTableStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDefineTableStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[98]);
}

// ===================================================================

class ResolvedDescribeStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDescribeStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDescribeStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDescribeStmtProto::_Internal::parent(const ResolvedDescribeStmtProto* msg) {
  return *msg->parent_;
}
ResolvedDescribeStmtProto::ResolvedDescribeStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena),
  from_name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDescribeStmtProto)
}
ResolvedDescribeStmtProto::ResolvedDescribeStmtProto(const ResolvedDescribeStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_),
      from_name_path_(from.from_name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    object_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_type()) {
    object_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDescribeStmtProto)
}

inline void ResolvedDescribeStmtProto::SharedCtor() {
object_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  object_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_ = nullptr;
}

ResolvedDescribeStmtProto::~ResolvedDescribeStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDescribeStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDescribeStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  object_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedDescribeStmtProto::ArenaDtor(void* object) {
  ResolvedDescribeStmtProto* _this = reinterpret_cast< ResolvedDescribeStmtProto* >(object);
  (void)_this;
}
void ResolvedDescribeStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDescribeStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDescribeStmtProto::InternalSwap(ResolvedDescribeStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDescribeStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[99]);
}

// ===================================================================

class ResolvedShowStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedShowStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedShowStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedLiteralProto& like_expr(const ResolvedShowStmtProto* msg);
  static void set_has_like_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedShowStmtProto::_Internal::parent(const ResolvedShowStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedLiteralProto&
ResolvedShowStmtProto::_Internal::like_expr(const ResolvedShowStmtProto* msg) {
  return *msg->like_expr_;
}
ResolvedShowStmtProto::ResolvedShowStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedShowStmtProto)
}
ResolvedShowStmtProto::ResolvedShowStmtProto(const ResolvedShowStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identifier(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_like_expr()) {
    like_expr_ = new ::zetasql::ResolvedLiteralProto(*from.like_expr_);
  } else {
    like_expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedShowStmtProto)
}

inline void ResolvedShowStmtProto::SharedCtor() {
identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&like_expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(like_expr_));
}

ResolvedShowStmtProto::~ResolvedShowStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedShowStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedShowStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete like_expr_;
}

void ResolvedShowStmtProto::ArenaDtor(void* object) {
  ResolvedShowStmtProto* _this = reinterpret_cast< ResolvedShowStmtProto* >(object);
  (void)_this;
}
void ResolvedShowStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedShowStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedShowStmtProto::InternalSwap(ResolvedShowStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedShowStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[100]);
}

// ===================================================================

class ResolvedBeginStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedBeginStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedBeginStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_read_write_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedBeginStmtProto::_Internal::parent(const ResolvedBeginStmtProto* msg) {
  return *msg->parent_;
}
ResolvedBeginStmtProto::ResolvedBeginStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  isolation_level_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedBeginStmtProto)
}
ResolvedBeginStmtProto::ResolvedBeginStmtProto(const ResolvedBeginStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      isolation_level_list_(from.isolation_level_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  read_write_mode_ = from.read_write_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedBeginStmtProto)
}

inline void ResolvedBeginStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&read_write_mode_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(read_write_mode_));
}

ResolvedBeginStmtProto::~ResolvedBeginStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedBeginStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedBeginStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedBeginStmtProto::ArenaDtor(void* object) {
  ResolvedBeginStmtProto* _this = reinterpret_cast< ResolvedBeginStmtProto* >(object);
  (void)_this;
}
void ResolvedBeginStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedBeginStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedBeginStmtProto::InternalSwap(ResolvedBeginStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedBeginStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[101]);
}

// ===================================================================

class ResolvedSetTransactionStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSetTransactionStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedSetTransactionStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_read_write_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedSetTransactionStmtProto::_Internal::parent(const ResolvedSetTransactionStmtProto* msg) {
  return *msg->parent_;
}
ResolvedSetTransactionStmtProto::ResolvedSetTransactionStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  isolation_level_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSetTransactionStmtProto)
}
ResolvedSetTransactionStmtProto::ResolvedSetTransactionStmtProto(const ResolvedSetTransactionStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      isolation_level_list_(from.isolation_level_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  read_write_mode_ = from.read_write_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSetTransactionStmtProto)
}

inline void ResolvedSetTransactionStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&read_write_mode_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(read_write_mode_));
}

ResolvedSetTransactionStmtProto::~ResolvedSetTransactionStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSetTransactionStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedSetTransactionStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedSetTransactionStmtProto::ArenaDtor(void* object) {
  ResolvedSetTransactionStmtProto* _this = reinterpret_cast< ResolvedSetTransactionStmtProto* >(object);
  (void)_this;
}
void ResolvedSetTransactionStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedSetTransactionStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedSetTransactionStmtProto::InternalSwap(ResolvedSetTransactionStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSetTransactionStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[102]);
}

// ===================================================================

class ResolvedCommitStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCommitStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedCommitStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedCommitStmtProto::_Internal::parent(const ResolvedCommitStmtProto* msg) {
  return *msg->parent_;
}
ResolvedCommitStmtProto::ResolvedCommitStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCommitStmtProto)
}
ResolvedCommitStmtProto::ResolvedCommitStmtProto(const ResolvedCommitStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCommitStmtProto)
}

inline void ResolvedCommitStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedCommitStmtProto::~ResolvedCommitStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCommitStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCommitStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedCommitStmtProto::ArenaDtor(void* object) {
  ResolvedCommitStmtProto* _this = reinterpret_cast< ResolvedCommitStmtProto* >(object);
  (void)_this;
}
void ResolvedCommitStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCommitStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCommitStmtProto::InternalSwap(ResolvedCommitStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCommitStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[103]);
}

// ===================================================================

class ResolvedRollbackStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRollbackStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedRollbackStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedRollbackStmtProto::_Internal::parent(const ResolvedRollbackStmtProto* msg) {
  return *msg->parent_;
}
ResolvedRollbackStmtProto::ResolvedRollbackStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRollbackStmtProto)
}
ResolvedRollbackStmtProto::ResolvedRollbackStmtProto(const ResolvedRollbackStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRollbackStmtProto)
}

inline void ResolvedRollbackStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedRollbackStmtProto::~ResolvedRollbackStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRollbackStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedRollbackStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedRollbackStmtProto::ArenaDtor(void* object) {
  ResolvedRollbackStmtProto* _this = reinterpret_cast< ResolvedRollbackStmtProto* >(object);
  (void)_this;
}
void ResolvedRollbackStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedRollbackStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedRollbackStmtProto::InternalSwap(ResolvedRollbackStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRollbackStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[104]);
}

// ===================================================================

class ResolvedStartBatchStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedStartBatchStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedStartBatchStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_batch_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedStartBatchStmtProto::_Internal::parent(const ResolvedStartBatchStmtProto* msg) {
  return *msg->parent_;
}
ResolvedStartBatchStmtProto::ResolvedStartBatchStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedStartBatchStmtProto)
}
ResolvedStartBatchStmtProto::ResolvedStartBatchStmtProto(const ResolvedStartBatchStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  batch_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    batch_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_batch_type()) {
    batch_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_batch_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedStartBatchStmtProto)
}

inline void ResolvedStartBatchStmtProto::SharedCtor() {
batch_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  batch_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_ = nullptr;
}

ResolvedStartBatchStmtProto::~ResolvedStartBatchStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedStartBatchStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedStartBatchStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  batch_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedStartBatchStmtProto::ArenaDtor(void* object) {
  ResolvedStartBatchStmtProto* _this = reinterpret_cast< ResolvedStartBatchStmtProto* >(object);
  (void)_this;
}
void ResolvedStartBatchStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedStartBatchStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedStartBatchStmtProto::InternalSwap(ResolvedStartBatchStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedStartBatchStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[105]);
}

// ===================================================================

class ResolvedRunBatchStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRunBatchStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedRunBatchStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedRunBatchStmtProto::_Internal::parent(const ResolvedRunBatchStmtProto* msg) {
  return *msg->parent_;
}
ResolvedRunBatchStmtProto::ResolvedRunBatchStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRunBatchStmtProto)
}
ResolvedRunBatchStmtProto::ResolvedRunBatchStmtProto(const ResolvedRunBatchStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRunBatchStmtProto)
}

inline void ResolvedRunBatchStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedRunBatchStmtProto::~ResolvedRunBatchStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRunBatchStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedRunBatchStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedRunBatchStmtProto::ArenaDtor(void* object) {
  ResolvedRunBatchStmtProto* _this = reinterpret_cast< ResolvedRunBatchStmtProto* >(object);
  (void)_this;
}
void ResolvedRunBatchStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedRunBatchStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedRunBatchStmtProto::InternalSwap(ResolvedRunBatchStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRunBatchStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[106]);
}

// ===================================================================

class ResolvedAbortBatchStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAbortBatchStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAbortBatchStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAbortBatchStmtProto::_Internal::parent(const ResolvedAbortBatchStmtProto* msg) {
  return *msg->parent_;
}
ResolvedAbortBatchStmtProto::ResolvedAbortBatchStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAbortBatchStmtProto)
}
ResolvedAbortBatchStmtProto::ResolvedAbortBatchStmtProto(const ResolvedAbortBatchStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAbortBatchStmtProto)
}

inline void ResolvedAbortBatchStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedAbortBatchStmtProto::~ResolvedAbortBatchStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAbortBatchStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAbortBatchStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAbortBatchStmtProto::ArenaDtor(void* object) {
  ResolvedAbortBatchStmtProto* _this = reinterpret_cast< ResolvedAbortBatchStmtProto* >(object);
  (void)_this;
}
void ResolvedAbortBatchStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAbortBatchStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAbortBatchStmtProto::InternalSwap(ResolvedAbortBatchStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAbortBatchStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[107]);
}

// ===================================================================

class ResolvedDropStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_drop_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropStmtProto::_Internal::parent(const ResolvedDropStmtProto* msg) {
  return *msg->parent_;
}
ResolvedDropStmtProto::ResolvedDropStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropStmtProto)
}
ResolvedDropStmtProto::ResolvedDropStmtProto(const ResolvedDropStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    object_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_type()) {
    object_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  ::memcpy(&is_if_exists_, &from.is_if_exists_,
    static_cast<size_t>(reinterpret_cast<char*>(&drop_mode_) -
    reinterpret_cast<char*>(&is_if_exists_)) + sizeof(drop_mode_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropStmtProto)
}

inline void ResolvedDropStmtProto::SharedCtor() {
object_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  object_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&drop_mode_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(drop_mode_));
}

ResolvedDropStmtProto::~ResolvedDropStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDropStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  object_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedDropStmtProto::ArenaDtor(void* object) {
  ResolvedDropStmtProto* _this = reinterpret_cast< ResolvedDropStmtProto* >(object);
  (void)_this;
}
void ResolvedDropStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDropStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDropStmtProto::InternalSwap(ResolvedDropStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[108]);
}

// ===================================================================

class ResolvedDropMaterializedViewStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropMaterializedViewStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropMaterializedViewStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropMaterializedViewStmtProto::_Internal::parent(const ResolvedDropMaterializedViewStmtProto* msg) {
  return *msg->parent_;
}
ResolvedDropMaterializedViewStmtProto::ResolvedDropMaterializedViewStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropMaterializedViewStmtProto)
}
ResolvedDropMaterializedViewStmtProto::ResolvedDropMaterializedViewStmtProto(const ResolvedDropMaterializedViewStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropMaterializedViewStmtProto)
}

inline void ResolvedDropMaterializedViewStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedDropMaterializedViewStmtProto::~ResolvedDropMaterializedViewStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropMaterializedViewStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDropMaterializedViewStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedDropMaterializedViewStmtProto::ArenaDtor(void* object) {
  ResolvedDropMaterializedViewStmtProto* _this = reinterpret_cast< ResolvedDropMaterializedViewStmtProto* >(object);
  (void)_this;
}
void ResolvedDropMaterializedViewStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDropMaterializedViewStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDropMaterializedViewStmtProto::InternalSwap(ResolvedDropMaterializedViewStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropMaterializedViewStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[109]);
}

// ===================================================================

class ResolvedDropSnapshotTableStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropSnapshotTableStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropSnapshotTableStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropSnapshotTableStmtProto::_Internal::parent(const ResolvedDropSnapshotTableStmtProto* msg) {
  return *msg->parent_;
}
ResolvedDropSnapshotTableStmtProto::ResolvedDropSnapshotTableStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropSnapshotTableStmtProto)
}
ResolvedDropSnapshotTableStmtProto::ResolvedDropSnapshotTableStmtProto(const ResolvedDropSnapshotTableStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropSnapshotTableStmtProto)
}

inline void ResolvedDropSnapshotTableStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedDropSnapshotTableStmtProto::~ResolvedDropSnapshotTableStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropSnapshotTableStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDropSnapshotTableStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedDropSnapshotTableStmtProto::ArenaDtor(void* object) {
  ResolvedDropSnapshotTableStmtProto* _this = reinterpret_cast< ResolvedDropSnapshotTableStmtProto* >(object);
  (void)_this;
}
void ResolvedDropSnapshotTableStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDropSnapshotTableStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDropSnapshotTableStmtProto::InternalSwap(ResolvedDropSnapshotTableStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropSnapshotTableStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[110]);
}

// ===================================================================

class ResolvedRecursiveRefScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRecursiveRefScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedRecursiveRefScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedRecursiveRefScanProto::_Internal::parent(const ResolvedRecursiveRefScanProto* msg) {
  return *msg->parent_;
}
ResolvedRecursiveRefScanProto::ResolvedRecursiveRefScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRecursiveRefScanProto)
}
ResolvedRecursiveRefScanProto::ResolvedRecursiveRefScanProto(const ResolvedRecursiveRefScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRecursiveRefScanProto)
}

inline void ResolvedRecursiveRefScanProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedRecursiveRefScanProto::~ResolvedRecursiveRefScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRecursiveRefScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedRecursiveRefScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedRecursiveRefScanProto::ArenaDtor(void* object) {
  ResolvedRecursiveRefScanProto* _this = reinterpret_cast< ResolvedRecursiveRefScanProto* >(object);
  (void)_this;
}
void ResolvedRecursiveRefScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedRecursiveRefScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedRecursiveRefScanProto::InternalSwap(ResolvedRecursiveRefScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRecursiveRefScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[111]);
}

// ===================================================================

class ResolvedRecursiveScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRecursiveScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedRecursiveScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_op_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::ResolvedSetOperationItemProto& non_recursive_term(const ResolvedRecursiveScanProto* msg);
  static void set_has_non_recursive_term(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedSetOperationItemProto& recursive_term(const ResolvedRecursiveScanProto* msg);
  static void set_has_recursive_term(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedRecursiveScanProto::_Internal::parent(const ResolvedRecursiveScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedSetOperationItemProto&
ResolvedRecursiveScanProto::_Internal::non_recursive_term(const ResolvedRecursiveScanProto* msg) {
  return *msg->non_recursive_term_;
}
const ::zetasql::ResolvedSetOperationItemProto&
ResolvedRecursiveScanProto::_Internal::recursive_term(const ResolvedRecursiveScanProto* msg) {
  return *msg->recursive_term_;
}
ResolvedRecursiveScanProto::ResolvedRecursiveScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRecursiveScanProto)
}
ResolvedRecursiveScanProto::ResolvedRecursiveScanProto(const ResolvedRecursiveScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_non_recursive_term()) {
    non_recursive_term_ = new ::zetasql::ResolvedSetOperationItemProto(*from.non_recursive_term_);
  } else {
    non_recursive_term_ = nullptr;
  }
  if (from._internal_has_recursive_term()) {
    recursive_term_ = new ::zetasql::ResolvedSetOperationItemProto(*from.recursive_term_);
  } else {
    recursive_term_ = nullptr;
  }
  op_type_ = from.op_type_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRecursiveScanProto)
}

inline void ResolvedRecursiveScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_type_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(op_type_));
}

ResolvedRecursiveScanProto::~ResolvedRecursiveScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRecursiveScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedRecursiveScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete non_recursive_term_;
  if (this != internal_default_instance()) delete recursive_term_;
}

void ResolvedRecursiveScanProto::ArenaDtor(void* object) {
  ResolvedRecursiveScanProto* _this = reinterpret_cast< ResolvedRecursiveScanProto* >(object);
  (void)_this;
}
void ResolvedRecursiveScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedRecursiveScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedRecursiveScanProto::InternalSwap(ResolvedRecursiveScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRecursiveScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[112]);
}

// ===================================================================

class ResolvedWithScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWithScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedWithScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedWithScanProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recursive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedWithScanProto::_Internal::parent(const ResolvedWithScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedWithScanProto::_Internal::query(const ResolvedWithScanProto* msg) {
  return *msg->query_;
}
ResolvedWithScanProto::ResolvedWithScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  with_entry_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWithScanProto)
}
ResolvedWithScanProto::ResolvedWithScanProto(const ResolvedWithScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      with_entry_list_(from.with_entry_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::zetasql::AnyResolvedScanProto(*from.query_);
  } else {
    query_ = nullptr;
  }
  recursive_ = from.recursive_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWithScanProto)
}

inline void ResolvedWithScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recursive_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(recursive_));
}

ResolvedWithScanProto::~ResolvedWithScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWithScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedWithScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete query_;
}

void ResolvedWithScanProto::ArenaDtor(void* object) {
  ResolvedWithScanProto* _this = reinterpret_cast< ResolvedWithScanProto* >(object);
  (void)_this;
}
void ResolvedWithScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedWithScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedWithScanProto::InternalSwap(ResolvedWithScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWithScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[113]);
}

// ===================================================================

class ResolvedWithEntryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWithEntryProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedWithEntryProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_with_query_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& with_subquery(const ResolvedWithEntryProto* msg);
  static void set_has_with_subquery(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedWithEntryProto::_Internal::parent(const ResolvedWithEntryProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedWithEntryProto::_Internal::with_subquery(const ResolvedWithEntryProto* msg) {
  return *msg->with_subquery_;
}
ResolvedWithEntryProto::ResolvedWithEntryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWithEntryProto)
}
ResolvedWithEntryProto::ResolvedWithEntryProto(const ResolvedWithEntryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  with_query_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    with_query_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_with_query_name()) {
    with_query_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_with_query_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_with_subquery()) {
    with_subquery_ = new ::zetasql::AnyResolvedScanProto(*from.with_subquery_);
  } else {
    with_subquery_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWithEntryProto)
}

inline void ResolvedWithEntryProto::SharedCtor() {
with_query_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  with_query_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&with_subquery_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(with_subquery_));
}

ResolvedWithEntryProto::~ResolvedWithEntryProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWithEntryProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedWithEntryProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  with_query_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete with_subquery_;
}

void ResolvedWithEntryProto::ArenaDtor(void* object) {
  ResolvedWithEntryProto* _this = reinterpret_cast< ResolvedWithEntryProto* >(object);
  (void)_this;
}
void ResolvedWithEntryProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedWithEntryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedWithEntryProto::InternalSwap(ResolvedWithEntryProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWithEntryProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[114]);
}

// ===================================================================

class ResolvedOptionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedOptionProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedOptionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_qualifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& value(const ResolvedOptionProto* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedOptionProto::_Internal::parent(const ResolvedOptionProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedOptionProto::_Internal::value(const ResolvedOptionProto* msg) {
  return *msg->value_;
}
ResolvedOptionProto::ResolvedOptionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedOptionProto)
}
ResolvedOptionProto::ResolvedOptionProto(const ResolvedOptionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    qualifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_qualifier()) {
    qualifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_qualifier(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::zetasql::AnyResolvedExprProto(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedOptionProto)
}

inline void ResolvedOptionProto::SharedCtor() {
qualifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  qualifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(value_));
}

ResolvedOptionProto::~ResolvedOptionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedOptionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedOptionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  qualifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete value_;
}

void ResolvedOptionProto::ArenaDtor(void* object) {
  ResolvedOptionProto* _this = reinterpret_cast< ResolvedOptionProto* >(object);
  (void)_this;
}
void ResolvedOptionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedOptionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedOptionProto::InternalSwap(ResolvedOptionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedOptionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[115]);
}

// ===================================================================

class ResolvedWindowPartitioningProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWindowPartitioningProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedWindowPartitioningProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedWindowPartitioningProto::_Internal::parent(const ResolvedWindowPartitioningProto* msg) {
  return *msg->parent_;
}
ResolvedWindowPartitioningProto::ResolvedWindowPartitioningProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  partition_by_list_(arena),
  hint_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWindowPartitioningProto)
}
ResolvedWindowPartitioningProto::ResolvedWindowPartitioningProto(const ResolvedWindowPartitioningProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      partition_by_list_(from.partition_by_list_),
      hint_list_(from.hint_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWindowPartitioningProto)
}

inline void ResolvedWindowPartitioningProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedWindowPartitioningProto::~ResolvedWindowPartitioningProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWindowPartitioningProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedWindowPartitioningProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedWindowPartitioningProto::ArenaDtor(void* object) {
  ResolvedWindowPartitioningProto* _this = reinterpret_cast< ResolvedWindowPartitioningProto* >(object);
  (void)_this;
}
void ResolvedWindowPartitioningProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedWindowPartitioningProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedWindowPartitioningProto::InternalSwap(ResolvedWindowPartitioningProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWindowPartitioningProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[116]);
}

// ===================================================================

class ResolvedWindowOrderingProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWindowOrderingProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedWindowOrderingProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedWindowOrderingProto::_Internal::parent(const ResolvedWindowOrderingProto* msg) {
  return *msg->parent_;
}
ResolvedWindowOrderingProto::ResolvedWindowOrderingProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  order_by_item_list_(arena),
  hint_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWindowOrderingProto)
}
ResolvedWindowOrderingProto::ResolvedWindowOrderingProto(const ResolvedWindowOrderingProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      order_by_item_list_(from.order_by_item_list_),
      hint_list_(from.hint_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWindowOrderingProto)
}

inline void ResolvedWindowOrderingProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedWindowOrderingProto::~ResolvedWindowOrderingProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWindowOrderingProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedWindowOrderingProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedWindowOrderingProto::ArenaDtor(void* object) {
  ResolvedWindowOrderingProto* _this = reinterpret_cast< ResolvedWindowOrderingProto* >(object);
  (void)_this;
}
void ResolvedWindowOrderingProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedWindowOrderingProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedWindowOrderingProto::InternalSwap(ResolvedWindowOrderingProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWindowOrderingProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[117]);
}

// ===================================================================

class ResolvedWindowFrameProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWindowFrameProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedWindowFrameProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::ResolvedWindowFrameExprProto& start_expr(const ResolvedWindowFrameProto* msg);
  static void set_has_start_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedWindowFrameExprProto& end_expr(const ResolvedWindowFrameProto* msg);
  static void set_has_end_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedWindowFrameProto::_Internal::parent(const ResolvedWindowFrameProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedWindowFrameExprProto&
ResolvedWindowFrameProto::_Internal::start_expr(const ResolvedWindowFrameProto* msg) {
  return *msg->start_expr_;
}
const ::zetasql::ResolvedWindowFrameExprProto&
ResolvedWindowFrameProto::_Internal::end_expr(const ResolvedWindowFrameProto* msg) {
  return *msg->end_expr_;
}
ResolvedWindowFrameProto::ResolvedWindowFrameProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWindowFrameProto)
}
ResolvedWindowFrameProto::ResolvedWindowFrameProto(const ResolvedWindowFrameProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_start_expr()) {
    start_expr_ = new ::zetasql::ResolvedWindowFrameExprProto(*from.start_expr_);
  } else {
    start_expr_ = nullptr;
  }
  if (from._internal_has_end_expr()) {
    end_expr_ = new ::zetasql::ResolvedWindowFrameExprProto(*from.end_expr_);
  } else {
    end_expr_ = nullptr;
  }
  frame_unit_ = from.frame_unit_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWindowFrameProto)
}

inline void ResolvedWindowFrameProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_unit_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(frame_unit_));
}

ResolvedWindowFrameProto::~ResolvedWindowFrameProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWindowFrameProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedWindowFrameProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete start_expr_;
  if (this != internal_default_instance()) delete end_expr_;
}

void ResolvedWindowFrameProto::ArenaDtor(void* object) {
  ResolvedWindowFrameProto* _this = reinterpret_cast< ResolvedWindowFrameProto* >(object);
  (void)_this;
}
void ResolvedWindowFrameProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedWindowFrameProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedWindowFrameProto::InternalSwap(ResolvedWindowFrameProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWindowFrameProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[118]);
}

// ===================================================================

class ResolvedAnalyticFunctionGroupProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAnalyticFunctionGroupProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedAnalyticFunctionGroupProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedWindowPartitioningProto& partition_by(const ResolvedAnalyticFunctionGroupProto* msg);
  static void set_has_partition_by(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedWindowOrderingProto& order_by(const ResolvedAnalyticFunctionGroupProto* msg);
  static void set_has_order_by(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedAnalyticFunctionGroupProto::_Internal::parent(const ResolvedAnalyticFunctionGroupProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedWindowPartitioningProto&
ResolvedAnalyticFunctionGroupProto::_Internal::partition_by(const ResolvedAnalyticFunctionGroupProto* msg) {
  return *msg->partition_by_;
}
const ::zetasql::ResolvedWindowOrderingProto&
ResolvedAnalyticFunctionGroupProto::_Internal::order_by(const ResolvedAnalyticFunctionGroupProto* msg) {
  return *msg->order_by_;
}
ResolvedAnalyticFunctionGroupProto::ResolvedAnalyticFunctionGroupProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  analytic_function_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAnalyticFunctionGroupProto)
}
ResolvedAnalyticFunctionGroupProto::ResolvedAnalyticFunctionGroupProto(const ResolvedAnalyticFunctionGroupProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      analytic_function_list_(from.analytic_function_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_partition_by()) {
    partition_by_ = new ::zetasql::ResolvedWindowPartitioningProto(*from.partition_by_);
  } else {
    partition_by_ = nullptr;
  }
  if (from._internal_has_order_by()) {
    order_by_ = new ::zetasql::ResolvedWindowOrderingProto(*from.order_by_);
  } else {
    order_by_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAnalyticFunctionGroupProto)
}

inline void ResolvedAnalyticFunctionGroupProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&order_by_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(order_by_));
}

ResolvedAnalyticFunctionGroupProto::~ResolvedAnalyticFunctionGroupProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAnalyticFunctionGroupProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAnalyticFunctionGroupProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete partition_by_;
  if (this != internal_default_instance()) delete order_by_;
}

void ResolvedAnalyticFunctionGroupProto::ArenaDtor(void* object) {
  ResolvedAnalyticFunctionGroupProto* _this = reinterpret_cast< ResolvedAnalyticFunctionGroupProto* >(object);
  (void)_this;
}
void ResolvedAnalyticFunctionGroupProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAnalyticFunctionGroupProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAnalyticFunctionGroupProto::InternalSwap(ResolvedAnalyticFunctionGroupProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAnalyticFunctionGroupProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[119]);
}

// ===================================================================

class ResolvedWindowFrameExprProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedWindowFrameExprProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedWindowFrameExprProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_boundary_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& expression(const ResolvedWindowFrameExprProto* msg);
  static void set_has_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedWindowFrameExprProto::_Internal::parent(const ResolvedWindowFrameExprProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedWindowFrameExprProto::_Internal::expression(const ResolvedWindowFrameExprProto* msg) {
  return *msg->expression_;
}
ResolvedWindowFrameExprProto::ResolvedWindowFrameExprProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedWindowFrameExprProto)
}
ResolvedWindowFrameExprProto::ResolvedWindowFrameExprProto(const ResolvedWindowFrameExprProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::zetasql::AnyResolvedExprProto(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  boundary_type_ = from.boundary_type_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedWindowFrameExprProto)
}

inline void ResolvedWindowFrameExprProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&boundary_type_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(boundary_type_));
}

ResolvedWindowFrameExprProto::~ResolvedWindowFrameExprProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedWindowFrameExprProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedWindowFrameExprProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expression_;
}

void ResolvedWindowFrameExprProto::ArenaDtor(void* object) {
  ResolvedWindowFrameExprProto* _this = reinterpret_cast< ResolvedWindowFrameExprProto* >(object);
  (void)_this;
}
void ResolvedWindowFrameExprProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedWindowFrameExprProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedWindowFrameExprProto::InternalSwap(ResolvedWindowFrameExprProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedWindowFrameExprProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[120]);
}

// ===================================================================

class ResolvedDMLValueProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDMLValueProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedDMLValueProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& value(const ResolvedDMLValueProto* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedDMLValueProto::_Internal::parent(const ResolvedDMLValueProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedDMLValueProto::_Internal::value(const ResolvedDMLValueProto* msg) {
  return *msg->value_;
}
ResolvedDMLValueProto::ResolvedDMLValueProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDMLValueProto)
}
ResolvedDMLValueProto::ResolvedDMLValueProto(const ResolvedDMLValueProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::zetasql::AnyResolvedExprProto(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDMLValueProto)
}

inline void ResolvedDMLValueProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(value_));
}

ResolvedDMLValueProto::~ResolvedDMLValueProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDMLValueProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDMLValueProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete value_;
}

void ResolvedDMLValueProto::ArenaDtor(void* object) {
  ResolvedDMLValueProto* _this = reinterpret_cast< ResolvedDMLValueProto* >(object);
  (void)_this;
}
void ResolvedDMLValueProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDMLValueProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDMLValueProto::InternalSwap(ResolvedDMLValueProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDMLValueProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[121]);
}

// ===================================================================

class ResolvedDMLDefaultProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDMLDefaultProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedDMLDefaultProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedDMLDefaultProto::_Internal::parent(const ResolvedDMLDefaultProto* msg) {
  return *msg->parent_;
}
ResolvedDMLDefaultProto::ResolvedDMLDefaultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDMLDefaultProto)
}
ResolvedDMLDefaultProto::ResolvedDMLDefaultProto(const ResolvedDMLDefaultProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDMLDefaultProto)
}

inline void ResolvedDMLDefaultProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedDMLDefaultProto::~ResolvedDMLDefaultProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDMLDefaultProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDMLDefaultProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedDMLDefaultProto::ArenaDtor(void* object) {
  ResolvedDMLDefaultProto* _this = reinterpret_cast< ResolvedDMLDefaultProto* >(object);
  (void)_this;
}
void ResolvedDMLDefaultProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDMLDefaultProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDMLDefaultProto::InternalSwap(ResolvedDMLDefaultProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDMLDefaultProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[122]);
}

// ===================================================================

class ResolvedAssertStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAssertStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAssertStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& expression(const ResolvedAssertStmtProto* msg);
  static void set_has_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAssertStmtProto::_Internal::parent(const ResolvedAssertStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedAssertStmtProto::_Internal::expression(const ResolvedAssertStmtProto* msg) {
  return *msg->expression_;
}
ResolvedAssertStmtProto::ResolvedAssertStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAssertStmtProto)
}
ResolvedAssertStmtProto::ResolvedAssertStmtProto(const ResolvedAssertStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::zetasql::AnyResolvedExprProto(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAssertStmtProto)
}

inline void ResolvedAssertStmtProto::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expression_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(expression_));
}

ResolvedAssertStmtProto::~ResolvedAssertStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAssertStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAssertStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expression_;
}

void ResolvedAssertStmtProto::ArenaDtor(void* object) {
  ResolvedAssertStmtProto* _this = reinterpret_cast< ResolvedAssertStmtProto* >(object);
  (void)_this;
}
void ResolvedAssertStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAssertStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAssertStmtProto::InternalSwap(ResolvedAssertStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAssertStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[123]);
}

// ===================================================================

class ResolvedAssertRowsModifiedProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAssertRowsModifiedProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedAssertRowsModifiedProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& rows(const ResolvedAssertRowsModifiedProto* msg);
  static void set_has_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedAssertRowsModifiedProto::_Internal::parent(const ResolvedAssertRowsModifiedProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedAssertRowsModifiedProto::_Internal::rows(const ResolvedAssertRowsModifiedProto* msg) {
  return *msg->rows_;
}
ResolvedAssertRowsModifiedProto::ResolvedAssertRowsModifiedProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAssertRowsModifiedProto)
}
ResolvedAssertRowsModifiedProto::ResolvedAssertRowsModifiedProto(const ResolvedAssertRowsModifiedProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_rows()) {
    rows_ = new ::zetasql::AnyResolvedExprProto(*from.rows_);
  } else {
    rows_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAssertRowsModifiedProto)
}

inline void ResolvedAssertRowsModifiedProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rows_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(rows_));
}

ResolvedAssertRowsModifiedProto::~ResolvedAssertRowsModifiedProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAssertRowsModifiedProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAssertRowsModifiedProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete rows_;
}

void ResolvedAssertRowsModifiedProto::ArenaDtor(void* object) {
  ResolvedAssertRowsModifiedProto* _this = reinterpret_cast< ResolvedAssertRowsModifiedProto* >(object);
  (void)_this;
}
void ResolvedAssertRowsModifiedProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAssertRowsModifiedProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAssertRowsModifiedProto::InternalSwap(ResolvedAssertRowsModifiedProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAssertRowsModifiedProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[124]);
}

// ===================================================================

class ResolvedInsertRowProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedInsertRowProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedInsertRowProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedInsertRowProto::_Internal::parent(const ResolvedInsertRowProto* msg) {
  return *msg->parent_;
}
ResolvedInsertRowProto::ResolvedInsertRowProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedInsertRowProto)
}
ResolvedInsertRowProto::ResolvedInsertRowProto(const ResolvedInsertRowProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_list_(from.value_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedInsertRowProto)
}

inline void ResolvedInsertRowProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedInsertRowProto::~ResolvedInsertRowProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedInsertRowProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedInsertRowProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedInsertRowProto::ArenaDtor(void* object) {
  ResolvedInsertRowProto* _this = reinterpret_cast< ResolvedInsertRowProto* >(object);
  (void)_this;
}
void ResolvedInsertRowProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedInsertRowProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedInsertRowProto::InternalSwap(ResolvedInsertRowProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedInsertRowProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[125]);
}

// ===================================================================

class ResolvedInsertStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedInsertStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedInsertStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedInsertStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_insert_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zetasql::ResolvedAssertRowsModifiedProto& assert_rows_modified(const ResolvedInsertStmtProto* msg);
  static void set_has_assert_rows_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedReturningClauseProto& returning(const ResolvedInsertStmtProto* msg);
  static void set_has_returning(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedInsertStmtProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedInsertStmtProto::_Internal::parent(const ResolvedInsertStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedInsertStmtProto::_Internal::table_scan(const ResolvedInsertStmtProto* msg) {
  return *msg->table_scan_;
}
const ::zetasql::ResolvedAssertRowsModifiedProto&
ResolvedInsertStmtProto::_Internal::assert_rows_modified(const ResolvedInsertStmtProto* msg) {
  return *msg->assert_rows_modified_;
}
const ::zetasql::ResolvedReturningClauseProto&
ResolvedInsertStmtProto::_Internal::returning(const ResolvedInsertStmtProto* msg) {
  return *msg->returning_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedInsertStmtProto::_Internal::query(const ResolvedInsertStmtProto* msg) {
  return *msg->query_;
}
void ResolvedInsertStmtProto::clear_insert_column_list() {
  insert_column_list_.Clear();
}
void ResolvedInsertStmtProto::clear_query_output_column_list() {
  query_output_column_list_.Clear();
}
ResolvedInsertStmtProto::ResolvedInsertStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  insert_column_list_(arena),
  row_list_(arena),
  query_output_column_list_(arena),
  query_parameter_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedInsertStmtProto)
}
ResolvedInsertStmtProto::ResolvedInsertStmtProto(const ResolvedInsertStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      insert_column_list_(from.insert_column_list_),
      row_list_(from.row_list_),
      query_output_column_list_(from.query_output_column_list_),
      query_parameter_list_(from.query_parameter_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_table_scan()) {
    table_scan_ = new ::zetasql::ResolvedTableScanProto(*from.table_scan_);
  } else {
    table_scan_ = nullptr;
  }
  if (from._internal_has_assert_rows_modified()) {
    assert_rows_modified_ = new ::zetasql::ResolvedAssertRowsModifiedProto(*from.assert_rows_modified_);
  } else {
    assert_rows_modified_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::zetasql::AnyResolvedScanProto(*from.query_);
  } else {
    query_ = nullptr;
  }
  if (from._internal_has_returning()) {
    returning_ = new ::zetasql::ResolvedReturningClauseProto(*from.returning_);
  } else {
    returning_ = nullptr;
  }
  insert_mode_ = from.insert_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedInsertStmtProto)
}

inline void ResolvedInsertStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&insert_mode_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(insert_mode_));
}

ResolvedInsertStmtProto::~ResolvedInsertStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedInsertStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedInsertStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete table_scan_;
  if (this != internal_default_instance()) delete assert_rows_modified_;
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete returning_;
}

void ResolvedInsertStmtProto::ArenaDtor(void* object) {
  ResolvedInsertStmtProto* _this = reinterpret_cast< ResolvedInsertStmtProto* >(object);
  (void)_this;
}
void ResolvedInsertStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedInsertStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedInsertStmtProto::InternalSwap(ResolvedInsertStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedInsertStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[126]);
}

// ===================================================================

class ResolvedDeleteStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDeleteStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDeleteStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedDeleteStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedAssertRowsModifiedProto& assert_rows_modified(const ResolvedDeleteStmtProto* msg);
  static void set_has_assert_rows_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedReturningClauseProto& returning(const ResolvedDeleteStmtProto* msg);
  static void set_has_returning(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& array_offset_column(const ResolvedDeleteStmtProto* msg);
  static void set_has_array_offset_column(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::AnyResolvedExprProto& where_expr(const ResolvedDeleteStmtProto* msg);
  static void set_has_where_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDeleteStmtProto::_Internal::parent(const ResolvedDeleteStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedDeleteStmtProto::_Internal::table_scan(const ResolvedDeleteStmtProto* msg) {
  return *msg->table_scan_;
}
const ::zetasql::ResolvedAssertRowsModifiedProto&
ResolvedDeleteStmtProto::_Internal::assert_rows_modified(const ResolvedDeleteStmtProto* msg) {
  return *msg->assert_rows_modified_;
}
const ::zetasql::ResolvedReturningClauseProto&
ResolvedDeleteStmtProto::_Internal::returning(const ResolvedDeleteStmtProto* msg) {
  return *msg->returning_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedDeleteStmtProto::_Internal::array_offset_column(const ResolvedDeleteStmtProto* msg) {
  return *msg->array_offset_column_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedDeleteStmtProto::_Internal::where_expr(const ResolvedDeleteStmtProto* msg) {
  return *msg->where_expr_;
}
ResolvedDeleteStmtProto::ResolvedDeleteStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDeleteStmtProto)
}
ResolvedDeleteStmtProto::ResolvedDeleteStmtProto(const ResolvedDeleteStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_table_scan()) {
    table_scan_ = new ::zetasql::ResolvedTableScanProto(*from.table_scan_);
  } else {
    table_scan_ = nullptr;
  }
  if (from._internal_has_assert_rows_modified()) {
    assert_rows_modified_ = new ::zetasql::ResolvedAssertRowsModifiedProto(*from.assert_rows_modified_);
  } else {
    assert_rows_modified_ = nullptr;
  }
  if (from._internal_has_where_expr()) {
    where_expr_ = new ::zetasql::AnyResolvedExprProto(*from.where_expr_);
  } else {
    where_expr_ = nullptr;
  }
  if (from._internal_has_array_offset_column()) {
    array_offset_column_ = new ::zetasql::ResolvedColumnHolderProto(*from.array_offset_column_);
  } else {
    array_offset_column_ = nullptr;
  }
  if (from._internal_has_returning()) {
    returning_ = new ::zetasql::ResolvedReturningClauseProto(*from.returning_);
  } else {
    returning_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDeleteStmtProto)
}

inline void ResolvedDeleteStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&returning_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(returning_));
}

ResolvedDeleteStmtProto::~ResolvedDeleteStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDeleteStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDeleteStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete table_scan_;
  if (this != internal_default_instance()) delete assert_rows_modified_;
  if (this != internal_default_instance()) delete where_expr_;
  if (this != internal_default_instance()) delete array_offset_column_;
  if (this != internal_default_instance()) delete returning_;
}

void ResolvedDeleteStmtProto::ArenaDtor(void* object) {
  ResolvedDeleteStmtProto* _this = reinterpret_cast< ResolvedDeleteStmtProto* >(object);
  (void)_this;
}
void ResolvedDeleteStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDeleteStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDeleteStmtProto::InternalSwap(ResolvedDeleteStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDeleteStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[127]);
}

// ===================================================================

class ResolvedUpdateItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedUpdateItemProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedUpdateItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& target(const ResolvedUpdateItemProto* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedDMLValueProto& set_value(const ResolvedUpdateItemProto* msg);
  static void set_has_set_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& element_column(const ResolvedUpdateItemProto* msg);
  static void set_has_element_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedUpdateItemProto::_Internal::parent(const ResolvedUpdateItemProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedUpdateItemProto::_Internal::target(const ResolvedUpdateItemProto* msg) {
  return *msg->target_;
}
const ::zetasql::ResolvedDMLValueProto&
ResolvedUpdateItemProto::_Internal::set_value(const ResolvedUpdateItemProto* msg) {
  return *msg->set_value_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedUpdateItemProto::_Internal::element_column(const ResolvedUpdateItemProto* msg) {
  return *msg->element_column_;
}
ResolvedUpdateItemProto::ResolvedUpdateItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  delete_list_(arena),
  update_list_(arena),
  insert_list_(arena),
  array_update_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedUpdateItemProto)
}
ResolvedUpdateItemProto::ResolvedUpdateItemProto(const ResolvedUpdateItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      delete_list_(from.delete_list_),
      update_list_(from.update_list_),
      insert_list_(from.insert_list_),
      array_update_list_(from.array_update_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_target()) {
    target_ = new ::zetasql::AnyResolvedExprProto(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from._internal_has_set_value()) {
    set_value_ = new ::zetasql::ResolvedDMLValueProto(*from.set_value_);
  } else {
    set_value_ = nullptr;
  }
  if (from._internal_has_element_column()) {
    element_column_ = new ::zetasql::ResolvedColumnHolderProto(*from.element_column_);
  } else {
    element_column_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedUpdateItemProto)
}

inline void ResolvedUpdateItemProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&element_column_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(element_column_));
}

ResolvedUpdateItemProto::~ResolvedUpdateItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedUpdateItemProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedUpdateItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete set_value_;
  if (this != internal_default_instance()) delete element_column_;
}

void ResolvedUpdateItemProto::ArenaDtor(void* object) {
  ResolvedUpdateItemProto* _this = reinterpret_cast< ResolvedUpdateItemProto* >(object);
  (void)_this;
}
void ResolvedUpdateItemProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedUpdateItemProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedUpdateItemProto::InternalSwap(ResolvedUpdateItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedUpdateItemProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[128]);
}

// ===================================================================

class ResolvedUpdateArrayItemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedUpdateArrayItemProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedUpdateArrayItemProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& offset(const ResolvedUpdateArrayItemProto* msg);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedUpdateItemProto& update_item(const ResolvedUpdateArrayItemProto* msg);
  static void set_has_update_item(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedUpdateArrayItemProto::_Internal::parent(const ResolvedUpdateArrayItemProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedUpdateArrayItemProto::_Internal::offset(const ResolvedUpdateArrayItemProto* msg) {
  return *msg->offset_;
}
const ::zetasql::ResolvedUpdateItemProto&
ResolvedUpdateArrayItemProto::_Internal::update_item(const ResolvedUpdateArrayItemProto* msg) {
  return *msg->update_item_;
}
ResolvedUpdateArrayItemProto::ResolvedUpdateArrayItemProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedUpdateArrayItemProto)
}
ResolvedUpdateArrayItemProto::ResolvedUpdateArrayItemProto(const ResolvedUpdateArrayItemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_offset()) {
    offset_ = new ::zetasql::AnyResolvedExprProto(*from.offset_);
  } else {
    offset_ = nullptr;
  }
  if (from._internal_has_update_item()) {
    update_item_ = new ::zetasql::ResolvedUpdateItemProto(*from.update_item_);
  } else {
    update_item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedUpdateArrayItemProto)
}

inline void ResolvedUpdateArrayItemProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_item_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(update_item_));
}

ResolvedUpdateArrayItemProto::~ResolvedUpdateArrayItemProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedUpdateArrayItemProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedUpdateArrayItemProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete offset_;
  if (this != internal_default_instance()) delete update_item_;
}

void ResolvedUpdateArrayItemProto::ArenaDtor(void* object) {
  ResolvedUpdateArrayItemProto* _this = reinterpret_cast< ResolvedUpdateArrayItemProto* >(object);
  (void)_this;
}
void ResolvedUpdateArrayItemProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedUpdateArrayItemProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedUpdateArrayItemProto::InternalSwap(ResolvedUpdateArrayItemProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedUpdateArrayItemProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[129]);
}

// ===================================================================

class ResolvedUpdateStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedUpdateStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedUpdateStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedUpdateStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedAssertRowsModifiedProto& assert_rows_modified(const ResolvedUpdateStmtProto* msg);
  static void set_has_assert_rows_modified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedReturningClauseProto& returning(const ResolvedUpdateStmtProto* msg);
  static void set_has_returning(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& array_offset_column(const ResolvedUpdateStmtProto* msg);
  static void set_has_array_offset_column(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::zetasql::AnyResolvedExprProto& where_expr(const ResolvedUpdateStmtProto* msg);
  static void set_has_where_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedScanProto& from_scan(const ResolvedUpdateStmtProto* msg);
  static void set_has_from_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedUpdateStmtProto::_Internal::parent(const ResolvedUpdateStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedUpdateStmtProto::_Internal::table_scan(const ResolvedUpdateStmtProto* msg) {
  return *msg->table_scan_;
}
const ::zetasql::ResolvedAssertRowsModifiedProto&
ResolvedUpdateStmtProto::_Internal::assert_rows_modified(const ResolvedUpdateStmtProto* msg) {
  return *msg->assert_rows_modified_;
}
const ::zetasql::ResolvedReturningClauseProto&
ResolvedUpdateStmtProto::_Internal::returning(const ResolvedUpdateStmtProto* msg) {
  return *msg->returning_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedUpdateStmtProto::_Internal::array_offset_column(const ResolvedUpdateStmtProto* msg) {
  return *msg->array_offset_column_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedUpdateStmtProto::_Internal::where_expr(const ResolvedUpdateStmtProto* msg) {
  return *msg->where_expr_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedUpdateStmtProto::_Internal::from_scan(const ResolvedUpdateStmtProto* msg) {
  return *msg->from_scan_;
}
ResolvedUpdateStmtProto::ResolvedUpdateStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  update_item_list_(arena),
  column_access_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedUpdateStmtProto)
}
ResolvedUpdateStmtProto::ResolvedUpdateStmtProto(const ResolvedUpdateStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      update_item_list_(from.update_item_list_),
      column_access_list_(from.column_access_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_table_scan()) {
    table_scan_ = new ::zetasql::ResolvedTableScanProto(*from.table_scan_);
  } else {
    table_scan_ = nullptr;
  }
  if (from._internal_has_assert_rows_modified()) {
    assert_rows_modified_ = new ::zetasql::ResolvedAssertRowsModifiedProto(*from.assert_rows_modified_);
  } else {
    assert_rows_modified_ = nullptr;
  }
  if (from._internal_has_where_expr()) {
    where_expr_ = new ::zetasql::AnyResolvedExprProto(*from.where_expr_);
  } else {
    where_expr_ = nullptr;
  }
  if (from._internal_has_from_scan()) {
    from_scan_ = new ::zetasql::AnyResolvedScanProto(*from.from_scan_);
  } else {
    from_scan_ = nullptr;
  }
  if (from._internal_has_array_offset_column()) {
    array_offset_column_ = new ::zetasql::ResolvedColumnHolderProto(*from.array_offset_column_);
  } else {
    array_offset_column_ = nullptr;
  }
  if (from._internal_has_returning()) {
    returning_ = new ::zetasql::ResolvedReturningClauseProto(*from.returning_);
  } else {
    returning_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedUpdateStmtProto)
}

inline void ResolvedUpdateStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&returning_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(returning_));
}

ResolvedUpdateStmtProto::~ResolvedUpdateStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedUpdateStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedUpdateStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete table_scan_;
  if (this != internal_default_instance()) delete assert_rows_modified_;
  if (this != internal_default_instance()) delete where_expr_;
  if (this != internal_default_instance()) delete from_scan_;
  if (this != internal_default_instance()) delete array_offset_column_;
  if (this != internal_default_instance()) delete returning_;
}

void ResolvedUpdateStmtProto::ArenaDtor(void* object) {
  ResolvedUpdateStmtProto* _this = reinterpret_cast< ResolvedUpdateStmtProto* >(object);
  (void)_this;
}
void ResolvedUpdateStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedUpdateStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedUpdateStmtProto::InternalSwap(ResolvedUpdateStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedUpdateStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[130]);
}

// ===================================================================

class ResolvedMergeWhenProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedMergeWhenProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedMergeWhenProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedExprProto& match_expr(const ResolvedMergeWhenProto* msg);
  static void set_has_match_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::ResolvedInsertRowProto& insert_row(const ResolvedMergeWhenProto* msg);
  static void set_has_insert_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedMergeWhenProto::_Internal::parent(const ResolvedMergeWhenProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedMergeWhenProto::_Internal::match_expr(const ResolvedMergeWhenProto* msg) {
  return *msg->match_expr_;
}
const ::zetasql::ResolvedInsertRowProto&
ResolvedMergeWhenProto::_Internal::insert_row(const ResolvedMergeWhenProto* msg) {
  return *msg->insert_row_;
}
void ResolvedMergeWhenProto::clear_insert_column_list() {
  insert_column_list_.Clear();
}
ResolvedMergeWhenProto::ResolvedMergeWhenProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  insert_column_list_(arena),
  update_item_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedMergeWhenProto)
}
ResolvedMergeWhenProto::ResolvedMergeWhenProto(const ResolvedMergeWhenProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      insert_column_list_(from.insert_column_list_),
      update_item_list_(from.update_item_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_match_expr()) {
    match_expr_ = new ::zetasql::AnyResolvedExprProto(*from.match_expr_);
  } else {
    match_expr_ = nullptr;
  }
  if (from._internal_has_insert_row()) {
    insert_row_ = new ::zetasql::ResolvedInsertRowProto(*from.insert_row_);
  } else {
    insert_row_ = nullptr;
  }
  ::memcpy(&match_type_, &from.match_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_type_) -
    reinterpret_cast<char*>(&match_type_)) + sizeof(action_type_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedMergeWhenProto)
}

inline void ResolvedMergeWhenProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_type_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(action_type_));
}

ResolvedMergeWhenProto::~ResolvedMergeWhenProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedMergeWhenProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedMergeWhenProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete match_expr_;
  if (this != internal_default_instance()) delete insert_row_;
}

void ResolvedMergeWhenProto::ArenaDtor(void* object) {
  ResolvedMergeWhenProto* _this = reinterpret_cast< ResolvedMergeWhenProto* >(object);
  (void)_this;
}
void ResolvedMergeWhenProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedMergeWhenProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedMergeWhenProto::InternalSwap(ResolvedMergeWhenProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedMergeWhenProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[131]);
}

// ===================================================================

class ResolvedMergeStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedMergeStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedMergeStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedMergeStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& from_scan(const ResolvedMergeStmtProto* msg);
  static void set_has_from_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& merge_expr(const ResolvedMergeStmtProto* msg);
  static void set_has_merge_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedMergeStmtProto::_Internal::parent(const ResolvedMergeStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedMergeStmtProto::_Internal::table_scan(const ResolvedMergeStmtProto* msg) {
  return *msg->table_scan_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedMergeStmtProto::_Internal::from_scan(const ResolvedMergeStmtProto* msg) {
  return *msg->from_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedMergeStmtProto::_Internal::merge_expr(const ResolvedMergeStmtProto* msg) {
  return *msg->merge_expr_;
}
ResolvedMergeStmtProto::ResolvedMergeStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  when_clause_list_(arena),
  column_access_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedMergeStmtProto)
}
ResolvedMergeStmtProto::ResolvedMergeStmtProto(const ResolvedMergeStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      when_clause_list_(from.when_clause_list_),
      column_access_list_(from.column_access_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_table_scan()) {
    table_scan_ = new ::zetasql::ResolvedTableScanProto(*from.table_scan_);
  } else {
    table_scan_ = nullptr;
  }
  if (from._internal_has_from_scan()) {
    from_scan_ = new ::zetasql::AnyResolvedScanProto(*from.from_scan_);
  } else {
    from_scan_ = nullptr;
  }
  if (from._internal_has_merge_expr()) {
    merge_expr_ = new ::zetasql::AnyResolvedExprProto(*from.merge_expr_);
  } else {
    merge_expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedMergeStmtProto)
}

inline void ResolvedMergeStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&merge_expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(merge_expr_));
}

ResolvedMergeStmtProto::~ResolvedMergeStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedMergeStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedMergeStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete table_scan_;
  if (this != internal_default_instance()) delete from_scan_;
  if (this != internal_default_instance()) delete merge_expr_;
}

void ResolvedMergeStmtProto::ArenaDtor(void* object) {
  ResolvedMergeStmtProto* _this = reinterpret_cast< ResolvedMergeStmtProto* >(object);
  (void)_this;
}
void ResolvedMergeStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedMergeStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedMergeStmtProto::InternalSwap(ResolvedMergeStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedMergeStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[132]);
}

// ===================================================================

class ResolvedTruncateStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedTruncateStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedTruncateStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedTruncateStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& where_expr(const ResolvedTruncateStmtProto* msg);
  static void set_has_where_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedTruncateStmtProto::_Internal::parent(const ResolvedTruncateStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedTruncateStmtProto::_Internal::table_scan(const ResolvedTruncateStmtProto* msg) {
  return *msg->table_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedTruncateStmtProto::_Internal::where_expr(const ResolvedTruncateStmtProto* msg) {
  return *msg->where_expr_;
}
ResolvedTruncateStmtProto::ResolvedTruncateStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedTruncateStmtProto)
}
ResolvedTruncateStmtProto::ResolvedTruncateStmtProto(const ResolvedTruncateStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_table_scan()) {
    table_scan_ = new ::zetasql::ResolvedTableScanProto(*from.table_scan_);
  } else {
    table_scan_ = nullptr;
  }
  if (from._internal_has_where_expr()) {
    where_expr_ = new ::zetasql::AnyResolvedExprProto(*from.where_expr_);
  } else {
    where_expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedTruncateStmtProto)
}

inline void ResolvedTruncateStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&where_expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(where_expr_));
}

ResolvedTruncateStmtProto::~ResolvedTruncateStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedTruncateStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedTruncateStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete table_scan_;
  if (this != internal_default_instance()) delete where_expr_;
}

void ResolvedTruncateStmtProto::ArenaDtor(void* object) {
  ResolvedTruncateStmtProto* _this = reinterpret_cast< ResolvedTruncateStmtProto* >(object);
  (void)_this;
}
void ResolvedTruncateStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedTruncateStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedTruncateStmtProto::InternalSwap(ResolvedTruncateStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedTruncateStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[133]);
}

// ===================================================================

class ResolvedPrivilegeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedPrivilegeProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedPrivilegeProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedPrivilegeProto::_Internal::parent(const ResolvedPrivilegeProto* msg) {
  return *msg->parent_;
}
ResolvedPrivilegeProto::ResolvedPrivilegeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  unit_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedPrivilegeProto)
}
ResolvedPrivilegeProto::ResolvedPrivilegeProto(const ResolvedPrivilegeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      unit_list_(from.unit_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action_type()) {
    action_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedPrivilegeProto)
}

inline void ResolvedPrivilegeProto::SharedCtor() {
action_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_ = nullptr;
}

ResolvedPrivilegeProto::~ResolvedPrivilegeProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedPrivilegeProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedPrivilegeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedPrivilegeProto::ArenaDtor(void* object) {
  ResolvedPrivilegeProto* _this = reinterpret_cast< ResolvedPrivilegeProto* >(object);
  (void)_this;
}
void ResolvedPrivilegeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedPrivilegeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedPrivilegeProto::InternalSwap(ResolvedPrivilegeProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedPrivilegeProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[134]);
}

// ===================================================================

class AnyResolvedGrantOrRevokeStmtProto::_Internal {
 public:
  static const ::zetasql::ResolvedGrantStmtProto& resolved_grant_stmt_node(const AnyResolvedGrantOrRevokeStmtProto* msg);
  static const ::zetasql::ResolvedRevokeStmtProto& resolved_revoke_stmt_node(const AnyResolvedGrantOrRevokeStmtProto* msg);
};

const ::zetasql::ResolvedGrantStmtProto&
AnyResolvedGrantOrRevokeStmtProto::_Internal::resolved_grant_stmt_node(const AnyResolvedGrantOrRevokeStmtProto* msg) {
  return *msg->node_.resolved_grant_stmt_node_;
}
const ::zetasql::ResolvedRevokeStmtProto&
AnyResolvedGrantOrRevokeStmtProto::_Internal::resolved_revoke_stmt_node(const AnyResolvedGrantOrRevokeStmtProto* msg) {
  return *msg->node_.resolved_revoke_stmt_node_;
}
void AnyResolvedGrantOrRevokeStmtProto::set_allocated_resolved_grant_stmt_node(::zetasql::ResolvedGrantStmtProto* resolved_grant_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_grant_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedGrantStmtProto>::GetOwningArena(resolved_grant_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_grant_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_grant_stmt_node, submessage_arena);
    }
    set_has_resolved_grant_stmt_node();
    node_.resolved_grant_stmt_node_ = resolved_grant_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedGrantOrRevokeStmtProto.resolved_grant_stmt_node)
}
void AnyResolvedGrantOrRevokeStmtProto::set_allocated_resolved_revoke_stmt_node(::zetasql::ResolvedRevokeStmtProto* resolved_revoke_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_revoke_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedRevokeStmtProto>::GetOwningArena(resolved_revoke_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_revoke_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_revoke_stmt_node, submessage_arena);
    }
    set_has_resolved_revoke_stmt_node();
    node_.resolved_revoke_stmt_node_ = resolved_revoke_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedGrantOrRevokeStmtProto.resolved_revoke_stmt_node)
}
AnyResolvedGrantOrRevokeStmtProto::AnyResolvedGrantOrRevokeStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedGrantOrRevokeStmtProto)
}
AnyResolvedGrantOrRevokeStmtProto::AnyResolvedGrantOrRevokeStmtProto(const AnyResolvedGrantOrRevokeStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedGrantStmtNode: {
      _internal_mutable_resolved_grant_stmt_node()->::zetasql::ResolvedGrantStmtProto::MergeFrom(from._internal_resolved_grant_stmt_node());
      break;
    }
    case kResolvedRevokeStmtNode: {
      _internal_mutable_resolved_revoke_stmt_node()->::zetasql::ResolvedRevokeStmtProto::MergeFrom(from._internal_resolved_revoke_stmt_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedGrantOrRevokeStmtProto)
}

inline void AnyResolvedGrantOrRevokeStmtProto::SharedCtor() {
clear_has_node();
}

AnyResolvedGrantOrRevokeStmtProto::~AnyResolvedGrantOrRevokeStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedGrantOrRevokeStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedGrantOrRevokeStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedGrantOrRevokeStmtProto::ArenaDtor(void* object) {
  AnyResolvedGrantOrRevokeStmtProto* _this = reinterpret_cast< AnyResolvedGrantOrRevokeStmtProto* >(object);
  (void)_this;
}
void AnyResolvedGrantOrRevokeStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedGrantOrRevokeStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedGrantOrRevokeStmtProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedGrantOrRevokeStmtProto)
  switch (node_case()) {
    case kResolvedGrantStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_grant_stmt_node_;
      }
      break;
    }
    case kResolvedRevokeStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_revoke_stmt_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedGrantOrRevokeStmtProto::InternalSwap(AnyResolvedGrantOrRevokeStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedGrantOrRevokeStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[135]);
}

// ===================================================================

class ResolvedGrantOrRevokeStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGrantOrRevokeStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedGrantOrRevokeStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedGrantOrRevokeStmtProto::_Internal::parent(const ResolvedGrantOrRevokeStmtProto* msg) {
  return *msg->parent_;
}
ResolvedGrantOrRevokeStmtProto::ResolvedGrantOrRevokeStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  privilege_list_(arena),
  name_path_(arena),
  grantee_list_(arena),
  grantee_expr_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGrantOrRevokeStmtProto)
}
ResolvedGrantOrRevokeStmtProto::ResolvedGrantOrRevokeStmtProto(const ResolvedGrantOrRevokeStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      privilege_list_(from.privilege_list_),
      name_path_(from.name_path_),
      grantee_list_(from.grantee_list_),
      grantee_expr_list_(from.grantee_expr_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    object_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_type()) {
    object_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGrantOrRevokeStmtProto)
}

inline void ResolvedGrantOrRevokeStmtProto::SharedCtor() {
object_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  object_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_ = nullptr;
}

ResolvedGrantOrRevokeStmtProto::~ResolvedGrantOrRevokeStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGrantOrRevokeStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedGrantOrRevokeStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  object_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedGrantOrRevokeStmtProto::ArenaDtor(void* object) {
  ResolvedGrantOrRevokeStmtProto* _this = reinterpret_cast< ResolvedGrantOrRevokeStmtProto* >(object);
  (void)_this;
}
void ResolvedGrantOrRevokeStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedGrantOrRevokeStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedGrantOrRevokeStmtProto::InternalSwap(ResolvedGrantOrRevokeStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGrantOrRevokeStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[136]);
}

// ===================================================================

class ResolvedGrantStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGrantStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedGrantOrRevokeStmtProto& parent(const ResolvedGrantStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedGrantOrRevokeStmtProto&
ResolvedGrantStmtProto::_Internal::parent(const ResolvedGrantStmtProto* msg) {
  return *msg->parent_;
}
ResolvedGrantStmtProto::ResolvedGrantStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGrantStmtProto)
}
ResolvedGrantStmtProto::ResolvedGrantStmtProto(const ResolvedGrantStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedGrantOrRevokeStmtProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGrantStmtProto)
}

inline void ResolvedGrantStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedGrantStmtProto::~ResolvedGrantStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGrantStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedGrantStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedGrantStmtProto::ArenaDtor(void* object) {
  ResolvedGrantStmtProto* _this = reinterpret_cast< ResolvedGrantStmtProto* >(object);
  (void)_this;
}
void ResolvedGrantStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedGrantStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedGrantStmtProto::InternalSwap(ResolvedGrantStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGrantStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[137]);
}

// ===================================================================

class ResolvedRevokeStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRevokeStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedGrantOrRevokeStmtProto& parent(const ResolvedRevokeStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedGrantOrRevokeStmtProto&
ResolvedRevokeStmtProto::_Internal::parent(const ResolvedRevokeStmtProto* msg) {
  return *msg->parent_;
}
ResolvedRevokeStmtProto::ResolvedRevokeStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRevokeStmtProto)
}
ResolvedRevokeStmtProto::ResolvedRevokeStmtProto(const ResolvedRevokeStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedGrantOrRevokeStmtProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRevokeStmtProto)
}

inline void ResolvedRevokeStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedRevokeStmtProto::~ResolvedRevokeStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRevokeStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedRevokeStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedRevokeStmtProto::ArenaDtor(void* object) {
  ResolvedRevokeStmtProto* _this = reinterpret_cast< ResolvedRevokeStmtProto* >(object);
  (void)_this;
}
void ResolvedRevokeStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedRevokeStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedRevokeStmtProto::InternalSwap(ResolvedRevokeStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRevokeStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[138]);
}

// ===================================================================

class AnyResolvedAlterObjectStmtProto::_Internal {
 public:
  static const ::zetasql::ResolvedAlterRowAccessPolicyStmtProto& resolved_alter_row_access_policy_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterTableStmtProto& resolved_alter_table_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterViewStmtProto& resolved_alter_view_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterMaterializedViewStmtProto& resolved_alter_materialized_view_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterDatabaseStmtProto& resolved_alter_database_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto& resolved_alter_all_row_access_policies_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterEntityStmtProto& resolved_alter_entity_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
  static const ::zetasql::ResolvedAlterSchemaStmtProto& resolved_alter_schema_stmt_node(const AnyResolvedAlterObjectStmtProto* msg);
};

const ::zetasql::ResolvedAlterRowAccessPolicyStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_row_access_policy_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->node_.resolved_alter_row_access_policy_stmt_node_;
}
const ::zetasql::ResolvedAlterTableStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_table_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->node_.resolved_alter_table_stmt_node_;
}
const ::zetasql::ResolvedAlterViewStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_view_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->node_.resolved_alter_view_stmt_node_;
}
const ::zetasql::ResolvedAlterMaterializedViewStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_materialized_view_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->node_.resolved_alter_materialized_view_stmt_node_;
}
const ::zetasql::ResolvedAlterDatabaseStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_database_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->node_.resolved_alter_database_stmt_node_;
}
const ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_all_row_access_policies_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->node_.resolved_alter_all_row_access_policies_stmt_node_;
}
const ::zetasql::ResolvedAlterEntityStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_entity_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->node_.resolved_alter_entity_stmt_node_;
}
const ::zetasql::ResolvedAlterSchemaStmtProto&
AnyResolvedAlterObjectStmtProto::_Internal::resolved_alter_schema_stmt_node(const AnyResolvedAlterObjectStmtProto* msg) {
  return *msg->node_.resolved_alter_schema_stmt_node_;
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_row_access_policy_stmt_node(::zetasql::ResolvedAlterRowAccessPolicyStmtProto* resolved_alter_row_access_policy_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_row_access_policy_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAlterRowAccessPolicyStmtProto>::GetOwningArena(resolved_alter_row_access_policy_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_row_access_policy_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_row_access_policy_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_row_access_policy_stmt_node();
    node_.resolved_alter_row_access_policy_stmt_node_ = resolved_alter_row_access_policy_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_row_access_policy_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_table_stmt_node(::zetasql::ResolvedAlterTableStmtProto* resolved_alter_table_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_table_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAlterTableStmtProto>::GetOwningArena(resolved_alter_table_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_table_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_table_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_table_stmt_node();
    node_.resolved_alter_table_stmt_node_ = resolved_alter_table_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_table_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_view_stmt_node(::zetasql::ResolvedAlterViewStmtProto* resolved_alter_view_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_view_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAlterViewStmtProto>::GetOwningArena(resolved_alter_view_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_view_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_view_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_view_stmt_node();
    node_.resolved_alter_view_stmt_node_ = resolved_alter_view_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_view_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_materialized_view_stmt_node(::zetasql::ResolvedAlterMaterializedViewStmtProto* resolved_alter_materialized_view_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_materialized_view_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAlterMaterializedViewStmtProto>::GetOwningArena(resolved_alter_materialized_view_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_materialized_view_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_materialized_view_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_materialized_view_stmt_node();
    node_.resolved_alter_materialized_view_stmt_node_ = resolved_alter_materialized_view_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_materialized_view_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_database_stmt_node(::zetasql::ResolvedAlterDatabaseStmtProto* resolved_alter_database_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_database_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAlterDatabaseStmtProto>::GetOwningArena(resolved_alter_database_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_database_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_database_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_database_stmt_node();
    node_.resolved_alter_database_stmt_node_ = resolved_alter_database_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_database_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_all_row_access_policies_stmt_node(::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto* resolved_alter_all_row_access_policies_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_all_row_access_policies_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto>::GetOwningArena(resolved_alter_all_row_access_policies_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_all_row_access_policies_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_all_row_access_policies_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_all_row_access_policies_stmt_node();
    node_.resolved_alter_all_row_access_policies_stmt_node_ = resolved_alter_all_row_access_policies_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_all_row_access_policies_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_entity_stmt_node(::zetasql::ResolvedAlterEntityStmtProto* resolved_alter_entity_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_entity_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAlterEntityStmtProto>::GetOwningArena(resolved_alter_entity_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_entity_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_entity_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_entity_stmt_node();
    node_.resolved_alter_entity_stmt_node_ = resolved_alter_entity_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_entity_stmt_node)
}
void AnyResolvedAlterObjectStmtProto::set_allocated_resolved_alter_schema_stmt_node(::zetasql::ResolvedAlterSchemaStmtProto* resolved_alter_schema_stmt_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_schema_stmt_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAlterSchemaStmtProto>::GetOwningArena(resolved_alter_schema_stmt_node);
    if (message_arena != submessage_arena) {
      resolved_alter_schema_stmt_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_schema_stmt_node, submessage_arena);
    }
    set_has_resolved_alter_schema_stmt_node();
    node_.resolved_alter_schema_stmt_node_ = resolved_alter_schema_stmt_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterObjectStmtProto.resolved_alter_schema_stmt_node)
}
AnyResolvedAlterObjectStmtProto::AnyResolvedAlterObjectStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedAlterObjectStmtProto)
}
AnyResolvedAlterObjectStmtProto::AnyResolvedAlterObjectStmtProto(const AnyResolvedAlterObjectStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedAlterRowAccessPolicyStmtNode: {
      _internal_mutable_resolved_alter_row_access_policy_stmt_node()->::zetasql::ResolvedAlterRowAccessPolicyStmtProto::MergeFrom(from._internal_resolved_alter_row_access_policy_stmt_node());
      break;
    }
    case kResolvedAlterTableStmtNode: {
      _internal_mutable_resolved_alter_table_stmt_node()->::zetasql::ResolvedAlterTableStmtProto::MergeFrom(from._internal_resolved_alter_table_stmt_node());
      break;
    }
    case kResolvedAlterViewStmtNode: {
      _internal_mutable_resolved_alter_view_stmt_node()->::zetasql::ResolvedAlterViewStmtProto::MergeFrom(from._internal_resolved_alter_view_stmt_node());
      break;
    }
    case kResolvedAlterMaterializedViewStmtNode: {
      _internal_mutable_resolved_alter_materialized_view_stmt_node()->::zetasql::ResolvedAlterMaterializedViewStmtProto::MergeFrom(from._internal_resolved_alter_materialized_view_stmt_node());
      break;
    }
    case kResolvedAlterDatabaseStmtNode: {
      _internal_mutable_resolved_alter_database_stmt_node()->::zetasql::ResolvedAlterDatabaseStmtProto::MergeFrom(from._internal_resolved_alter_database_stmt_node());
      break;
    }
    case kResolvedAlterAllRowAccessPoliciesStmtNode: {
      _internal_mutable_resolved_alter_all_row_access_policies_stmt_node()->::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto::MergeFrom(from._internal_resolved_alter_all_row_access_policies_stmt_node());
      break;
    }
    case kResolvedAlterEntityStmtNode: {
      _internal_mutable_resolved_alter_entity_stmt_node()->::zetasql::ResolvedAlterEntityStmtProto::MergeFrom(from._internal_resolved_alter_entity_stmt_node());
      break;
    }
    case kResolvedAlterSchemaStmtNode: {
      _internal_mutable_resolved_alter_schema_stmt_node()->::zetasql::ResolvedAlterSchemaStmtProto::MergeFrom(from._internal_resolved_alter_schema_stmt_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedAlterObjectStmtProto)
}

inline void AnyResolvedAlterObjectStmtProto::SharedCtor() {
clear_has_node();
}

AnyResolvedAlterObjectStmtProto::~AnyResolvedAlterObjectStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedAlterObjectStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedAlterObjectStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedAlterObjectStmtProto::ArenaDtor(void* object) {
  AnyResolvedAlterObjectStmtProto* _this = reinterpret_cast< AnyResolvedAlterObjectStmtProto* >(object);
  (void)_this;
}
void AnyResolvedAlterObjectStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedAlterObjectStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedAlterObjectStmtProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedAlterObjectStmtProto)
  switch (node_case()) {
    case kResolvedAlterRowAccessPolicyStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_row_access_policy_stmt_node_;
      }
      break;
    }
    case kResolvedAlterTableStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_table_stmt_node_;
      }
      break;
    }
    case kResolvedAlterViewStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_view_stmt_node_;
      }
      break;
    }
    case kResolvedAlterMaterializedViewStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_materialized_view_stmt_node_;
      }
      break;
    }
    case kResolvedAlterDatabaseStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_database_stmt_node_;
      }
      break;
    }
    case kResolvedAlterAllRowAccessPoliciesStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_all_row_access_policies_stmt_node_;
      }
      break;
    }
    case kResolvedAlterEntityStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_entity_stmt_node_;
      }
      break;
    }
    case kResolvedAlterSchemaStmtNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_schema_stmt_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedAlterObjectStmtProto::InternalSwap(AnyResolvedAlterObjectStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedAlterObjectStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[139]);
}

// ===================================================================

class ResolvedAlterObjectStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterObjectStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAlterObjectStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAlterObjectStmtProto::_Internal::parent(const ResolvedAlterObjectStmtProto* msg) {
  return *msg->parent_;
}
ResolvedAlterObjectStmtProto::ResolvedAlterObjectStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena),
  alter_action_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterObjectStmtProto)
}
ResolvedAlterObjectStmtProto::ResolvedAlterObjectStmtProto(const ResolvedAlterObjectStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_),
      alter_action_list_(from.alter_action_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterObjectStmtProto)
}

inline void ResolvedAlterObjectStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedAlterObjectStmtProto::~ResolvedAlterObjectStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterObjectStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterObjectStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAlterObjectStmtProto::ArenaDtor(void* object) {
  ResolvedAlterObjectStmtProto* _this = reinterpret_cast< ResolvedAlterObjectStmtProto* >(object);
  (void)_this;
}
void ResolvedAlterObjectStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterObjectStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterObjectStmtProto::InternalSwap(ResolvedAlterObjectStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterObjectStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[140]);
}

// ===================================================================

class ResolvedAlterDatabaseStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterDatabaseStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterDatabaseStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterDatabaseStmtProto::_Internal::parent(const ResolvedAlterDatabaseStmtProto* msg) {
  return *msg->parent_;
}
ResolvedAlterDatabaseStmtProto::ResolvedAlterDatabaseStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterDatabaseStmtProto)
}
ResolvedAlterDatabaseStmtProto::ResolvedAlterDatabaseStmtProto(const ResolvedAlterDatabaseStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterDatabaseStmtProto)
}

inline void ResolvedAlterDatabaseStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedAlterDatabaseStmtProto::~ResolvedAlterDatabaseStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterDatabaseStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterDatabaseStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAlterDatabaseStmtProto::ArenaDtor(void* object) {
  ResolvedAlterDatabaseStmtProto* _this = reinterpret_cast< ResolvedAlterDatabaseStmtProto* >(object);
  (void)_this;
}
void ResolvedAlterDatabaseStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterDatabaseStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterDatabaseStmtProto::InternalSwap(ResolvedAlterDatabaseStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterDatabaseStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[141]);
}

// ===================================================================

class ResolvedAlterMaterializedViewStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterMaterializedViewStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterMaterializedViewStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterMaterializedViewStmtProto::_Internal::parent(const ResolvedAlterMaterializedViewStmtProto* msg) {
  return *msg->parent_;
}
ResolvedAlterMaterializedViewStmtProto::ResolvedAlterMaterializedViewStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterMaterializedViewStmtProto)
}
ResolvedAlterMaterializedViewStmtProto::ResolvedAlterMaterializedViewStmtProto(const ResolvedAlterMaterializedViewStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterMaterializedViewStmtProto)
}

inline void ResolvedAlterMaterializedViewStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedAlterMaterializedViewStmtProto::~ResolvedAlterMaterializedViewStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterMaterializedViewStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterMaterializedViewStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAlterMaterializedViewStmtProto::ArenaDtor(void* object) {
  ResolvedAlterMaterializedViewStmtProto* _this = reinterpret_cast< ResolvedAlterMaterializedViewStmtProto* >(object);
  (void)_this;
}
void ResolvedAlterMaterializedViewStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterMaterializedViewStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterMaterializedViewStmtProto::InternalSwap(ResolvedAlterMaterializedViewStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterMaterializedViewStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[142]);
}

// ===================================================================

class ResolvedAlterSchemaStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterSchemaStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterSchemaStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterSchemaStmtProto::_Internal::parent(const ResolvedAlterSchemaStmtProto* msg) {
  return *msg->parent_;
}
ResolvedAlterSchemaStmtProto::ResolvedAlterSchemaStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterSchemaStmtProto)
}
ResolvedAlterSchemaStmtProto::ResolvedAlterSchemaStmtProto(const ResolvedAlterSchemaStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterSchemaStmtProto)
}

inline void ResolvedAlterSchemaStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedAlterSchemaStmtProto::~ResolvedAlterSchemaStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterSchemaStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterSchemaStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAlterSchemaStmtProto::ArenaDtor(void* object) {
  ResolvedAlterSchemaStmtProto* _this = reinterpret_cast< ResolvedAlterSchemaStmtProto* >(object);
  (void)_this;
}
void ResolvedAlterSchemaStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterSchemaStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterSchemaStmtProto::InternalSwap(ResolvedAlterSchemaStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterSchemaStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[143]);
}

// ===================================================================

class ResolvedAlterTableStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterTableStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterTableStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterTableStmtProto::_Internal::parent(const ResolvedAlterTableStmtProto* msg) {
  return *msg->parent_;
}
ResolvedAlterTableStmtProto::ResolvedAlterTableStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterTableStmtProto)
}
ResolvedAlterTableStmtProto::ResolvedAlterTableStmtProto(const ResolvedAlterTableStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterTableStmtProto)
}

inline void ResolvedAlterTableStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedAlterTableStmtProto::~ResolvedAlterTableStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterTableStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterTableStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAlterTableStmtProto::ArenaDtor(void* object) {
  ResolvedAlterTableStmtProto* _this = reinterpret_cast< ResolvedAlterTableStmtProto* >(object);
  (void)_this;
}
void ResolvedAlterTableStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterTableStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterTableStmtProto::InternalSwap(ResolvedAlterTableStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterTableStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[144]);
}

// ===================================================================

class ResolvedAlterViewStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterViewStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterViewStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterViewStmtProto::_Internal::parent(const ResolvedAlterViewStmtProto* msg) {
  return *msg->parent_;
}
ResolvedAlterViewStmtProto::ResolvedAlterViewStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterViewStmtProto)
}
ResolvedAlterViewStmtProto::ResolvedAlterViewStmtProto(const ResolvedAlterViewStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterViewStmtProto)
}

inline void ResolvedAlterViewStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedAlterViewStmtProto::~ResolvedAlterViewStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterViewStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterViewStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAlterViewStmtProto::ArenaDtor(void* object) {
  ResolvedAlterViewStmtProto* _this = reinterpret_cast< ResolvedAlterViewStmtProto* >(object);
  (void)_this;
}
void ResolvedAlterViewStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterViewStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterViewStmtProto::InternalSwap(ResolvedAlterViewStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterViewStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[145]);
}

// ===================================================================

class AnyResolvedAlterActionProto::_Internal {
 public:
  static const ::zetasql::ResolvedSetOptionsActionProto& resolved_set_options_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedAddColumnActionProto& resolved_add_column_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedDropColumnActionProto& resolved_drop_column_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedGrantToActionProto& resolved_grant_to_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedFilterUsingActionProto& resolved_filter_using_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedRevokeFromActionProto& resolved_revoke_from_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedRenameToActionProto& resolved_rename_to_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedSetAsActionProto& resolved_set_as_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedAddConstraintActionProto& resolved_add_constraint_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedDropConstraintActionProto& resolved_drop_constraint_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedAlterColumnOptionsActionProto& resolved_alter_column_options_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedAlterColumnDropNotNullActionProto& resolved_alter_column_drop_not_null_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedAlterColumnSetDataTypeActionProto& resolved_alter_column_set_data_type_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedDropPrimaryKeyActionProto& resolved_drop_primary_key_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedRenameColumnActionProto& resolved_rename_column_action_node(const AnyResolvedAlterActionProto* msg);
  static const ::zetasql::ResolvedSetCollateClauseProto& resolved_set_collate_clause_node(const AnyResolvedAlterActionProto* msg);
};

const ::zetasql::ResolvedSetOptionsActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_set_options_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_set_options_action_node_;
}
const ::zetasql::ResolvedAddColumnActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_add_column_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_add_column_action_node_;
}
const ::zetasql::ResolvedDropColumnActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_drop_column_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_drop_column_action_node_;
}
const ::zetasql::ResolvedGrantToActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_grant_to_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_grant_to_action_node_;
}
const ::zetasql::ResolvedFilterUsingActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_filter_using_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_filter_using_action_node_;
}
const ::zetasql::ResolvedRevokeFromActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_revoke_from_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_revoke_from_action_node_;
}
const ::zetasql::ResolvedRenameToActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_rename_to_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_rename_to_action_node_;
}
const ::zetasql::ResolvedSetAsActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_set_as_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_set_as_action_node_;
}
const ::zetasql::ResolvedAddConstraintActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_add_constraint_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_add_constraint_action_node_;
}
const ::zetasql::ResolvedDropConstraintActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_drop_constraint_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_drop_constraint_action_node_;
}
const ::zetasql::ResolvedAlterColumnOptionsActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_alter_column_options_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_alter_column_options_action_node_;
}
const ::zetasql::ResolvedAlterColumnDropNotNullActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_alter_column_drop_not_null_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_alter_column_drop_not_null_action_node_;
}
const ::zetasql::ResolvedAlterColumnSetDataTypeActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_alter_column_set_data_type_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_alter_column_set_data_type_action_node_;
}
const ::zetasql::ResolvedDropPrimaryKeyActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_drop_primary_key_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_drop_primary_key_action_node_;
}
const ::zetasql::ResolvedRenameColumnActionProto&
AnyResolvedAlterActionProto::_Internal::resolved_rename_column_action_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_rename_column_action_node_;
}
const ::zetasql::ResolvedSetCollateClauseProto&
AnyResolvedAlterActionProto::_Internal::resolved_set_collate_clause_node(const AnyResolvedAlterActionProto* msg) {
  return *msg->node_.resolved_set_collate_clause_node_;
}
void AnyResolvedAlterActionProto::set_allocated_resolved_set_options_action_node(::zetasql::ResolvedSetOptionsActionProto* resolved_set_options_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_set_options_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedSetOptionsActionProto>::GetOwningArena(resolved_set_options_action_node);
    if (message_arena != submessage_arena) {
      resolved_set_options_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_set_options_action_node, submessage_arena);
    }
    set_has_resolved_set_options_action_node();
    node_.resolved_set_options_action_node_ = resolved_set_options_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_set_options_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_add_column_action_node(::zetasql::ResolvedAddColumnActionProto* resolved_add_column_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_add_column_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAddColumnActionProto>::GetOwningArena(resolved_add_column_action_node);
    if (message_arena != submessage_arena) {
      resolved_add_column_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_add_column_action_node, submessage_arena);
    }
    set_has_resolved_add_column_action_node();
    node_.resolved_add_column_action_node_ = resolved_add_column_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_add_column_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_drop_column_action_node(::zetasql::ResolvedDropColumnActionProto* resolved_drop_column_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_column_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDropColumnActionProto>::GetOwningArena(resolved_drop_column_action_node);
    if (message_arena != submessage_arena) {
      resolved_drop_column_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_column_action_node, submessage_arena);
    }
    set_has_resolved_drop_column_action_node();
    node_.resolved_drop_column_action_node_ = resolved_drop_column_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_drop_column_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_grant_to_action_node(::zetasql::ResolvedGrantToActionProto* resolved_grant_to_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_grant_to_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedGrantToActionProto>::GetOwningArena(resolved_grant_to_action_node);
    if (message_arena != submessage_arena) {
      resolved_grant_to_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_grant_to_action_node, submessage_arena);
    }
    set_has_resolved_grant_to_action_node();
    node_.resolved_grant_to_action_node_ = resolved_grant_to_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_grant_to_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_filter_using_action_node(::zetasql::ResolvedFilterUsingActionProto* resolved_filter_using_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_filter_using_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedFilterUsingActionProto>::GetOwningArena(resolved_filter_using_action_node);
    if (message_arena != submessage_arena) {
      resolved_filter_using_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_filter_using_action_node, submessage_arena);
    }
    set_has_resolved_filter_using_action_node();
    node_.resolved_filter_using_action_node_ = resolved_filter_using_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_filter_using_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_revoke_from_action_node(::zetasql::ResolvedRevokeFromActionProto* resolved_revoke_from_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_revoke_from_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedRevokeFromActionProto>::GetOwningArena(resolved_revoke_from_action_node);
    if (message_arena != submessage_arena) {
      resolved_revoke_from_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_revoke_from_action_node, submessage_arena);
    }
    set_has_resolved_revoke_from_action_node();
    node_.resolved_revoke_from_action_node_ = resolved_revoke_from_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_revoke_from_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_rename_to_action_node(::zetasql::ResolvedRenameToActionProto* resolved_rename_to_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_rename_to_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedRenameToActionProto>::GetOwningArena(resolved_rename_to_action_node);
    if (message_arena != submessage_arena) {
      resolved_rename_to_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_rename_to_action_node, submessage_arena);
    }
    set_has_resolved_rename_to_action_node();
    node_.resolved_rename_to_action_node_ = resolved_rename_to_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_rename_to_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_set_as_action_node(::zetasql::ResolvedSetAsActionProto* resolved_set_as_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_set_as_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedSetAsActionProto>::GetOwningArena(resolved_set_as_action_node);
    if (message_arena != submessage_arena) {
      resolved_set_as_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_set_as_action_node, submessage_arena);
    }
    set_has_resolved_set_as_action_node();
    node_.resolved_set_as_action_node_ = resolved_set_as_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_set_as_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_add_constraint_action_node(::zetasql::ResolvedAddConstraintActionProto* resolved_add_constraint_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_add_constraint_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAddConstraintActionProto>::GetOwningArena(resolved_add_constraint_action_node);
    if (message_arena != submessage_arena) {
      resolved_add_constraint_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_add_constraint_action_node, submessage_arena);
    }
    set_has_resolved_add_constraint_action_node();
    node_.resolved_add_constraint_action_node_ = resolved_add_constraint_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_add_constraint_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_drop_constraint_action_node(::zetasql::ResolvedDropConstraintActionProto* resolved_drop_constraint_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_constraint_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDropConstraintActionProto>::GetOwningArena(resolved_drop_constraint_action_node);
    if (message_arena != submessage_arena) {
      resolved_drop_constraint_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_constraint_action_node, submessage_arena);
    }
    set_has_resolved_drop_constraint_action_node();
    node_.resolved_drop_constraint_action_node_ = resolved_drop_constraint_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_drop_constraint_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_alter_column_options_action_node(::zetasql::ResolvedAlterColumnOptionsActionProto* resolved_alter_column_options_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_column_options_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAlterColumnOptionsActionProto>::GetOwningArena(resolved_alter_column_options_action_node);
    if (message_arena != submessage_arena) {
      resolved_alter_column_options_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_column_options_action_node, submessage_arena);
    }
    set_has_resolved_alter_column_options_action_node();
    node_.resolved_alter_column_options_action_node_ = resolved_alter_column_options_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_alter_column_options_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_alter_column_drop_not_null_action_node(::zetasql::ResolvedAlterColumnDropNotNullActionProto* resolved_alter_column_drop_not_null_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_column_drop_not_null_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAlterColumnDropNotNullActionProto>::GetOwningArena(resolved_alter_column_drop_not_null_action_node);
    if (message_arena != submessage_arena) {
      resolved_alter_column_drop_not_null_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_column_drop_not_null_action_node, submessage_arena);
    }
    set_has_resolved_alter_column_drop_not_null_action_node();
    node_.resolved_alter_column_drop_not_null_action_node_ = resolved_alter_column_drop_not_null_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_alter_column_drop_not_null_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_alter_column_set_data_type_action_node(::zetasql::ResolvedAlterColumnSetDataTypeActionProto* resolved_alter_column_set_data_type_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_alter_column_set_data_type_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedAlterColumnSetDataTypeActionProto>::GetOwningArena(resolved_alter_column_set_data_type_action_node);
    if (message_arena != submessage_arena) {
      resolved_alter_column_set_data_type_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_alter_column_set_data_type_action_node, submessage_arena);
    }
    set_has_resolved_alter_column_set_data_type_action_node();
    node_.resolved_alter_column_set_data_type_action_node_ = resolved_alter_column_set_data_type_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_alter_column_set_data_type_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_drop_primary_key_action_node(::zetasql::ResolvedDropPrimaryKeyActionProto* resolved_drop_primary_key_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_drop_primary_key_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedDropPrimaryKeyActionProto>::GetOwningArena(resolved_drop_primary_key_action_node);
    if (message_arena != submessage_arena) {
      resolved_drop_primary_key_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_drop_primary_key_action_node, submessage_arena);
    }
    set_has_resolved_drop_primary_key_action_node();
    node_.resolved_drop_primary_key_action_node_ = resolved_drop_primary_key_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_drop_primary_key_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_rename_column_action_node(::zetasql::ResolvedRenameColumnActionProto* resolved_rename_column_action_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_rename_column_action_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedRenameColumnActionProto>::GetOwningArena(resolved_rename_column_action_node);
    if (message_arena != submessage_arena) {
      resolved_rename_column_action_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_rename_column_action_node, submessage_arena);
    }
    set_has_resolved_rename_column_action_node();
    node_.resolved_rename_column_action_node_ = resolved_rename_column_action_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_rename_column_action_node)
}
void AnyResolvedAlterActionProto::set_allocated_resolved_set_collate_clause_node(::zetasql::ResolvedSetCollateClauseProto* resolved_set_collate_clause_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (resolved_set_collate_clause_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ResolvedSetCollateClauseProto>::GetOwningArena(resolved_set_collate_clause_node);
    if (message_arena != submessage_arena) {
      resolved_set_collate_clause_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolved_set_collate_clause_node, submessage_arena);
    }
    set_has_resolved_set_collate_clause_node();
    node_.resolved_set_collate_clause_node_ = resolved_set_collate_clause_node;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.AnyResolvedAlterActionProto.resolved_set_collate_clause_node)
}
AnyResolvedAlterActionProto::AnyResolvedAlterActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.AnyResolvedAlterActionProto)
}
AnyResolvedAlterActionProto::AnyResolvedAlterActionProto(const AnyResolvedAlterActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kResolvedSetOptionsActionNode: {
      _internal_mutable_resolved_set_options_action_node()->::zetasql::ResolvedSetOptionsActionProto::MergeFrom(from._internal_resolved_set_options_action_node());
      break;
    }
    case kResolvedAddColumnActionNode: {
      _internal_mutable_resolved_add_column_action_node()->::zetasql::ResolvedAddColumnActionProto::MergeFrom(from._internal_resolved_add_column_action_node());
      break;
    }
    case kResolvedDropColumnActionNode: {
      _internal_mutable_resolved_drop_column_action_node()->::zetasql::ResolvedDropColumnActionProto::MergeFrom(from._internal_resolved_drop_column_action_node());
      break;
    }
    case kResolvedGrantToActionNode: {
      _internal_mutable_resolved_grant_to_action_node()->::zetasql::ResolvedGrantToActionProto::MergeFrom(from._internal_resolved_grant_to_action_node());
      break;
    }
    case kResolvedFilterUsingActionNode: {
      _internal_mutable_resolved_filter_using_action_node()->::zetasql::ResolvedFilterUsingActionProto::MergeFrom(from._internal_resolved_filter_using_action_node());
      break;
    }
    case kResolvedRevokeFromActionNode: {
      _internal_mutable_resolved_revoke_from_action_node()->::zetasql::ResolvedRevokeFromActionProto::MergeFrom(from._internal_resolved_revoke_from_action_node());
      break;
    }
    case kResolvedRenameToActionNode: {
      _internal_mutable_resolved_rename_to_action_node()->::zetasql::ResolvedRenameToActionProto::MergeFrom(from._internal_resolved_rename_to_action_node());
      break;
    }
    case kResolvedSetAsActionNode: {
      _internal_mutable_resolved_set_as_action_node()->::zetasql::ResolvedSetAsActionProto::MergeFrom(from._internal_resolved_set_as_action_node());
      break;
    }
    case kResolvedAddConstraintActionNode: {
      _internal_mutable_resolved_add_constraint_action_node()->::zetasql::ResolvedAddConstraintActionProto::MergeFrom(from._internal_resolved_add_constraint_action_node());
      break;
    }
    case kResolvedDropConstraintActionNode: {
      _internal_mutable_resolved_drop_constraint_action_node()->::zetasql::ResolvedDropConstraintActionProto::MergeFrom(from._internal_resolved_drop_constraint_action_node());
      break;
    }
    case kResolvedAlterColumnOptionsActionNode: {
      _internal_mutable_resolved_alter_column_options_action_node()->::zetasql::ResolvedAlterColumnOptionsActionProto::MergeFrom(from._internal_resolved_alter_column_options_action_node());
      break;
    }
    case kResolvedAlterColumnDropNotNullActionNode: {
      _internal_mutable_resolved_alter_column_drop_not_null_action_node()->::zetasql::ResolvedAlterColumnDropNotNullActionProto::MergeFrom(from._internal_resolved_alter_column_drop_not_null_action_node());
      break;
    }
    case kResolvedAlterColumnSetDataTypeActionNode: {
      _internal_mutable_resolved_alter_column_set_data_type_action_node()->::zetasql::ResolvedAlterColumnSetDataTypeActionProto::MergeFrom(from._internal_resolved_alter_column_set_data_type_action_node());
      break;
    }
    case kResolvedDropPrimaryKeyActionNode: {
      _internal_mutable_resolved_drop_primary_key_action_node()->::zetasql::ResolvedDropPrimaryKeyActionProto::MergeFrom(from._internal_resolved_drop_primary_key_action_node());
      break;
    }
    case kResolvedRenameColumnActionNode: {
      _internal_mutable_resolved_rename_column_action_node()->::zetasql::ResolvedRenameColumnActionProto::MergeFrom(from._internal_resolved_rename_column_action_node());
      break;
    }
    case kResolvedSetCollateClauseNode: {
      _internal_mutable_resolved_set_collate_clause_node()->::zetasql::ResolvedSetCollateClauseProto::MergeFrom(from._internal_resolved_set_collate_clause_node());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.AnyResolvedAlterActionProto)
}

inline void AnyResolvedAlterActionProto::SharedCtor() {
clear_has_node();
}

AnyResolvedAlterActionProto::~AnyResolvedAlterActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.AnyResolvedAlterActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyResolvedAlterActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void AnyResolvedAlterActionProto::ArenaDtor(void* object) {
  AnyResolvedAlterActionProto* _this = reinterpret_cast< AnyResolvedAlterActionProto* >(object);
  (void)_this;
}
void AnyResolvedAlterActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyResolvedAlterActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyResolvedAlterActionProto::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.AnyResolvedAlterActionProto)
  switch (node_case()) {
    case kResolvedSetOptionsActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_set_options_action_node_;
      }
      break;
    }
    case kResolvedAddColumnActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_add_column_action_node_;
      }
      break;
    }
    case kResolvedDropColumnActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_drop_column_action_node_;
      }
      break;
    }
    case kResolvedGrantToActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_grant_to_action_node_;
      }
      break;
    }
    case kResolvedFilterUsingActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_filter_using_action_node_;
      }
      break;
    }
    case kResolvedRevokeFromActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_revoke_from_action_node_;
      }
      break;
    }
    case kResolvedRenameToActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_rename_to_action_node_;
      }
      break;
    }
    case kResolvedSetAsActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_set_as_action_node_;
      }
      break;
    }
    case kResolvedAddConstraintActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_add_constraint_action_node_;
      }
      break;
    }
    case kResolvedDropConstraintActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_drop_constraint_action_node_;
      }
      break;
    }
    case kResolvedAlterColumnOptionsActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_column_options_action_node_;
      }
      break;
    }
    case kResolvedAlterColumnDropNotNullActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_column_drop_not_null_action_node_;
      }
      break;
    }
    case kResolvedAlterColumnSetDataTypeActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_alter_column_set_data_type_action_node_;
      }
      break;
    }
    case kResolvedDropPrimaryKeyActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_drop_primary_key_action_node_;
      }
      break;
    }
    case kResolvedRenameColumnActionNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_rename_column_action_node_;
      }
      break;
    }
    case kResolvedSetCollateClauseNode: {
      if (GetArenaForAllocation() == nullptr) {
        delete node_.resolved_set_collate_clause_node_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NODE_NOT_SET;
}


void AnyResolvedAlterActionProto::InternalSwap(AnyResolvedAlterActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AnyResolvedAlterActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[146]);
}

// ===================================================================

class ResolvedAlterActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterActionProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedAlterActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedAlterActionProto::_Internal::parent(const ResolvedAlterActionProto* msg) {
  return *msg->parent_;
}
ResolvedAlterActionProto::ResolvedAlterActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterActionProto)
}
ResolvedAlterActionProto::ResolvedAlterActionProto(const ResolvedAlterActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterActionProto)
}

inline void ResolvedAlterActionProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedAlterActionProto::~ResolvedAlterActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAlterActionProto::ArenaDtor(void* object) {
  ResolvedAlterActionProto* _this = reinterpret_cast< ResolvedAlterActionProto* >(object);
  (void)_this;
}
void ResolvedAlterActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterActionProto::InternalSwap(ResolvedAlterActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[147]);
}

// ===================================================================

class ResolvedSetOptionsActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSetOptionsActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedSetOptionsActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedSetOptionsActionProto::_Internal::parent(const ResolvedSetOptionsActionProto* msg) {
  return *msg->parent_;
}
ResolvedSetOptionsActionProto::ResolvedSetOptionsActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSetOptionsActionProto)
}
ResolvedSetOptionsActionProto::ResolvedSetOptionsActionProto(const ResolvedSetOptionsActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_list_(from.option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSetOptionsActionProto)
}

inline void ResolvedSetOptionsActionProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedSetOptionsActionProto::~ResolvedSetOptionsActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSetOptionsActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedSetOptionsActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedSetOptionsActionProto::ArenaDtor(void* object) {
  ResolvedSetOptionsActionProto* _this = reinterpret_cast< ResolvedSetOptionsActionProto* >(object);
  (void)_this;
}
void ResolvedSetOptionsActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedSetOptionsActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedSetOptionsActionProto::InternalSwap(ResolvedSetOptionsActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSetOptionsActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[148]);
}

// ===================================================================

class ResolvedAddColumnActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAddColumnActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedAddColumnActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_not_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedColumnDefinitionProto& column_definition(const ResolvedAddColumnActionProto* msg);
  static void set_has_column_definition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedAddColumnActionProto::_Internal::parent(const ResolvedAddColumnActionProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedColumnDefinitionProto&
ResolvedAddColumnActionProto::_Internal::column_definition(const ResolvedAddColumnActionProto* msg) {
  return *msg->column_definition_;
}
ResolvedAddColumnActionProto::ResolvedAddColumnActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAddColumnActionProto)
}
ResolvedAddColumnActionProto::ResolvedAddColumnActionProto(const ResolvedAddColumnActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_column_definition()) {
    column_definition_ = new ::zetasql::ResolvedColumnDefinitionProto(*from.column_definition_);
  } else {
    column_definition_ = nullptr;
  }
  is_if_not_exists_ = from.is_if_not_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAddColumnActionProto)
}

inline void ResolvedAddColumnActionProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_not_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_not_exists_));
}

ResolvedAddColumnActionProto::~ResolvedAddColumnActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAddColumnActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAddColumnActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete column_definition_;
}

void ResolvedAddColumnActionProto::ArenaDtor(void* object) {
  ResolvedAddColumnActionProto* _this = reinterpret_cast< ResolvedAddColumnActionProto* >(object);
  (void)_this;
}
void ResolvedAddColumnActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAddColumnActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAddColumnActionProto::InternalSwap(ResolvedAddColumnActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAddColumnActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[149]);
}

// ===================================================================

class ResolvedAddConstraintActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAddConstraintActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedAddConstraintActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_not_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedConstraintProto& constraint(const ResolvedAddConstraintActionProto* msg);
  static void set_has_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::TableRefProto& table(const ResolvedAddConstraintActionProto* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedAddConstraintActionProto::_Internal::parent(const ResolvedAddConstraintActionProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedConstraintProto&
ResolvedAddConstraintActionProto::_Internal::constraint(const ResolvedAddConstraintActionProto* msg) {
  return *msg->constraint_;
}
const ::zetasql::TableRefProto&
ResolvedAddConstraintActionProto::_Internal::table(const ResolvedAddConstraintActionProto* msg) {
  return *msg->table_;
}
void ResolvedAddConstraintActionProto::clear_table() {
  if (table_ != nullptr) table_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ResolvedAddConstraintActionProto::ResolvedAddConstraintActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAddConstraintActionProto)
}
ResolvedAddConstraintActionProto::ResolvedAddConstraintActionProto(const ResolvedAddConstraintActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_constraint()) {
    constraint_ = new ::zetasql::AnyResolvedConstraintProto(*from.constraint_);
  } else {
    constraint_ = nullptr;
  }
  if (from._internal_has_table()) {
    table_ = new ::zetasql::TableRefProto(*from.table_);
  } else {
    table_ = nullptr;
  }
  is_if_not_exists_ = from.is_if_not_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAddConstraintActionProto)
}

inline void ResolvedAddConstraintActionProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_not_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_not_exists_));
}

ResolvedAddConstraintActionProto::~ResolvedAddConstraintActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAddConstraintActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAddConstraintActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete constraint_;
  if (this != internal_default_instance()) delete table_;
}

void ResolvedAddConstraintActionProto::ArenaDtor(void* object) {
  ResolvedAddConstraintActionProto* _this = reinterpret_cast< ResolvedAddConstraintActionProto* >(object);
  (void)_this;
}
void ResolvedAddConstraintActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAddConstraintActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAddConstraintActionProto::InternalSwap(ResolvedAddConstraintActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAddConstraintActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[150]);
}

// ===================================================================

class ResolvedDropConstraintActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropConstraintActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedDropConstraintActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedDropConstraintActionProto::_Internal::parent(const ResolvedDropConstraintActionProto* msg) {
  return *msg->parent_;
}
ResolvedDropConstraintActionProto::ResolvedDropConstraintActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropConstraintActionProto)
}
ResolvedDropConstraintActionProto::ResolvedDropConstraintActionProto(const ResolvedDropConstraintActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropConstraintActionProto)
}

inline void ResolvedDropConstraintActionProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedDropConstraintActionProto::~ResolvedDropConstraintActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropConstraintActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDropConstraintActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedDropConstraintActionProto::ArenaDtor(void* object) {
  ResolvedDropConstraintActionProto* _this = reinterpret_cast< ResolvedDropConstraintActionProto* >(object);
  (void)_this;
}
void ResolvedDropConstraintActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDropConstraintActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDropConstraintActionProto::InternalSwap(ResolvedDropConstraintActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropConstraintActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[151]);
}

// ===================================================================

class ResolvedDropPrimaryKeyActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropPrimaryKeyActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedDropPrimaryKeyActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedDropPrimaryKeyActionProto::_Internal::parent(const ResolvedDropPrimaryKeyActionProto* msg) {
  return *msg->parent_;
}
ResolvedDropPrimaryKeyActionProto::ResolvedDropPrimaryKeyActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropPrimaryKeyActionProto)
}
ResolvedDropPrimaryKeyActionProto::ResolvedDropPrimaryKeyActionProto(const ResolvedDropPrimaryKeyActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropPrimaryKeyActionProto)
}

inline void ResolvedDropPrimaryKeyActionProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedDropPrimaryKeyActionProto::~ResolvedDropPrimaryKeyActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropPrimaryKeyActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDropPrimaryKeyActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedDropPrimaryKeyActionProto::ArenaDtor(void* object) {
  ResolvedDropPrimaryKeyActionProto* _this = reinterpret_cast< ResolvedDropPrimaryKeyActionProto* >(object);
  (void)_this;
}
void ResolvedDropPrimaryKeyActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDropPrimaryKeyActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDropPrimaryKeyActionProto::InternalSwap(ResolvedDropPrimaryKeyActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropPrimaryKeyActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[152]);
}

// ===================================================================

class ResolvedAlterColumnOptionsActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterColumnOptionsActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedAlterColumnOptionsActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedAlterColumnOptionsActionProto::_Internal::parent(const ResolvedAlterColumnOptionsActionProto* msg) {
  return *msg->parent_;
}
ResolvedAlterColumnOptionsActionProto::ResolvedAlterColumnOptionsActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterColumnOptionsActionProto)
}
ResolvedAlterColumnOptionsActionProto::ResolvedAlterColumnOptionsActionProto(const ResolvedAlterColumnOptionsActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_list_(from.option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    column_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_column()) {
    column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterColumnOptionsActionProto)
}

inline void ResolvedAlterColumnOptionsActionProto::SharedCtor() {
column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  column_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedAlterColumnOptionsActionProto::~ResolvedAlterColumnOptionsActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterColumnOptionsActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterColumnOptionsActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  column_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAlterColumnOptionsActionProto::ArenaDtor(void* object) {
  ResolvedAlterColumnOptionsActionProto* _this = reinterpret_cast< ResolvedAlterColumnOptionsActionProto* >(object);
  (void)_this;
}
void ResolvedAlterColumnOptionsActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterColumnOptionsActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterColumnOptionsActionProto::InternalSwap(ResolvedAlterColumnOptionsActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterColumnOptionsActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[153]);
}

// ===================================================================

class ResolvedAlterColumnDropNotNullActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterColumnDropNotNullActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedAlterColumnDropNotNullActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedAlterColumnDropNotNullActionProto::_Internal::parent(const ResolvedAlterColumnDropNotNullActionProto* msg) {
  return *msg->parent_;
}
ResolvedAlterColumnDropNotNullActionProto::ResolvedAlterColumnDropNotNullActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterColumnDropNotNullActionProto)
}
ResolvedAlterColumnDropNotNullActionProto::ResolvedAlterColumnDropNotNullActionProto(const ResolvedAlterColumnDropNotNullActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    column_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_column()) {
    column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterColumnDropNotNullActionProto)
}

inline void ResolvedAlterColumnDropNotNullActionProto::SharedCtor() {
column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  column_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedAlterColumnDropNotNullActionProto::~ResolvedAlterColumnDropNotNullActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterColumnDropNotNullActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterColumnDropNotNullActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  column_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAlterColumnDropNotNullActionProto::ArenaDtor(void* object) {
  ResolvedAlterColumnDropNotNullActionProto* _this = reinterpret_cast< ResolvedAlterColumnDropNotNullActionProto* >(object);
  (void)_this;
}
void ResolvedAlterColumnDropNotNullActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterColumnDropNotNullActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterColumnDropNotNullActionProto::InternalSwap(ResolvedAlterColumnDropNotNullActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterColumnDropNotNullActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[154]);
}

// ===================================================================

class ResolvedAlterColumnSetDataTypeActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterColumnSetDataTypeActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedAlterColumnSetDataTypeActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& updated_type(const ResolvedAlterColumnSetDataTypeActionProto* msg);
  static void set_has_updated_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::TypeParametersProto& updated_type_parameters(const ResolvedAlterColumnSetDataTypeActionProto* msg);
  static void set_has_updated_type_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::ResolvedColumnAnnotationsProto& updated_annotations(const ResolvedAlterColumnSetDataTypeActionProto* msg);
  static void set_has_updated_annotations(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedAlterColumnSetDataTypeActionProto::_Internal::parent(const ResolvedAlterColumnSetDataTypeActionProto* msg) {
  return *msg->parent_;
}
const ::zetasql::TypeProto&
ResolvedAlterColumnSetDataTypeActionProto::_Internal::updated_type(const ResolvedAlterColumnSetDataTypeActionProto* msg) {
  return *msg->updated_type_;
}
const ::zetasql::TypeParametersProto&
ResolvedAlterColumnSetDataTypeActionProto::_Internal::updated_type_parameters(const ResolvedAlterColumnSetDataTypeActionProto* msg) {
  return *msg->updated_type_parameters_;
}
const ::zetasql::ResolvedColumnAnnotationsProto&
ResolvedAlterColumnSetDataTypeActionProto::_Internal::updated_annotations(const ResolvedAlterColumnSetDataTypeActionProto* msg) {
  return *msg->updated_annotations_;
}
void ResolvedAlterColumnSetDataTypeActionProto::clear_updated_type() {
  if (updated_type_ != nullptr) updated_type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ResolvedAlterColumnSetDataTypeActionProto::clear_updated_type_parameters() {
  if (updated_type_parameters_ != nullptr) updated_type_parameters_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ResolvedAlterColumnSetDataTypeActionProto::ResolvedAlterColumnSetDataTypeActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterColumnSetDataTypeActionProto)
}
ResolvedAlterColumnSetDataTypeActionProto::ResolvedAlterColumnSetDataTypeActionProto(const ResolvedAlterColumnSetDataTypeActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    column_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_column()) {
    column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_column(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_updated_type()) {
    updated_type_ = new ::zetasql::TypeProto(*from.updated_type_);
  } else {
    updated_type_ = nullptr;
  }
  if (from._internal_has_updated_type_parameters()) {
    updated_type_parameters_ = new ::zetasql::TypeParametersProto(*from.updated_type_parameters_);
  } else {
    updated_type_parameters_ = nullptr;
  }
  if (from._internal_has_updated_annotations()) {
    updated_annotations_ = new ::zetasql::ResolvedColumnAnnotationsProto(*from.updated_annotations_);
  } else {
    updated_annotations_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterColumnSetDataTypeActionProto)
}

inline void ResolvedAlterColumnSetDataTypeActionProto::SharedCtor() {
column_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  column_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedAlterColumnSetDataTypeActionProto::~ResolvedAlterColumnSetDataTypeActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterColumnSetDataTypeActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterColumnSetDataTypeActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  column_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete updated_type_;
  if (this != internal_default_instance()) delete updated_type_parameters_;
  if (this != internal_default_instance()) delete updated_annotations_;
}

void ResolvedAlterColumnSetDataTypeActionProto::ArenaDtor(void* object) {
  ResolvedAlterColumnSetDataTypeActionProto* _this = reinterpret_cast< ResolvedAlterColumnSetDataTypeActionProto* >(object);
  (void)_this;
}
void ResolvedAlterColumnSetDataTypeActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterColumnSetDataTypeActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterColumnSetDataTypeActionProto::InternalSwap(ResolvedAlterColumnSetDataTypeActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterColumnSetDataTypeActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[155]);
}

// ===================================================================

class ResolvedDropColumnActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropColumnActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedDropColumnActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedDropColumnActionProto::_Internal::parent(const ResolvedDropColumnActionProto* msg) {
  return *msg->parent_;
}
ResolvedDropColumnActionProto::ResolvedDropColumnActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropColumnActionProto)
}
ResolvedDropColumnActionProto::ResolvedDropColumnActionProto(const ResolvedDropColumnActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropColumnActionProto)
}

inline void ResolvedDropColumnActionProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedDropColumnActionProto::~ResolvedDropColumnActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropColumnActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDropColumnActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedDropColumnActionProto::ArenaDtor(void* object) {
  ResolvedDropColumnActionProto* _this = reinterpret_cast< ResolvedDropColumnActionProto* >(object);
  (void)_this;
}
void ResolvedDropColumnActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDropColumnActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDropColumnActionProto::InternalSwap(ResolvedDropColumnActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropColumnActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[156]);
}

// ===================================================================

class ResolvedRenameColumnActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRenameColumnActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedRenameColumnActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedRenameColumnActionProto::_Internal::parent(const ResolvedRenameColumnActionProto* msg) {
  return *msg->parent_;
}
ResolvedRenameColumnActionProto::ResolvedRenameColumnActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRenameColumnActionProto)
}
ResolvedRenameColumnActionProto::ResolvedRenameColumnActionProto(const ResolvedRenameColumnActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  new_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    new_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_new_name()) {
    new_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRenameColumnActionProto)
}

inline void ResolvedRenameColumnActionProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
new_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  new_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedRenameColumnActionProto::~ResolvedRenameColumnActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRenameColumnActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedRenameColumnActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedRenameColumnActionProto::ArenaDtor(void* object) {
  ResolvedRenameColumnActionProto* _this = reinterpret_cast< ResolvedRenameColumnActionProto* >(object);
  (void)_this;
}
void ResolvedRenameColumnActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedRenameColumnActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedRenameColumnActionProto::InternalSwap(ResolvedRenameColumnActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRenameColumnActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[157]);
}

// ===================================================================

class ResolvedSetAsActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSetAsActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedSetAsActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entity_body_json(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entity_body_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedSetAsActionProto::_Internal::parent(const ResolvedSetAsActionProto* msg) {
  return *msg->parent_;
}
ResolvedSetAsActionProto::ResolvedSetAsActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSetAsActionProto)
}
ResolvedSetAsActionProto::ResolvedSetAsActionProto(const ResolvedSetAsActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entity_body_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    entity_body_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_body_json()) {
    entity_body_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entity_body_json(), 
      GetArenaForAllocation());
  }
  entity_body_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    entity_body_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_body_text()) {
    entity_body_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entity_body_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSetAsActionProto)
}

inline void ResolvedSetAsActionProto::SharedCtor() {
entity_body_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  entity_body_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
entity_body_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  entity_body_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_ = nullptr;
}

ResolvedSetAsActionProto::~ResolvedSetAsActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSetAsActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedSetAsActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  entity_body_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entity_body_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedSetAsActionProto::ArenaDtor(void* object) {
  ResolvedSetAsActionProto* _this = reinterpret_cast< ResolvedSetAsActionProto* >(object);
  (void)_this;
}
void ResolvedSetAsActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedSetAsActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedSetAsActionProto::InternalSwap(ResolvedSetAsActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSetAsActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[158]);
}

// ===================================================================

class ResolvedSetCollateClauseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedSetCollateClauseProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedSetCollateClauseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& collation_name(const ResolvedSetCollateClauseProto* msg);
  static void set_has_collation_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedSetCollateClauseProto::_Internal::parent(const ResolvedSetCollateClauseProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedSetCollateClauseProto::_Internal::collation_name(const ResolvedSetCollateClauseProto* msg) {
  return *msg->collation_name_;
}
ResolvedSetCollateClauseProto::ResolvedSetCollateClauseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedSetCollateClauseProto)
}
ResolvedSetCollateClauseProto::ResolvedSetCollateClauseProto(const ResolvedSetCollateClauseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_collation_name()) {
    collation_name_ = new ::zetasql::AnyResolvedExprProto(*from.collation_name_);
  } else {
    collation_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedSetCollateClauseProto)
}

inline void ResolvedSetCollateClauseProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&collation_name_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(collation_name_));
}

ResolvedSetCollateClauseProto::~ResolvedSetCollateClauseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedSetCollateClauseProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedSetCollateClauseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete collation_name_;
}

void ResolvedSetCollateClauseProto::ArenaDtor(void* object) {
  ResolvedSetCollateClauseProto* _this = reinterpret_cast< ResolvedSetCollateClauseProto* >(object);
  (void)_this;
}
void ResolvedSetCollateClauseProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedSetCollateClauseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedSetCollateClauseProto::InternalSwap(ResolvedSetCollateClauseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedSetCollateClauseProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[159]);
}

// ===================================================================

class ResolvedAlterTableSetOptionsStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterTableSetOptionsStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAlterTableSetOptionsStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAlterTableSetOptionsStmtProto::_Internal::parent(const ResolvedAlterTableSetOptionsStmtProto* msg) {
  return *msg->parent_;
}
ResolvedAlterTableSetOptionsStmtProto::ResolvedAlterTableSetOptionsStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena),
  option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterTableSetOptionsStmtProto)
}
ResolvedAlterTableSetOptionsStmtProto::ResolvedAlterTableSetOptionsStmtProto(const ResolvedAlterTableSetOptionsStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_),
      option_list_(from.option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterTableSetOptionsStmtProto)
}

inline void ResolvedAlterTableSetOptionsStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedAlterTableSetOptionsStmtProto::~ResolvedAlterTableSetOptionsStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterTableSetOptionsStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterTableSetOptionsStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAlterTableSetOptionsStmtProto::ArenaDtor(void* object) {
  ResolvedAlterTableSetOptionsStmtProto* _this = reinterpret_cast< ResolvedAlterTableSetOptionsStmtProto* >(object);
  (void)_this;
}
void ResolvedAlterTableSetOptionsStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterTableSetOptionsStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterTableSetOptionsStmtProto::InternalSwap(ResolvedAlterTableSetOptionsStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterTableSetOptionsStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[160]);
}

// ===================================================================

class ResolvedRenameStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRenameStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedRenameStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedRenameStmtProto::_Internal::parent(const ResolvedRenameStmtProto* msg) {
  return *msg->parent_;
}
ResolvedRenameStmtProto::ResolvedRenameStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  old_name_path_(arena),
  new_name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRenameStmtProto)
}
ResolvedRenameStmtProto::ResolvedRenameStmtProto(const ResolvedRenameStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      old_name_path_(from.old_name_path_),
      new_name_path_(from.new_name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    object_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_object_type()) {
    object_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRenameStmtProto)
}

inline void ResolvedRenameStmtProto::SharedCtor() {
object_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  object_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_ = nullptr;
}

ResolvedRenameStmtProto::~ResolvedRenameStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRenameStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedRenameStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  object_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedRenameStmtProto::ArenaDtor(void* object) {
  ResolvedRenameStmtProto* _this = reinterpret_cast< ResolvedRenameStmtProto* >(object);
  (void)_this;
}
void ResolvedRenameStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedRenameStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedRenameStmtProto::InternalSwap(ResolvedRenameStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRenameStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[161]);
}

// ===================================================================

class ResolvedCreateRowAccessPolicyStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateRowAccessPolicyStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedCreateRowAccessPolicyStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_create_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedCreateRowAccessPolicyStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::AnyResolvedExprProto& predicate(const ResolvedCreateRowAccessPolicyStmtProto* msg);
  static void set_has_predicate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_predicate_str(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedCreateRowAccessPolicyStmtProto::_Internal::parent(const ResolvedCreateRowAccessPolicyStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedCreateRowAccessPolicyStmtProto::_Internal::table_scan(const ResolvedCreateRowAccessPolicyStmtProto* msg) {
  return *msg->table_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCreateRowAccessPolicyStmtProto::_Internal::predicate(const ResolvedCreateRowAccessPolicyStmtProto* msg) {
  return *msg->predicate_;
}
ResolvedCreateRowAccessPolicyStmtProto::ResolvedCreateRowAccessPolicyStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  target_name_path_(arena),
  grantee_list_(arena),
  grantee_expr_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateRowAccessPolicyStmtProto)
}
ResolvedCreateRowAccessPolicyStmtProto::ResolvedCreateRowAccessPolicyStmtProto(const ResolvedCreateRowAccessPolicyStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      target_name_path_(from.target_name_path_),
      grantee_list_(from.grantee_list_),
      grantee_expr_list_(from.grantee_expr_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  predicate_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    predicate_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_predicate_str()) {
    predicate_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_predicate_str(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_table_scan()) {
    table_scan_ = new ::zetasql::ResolvedTableScanProto(*from.table_scan_);
  } else {
    table_scan_ = nullptr;
  }
  if (from._internal_has_predicate()) {
    predicate_ = new ::zetasql::AnyResolvedExprProto(*from.predicate_);
  } else {
    predicate_ = nullptr;
  }
  create_mode_ = from.create_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateRowAccessPolicyStmtProto)
}

inline void ResolvedCreateRowAccessPolicyStmtProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
predicate_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  predicate_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&create_mode_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(create_mode_));
}

ResolvedCreateRowAccessPolicyStmtProto::~ResolvedCreateRowAccessPolicyStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateRowAccessPolicyStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateRowAccessPolicyStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete table_scan_;
  if (this != internal_default_instance()) delete predicate_;
}

void ResolvedCreateRowAccessPolicyStmtProto::ArenaDtor(void* object) {
  ResolvedCreateRowAccessPolicyStmtProto* _this = reinterpret_cast< ResolvedCreateRowAccessPolicyStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateRowAccessPolicyStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateRowAccessPolicyStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateRowAccessPolicyStmtProto::InternalSwap(ResolvedCreateRowAccessPolicyStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateRowAccessPolicyStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[162]);
}

// ===================================================================

class ResolvedDropRowAccessPolicyStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropRowAccessPolicyStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropRowAccessPolicyStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_drop_all(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropRowAccessPolicyStmtProto::_Internal::parent(const ResolvedDropRowAccessPolicyStmtProto* msg) {
  return *msg->parent_;
}
ResolvedDropRowAccessPolicyStmtProto::ResolvedDropRowAccessPolicyStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  target_name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropRowAccessPolicyStmtProto)
}
ResolvedDropRowAccessPolicyStmtProto::ResolvedDropRowAccessPolicyStmtProto(const ResolvedDropRowAccessPolicyStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      target_name_path_(from.target_name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  ::memcpy(&is_drop_all_, &from.is_drop_all_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&is_drop_all_)) + sizeof(is_if_exists_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropRowAccessPolicyStmtProto)
}

inline void ResolvedDropRowAccessPolicyStmtProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedDropRowAccessPolicyStmtProto::~ResolvedDropRowAccessPolicyStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropRowAccessPolicyStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDropRowAccessPolicyStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedDropRowAccessPolicyStmtProto::ArenaDtor(void* object) {
  ResolvedDropRowAccessPolicyStmtProto* _this = reinterpret_cast< ResolvedDropRowAccessPolicyStmtProto* >(object);
  (void)_this;
}
void ResolvedDropRowAccessPolicyStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDropRowAccessPolicyStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDropRowAccessPolicyStmtProto::InternalSwap(ResolvedDropRowAccessPolicyStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropRowAccessPolicyStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[163]);
}

// ===================================================================

class ResolvedDropSearchIndexStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropSearchIndexStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropSearchIndexStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropSearchIndexStmtProto::_Internal::parent(const ResolvedDropSearchIndexStmtProto* msg) {
  return *msg->parent_;
}
ResolvedDropSearchIndexStmtProto::ResolvedDropSearchIndexStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  table_name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropSearchIndexStmtProto)
}
ResolvedDropSearchIndexStmtProto::ResolvedDropSearchIndexStmtProto(const ResolvedDropSearchIndexStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      table_name_path_(from.table_name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropSearchIndexStmtProto)
}

inline void ResolvedDropSearchIndexStmtProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedDropSearchIndexStmtProto::~ResolvedDropSearchIndexStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropSearchIndexStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDropSearchIndexStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedDropSearchIndexStmtProto::ArenaDtor(void* object) {
  ResolvedDropSearchIndexStmtProto* _this = reinterpret_cast< ResolvedDropSearchIndexStmtProto* >(object);
  (void)_this;
}
void ResolvedDropSearchIndexStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDropSearchIndexStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDropSearchIndexStmtProto::InternalSwap(ResolvedDropSearchIndexStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropSearchIndexStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[164]);
}

// ===================================================================

class ResolvedGrantToActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedGrantToActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedGrantToActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedGrantToActionProto::_Internal::parent(const ResolvedGrantToActionProto* msg) {
  return *msg->parent_;
}
ResolvedGrantToActionProto::ResolvedGrantToActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  grantee_expr_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedGrantToActionProto)
}
ResolvedGrantToActionProto::ResolvedGrantToActionProto(const ResolvedGrantToActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      grantee_expr_list_(from.grantee_expr_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedGrantToActionProto)
}

inline void ResolvedGrantToActionProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedGrantToActionProto::~ResolvedGrantToActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedGrantToActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedGrantToActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedGrantToActionProto::ArenaDtor(void* object) {
  ResolvedGrantToActionProto* _this = reinterpret_cast< ResolvedGrantToActionProto* >(object);
  (void)_this;
}
void ResolvedGrantToActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedGrantToActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedGrantToActionProto::InternalSwap(ResolvedGrantToActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedGrantToActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[165]);
}

// ===================================================================

class ResolvedFilterUsingActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFilterUsingActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedFilterUsingActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& predicate(const ResolvedFilterUsingActionProto* msg);
  static void set_has_predicate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_predicate_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedFilterUsingActionProto::_Internal::parent(const ResolvedFilterUsingActionProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedFilterUsingActionProto::_Internal::predicate(const ResolvedFilterUsingActionProto* msg) {
  return *msg->predicate_;
}
ResolvedFilterUsingActionProto::ResolvedFilterUsingActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFilterUsingActionProto)
}
ResolvedFilterUsingActionProto::ResolvedFilterUsingActionProto(const ResolvedFilterUsingActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  predicate_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    predicate_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_predicate_str()) {
    predicate_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_predicate_str(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_predicate()) {
    predicate_ = new ::zetasql::AnyResolvedExprProto(*from.predicate_);
  } else {
    predicate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFilterUsingActionProto)
}

inline void ResolvedFilterUsingActionProto::SharedCtor() {
predicate_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  predicate_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&predicate_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(predicate_));
}

ResolvedFilterUsingActionProto::~ResolvedFilterUsingActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFilterUsingActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedFilterUsingActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  predicate_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete predicate_;
}

void ResolvedFilterUsingActionProto::ArenaDtor(void* object) {
  ResolvedFilterUsingActionProto* _this = reinterpret_cast< ResolvedFilterUsingActionProto* >(object);
  (void)_this;
}
void ResolvedFilterUsingActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedFilterUsingActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedFilterUsingActionProto::InternalSwap(ResolvedFilterUsingActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFilterUsingActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[166]);
}

// ===================================================================

class ResolvedRevokeFromActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRevokeFromActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedRevokeFromActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_revoke_from_all(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedRevokeFromActionProto::_Internal::parent(const ResolvedRevokeFromActionProto* msg) {
  return *msg->parent_;
}
ResolvedRevokeFromActionProto::ResolvedRevokeFromActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  revokee_expr_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRevokeFromActionProto)
}
ResolvedRevokeFromActionProto::ResolvedRevokeFromActionProto(const ResolvedRevokeFromActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      revokee_expr_list_(from.revokee_expr_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_revoke_from_all_ = from.is_revoke_from_all_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRevokeFromActionProto)
}

inline void ResolvedRevokeFromActionProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_revoke_from_all_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_revoke_from_all_));
}

ResolvedRevokeFromActionProto::~ResolvedRevokeFromActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRevokeFromActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedRevokeFromActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedRevokeFromActionProto::ArenaDtor(void* object) {
  ResolvedRevokeFromActionProto* _this = reinterpret_cast< ResolvedRevokeFromActionProto* >(object);
  (void)_this;
}
void ResolvedRevokeFromActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedRevokeFromActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedRevokeFromActionProto::InternalSwap(ResolvedRevokeFromActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRevokeFromActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[167]);
}

// ===================================================================

class ResolvedRenameToActionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRenameToActionProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterActionProto& parent(const ResolvedRenameToActionProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterActionProto&
ResolvedRenameToActionProto::_Internal::parent(const ResolvedRenameToActionProto* msg) {
  return *msg->parent_;
}
ResolvedRenameToActionProto::ResolvedRenameToActionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  new_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRenameToActionProto)
}
ResolvedRenameToActionProto::ResolvedRenameToActionProto(const ResolvedRenameToActionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      new_path_(from.new_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterActionProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRenameToActionProto)
}

inline void ResolvedRenameToActionProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedRenameToActionProto::~ResolvedRenameToActionProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRenameToActionProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedRenameToActionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedRenameToActionProto::ArenaDtor(void* object) {
  ResolvedRenameToActionProto* _this = reinterpret_cast< ResolvedRenameToActionProto* >(object);
  (void)_this;
}
void ResolvedRenameToActionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedRenameToActionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedRenameToActionProto::InternalSwap(ResolvedRenameToActionProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRenameToActionProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[168]);
}

// ===================================================================

class ResolvedAlterRowAccessPolicyStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterRowAccessPolicyStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterRowAccessPolicyStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedAlterRowAccessPolicyStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterRowAccessPolicyStmtProto::_Internal::parent(const ResolvedAlterRowAccessPolicyStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedAlterRowAccessPolicyStmtProto::_Internal::table_scan(const ResolvedAlterRowAccessPolicyStmtProto* msg) {
  return *msg->table_scan_;
}
ResolvedAlterRowAccessPolicyStmtProto::ResolvedAlterRowAccessPolicyStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterRowAccessPolicyStmtProto)
}
ResolvedAlterRowAccessPolicyStmtProto::ResolvedAlterRowAccessPolicyStmtProto(const ResolvedAlterRowAccessPolicyStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_table_scan()) {
    table_scan_ = new ::zetasql::ResolvedTableScanProto(*from.table_scan_);
  } else {
    table_scan_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterRowAccessPolicyStmtProto)
}

inline void ResolvedAlterRowAccessPolicyStmtProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_scan_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(table_scan_));
}

ResolvedAlterRowAccessPolicyStmtProto::~ResolvedAlterRowAccessPolicyStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterRowAccessPolicyStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterRowAccessPolicyStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete table_scan_;
}

void ResolvedAlterRowAccessPolicyStmtProto::ArenaDtor(void* object) {
  ResolvedAlterRowAccessPolicyStmtProto* _this = reinterpret_cast< ResolvedAlterRowAccessPolicyStmtProto* >(object);
  (void)_this;
}
void ResolvedAlterRowAccessPolicyStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterRowAccessPolicyStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterRowAccessPolicyStmtProto::InternalSwap(ResolvedAlterRowAccessPolicyStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterRowAccessPolicyStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[169]);
}

// ===================================================================

class ResolvedAlterAllRowAccessPoliciesStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterAllRowAccessPoliciesStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterAllRowAccessPoliciesStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& table_scan(const ResolvedAlterAllRowAccessPoliciesStmtProto* msg);
  static void set_has_table_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterAllRowAccessPoliciesStmtProto::_Internal::parent(const ResolvedAlterAllRowAccessPoliciesStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedAlterAllRowAccessPoliciesStmtProto::_Internal::table_scan(const ResolvedAlterAllRowAccessPoliciesStmtProto* msg) {
  return *msg->table_scan_;
}
ResolvedAlterAllRowAccessPoliciesStmtProto::ResolvedAlterAllRowAccessPoliciesStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto)
}
ResolvedAlterAllRowAccessPoliciesStmtProto::ResolvedAlterAllRowAccessPoliciesStmtProto(const ResolvedAlterAllRowAccessPoliciesStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_table_scan()) {
    table_scan_ = new ::zetasql::ResolvedTableScanProto(*from.table_scan_);
  } else {
    table_scan_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto)
}

inline void ResolvedAlterAllRowAccessPoliciesStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_scan_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(table_scan_));
}

ResolvedAlterAllRowAccessPoliciesStmtProto::~ResolvedAlterAllRowAccessPoliciesStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterAllRowAccessPoliciesStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterAllRowAccessPoliciesStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete table_scan_;
}

void ResolvedAlterAllRowAccessPoliciesStmtProto::ArenaDtor(void* object) {
  ResolvedAlterAllRowAccessPoliciesStmtProto* _this = reinterpret_cast< ResolvedAlterAllRowAccessPoliciesStmtProto* >(object);
  (void)_this;
}
void ResolvedAlterAllRowAccessPoliciesStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterAllRowAccessPoliciesStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterAllRowAccessPoliciesStmtProto::InternalSwap(ResolvedAlterAllRowAccessPoliciesStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterAllRowAccessPoliciesStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[170]);
}

// ===================================================================

class ResolvedCreateConstantStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateConstantStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateConstantStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedCreateConstantStmtProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateConstantStmtProto::_Internal::parent(const ResolvedCreateConstantStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCreateConstantStmtProto::_Internal::expr(const ResolvedCreateConstantStmtProto* msg) {
  return *msg->expr_;
}
ResolvedCreateConstantStmtProto::ResolvedCreateConstantStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateConstantStmtProto)
}
ResolvedCreateConstantStmtProto::ResolvedCreateConstantStmtProto(const ResolvedCreateConstantStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expr()) {
    expr_ = new ::zetasql::AnyResolvedExprProto(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateConstantStmtProto)
}

inline void ResolvedCreateConstantStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(expr_));
}

ResolvedCreateConstantStmtProto::~ResolvedCreateConstantStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateConstantStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateConstantStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expr_;
}

void ResolvedCreateConstantStmtProto::ArenaDtor(void* object) {
  ResolvedCreateConstantStmtProto* _this = reinterpret_cast< ResolvedCreateConstantStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateConstantStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateConstantStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateConstantStmtProto::InternalSwap(ResolvedCreateConstantStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateConstantStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[171]);
}

// ===================================================================

class ResolvedCreateFunctionStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateFunctionStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateFunctionStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_explicit_return_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::zetasql::TypeProto& return_type(const ResolvedCreateFunctionStmtProto* msg);
  static void set_has_return_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::FunctionSignatureProto& signature(const ResolvedCreateFunctionStmtProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_aggregate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& function_expression(const ResolvedCreateFunctionStmtProto* msg);
  static void set_has_function_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sql_security(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_determinism_level(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateFunctionStmtProto::_Internal::parent(const ResolvedCreateFunctionStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::TypeProto&
ResolvedCreateFunctionStmtProto::_Internal::return_type(const ResolvedCreateFunctionStmtProto* msg) {
  return *msg->return_type_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedCreateFunctionStmtProto::_Internal::signature(const ResolvedCreateFunctionStmtProto* msg) {
  return *msg->signature_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedCreateFunctionStmtProto::_Internal::function_expression(const ResolvedCreateFunctionStmtProto* msg) {
  return *msg->function_expression_;
}
void ResolvedCreateFunctionStmtProto::clear_return_type() {
  if (return_type_ != nullptr) return_type_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ResolvedCreateFunctionStmtProto::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
ResolvedCreateFunctionStmtProto::ResolvedCreateFunctionStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_list_(arena),
  aggregate_expression_list_(arena),
  argument_name_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateFunctionStmtProto)
}
ResolvedCreateFunctionStmtProto::ResolvedCreateFunctionStmtProto(const ResolvedCreateFunctionStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_list_(from.option_list_),
      aggregate_expression_list_(from.aggregate_expression_list_),
      argument_name_list_(from.argument_name_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_return_type()) {
    return_type_ = new ::zetasql::TypeProto(*from.return_type_);
  } else {
    return_type_ = nullptr;
  }
  if (from._internal_has_function_expression()) {
    function_expression_ = new ::zetasql::AnyResolvedExprProto(*from.function_expression_);
  } else {
    function_expression_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::zetasql::FunctionSignatureProto(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  ::memcpy(&has_explicit_return_type_, &from.has_explicit_return_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&determinism_level_) -
    reinterpret_cast<char*>(&has_explicit_return_type_)) + sizeof(determinism_level_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateFunctionStmtProto)
}

inline void ResolvedCreateFunctionStmtProto::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&determinism_level_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(determinism_level_));
}

ResolvedCreateFunctionStmtProto::~ResolvedCreateFunctionStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateFunctionStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateFunctionStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete return_type_;
  if (this != internal_default_instance()) delete function_expression_;
  if (this != internal_default_instance()) delete signature_;
}

void ResolvedCreateFunctionStmtProto::ArenaDtor(void* object) {
  ResolvedCreateFunctionStmtProto* _this = reinterpret_cast< ResolvedCreateFunctionStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateFunctionStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateFunctionStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateFunctionStmtProto::InternalSwap(ResolvedCreateFunctionStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateFunctionStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[172]);
}

// ===================================================================

class ResolvedArgumentDefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedArgumentDefProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedArgumentDefProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TypeProto& type(const ResolvedArgumentDefProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_argument_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedArgumentDefProto::_Internal::parent(const ResolvedArgumentDefProto* msg) {
  return *msg->parent_;
}
const ::zetasql::TypeProto&
ResolvedArgumentDefProto::_Internal::type(const ResolvedArgumentDefProto* msg) {
  return *msg->type_;
}
void ResolvedArgumentDefProto::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ResolvedArgumentDefProto::ResolvedArgumentDefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedArgumentDefProto)
}
ResolvedArgumentDefProto::ResolvedArgumentDefProto(const ResolvedArgumentDefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::zetasql::TypeProto(*from.type_);
  } else {
    type_ = nullptr;
  }
  argument_kind_ = from.argument_kind_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedArgumentDefProto)
}

inline void ResolvedArgumentDefProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&argument_kind_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(argument_kind_));
}

ResolvedArgumentDefProto::~ResolvedArgumentDefProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedArgumentDefProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedArgumentDefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete type_;
}

void ResolvedArgumentDefProto::ArenaDtor(void* object) {
  ResolvedArgumentDefProto* _this = reinterpret_cast< ResolvedArgumentDefProto* >(object);
  (void)_this;
}
void ResolvedArgumentDefProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedArgumentDefProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedArgumentDefProto::InternalSwap(ResolvedArgumentDefProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedArgumentDefProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[173]);
}

// ===================================================================

class ResolvedArgumentRefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedArgumentRefProto>()._has_bits_);
  static const ::zetasql::ResolvedExprProto& parent(const ResolvedArgumentRefProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_argument_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedExprProto&
ResolvedArgumentRefProto::_Internal::parent(const ResolvedArgumentRefProto* msg) {
  return *msg->parent_;
}
ResolvedArgumentRefProto::ResolvedArgumentRefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedArgumentRefProto)
}
ResolvedArgumentRefProto::ResolvedArgumentRefProto(const ResolvedArgumentRefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedExprProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  argument_kind_ = from.argument_kind_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedArgumentRefProto)
}

inline void ResolvedArgumentRefProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&argument_kind_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(argument_kind_));
}

ResolvedArgumentRefProto::~ResolvedArgumentRefProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedArgumentRefProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedArgumentRefProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedArgumentRefProto::ArenaDtor(void* object) {
  ResolvedArgumentRefProto* _this = reinterpret_cast< ResolvedArgumentRefProto* >(object);
  (void)_this;
}
void ResolvedArgumentRefProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedArgumentRefProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedArgumentRefProto::InternalSwap(ResolvedArgumentRefProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedArgumentRefProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[174]);
}

// ===================================================================

class ResolvedCreateTableFunctionStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateTableFunctionStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateTableFunctionStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::FunctionSignatureProto& signature(const ResolvedCreateTableFunctionStmtProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_has_explicit_return_schema(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& query(const ResolvedCreateTableFunctionStmtProto* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sql_security(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateTableFunctionStmtProto::_Internal::parent(const ResolvedCreateTableFunctionStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedCreateTableFunctionStmtProto::_Internal::signature(const ResolvedCreateTableFunctionStmtProto* msg) {
  return *msg->signature_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCreateTableFunctionStmtProto::_Internal::query(const ResolvedCreateTableFunctionStmtProto* msg) {
  return *msg->query_;
}
void ResolvedCreateTableFunctionStmtProto::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ResolvedCreateTableFunctionStmtProto::ResolvedCreateTableFunctionStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  argument_name_list_(arena),
  option_list_(arena),
  output_column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateTableFunctionStmtProto)
}
ResolvedCreateTableFunctionStmtProto::ResolvedCreateTableFunctionStmtProto(const ResolvedCreateTableFunctionStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argument_name_list_(from.argument_name_list_),
      option_list_(from.option_list_),
      output_column_list_(from.output_column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::zetasql::FunctionSignatureProto(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new ::zetasql::AnyResolvedScanProto(*from.query_);
  } else {
    query_ = nullptr;
  }
  ::memcpy(&sql_security_, &from.sql_security_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_value_table_) -
    reinterpret_cast<char*>(&sql_security_)) + sizeof(is_value_table_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateTableFunctionStmtProto)
}

inline void ResolvedCreateTableFunctionStmtProto::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_value_table_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_value_table_));
}

ResolvedCreateTableFunctionStmtProto::~ResolvedCreateTableFunctionStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateTableFunctionStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateTableFunctionStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete signature_;
  if (this != internal_default_instance()) delete query_;
}

void ResolvedCreateTableFunctionStmtProto::ArenaDtor(void* object) {
  ResolvedCreateTableFunctionStmtProto* _this = reinterpret_cast< ResolvedCreateTableFunctionStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateTableFunctionStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateTableFunctionStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateTableFunctionStmtProto::InternalSwap(ResolvedCreateTableFunctionStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateTableFunctionStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[175]);
}

// ===================================================================

class ResolvedRelationArgumentScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedRelationArgumentScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedRelationArgumentScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_value_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedRelationArgumentScanProto::_Internal::parent(const ResolvedRelationArgumentScanProto* msg) {
  return *msg->parent_;
}
ResolvedRelationArgumentScanProto::ResolvedRelationArgumentScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedRelationArgumentScanProto)
}
ResolvedRelationArgumentScanProto::ResolvedRelationArgumentScanProto(const ResolvedRelationArgumentScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_value_table_ = from.is_value_table_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedRelationArgumentScanProto)
}

inline void ResolvedRelationArgumentScanProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_value_table_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_value_table_));
}

ResolvedRelationArgumentScanProto::~ResolvedRelationArgumentScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedRelationArgumentScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedRelationArgumentScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedRelationArgumentScanProto::ArenaDtor(void* object) {
  ResolvedRelationArgumentScanProto* _this = reinterpret_cast< ResolvedRelationArgumentScanProto* >(object);
  (void)_this;
}
void ResolvedRelationArgumentScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedRelationArgumentScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedRelationArgumentScanProto::InternalSwap(ResolvedRelationArgumentScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedRelationArgumentScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[176]);
}

// ===================================================================

class ResolvedArgumentListProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedArgumentListProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedArgumentListProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedArgumentListProto::_Internal::parent(const ResolvedArgumentListProto* msg) {
  return *msg->parent_;
}
ResolvedArgumentListProto::ResolvedArgumentListProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arg_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedArgumentListProto)
}
ResolvedArgumentListProto::ResolvedArgumentListProto(const ResolvedArgumentListProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      arg_list_(from.arg_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedArgumentListProto)
}

inline void ResolvedArgumentListProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedArgumentListProto::~ResolvedArgumentListProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedArgumentListProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedArgumentListProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedArgumentListProto::ArenaDtor(void* object) {
  ResolvedArgumentListProto* _this = reinterpret_cast< ResolvedArgumentListProto* >(object);
  (void)_this;
}
void ResolvedArgumentListProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedArgumentListProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedArgumentListProto::InternalSwap(ResolvedArgumentListProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedArgumentListProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[177]);
}

// ===================================================================

class ResolvedFunctionSignatureHolderProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedFunctionSignatureHolderProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedFunctionSignatureHolderProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::FunctionSignatureProto& signature(const ResolvedFunctionSignatureHolderProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedFunctionSignatureHolderProto::_Internal::parent(const ResolvedFunctionSignatureHolderProto* msg) {
  return *msg->parent_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedFunctionSignatureHolderProto::_Internal::signature(const ResolvedFunctionSignatureHolderProto* msg) {
  return *msg->signature_;
}
void ResolvedFunctionSignatureHolderProto::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResolvedFunctionSignatureHolderProto::ResolvedFunctionSignatureHolderProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedFunctionSignatureHolderProto)
}
ResolvedFunctionSignatureHolderProto::ResolvedFunctionSignatureHolderProto(const ResolvedFunctionSignatureHolderProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::zetasql::FunctionSignatureProto(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedFunctionSignatureHolderProto)
}

inline void ResolvedFunctionSignatureHolderProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(signature_));
}

ResolvedFunctionSignatureHolderProto::~ResolvedFunctionSignatureHolderProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedFunctionSignatureHolderProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedFunctionSignatureHolderProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete signature_;
}

void ResolvedFunctionSignatureHolderProto::ArenaDtor(void* object) {
  ResolvedFunctionSignatureHolderProto* _this = reinterpret_cast< ResolvedFunctionSignatureHolderProto* >(object);
  (void)_this;
}
void ResolvedFunctionSignatureHolderProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedFunctionSignatureHolderProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedFunctionSignatureHolderProto::InternalSwap(ResolvedFunctionSignatureHolderProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedFunctionSignatureHolderProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[178]);
}

// ===================================================================

class ResolvedDropFunctionStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropFunctionStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropFunctionStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::zetasql::ResolvedArgumentListProto& arguments(const ResolvedDropFunctionStmtProto* msg);
  static void set_has_arguments(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedFunctionSignatureHolderProto& signature(const ResolvedDropFunctionStmtProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropFunctionStmtProto::_Internal::parent(const ResolvedDropFunctionStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedArgumentListProto&
ResolvedDropFunctionStmtProto::_Internal::arguments(const ResolvedDropFunctionStmtProto* msg) {
  return *msg->arguments_;
}
const ::zetasql::ResolvedFunctionSignatureHolderProto&
ResolvedDropFunctionStmtProto::_Internal::signature(const ResolvedDropFunctionStmtProto* msg) {
  return *msg->signature_;
}
ResolvedDropFunctionStmtProto::ResolvedDropFunctionStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropFunctionStmtProto)
}
ResolvedDropFunctionStmtProto::ResolvedDropFunctionStmtProto(const ResolvedDropFunctionStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_arguments()) {
    arguments_ = new ::zetasql::ResolvedArgumentListProto(*from.arguments_);
  } else {
    arguments_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::zetasql::ResolvedFunctionSignatureHolderProto(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropFunctionStmtProto)
}

inline void ResolvedDropFunctionStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedDropFunctionStmtProto::~ResolvedDropFunctionStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropFunctionStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDropFunctionStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete arguments_;
  if (this != internal_default_instance()) delete signature_;
}

void ResolvedDropFunctionStmtProto::ArenaDtor(void* object) {
  ResolvedDropFunctionStmtProto* _this = reinterpret_cast< ResolvedDropFunctionStmtProto* >(object);
  (void)_this;
}
void ResolvedDropFunctionStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDropFunctionStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDropFunctionStmtProto::InternalSwap(ResolvedDropFunctionStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropFunctionStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[179]);
}

// ===================================================================

class ResolvedDropTableFunctionStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedDropTableFunctionStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedDropTableFunctionStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_if_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedDropTableFunctionStmtProto::_Internal::parent(const ResolvedDropTableFunctionStmtProto* msg) {
  return *msg->parent_;
}
ResolvedDropTableFunctionStmtProto::ResolvedDropTableFunctionStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedDropTableFunctionStmtProto)
}
ResolvedDropTableFunctionStmtProto::ResolvedDropTableFunctionStmtProto(const ResolvedDropTableFunctionStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  is_if_exists_ = from.is_if_exists_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedDropTableFunctionStmtProto)
}

inline void ResolvedDropTableFunctionStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_if_exists_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(is_if_exists_));
}

ResolvedDropTableFunctionStmtProto::~ResolvedDropTableFunctionStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedDropTableFunctionStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedDropTableFunctionStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedDropTableFunctionStmtProto::ArenaDtor(void* object) {
  ResolvedDropTableFunctionStmtProto* _this = reinterpret_cast< ResolvedDropTableFunctionStmtProto* >(object);
  (void)_this;
}
void ResolvedDropTableFunctionStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedDropTableFunctionStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedDropTableFunctionStmtProto::InternalSwap(ResolvedDropTableFunctionStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedDropTableFunctionStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[180]);
}

// ===================================================================

class ResolvedCallStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCallStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedCallStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ProcedureRefProto& procedure(const ResolvedCallStmtProto* msg);
  static void set_has_procedure(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::FunctionSignatureProto& signature(const ResolvedCallStmtProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedCallStmtProto::_Internal::parent(const ResolvedCallStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ProcedureRefProto&
ResolvedCallStmtProto::_Internal::procedure(const ResolvedCallStmtProto* msg) {
  return *msg->procedure_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedCallStmtProto::_Internal::signature(const ResolvedCallStmtProto* msg) {
  return *msg->signature_;
}
void ResolvedCallStmtProto::clear_procedure() {
  if (procedure_ != nullptr) procedure_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ResolvedCallStmtProto::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ResolvedCallStmtProto::ResolvedCallStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  argument_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCallStmtProto)
}
ResolvedCallStmtProto::ResolvedCallStmtProto(const ResolvedCallStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argument_list_(from.argument_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_procedure()) {
    procedure_ = new ::zetasql::ProcedureRefProto(*from.procedure_);
  } else {
    procedure_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::zetasql::FunctionSignatureProto(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCallStmtProto)
}

inline void ResolvedCallStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(signature_));
}

ResolvedCallStmtProto::~ResolvedCallStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCallStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCallStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete procedure_;
  if (this != internal_default_instance()) delete signature_;
}

void ResolvedCallStmtProto::ArenaDtor(void* object) {
  ResolvedCallStmtProto* _this = reinterpret_cast< ResolvedCallStmtProto* >(object);
  (void)_this;
}
void ResolvedCallStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCallStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCallStmtProto::InternalSwap(ResolvedCallStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCallStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[181]);
}

// ===================================================================

class ResolvedImportStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedImportStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedImportStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_import_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedImportStmtProto::_Internal::parent(const ResolvedImportStmtProto* msg) {
  return *msg->parent_;
}
ResolvedImportStmtProto::ResolvedImportStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena),
  alias_path_(arena),
  option_list_(arena),
  into_alias_path_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedImportStmtProto)
}
ResolvedImportStmtProto::ResolvedImportStmtProto(const ResolvedImportStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_),
      alias_path_(from.alias_path_),
      option_list_(from.option_list_),
      into_alias_path_(from.into_alias_path_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_path()) {
    file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  import_kind_ = from.import_kind_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedImportStmtProto)
}

inline void ResolvedImportStmtProto::SharedCtor() {
file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&import_kind_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(import_kind_));
}

ResolvedImportStmtProto::~ResolvedImportStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedImportStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedImportStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedImportStmtProto::ArenaDtor(void* object) {
  ResolvedImportStmtProto* _this = reinterpret_cast< ResolvedImportStmtProto* >(object);
  (void)_this;
}
void ResolvedImportStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedImportStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedImportStmtProto::InternalSwap(ResolvedImportStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedImportStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[182]);
}

// ===================================================================

class ResolvedModuleStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedModuleStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedModuleStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedModuleStmtProto::_Internal::parent(const ResolvedModuleStmtProto* msg) {
  return *msg->parent_;
}
ResolvedModuleStmtProto::ResolvedModuleStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena),
  option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedModuleStmtProto)
}
ResolvedModuleStmtProto::ResolvedModuleStmtProto(const ResolvedModuleStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_),
      option_list_(from.option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedModuleStmtProto)
}

inline void ResolvedModuleStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedModuleStmtProto::~ResolvedModuleStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedModuleStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedModuleStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedModuleStmtProto::ArenaDtor(void* object) {
  ResolvedModuleStmtProto* _this = reinterpret_cast< ResolvedModuleStmtProto* >(object);
  (void)_this;
}
void ResolvedModuleStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedModuleStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedModuleStmtProto::InternalSwap(ResolvedModuleStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedModuleStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[183]);
}

// ===================================================================

class ResolvedAggregateHavingModifierProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAggregateHavingModifierProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedAggregateHavingModifierProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::AnyResolvedExprProto& having_expr(const ResolvedAggregateHavingModifierProto* msg);
  static void set_has_having_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedAggregateHavingModifierProto::_Internal::parent(const ResolvedAggregateHavingModifierProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedAggregateHavingModifierProto::_Internal::having_expr(const ResolvedAggregateHavingModifierProto* msg) {
  return *msg->having_expr_;
}
ResolvedAggregateHavingModifierProto::ResolvedAggregateHavingModifierProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAggregateHavingModifierProto)
}
ResolvedAggregateHavingModifierProto::ResolvedAggregateHavingModifierProto(const ResolvedAggregateHavingModifierProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_having_expr()) {
    having_expr_ = new ::zetasql::AnyResolvedExprProto(*from.having_expr_);
  } else {
    having_expr_ = nullptr;
  }
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAggregateHavingModifierProto)
}

inline void ResolvedAggregateHavingModifierProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(kind_));
}

ResolvedAggregateHavingModifierProto::~ResolvedAggregateHavingModifierProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAggregateHavingModifierProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAggregateHavingModifierProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete having_expr_;
}

void ResolvedAggregateHavingModifierProto::ArenaDtor(void* object) {
  ResolvedAggregateHavingModifierProto* _this = reinterpret_cast< ResolvedAggregateHavingModifierProto* >(object);
  (void)_this;
}
void ResolvedAggregateHavingModifierProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAggregateHavingModifierProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAggregateHavingModifierProto::InternalSwap(ResolvedAggregateHavingModifierProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAggregateHavingModifierProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[184]);
}

// ===================================================================

class ResolvedCreateMaterializedViewStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateMaterializedViewStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateViewBaseProto& parent(const ResolvedCreateMaterializedViewStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedCreateViewBaseProto&
ResolvedCreateMaterializedViewStmtProto::_Internal::parent(const ResolvedCreateMaterializedViewStmtProto* msg) {
  return *msg->parent_;
}
ResolvedCreateMaterializedViewStmtProto::ResolvedCreateMaterializedViewStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_definition_list_(arena),
  partition_by_list_(arena),
  cluster_by_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateMaterializedViewStmtProto)
}
ResolvedCreateMaterializedViewStmtProto::ResolvedCreateMaterializedViewStmtProto(const ResolvedCreateMaterializedViewStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      column_definition_list_(from.column_definition_list_),
      partition_by_list_(from.partition_by_list_),
      cluster_by_list_(from.cluster_by_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateViewBaseProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateMaterializedViewStmtProto)
}

inline void ResolvedCreateMaterializedViewStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedCreateMaterializedViewStmtProto::~ResolvedCreateMaterializedViewStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateMaterializedViewStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateMaterializedViewStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedCreateMaterializedViewStmtProto::ArenaDtor(void* object) {
  ResolvedCreateMaterializedViewStmtProto* _this = reinterpret_cast< ResolvedCreateMaterializedViewStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateMaterializedViewStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateMaterializedViewStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateMaterializedViewStmtProto::InternalSwap(ResolvedCreateMaterializedViewStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateMaterializedViewStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[185]);
}

// ===================================================================

class ResolvedCreateProcedureStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateProcedureStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateProcedureStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::FunctionSignatureProto& signature(const ResolvedCreateProcedureStmtProto* msg);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_procedure_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateProcedureStmtProto::_Internal::parent(const ResolvedCreateProcedureStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::FunctionSignatureProto&
ResolvedCreateProcedureStmtProto::_Internal::signature(const ResolvedCreateProcedureStmtProto* msg) {
  return *msg->signature_;
}
void ResolvedCreateProcedureStmtProto::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ResolvedCreateProcedureStmtProto::ResolvedCreateProcedureStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  argument_name_list_(arena),
  option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateProcedureStmtProto)
}
ResolvedCreateProcedureStmtProto::ResolvedCreateProcedureStmtProto(const ResolvedCreateProcedureStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      argument_name_list_(from.argument_name_list_),
      option_list_(from.option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  procedure_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    procedure_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_procedure_body()) {
    procedure_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_procedure_body(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::zetasql::FunctionSignatureProto(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateProcedureStmtProto)
}

inline void ResolvedCreateProcedureStmtProto::SharedCtor() {
procedure_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  procedure_body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(signature_));
}

ResolvedCreateProcedureStmtProto::~ResolvedCreateProcedureStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateProcedureStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateProcedureStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  procedure_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete signature_;
}

void ResolvedCreateProcedureStmtProto::ArenaDtor(void* object) {
  ResolvedCreateProcedureStmtProto* _this = reinterpret_cast< ResolvedCreateProcedureStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateProcedureStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateProcedureStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateProcedureStmtProto::InternalSwap(ResolvedCreateProcedureStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateProcedureStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[186]);
}

// ===================================================================

class ResolvedExecuteImmediateArgumentProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExecuteImmediateArgumentProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedExecuteImmediateArgumentProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& expression(const ResolvedExecuteImmediateArgumentProto* msg);
  static void set_has_expression(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedExecuteImmediateArgumentProto::_Internal::parent(const ResolvedExecuteImmediateArgumentProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedExecuteImmediateArgumentProto::_Internal::expression(const ResolvedExecuteImmediateArgumentProto* msg) {
  return *msg->expression_;
}
ResolvedExecuteImmediateArgumentProto::ResolvedExecuteImmediateArgumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExecuteImmediateArgumentProto)
}
ResolvedExecuteImmediateArgumentProto::ResolvedExecuteImmediateArgumentProto(const ResolvedExecuteImmediateArgumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::zetasql::AnyResolvedExprProto(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExecuteImmediateArgumentProto)
}

inline void ResolvedExecuteImmediateArgumentProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expression_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(expression_));
}

ResolvedExecuteImmediateArgumentProto::~ResolvedExecuteImmediateArgumentProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExecuteImmediateArgumentProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedExecuteImmediateArgumentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete expression_;
}

void ResolvedExecuteImmediateArgumentProto::ArenaDtor(void* object) {
  ResolvedExecuteImmediateArgumentProto* _this = reinterpret_cast< ResolvedExecuteImmediateArgumentProto* >(object);
  (void)_this;
}
void ResolvedExecuteImmediateArgumentProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedExecuteImmediateArgumentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedExecuteImmediateArgumentProto::InternalSwap(ResolvedExecuteImmediateArgumentProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExecuteImmediateArgumentProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[187]);
}

// ===================================================================

class ResolvedExecuteImmediateStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedExecuteImmediateStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedExecuteImmediateStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& sql(const ResolvedExecuteImmediateStmtProto* msg);
  static void set_has_sql(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedExecuteImmediateStmtProto::_Internal::parent(const ResolvedExecuteImmediateStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedExecuteImmediateStmtProto::_Internal::sql(const ResolvedExecuteImmediateStmtProto* msg) {
  return *msg->sql_;
}
ResolvedExecuteImmediateStmtProto::ResolvedExecuteImmediateStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  into_identifier_list_(arena),
  using_argument_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedExecuteImmediateStmtProto)
}
ResolvedExecuteImmediateStmtProto::ResolvedExecuteImmediateStmtProto(const ResolvedExecuteImmediateStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      into_identifier_list_(from.into_identifier_list_),
      using_argument_list_(from.using_argument_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_sql()) {
    sql_ = new ::zetasql::AnyResolvedExprProto(*from.sql_);
  } else {
    sql_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedExecuteImmediateStmtProto)
}

inline void ResolvedExecuteImmediateStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sql_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(sql_));
}

ResolvedExecuteImmediateStmtProto::~ResolvedExecuteImmediateStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedExecuteImmediateStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedExecuteImmediateStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete sql_;
}

void ResolvedExecuteImmediateStmtProto::ArenaDtor(void* object) {
  ResolvedExecuteImmediateStmtProto* _this = reinterpret_cast< ResolvedExecuteImmediateStmtProto* >(object);
  (void)_this;
}
void ResolvedExecuteImmediateStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedExecuteImmediateStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedExecuteImmediateStmtProto::InternalSwap(ResolvedExecuteImmediateStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedExecuteImmediateStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[188]);
}

// ===================================================================

class ResolvedAssignmentStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAssignmentStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAssignmentStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedExprProto& target(const ResolvedAssignmentStmtProto* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& expr(const ResolvedAssignmentStmtProto* msg);
  static void set_has_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAssignmentStmtProto::_Internal::parent(const ResolvedAssignmentStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedAssignmentStmtProto::_Internal::target(const ResolvedAssignmentStmtProto* msg) {
  return *msg->target_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedAssignmentStmtProto::_Internal::expr(const ResolvedAssignmentStmtProto* msg) {
  return *msg->expr_;
}
ResolvedAssignmentStmtProto::ResolvedAssignmentStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAssignmentStmtProto)
}
ResolvedAssignmentStmtProto::ResolvedAssignmentStmtProto(const ResolvedAssignmentStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_target()) {
    target_ = new ::zetasql::AnyResolvedExprProto(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from._internal_has_expr()) {
    expr_ = new ::zetasql::AnyResolvedExprProto(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAssignmentStmtProto)
}

inline void ResolvedAssignmentStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(expr_));
}

ResolvedAssignmentStmtProto::~ResolvedAssignmentStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAssignmentStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAssignmentStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete expr_;
}

void ResolvedAssignmentStmtProto::ArenaDtor(void* object) {
  ResolvedAssignmentStmtProto* _this = reinterpret_cast< ResolvedAssignmentStmtProto* >(object);
  (void)_this;
}
void ResolvedAssignmentStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAssignmentStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAssignmentStmtProto::InternalSwap(ResolvedAssignmentStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAssignmentStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[189]);
}

// ===================================================================

class ResolvedCreateEntityStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCreateEntityStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedCreateStatementProto& parent(const ResolvedCreateEntityStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_entity_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entity_body_json(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_body_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedCreateStatementProto&
ResolvedCreateEntityStmtProto::_Internal::parent(const ResolvedCreateEntityStmtProto* msg) {
  return *msg->parent_;
}
ResolvedCreateEntityStmtProto::ResolvedCreateEntityStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCreateEntityStmtProto)
}
ResolvedCreateEntityStmtProto::ResolvedCreateEntityStmtProto(const ResolvedCreateEntityStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_list_(from.option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entity_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    entity_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_type()) {
    entity_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entity_type(), 
      GetArenaForAllocation());
  }
  entity_body_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    entity_body_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_body_json()) {
    entity_body_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entity_body_json(), 
      GetArenaForAllocation());
  }
  entity_body_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    entity_body_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_body_text()) {
    entity_body_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entity_body_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedCreateStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCreateEntityStmtProto)
}

inline void ResolvedCreateEntityStmtProto::SharedCtor() {
entity_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  entity_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
entity_body_json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  entity_body_json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
entity_body_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  entity_body_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_ = nullptr;
}

ResolvedCreateEntityStmtProto::~ResolvedCreateEntityStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCreateEntityStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCreateEntityStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  entity_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entity_body_json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entity_body_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedCreateEntityStmtProto::ArenaDtor(void* object) {
  ResolvedCreateEntityStmtProto* _this = reinterpret_cast< ResolvedCreateEntityStmtProto* >(object);
  (void)_this;
}
void ResolvedCreateEntityStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCreateEntityStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCreateEntityStmtProto::InternalSwap(ResolvedCreateEntityStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCreateEntityStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[190]);
}

// ===================================================================

class ResolvedAlterEntityStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAlterEntityStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedAlterObjectStmtProto& parent(const ResolvedAlterEntityStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entity_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedAlterObjectStmtProto&
ResolvedAlterEntityStmtProto::_Internal::parent(const ResolvedAlterEntityStmtProto* msg) {
  return *msg->parent_;
}
ResolvedAlterEntityStmtProto::ResolvedAlterEntityStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAlterEntityStmtProto)
}
ResolvedAlterEntityStmtProto::ResolvedAlterEntityStmtProto(const ResolvedAlterEntityStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entity_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    entity_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity_type()) {
    entity_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entity_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedAlterObjectStmtProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAlterEntityStmtProto)
}

inline void ResolvedAlterEntityStmtProto::SharedCtor() {
entity_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  entity_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
parent_ = nullptr;
}

ResolvedAlterEntityStmtProto::~ResolvedAlterEntityStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAlterEntityStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAlterEntityStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  entity_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAlterEntityStmtProto::ArenaDtor(void* object) {
  ResolvedAlterEntityStmtProto* _this = reinterpret_cast< ResolvedAlterEntityStmtProto* >(object);
  (void)_this;
}
void ResolvedAlterEntityStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAlterEntityStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAlterEntityStmtProto::InternalSwap(ResolvedAlterEntityStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAlterEntityStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[191]);
}

// ===================================================================

class ResolvedPivotColumnProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedPivotColumnProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedPivotColumnProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnProto& column(const ResolvedPivotColumnProto* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pivot_expr_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pivot_value_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedPivotColumnProto::_Internal::parent(const ResolvedPivotColumnProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedPivotColumnProto::_Internal::column(const ResolvedPivotColumnProto* msg) {
  return *msg->column_;
}
void ResolvedPivotColumnProto::clear_column() {
  if (column_ != nullptr) column_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResolvedPivotColumnProto::ResolvedPivotColumnProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedPivotColumnProto)
}
ResolvedPivotColumnProto::ResolvedPivotColumnProto(const ResolvedPivotColumnProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_column()) {
    column_ = new ::zetasql::ResolvedColumnProto(*from.column_);
  } else {
    column_ = nullptr;
  }
  ::memcpy(&pivot_expr_index_, &from.pivot_expr_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&pivot_value_index_) -
    reinterpret_cast<char*>(&pivot_expr_index_)) + sizeof(pivot_value_index_));
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedPivotColumnProto)
}

inline void ResolvedPivotColumnProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pivot_value_index_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(pivot_value_index_));
}

ResolvedPivotColumnProto::~ResolvedPivotColumnProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedPivotColumnProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedPivotColumnProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete column_;
}

void ResolvedPivotColumnProto::ArenaDtor(void* object) {
  ResolvedPivotColumnProto* _this = reinterpret_cast< ResolvedPivotColumnProto* >(object);
  (void)_this;
}
void ResolvedPivotColumnProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedPivotColumnProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedPivotColumnProto::InternalSwap(ResolvedPivotColumnProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedPivotColumnProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[192]);
}

// ===================================================================

class ResolvedPivotScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedPivotScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedPivotScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedPivotScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedExprProto& for_expr(const ResolvedPivotScanProto* msg);
  static void set_has_for_expr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedPivotScanProto::_Internal::parent(const ResolvedPivotScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedPivotScanProto::_Internal::input_scan(const ResolvedPivotScanProto* msg) {
  return *msg->input_scan_;
}
const ::zetasql::AnyResolvedExprProto&
ResolvedPivotScanProto::_Internal::for_expr(const ResolvedPivotScanProto* msg) {
  return *msg->for_expr_;
}
ResolvedPivotScanProto::ResolvedPivotScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  group_by_list_(arena),
  pivot_expr_list_(arena),
  pivot_value_list_(arena),
  pivot_column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedPivotScanProto)
}
ResolvedPivotScanProto::ResolvedPivotScanProto(const ResolvedPivotScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      group_by_list_(from.group_by_list_),
      pivot_expr_list_(from.pivot_expr_list_),
      pivot_value_list_(from.pivot_value_list_),
      pivot_column_list_(from.pivot_column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_input_scan()) {
    input_scan_ = new ::zetasql::AnyResolvedScanProto(*from.input_scan_);
  } else {
    input_scan_ = nullptr;
  }
  if (from._internal_has_for_expr()) {
    for_expr_ = new ::zetasql::AnyResolvedExprProto(*from.for_expr_);
  } else {
    for_expr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedPivotScanProto)
}

inline void ResolvedPivotScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&for_expr_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(for_expr_));
}

ResolvedPivotScanProto::~ResolvedPivotScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedPivotScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedPivotScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete input_scan_;
  if (this != internal_default_instance()) delete for_expr_;
}

void ResolvedPivotScanProto::ArenaDtor(void* object) {
  ResolvedPivotScanProto* _this = reinterpret_cast< ResolvedPivotScanProto* >(object);
  (void)_this;
}
void ResolvedPivotScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedPivotScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedPivotScanProto::InternalSwap(ResolvedPivotScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedPivotScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[193]);
}

// ===================================================================

class ResolvedReturningClauseProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedReturningClauseProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedReturningClauseProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedColumnHolderProto& action_column(const ResolvedReturningClauseProto* msg);
  static void set_has_action_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedReturningClauseProto::_Internal::parent(const ResolvedReturningClauseProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedColumnHolderProto&
ResolvedReturningClauseProto::_Internal::action_column(const ResolvedReturningClauseProto* msg) {
  return *msg->action_column_;
}
ResolvedReturningClauseProto::ResolvedReturningClauseProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  output_column_list_(arena),
  expr_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedReturningClauseProto)
}
ResolvedReturningClauseProto::ResolvedReturningClauseProto(const ResolvedReturningClauseProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      output_column_list_(from.output_column_list_),
      expr_list_(from.expr_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_action_column()) {
    action_column_ = new ::zetasql::ResolvedColumnHolderProto(*from.action_column_);
  } else {
    action_column_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedReturningClauseProto)
}

inline void ResolvedReturningClauseProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_column_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(action_column_));
}

ResolvedReturningClauseProto::~ResolvedReturningClauseProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedReturningClauseProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedReturningClauseProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete action_column_;
}

void ResolvedReturningClauseProto::ArenaDtor(void* object) {
  ResolvedReturningClauseProto* _this = reinterpret_cast< ResolvedReturningClauseProto* >(object);
  (void)_this;
}
void ResolvedReturningClauseProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedReturningClauseProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedReturningClauseProto::InternalSwap(ResolvedReturningClauseProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedReturningClauseProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[194]);
}

// ===================================================================

class ResolvedUnpivotArgProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedUnpivotArgProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedUnpivotArgProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedUnpivotArgProto::_Internal::parent(const ResolvedUnpivotArgProto* msg) {
  return *msg->parent_;
}
ResolvedUnpivotArgProto::ResolvedUnpivotArgProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedUnpivotArgProto)
}
ResolvedUnpivotArgProto::ResolvedUnpivotArgProto(const ResolvedUnpivotArgProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      column_list_(from.column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedUnpivotArgProto)
}

inline void ResolvedUnpivotArgProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedUnpivotArgProto::~ResolvedUnpivotArgProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedUnpivotArgProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedUnpivotArgProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedUnpivotArgProto::ArenaDtor(void* object) {
  ResolvedUnpivotArgProto* _this = reinterpret_cast< ResolvedUnpivotArgProto* >(object);
  (void)_this;
}
void ResolvedUnpivotArgProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedUnpivotArgProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedUnpivotArgProto::InternalSwap(ResolvedUnpivotArgProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedUnpivotArgProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[195]);
}

// ===================================================================

class ResolvedUnpivotScanProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedUnpivotScanProto>()._has_bits_);
  static const ::zetasql::ResolvedScanProto& parent(const ResolvedUnpivotScanProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::AnyResolvedScanProto& input_scan(const ResolvedUnpivotScanProto* msg);
  static void set_has_input_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedColumnProto& label_column(const ResolvedUnpivotScanProto* msg);
  static void set_has_label_column(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_include_nulls(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedScanProto&
ResolvedUnpivotScanProto::_Internal::parent(const ResolvedUnpivotScanProto* msg) {
  return *msg->parent_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedUnpivotScanProto::_Internal::input_scan(const ResolvedUnpivotScanProto* msg) {
  return *msg->input_scan_;
}
const ::zetasql::ResolvedColumnProto&
ResolvedUnpivotScanProto::_Internal::label_column(const ResolvedUnpivotScanProto* msg) {
  return *msg->label_column_;
}
void ResolvedUnpivotScanProto::clear_value_column_list() {
  value_column_list_.Clear();
}
void ResolvedUnpivotScanProto::clear_label_column() {
  if (label_column_ != nullptr) label_column_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ResolvedUnpivotScanProto::ResolvedUnpivotScanProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_column_list_(arena),
  label_list_(arena),
  unpivot_arg_list_(arena),
  projected_input_column_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedUnpivotScanProto)
}
ResolvedUnpivotScanProto::ResolvedUnpivotScanProto(const ResolvedUnpivotScanProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_column_list_(from.value_column_list_),
      label_list_(from.label_list_),
      unpivot_arg_list_(from.unpivot_arg_list_),
      projected_input_column_list_(from.projected_input_column_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedScanProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_input_scan()) {
    input_scan_ = new ::zetasql::AnyResolvedScanProto(*from.input_scan_);
  } else {
    input_scan_ = nullptr;
  }
  if (from._internal_has_label_column()) {
    label_column_ = new ::zetasql::ResolvedColumnProto(*from.label_column_);
  } else {
    label_column_ = nullptr;
  }
  include_nulls_ = from.include_nulls_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedUnpivotScanProto)
}

inline void ResolvedUnpivotScanProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_nulls_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(include_nulls_));
}

ResolvedUnpivotScanProto::~ResolvedUnpivotScanProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedUnpivotScanProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedUnpivotScanProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete input_scan_;
  if (this != internal_default_instance()) delete label_column_;
}

void ResolvedUnpivotScanProto::ArenaDtor(void* object) {
  ResolvedUnpivotScanProto* _this = reinterpret_cast< ResolvedUnpivotScanProto* >(object);
  (void)_this;
}
void ResolvedUnpivotScanProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedUnpivotScanProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedUnpivotScanProto::InternalSwap(ResolvedUnpivotScanProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedUnpivotScanProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[196]);
}

// ===================================================================

class ResolvedCloneDataStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedCloneDataStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedCloneDataStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::ResolvedTableScanProto& target_table(const ResolvedCloneDataStmtProto* msg);
  static void set_has_target_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::AnyResolvedScanProto& clone_from(const ResolvedCloneDataStmtProto* msg);
  static void set_has_clone_from(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedCloneDataStmtProto::_Internal::parent(const ResolvedCloneDataStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedTableScanProto&
ResolvedCloneDataStmtProto::_Internal::target_table(const ResolvedCloneDataStmtProto* msg) {
  return *msg->target_table_;
}
const ::zetasql::AnyResolvedScanProto&
ResolvedCloneDataStmtProto::_Internal::clone_from(const ResolvedCloneDataStmtProto* msg) {
  return *msg->clone_from_;
}
ResolvedCloneDataStmtProto::ResolvedCloneDataStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedCloneDataStmtProto)
}
ResolvedCloneDataStmtProto::ResolvedCloneDataStmtProto(const ResolvedCloneDataStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_target_table()) {
    target_table_ = new ::zetasql::ResolvedTableScanProto(*from.target_table_);
  } else {
    target_table_ = nullptr;
  }
  if (from._internal_has_clone_from()) {
    clone_from_ = new ::zetasql::AnyResolvedScanProto(*from.clone_from_);
  } else {
    clone_from_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedCloneDataStmtProto)
}

inline void ResolvedCloneDataStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&clone_from_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(clone_from_));
}

ResolvedCloneDataStmtProto::~ResolvedCloneDataStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedCloneDataStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedCloneDataStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete target_table_;
  if (this != internal_default_instance()) delete clone_from_;
}

void ResolvedCloneDataStmtProto::ArenaDtor(void* object) {
  ResolvedCloneDataStmtProto* _this = reinterpret_cast< ResolvedCloneDataStmtProto* >(object);
  (void)_this;
}
void ResolvedCloneDataStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedCloneDataStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedCloneDataStmtProto::InternalSwap(ResolvedCloneDataStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedCloneDataStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[197]);
}

// ===================================================================

class ResolvedTableAndColumnInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedTableAndColumnInfoProto>()._has_bits_);
  static const ::zetasql::ResolvedArgumentProto& parent(const ResolvedTableAndColumnInfoProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::zetasql::TableRefProto& table(const ResolvedTableAndColumnInfoProto* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::zetasql::ResolvedArgumentProto&
ResolvedTableAndColumnInfoProto::_Internal::parent(const ResolvedTableAndColumnInfoProto* msg) {
  return *msg->parent_;
}
const ::zetasql::TableRefProto&
ResolvedTableAndColumnInfoProto::_Internal::table(const ResolvedTableAndColumnInfoProto* msg) {
  return *msg->table_;
}
void ResolvedTableAndColumnInfoProto::clear_table() {
  if (table_ != nullptr) table_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResolvedTableAndColumnInfoProto::ResolvedTableAndColumnInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  column_index_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedTableAndColumnInfoProto)
}
ResolvedTableAndColumnInfoProto::ResolvedTableAndColumnInfoProto(const ResolvedTableAndColumnInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      column_index_list_(from.column_index_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedArgumentProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_table()) {
    table_ = new ::zetasql::TableRefProto(*from.table_);
  } else {
    table_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedTableAndColumnInfoProto)
}

inline void ResolvedTableAndColumnInfoProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(table_));
}

ResolvedTableAndColumnInfoProto::~ResolvedTableAndColumnInfoProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedTableAndColumnInfoProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedTableAndColumnInfoProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete table_;
}

void ResolvedTableAndColumnInfoProto::ArenaDtor(void* object) {
  ResolvedTableAndColumnInfoProto* _this = reinterpret_cast< ResolvedTableAndColumnInfoProto* >(object);
  (void)_this;
}
void ResolvedTableAndColumnInfoProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedTableAndColumnInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedTableAndColumnInfoProto::InternalSwap(ResolvedTableAndColumnInfoProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedTableAndColumnInfoProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[198]);
}

// ===================================================================

class ResolvedAnalyzeStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAnalyzeStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAnalyzeStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAnalyzeStmtProto::_Internal::parent(const ResolvedAnalyzeStmtProto* msg) {
  return *msg->parent_;
}
ResolvedAnalyzeStmtProto::ResolvedAnalyzeStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  option_list_(arena),
  table_and_column_index_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAnalyzeStmtProto)
}
ResolvedAnalyzeStmtProto::ResolvedAnalyzeStmtProto(const ResolvedAnalyzeStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      option_list_(from.option_list_),
      table_and_column_index_list_(from.table_and_column_index_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAnalyzeStmtProto)
}

inline void ResolvedAnalyzeStmtProto::SharedCtor() {
parent_ = nullptr;
}

ResolvedAnalyzeStmtProto::~ResolvedAnalyzeStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAnalyzeStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAnalyzeStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
}

void ResolvedAnalyzeStmtProto::ArenaDtor(void* object) {
  ResolvedAnalyzeStmtProto* _this = reinterpret_cast< ResolvedAnalyzeStmtProto* >(object);
  (void)_this;
}
void ResolvedAnalyzeStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAnalyzeStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAnalyzeStmtProto::InternalSwap(ResolvedAnalyzeStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAnalyzeStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[199]);
}

// ===================================================================

class ResolvedAuxLoadDataStmtProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedAuxLoadDataStmtProto>()._has_bits_);
  static const ::zetasql::ResolvedStatementProto& parent(const ResolvedAuxLoadDataStmtProto* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_insertion_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::zetasql::ResolvedPrimaryKeyProto& primary_key(const ResolvedAuxLoadDataStmtProto* msg);
  static void set_has_primary_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ResolvedWithPartitionColumnsProto& with_partition_columns(const ResolvedAuxLoadDataStmtProto* msg);
  static void set_has_with_partition_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::ResolvedConnectionProto& connection(const ResolvedAuxLoadDataStmtProto* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ResolvedStatementProto&
ResolvedAuxLoadDataStmtProto::_Internal::parent(const ResolvedAuxLoadDataStmtProto* msg) {
  return *msg->parent_;
}
const ::zetasql::ResolvedPrimaryKeyProto&
ResolvedAuxLoadDataStmtProto::_Internal::primary_key(const ResolvedAuxLoadDataStmtProto* msg) {
  return *msg->primary_key_;
}
const ::zetasql::ResolvedWithPartitionColumnsProto&
ResolvedAuxLoadDataStmtProto::_Internal::with_partition_columns(const ResolvedAuxLoadDataStmtProto* msg) {
  return *msg->with_partition_columns_;
}
const ::zetasql::ResolvedConnectionProto&
ResolvedAuxLoadDataStmtProto::_Internal::connection(const ResolvedAuxLoadDataStmtProto* msg) {
  return *msg->connection_;
}
void ResolvedAuxLoadDataStmtProto::clear_pseudo_column_list() {
  pseudo_column_list_.Clear();
}
ResolvedAuxLoadDataStmtProto::ResolvedAuxLoadDataStmtProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_path_(arena),
  output_column_list_(arena),
  column_definition_list_(arena),
  pseudo_column_list_(arena),
  foreign_key_list_(arena),
  check_constraint_list_(arena),
  partition_by_list_(arena),
  cluster_by_list_(arena),
  option_list_(arena),
  from_files_option_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedAuxLoadDataStmtProto)
}
ResolvedAuxLoadDataStmtProto::ResolvedAuxLoadDataStmtProto(const ResolvedAuxLoadDataStmtProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_path_(from.name_path_),
      output_column_list_(from.output_column_list_),
      column_definition_list_(from.column_definition_list_),
      pseudo_column_list_(from.pseudo_column_list_),
      foreign_key_list_(from.foreign_key_list_),
      check_constraint_list_(from.check_constraint_list_),
      partition_by_list_(from.partition_by_list_),
      cluster_by_list_(from.cluster_by_list_),
      option_list_(from.option_list_),
      from_files_option_list_(from.from_files_option_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    parent_ = new ::zetasql::ResolvedStatementProto(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_primary_key()) {
    primary_key_ = new ::zetasql::ResolvedPrimaryKeyProto(*from.primary_key_);
  } else {
    primary_key_ = nullptr;
  }
  if (from._internal_has_with_partition_columns()) {
    with_partition_columns_ = new ::zetasql::ResolvedWithPartitionColumnsProto(*from.with_partition_columns_);
  } else {
    with_partition_columns_ = nullptr;
  }
  if (from._internal_has_connection()) {
    connection_ = new ::zetasql::ResolvedConnectionProto(*from.connection_);
  } else {
    connection_ = nullptr;
  }
  insertion_mode_ = from.insertion_mode_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedAuxLoadDataStmtProto)
}

inline void ResolvedAuxLoadDataStmtProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&insertion_mode_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(insertion_mode_));
}

ResolvedAuxLoadDataStmtProto::~ResolvedAuxLoadDataStmtProto() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedAuxLoadDataStmtProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedAuxLoadDataStmtProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete primary_key_;
  if (this != internal_default_instance()) delete with_partition_columns_;
  if (this != internal_default_instance()) delete connection_;
}

void ResolvedAuxLoadDataStmtProto::ArenaDtor(void* object) {
  ResolvedAuxLoadDataStmtProto* _this = reinterpret_cast< ResolvedAuxLoadDataStmtProto* >(object);
  (void)_this;
}
void ResolvedAuxLoadDataStmtProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedAuxLoadDataStmtProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedAuxLoadDataStmtProto::InternalSwap(ResolvedAuxLoadDataStmtProto* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedAuxLoadDataStmtProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_getter, &descriptor_table_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto_once,
      file_level_metadata_zetasql_2fresolved_5fast_2fresolved_5fast_2eproto[200]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedNodeProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedNodeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedNodeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedArgumentProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedArgumentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedArgumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedArgumentProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedArgumentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedArgumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedExprProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedExprProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedExprProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExprProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedExprProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExprProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedLiteralProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedLiteralProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedLiteralProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedParameterProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedParameterProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedParameterProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExpressionColumnProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedExpressionColumnProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExpressionColumnProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedColumnRefProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedColumnRefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedColumnRefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedConstantProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedConstantProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedConstantProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSystemVariableProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedSystemVariableProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSystemVariableProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedInlineLambdaProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedInlineLambdaProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedInlineLambdaProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFilterFieldArgProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedFilterFieldArgProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFilterFieldArgProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFilterFieldProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedFilterFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFilterFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedFunctionCallBaseProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedFunctionCallBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedFunctionCallBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFunctionCallBaseProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedFunctionCallBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFunctionCallBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFunctionCallProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedFunctionCallProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFunctionCallProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedNonScalarFunctionCallBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedNonScalarFunctionCallBaseProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedNonScalarFunctionCallBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedNonScalarFunctionCallBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAggregateFunctionCallProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAggregateFunctionCallProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAggregateFunctionCallProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAnalyticFunctionCallProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAnalyticFunctionCallProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAnalyticFunctionCallProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExtendedCastElementProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedExtendedCastElementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExtendedCastElementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExtendedCastProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedExtendedCastProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExtendedCastProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCastProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCastProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCastProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedMakeStructProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedMakeStructProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedMakeStructProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedMakeProtoProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedMakeProtoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedMakeProtoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedMakeProtoFieldProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedMakeProtoFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedMakeProtoFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGetStructFieldProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedGetStructFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGetStructFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGetProtoFieldProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedGetProtoFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGetProtoFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGetJsonFieldProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedGetJsonFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGetJsonFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFlattenProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedFlattenProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFlattenProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFlattenedArgProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedFlattenedArgProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFlattenedArgProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedReplaceFieldItemProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedReplaceFieldItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedReplaceFieldItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedReplaceFieldProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedReplaceFieldProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedReplaceFieldProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSubqueryExprProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedSubqueryExprProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSubqueryExprProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedScanProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedModelProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedModelProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedModelProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedConnectionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedConnectionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedConnectionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDescriptorProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDescriptorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDescriptorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSingleRowScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedSingleRowScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSingleRowScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedTableScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedTableScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedTableScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedJoinScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedJoinScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedJoinScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedArrayScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedArrayScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedArrayScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedColumnHolderProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedColumnHolderProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedColumnHolderProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFilterScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedFilterScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFilterScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGroupingSetProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedGroupingSetProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGroupingSetProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedAggregateScanBaseProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedAggregateScanBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedAggregateScanBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAggregateScanBaseProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAggregateScanBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAggregateScanBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAggregateScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAggregateScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAggregateScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAnonymizedAggregateScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAnonymizedAggregateScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAnonymizedAggregateScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSetOperationItemProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedSetOperationItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSetOperationItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSetOperationScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedSetOperationScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSetOperationScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedOrderByScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedOrderByScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedOrderByScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedLimitOffsetScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedLimitOffsetScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedLimitOffsetScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWithRefScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedWithRefScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWithRefScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAnalyticScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAnalyticScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAnalyticScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSampleScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedSampleScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSampleScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedComputedColumnProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedComputedColumnProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedComputedColumnProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedOrderByItemProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedOrderByItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedOrderByItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedColumnAnnotationsProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedColumnAnnotationsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedColumnAnnotationsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGeneratedColumnInfoProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedGeneratedColumnInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGeneratedColumnInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedColumnDefaultValueProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedColumnDefaultValueProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedColumnDefaultValueProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedColumnDefinitionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedColumnDefinitionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedColumnDefinitionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedConstraintProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedConstraintProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedPrimaryKeyProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedPrimaryKeyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedPrimaryKeyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedForeignKeyProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedForeignKeyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedForeignKeyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCheckConstraintProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCheckConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCheckConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedOutputColumnProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedOutputColumnProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedOutputColumnProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedProjectScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedProjectScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedProjectScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedTVFScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedTVFScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedTVFScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGroupRowsScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedGroupRowsScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGroupRowsScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFunctionArgumentProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedFunctionArgumentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFunctionArgumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedStatementProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedStatementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedStatementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedStatementProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedStatementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedStatementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExplainStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedExplainStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExplainStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedQueryStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedQueryStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedQueryStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateDatabaseStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateDatabaseStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateDatabaseStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedCreateStatementProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedCreateStatementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedCreateStatementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateStatementProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateStatementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateStatementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedIndexItemProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedIndexItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedIndexItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedUnnestItemProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedUnnestItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedUnnestItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateIndexStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateIndexStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateIndexStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateSchemaStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateSchemaStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateSchemaStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedCreateTableStmtBaseProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedCreateTableStmtBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedCreateTableStmtBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateTableStmtBaseProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateTableStmtBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateTableStmtBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateTableStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateTableStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateTableStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateTableAsSelectStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateTableAsSelectStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateTableAsSelectStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateModelStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateModelStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateModelStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedCreateViewBaseProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedCreateViewBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedCreateViewBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateViewBaseProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateViewBaseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateViewBaseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateViewStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateViewStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateViewStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWithPartitionColumnsProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedWithPartitionColumnsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWithPartitionColumnsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateSnapshotTableStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateSnapshotTableStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateSnapshotTableStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateExternalTableStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateExternalTableStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateExternalTableStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExportModelStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedExportModelStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExportModelStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExportDataStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedExportDataStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExportDataStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDefineTableStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDefineTableStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDefineTableStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDescribeStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDescribeStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDescribeStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedShowStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedShowStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedShowStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedBeginStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedBeginStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedBeginStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSetTransactionStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedSetTransactionStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSetTransactionStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCommitStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCommitStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCommitStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRollbackStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedRollbackStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRollbackStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedStartBatchStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedStartBatchStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedStartBatchStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRunBatchStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedRunBatchStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRunBatchStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAbortBatchStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAbortBatchStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAbortBatchStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDropStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropMaterializedViewStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDropMaterializedViewStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropMaterializedViewStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropSnapshotTableStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDropSnapshotTableStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropSnapshotTableStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRecursiveRefScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedRecursiveRefScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRecursiveRefScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRecursiveScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedRecursiveScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRecursiveScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWithScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedWithScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWithScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWithEntryProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedWithEntryProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWithEntryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedOptionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedOptionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedOptionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWindowPartitioningProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedWindowPartitioningProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWindowPartitioningProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWindowOrderingProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedWindowOrderingProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWindowOrderingProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWindowFrameProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedWindowFrameProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWindowFrameProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAnalyticFunctionGroupProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAnalyticFunctionGroupProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAnalyticFunctionGroupProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedWindowFrameExprProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedWindowFrameExprProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedWindowFrameExprProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDMLValueProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDMLValueProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDMLValueProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDMLDefaultProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDMLDefaultProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDMLDefaultProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAssertStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAssertStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAssertStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAssertRowsModifiedProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAssertRowsModifiedProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAssertRowsModifiedProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedInsertRowProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedInsertRowProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedInsertRowProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedInsertStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedInsertStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedInsertStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDeleteStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDeleteStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDeleteStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedUpdateItemProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedUpdateItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedUpdateItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedUpdateArrayItemProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedUpdateArrayItemProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedUpdateArrayItemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedUpdateStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedUpdateStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedUpdateStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedMergeWhenProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedMergeWhenProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedMergeWhenProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedMergeStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedMergeStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedMergeStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedTruncateStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedTruncateStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedTruncateStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedPrivilegeProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedPrivilegeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedPrivilegeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedGrantOrRevokeStmtProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedGrantOrRevokeStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedGrantOrRevokeStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGrantOrRevokeStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedGrantOrRevokeStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGrantOrRevokeStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGrantStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedGrantStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGrantStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRevokeStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedRevokeStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRevokeStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedAlterObjectStmtProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedAlterObjectStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedAlterObjectStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterObjectStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterObjectStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterObjectStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterDatabaseStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterDatabaseStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterDatabaseStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterMaterializedViewStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterMaterializedViewStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterMaterializedViewStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterSchemaStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterSchemaStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterSchemaStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterTableStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterTableStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterTableStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterViewStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterViewStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterViewStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::AnyResolvedAlterActionProto* Arena::CreateMaybeMessage< ::zetasql::AnyResolvedAlterActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::AnyResolvedAlterActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSetOptionsActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedSetOptionsActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSetOptionsActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAddColumnActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAddColumnActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAddColumnActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAddConstraintActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAddConstraintActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAddConstraintActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropConstraintActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDropConstraintActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropConstraintActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropPrimaryKeyActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDropPrimaryKeyActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropPrimaryKeyActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterColumnOptionsActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterColumnOptionsActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterColumnOptionsActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterColumnDropNotNullActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterColumnDropNotNullActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterColumnDropNotNullActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterColumnSetDataTypeActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterColumnSetDataTypeActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterColumnSetDataTypeActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropColumnActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDropColumnActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropColumnActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRenameColumnActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedRenameColumnActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRenameColumnActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSetAsActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedSetAsActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSetAsActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedSetCollateClauseProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedSetCollateClauseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedSetCollateClauseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterTableSetOptionsStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterTableSetOptionsStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterTableSetOptionsStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRenameStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedRenameStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRenameStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateRowAccessPolicyStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateRowAccessPolicyStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateRowAccessPolicyStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropRowAccessPolicyStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDropRowAccessPolicyStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropRowAccessPolicyStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropSearchIndexStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDropSearchIndexStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropSearchIndexStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedGrantToActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedGrantToActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedGrantToActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFilterUsingActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedFilterUsingActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFilterUsingActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRevokeFromActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedRevokeFromActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRevokeFromActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRenameToActionProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedRenameToActionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRenameToActionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterRowAccessPolicyStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterRowAccessPolicyStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterRowAccessPolicyStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterAllRowAccessPoliciesStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateConstantStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateConstantStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateConstantStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateFunctionStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateFunctionStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateFunctionStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedArgumentDefProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedArgumentDefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedArgumentDefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedArgumentRefProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedArgumentRefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedArgumentRefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateTableFunctionStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateTableFunctionStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateTableFunctionStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedRelationArgumentScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedRelationArgumentScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedRelationArgumentScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedArgumentListProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedArgumentListProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedArgumentListProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedFunctionSignatureHolderProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedFunctionSignatureHolderProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedFunctionSignatureHolderProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropFunctionStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDropFunctionStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropFunctionStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedDropTableFunctionStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedDropTableFunctionStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedDropTableFunctionStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCallStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCallStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCallStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedImportStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedImportStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedImportStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedModuleStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedModuleStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedModuleStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAggregateHavingModifierProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAggregateHavingModifierProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAggregateHavingModifierProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateMaterializedViewStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateMaterializedViewStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateMaterializedViewStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateProcedureStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateProcedureStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateProcedureStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExecuteImmediateArgumentProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedExecuteImmediateArgumentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExecuteImmediateArgumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedExecuteImmediateStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedExecuteImmediateStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedExecuteImmediateStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAssignmentStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAssignmentStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAssignmentStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCreateEntityStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCreateEntityStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCreateEntityStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAlterEntityStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAlterEntityStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAlterEntityStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedPivotColumnProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedPivotColumnProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedPivotColumnProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedPivotScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedPivotScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedPivotScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedReturningClauseProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedReturningClauseProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedReturningClauseProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedUnpivotArgProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedUnpivotArgProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedUnpivotArgProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedUnpivotScanProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedUnpivotScanProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedUnpivotScanProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedCloneDataStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedCloneDataStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedCloneDataStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedTableAndColumnInfoProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedTableAndColumnInfoProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedTableAndColumnInfoProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAnalyzeStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAnalyzeStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAnalyzeStmtProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedAuxLoadDataStmtProto* Arena::CreateMaybeMessage< ::zetasql::ResolvedAuxLoadDataStmtProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedAuxLoadDataStmtProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
