// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/options.proto

#include "zetasql/public/options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zetasql {
constexpr LanguageFeatureOptions::LanguageFeatureOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : in_development_(false)
  , ideally_enabled_(true){}
struct LanguageFeatureOptionsDefaultTypeInternal {
  constexpr LanguageFeatureOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LanguageFeatureOptionsDefaultTypeInternal() {}
  union {
    LanguageFeatureOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LanguageFeatureOptionsDefaultTypeInternal _LanguageFeatureOptions_default_instance_;
constexpr ResolvedASTRewriteOptions::ResolvedASTRewriteOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : default_enabled_(false){}
struct ResolvedASTRewriteOptionsDefaultTypeInternal {
  constexpr ResolvedASTRewriteOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResolvedASTRewriteOptionsDefaultTypeInternal() {}
  union {
    ResolvedASTRewriteOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResolvedASTRewriteOptionsDefaultTypeInternal _ResolvedASTRewriteOptions_default_instance_;
}  // namespace zetasql
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zetasql_2fpublic_2foptions_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fpublic_2foptions_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fpublic_2foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageFeatureOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageFeatureOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageFeatureOptions, ideally_enabled_),
  PROTOBUF_FIELD_OFFSET(::zetasql::LanguageFeatureOptions, in_development_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedASTRewriteOptions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedASTRewriteOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ResolvedASTRewriteOptions, default_enabled_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::zetasql::LanguageFeatureOptions)},
  { 10, 17, -1, sizeof(::zetasql::ResolvedASTRewriteOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_LanguageFeatureOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ResolvedASTRewriteOptions_default_instance_),
};

const char descriptor_table_protodef_zetasql_2fpublic_2foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034zetasql/public/options.proto\022\007zetasql\032"
  " google/protobuf/descriptor.proto\"V\n\026Lan"
  "guageFeatureOptions\022\035\n\017ideally_enabled\030\001"
  " \001(\010:\004true\022\035\n\016in_development\030\002 \001(\010:\005fals"
  "e\"4\n\031ResolvedASTRewriteOptions\022\027\n\017defaul"
  "t_enabled\030\001 \001(\010*\254\001\n\017LanguageVersion\022\023\n\017V"
  "ERSION_CURRENT\020\001\022\020\n\013VERSION_1_0\020\220N\022\020\n\013VE"
  "RSION_1_1\020\370U\022\020\n\013VERSION_1_2\020\340]\022\020\n\013VERSIO"
  "N_1_3\020\310e\022<\n/__LanguageVersion__switch_mu"
  "st_have_a_default__\020\377\377\377\377\377\377\377\377\377\001*\223*\n\017Langu"
  "ageFeature\022\036\n\032FEATURE_ANALYTIC_FUNCTIONS"
  "\020\001\022\027\n\023FEATURE_TABLESAMPLE\020\002\022-\n\037FEATURE_D"
  "ISALLOW_GROUP_BY_FLOAT\020\003\032\010\332\361\252\211\005\002\010\000\022\033\n\027FE"
  "ATURE_TIMESTAMP_NANOS\020\005\022 \n\034FEATURE_DML_U"
  "PDATE_WITH_JOIN\020\006\022\"\n\036FEATURE_TABLE_VALUE"
  "D_FUNCTIONS\020\010\022%\n!FEATURE_CREATE_AGGREGAT"
  "E_FUNCTION\020\t\022!\n\035FEATURE_CREATE_TABLE_FUN"
  "CTION\020\n\022\033\n\027FEATURE_GROUP_BY_ROLLUP\020\014\022\036\n\032"
  "FEATURE_TEMPLATE_FUNCTIONS\020\r\022%\n!FEATURE_"
  "CREATE_TABLE_PARTITION_BY\020\016\022#\n\037FEATURE_C"
  "REATE_TABLE_CLUSTER_BY\020\017\022\030\n\024FEATURE_NUME"
  "RIC_TYPE\020\020\022!\n\035FEATURE_CREATE_TABLE_NOT_N"
  "ULL\020\021\022*\n&FEATURE_CREATE_TABLE_FIELD_ANNO"
  "TATIONS\020\022\022.\n*FEATURE_CREATE_TABLE_AS_SEL"
  "ECT_COLUMN_LIST\020\023\0220\n\"FEATURE_DISALLOW_NU"
  "LL_PRIMARY_KEYS\020\024\032\010\332\361\252\211\005\002\010\000\0222\n$FEATURE_D"
  "ISALLOW_PRIMARY_KEY_UPDATES\020\025\032\010\332\361\252\211\005\002\010\000\022"
  "3\n/FEATURE_TABLESAMPLE_FROM_TABLE_VALUED"
  "_FUNCTIONS\020\026\022\026\n\022FEATURE_ENCRYPTION\020\027\022#\n\025"
  "FEATURE_ANONYMIZATION\020\030\032\010\332\361\252\211\005\002\020\001\022\025\n\021FEA"
  "TURE_GEOGRAPHY\020\031\022,\n(FEATURE_STRATIFIED_R"
  "ESERVOIR_TABLESAMPLE\020\032\022\030\n\024FEATURE_FOREIG"
  "N_KEYS\020\033\022*\n\034FEATURE_BETWEEN_UINT64_INT64"
  "\020\034\032\010\332\361\252\211\005\002\020\001\022\034\n\030FEATURE_CHECK_CONSTRAINT"
  "\020\035\022&\n\"FEATURE_PARAMETERS_IN_GRANTEE_LIST"
  "\020\036\022\033\n\027FEATURE_NAMED_ARGUMENTS\020\037\0221\n-FEATU"
  "RE_ALLOW_LEGACY_ROW_ACCESS_POLICY_SYNTAX"
  "\020 \0221\n-FEATURE_CREATE_MATERIALIZED_VIEW_P"
  "ARTITION_BY\020!\022/\n+FEATURE_CREATE_MATERIAL"
  "IZED_VIEW_CLUSTER_BY\020\"\0229\n5FEATURE_CREATE"
  "_EXTERNAL_TABLE_WITH_TABLE_ELEMENT_LIST\020"
  "#\022#\n\037FEATURE_UNENFORCED_PRIMARY_KEYS\020(\022\033"
  "\n\027FEATURE_BIGNUMERIC_TYPE\020)\022$\n\026FEATURE_E"
  "XTENDED_TYPES\020*\032\010\332\361\252\211\005\002\020\001\022\037\n\021FEATURE_JSO"
  "N_TYPE\020+\032\010\332\361\252\211\005\002\020\001\022(\n\032FEATURE_JSON_NO_VA"
  "LIDATION\020,\032\010\332\361\252\211\005\002\020\001\022\'\n\031FEATURE_JSON_LEG"
  "ACY_PARSE\020.\032\010\332\361\252\211\005\002\020\001\022B\n4FEATURE_CREATE_"
  "EXTERNAL_TABLE_WITH_PARTITION_COLUMNS\020/\032"
  "\010\332\361\252\211\005\002\020\001\022#\n\025FEATURE_INTERVAL_TYPE\0201\032\010\332\361"
  "\252\211\005\002\020\001\0228\n\"FEATURE_JSON_STRICT_NUMBER_PAR"
  "SING\0204\032\020\332\361\252\211\005\002\010\000\332\361\252\211\005\002\020\001\0224\n0FEATURE_FUNC"
  "TION_ARGUMENT_NAMES_HIDE_LOCAL_NAMES\0207\022)"
  "\n\033FEATURE_PARAMETERIZED_TYPES\0208\032\010\332\361\252\211\005\002\020"
  "\001\022\'\n\031FEATURE_CREATE_TABLE_LIKE\0209\032\010\332\361\252\211\005\002"
  "\020\001\022*\n\034FEATURE_JSON_ARRAY_FUNCTIONS\020:\032\010\332\361"
  "\252\211\005\002\020\001\0222\n$FEATURE_CREATE_VIEW_WITH_COLUM"
  "N_LIST\020;\032\010\332\361\252\211\005\002\020\001\022(\n\032FEATURE_CREATE_TAB"
  "LE_CLONE\020<\032\010\332\361\252\211\005\002\020\001\022 \n\022FEATURE_CLONE_DA"
  "TA\020=\032\010\332\361\252\211\005\002\020\001\0220\n\"FEATURE_ALTER_COLUMN_S"
  "ET_DATA_TYPE\020>\032\010\332\361\252\211\005\002\020\001\022+\n\035FEATURE_CREA"
  "TE_SNAPSHOT_TABLE\020\?\032\010\332\361\252\211\005\002\020\001\022,\n(FEATURE"
  "_FUNCTION_ARGUMENTS_WITH_DEFAULTS\020@\022;\n-F"
  "EATURE_CREATE_EXTERNAL_TABLE_WITH_CONNEC"
  "TION\020A\032\010\332\361\252\211\005\002\020\001\022\'\n\031FEATURE_CREATE_TABLE"
  "_COPY\020B\032\010\332\361\252\211\005\002\020\001\022%\n!FEATURE_ALTER_TABLE"
  "_RENAME_COLUMN\020C\022+\n\'FEATURE_JSON_VALUE_E"
  "XTRACTION_FUNCTIONS\020D\022\?\n)FEATURE_DISALLO"
  "W_LEGACY_UNICODE_COLLATION\020E\032\020\332\361\252\211\005\002\020\001\332\361"
  "\252\211\005\002\010\000\022#\n\036FEATURE_V_1_1_ORDER_BY_COLLATE"
  "\020\371U\022#\n\036FEATURE_V_1_1_WITH_ON_SUBQUERY\020\372U"
  "\022-\n(FEATURE_V_1_1_SELECT_STAR_EXCEPT_REP"
  "LACE\020\373U\022(\n#FEATURE_V_1_1_ORDER_BY_IN_AGG"
  "REGATE\020\374U\022-\n(FEATURE_V_1_1_CAST_DIFFEREN"
  "T_ARRAY_TYPES\020\375U\022!\n\034FEATURE_V_1_1_ARRAY_"
  "EQUALITY\020\376U\022%\n FEATURE_V_1_1_LIMIT_IN_AG"
  "GREGATE\020\377U\022&\n!FEATURE_V_1_1_HAVING_IN_AG"
  "GREGATE\020\200V\0225\n0FEATURE_V_1_1_NULL_HANDLIN"
  "G_MODIFIER_IN_ANALYTIC\020\201V\0226\n1FEATURE_V_1"
  "_1_NULL_HANDLING_MODIFIER_IN_AGGREGATE\020\202"
  "V\022(\n#FEATURE_V_1_1_FOR_SYSTEM_TIME_AS_OF"
  "\020\203V\022\035\n\030FEATURE_V_1_2_CIVIL_TIME\020\341]\022%\n FE"
  "ATURE_V_1_2_SAFE_FUNCTION_CALL\020\342]\022\"\n\035FEA"
  "TURE_V_1_2_GROUP_BY_STRUCT\020\343]\022,\n\'FEATURE"
  "_V_1_2_PROTO_EXTENSIONS_WITH_NEW\020\344]\022!\n\034F"
  "EATURE_V_1_2_GROUP_BY_ARRAY\020\345]\022,\n\'FEATUR"
  "E_V_1_2_PROTO_EXTENSIONS_WITH_SET\020\346]\0220\n+"
  "FEATURE_V_1_2_CORRELATED_REFS_IN_NESTED_"
  "DML\020\347]\022$\n\037FEATURE_V_1_2_WEEK_WITH_WEEKDA"
  "Y\020\350]\022*\n%FEATURE_V_1_2_ARRAY_ELEMENTS_WIT"
  "H_SET\020\351]\0223\n.FEATURE_V_1_2_NESTED_UPDATE_"
  "DELETE_WITH_OFFSET\020\352]\022$\n\037FEATURE_V_1_2_G"
  "ENERATED_COLUMNS\020\353]\022(\n#FEATURE_V_1_3_PRO"
  "TO_DEFAULT_IF_NULL\020\311e\022%\n FEATURE_V_1_3_E"
  "XTRACT_FROM_PROTO\020\312e\022B\n3FEATURE_DEPRECAT"
  "ED_DISALLOW_PROTO3_HAS_SCALAR_FIELD\020\313e\032\010"
  "\332\361\252\211\005\002\010\000\022!\n\034FEATURE_V_1_3_ARRAY_ORDERING"
  "\020\314e\022*\n%FEATURE_V_1_3_OMIT_INSERT_COLUMN_"
  "LIST\020\315e\022-\n(FEATURE_V_1_3_IGNORE_PROTO3_U"
  "SE_DEFAULTS\020\316e\022+\n\034FEATURE_V_1_3_REPLACE_"
  "FIELDS\020\317e\032\010\332\361\252\211\005\002\020\001\022/\n*FEATURE_V_1_3_NUL"
  "LS_FIRST_LAST_IN_ORDER_BY\020\320e\022-\n(FEATURE_"
  "V_1_3_ALLOW_DASHES_IN_TABLE_NAME\020\321e\022%\n F"
  "EATURE_V_1_3_CONCAT_MIXED_TYPES\020\322e\022+\n\034FE"
  "ATURE_V_1_3_WITH_RECURSIVE\020\323e\032\010\332\361\252\211\005\002\020\001\022"
  "\'\n\030FEATURE_V_1_3_PROTO_MAPS\020\324e\032\010\332\361\252\211\005\002\020\000"
  "\022.\n)FEATURE_V_1_3_ENUM_VALUE_DESCRIPTOR_"
  "PROTO\020\325e\022 \n\033FEATURE_V_1_3_DECIMAL_ALIAS\020"
  "\326e\022,\n\'FEATURE_V_1_3_UNNEST_AND_FLATTEN_A"
  "RRAYS\020\327e\022\'\n\"FEATURE_V_1_3_ALLOW_CONSECUT"
  "IVE_ON\020\330e\022;\n,FEATURE_V_1_3_ALLOW_REGEXP_"
  "EXTRACT_OPTIONALS\020\331e\032\010\332\361\252\211\005\002\020\001\022)\n$FEATUR"
  "E_V_1_3_DATE_TIME_CONSTRUCTORS\020\332e\022#\n\036FEA"
  "TURE_V_1_3_DATE_ARITHMETICS\020\333e\022.\n)FEATUR"
  "E_V_1_3_ADDITIONAL_STRING_FUNCTIONS\020\334e\022\""
  "\n\035FEATURE_V_1_3_WITH_GROUP_ROWS\020\335e\0220\n+FE"
  "ATURE_V_1_3_EXTENDED_DATE_TIME_SIGNATURE"
  "S\020\336e\022-\n(FEATURE_V_1_3_EXTENDED_GEOGRAPHY"
  "_PARSERS\020\337e\022)\n$FEATURE_V_1_3_INLINE_LAMB"
  "DA_ARGUMENT\020\340e\022\030\n\023FEATURE_V_1_3_PIVOT\020\341e"
  "\022\'\n\"FEATURE_V_1_3_ANNOTATION_FRAMEWORK\020\342"
  "e\022.\n\037FEATURE_V_1_3_COLLATION_SUPPORT\020\343e\032"
  "\010\332\361\252\211\005\002\020\001\022\036\n\031FEATURE_V_1_3_IS_DISTINCT\020\344"
  "e\022+\n\034FEATURE_V_1_3_FORMAT_IN_CAST\020\345e\032\010\332\361"
  "\252\211\005\002\020\001\022\032\n\025FEATURE_V_1_3_UNPIVOT\020\346e\022*\n\033FE"
  "ATURE_V_1_3_DML_RETURNING\020\347e\032\010\332\361\252\211\005\002\020\001\022*"
  "\n\033FEATURE_V_1_3_FILTER_FIELDS\020\350e\032\010\332\361\252\211\005\002"
  "\020\001\022$\n\025FEATURE_V_1_3_QUALIFY\020\351e\032\010\332\361\252\211\005\002\020\001"
  "\022#\n\024FEATURE_V_1_3_REPEAT\020\352e\032\010\332\361\252\211\005\002\020\001\0221\n"
  "\"FEATURE_V_1_3_COLUMN_DEFAULT_VALUE\020\353e\032\010"
  "\332\361\252\211\005\002\020\001\022#\n\024FEATURE_V_1_3_FOR_IN\020\354e\032\010\332\361\252"
  "\211\005\002\020\001\022\030\n\023FEATURE_KLL_WEIGHTS\020\355e\022.\n\037FEATU"
  "RE_V_1_3_LIKE_ANY_SOME_ALL\020\356e\032\010\332\361\252\211\005\002\020\001\022"
  "&\n\027FEATURE_V_1_3_CASE_STMT\020\357e\032\010\332\361\252\211\005\002\020\001\022"
  "$\n\037FEATURE_V_1_3_ALLOW_SLASH_PATHS\020\360e\022\"\n"
  "\035FEATURE_V_1_3_TYPEOF_FUNCTION\020\361e\022)\n\032FEA"
  "TURE_V_1_3_SCRIPT_LABEL\020\362e\032\010\332\361\252\211\005\002\020\001\022,\n\035"
  "FEATURE_V_1_3_REMOTE_FUNCTION\020\363e\032\010\332\361\252\211\005\002"
  "\020\001\022,\n\034FEATURE_EXPERIMENTAL_MODULES\020\332\374<\032\010"
  "\332\361\252\211\005\002\020\001\022\?\n/FEATURE_TEST_IDEALLY_ENABLED"
  "_BUT_IN_DEVELOPMENT\020\267\204=\032\010\332\361\252\211\005\002\020\001\022-\n\035FEA"
  "TURE_TEST_IDEALLY_DISABLED\020\270\204=\032\010\332\361\252\211\005\002\010\000"
  "\022B\n0FEATURE_TEST_IDEALLY_DISABLED_AND_IN"
  "_DEVELOPMENT\020\271\204=\032\n\332\361\252\211\005\004\010\000\020\001\022<\n/__Langua"
  "geFeature__switch_must_have_a_default__\020"
  "\377\377\377\377\377\377\377\377\377\001\"\004\010$\020\'\"\004\010-\020-\"\004\0100\0200*\324\002\n\022Resolve"
  "dASTRewrite\022\036\n\032REWRITE_INVALID_DO_NOT_US"
  "E\020\000\022\035\n\017REWRITE_FLATTEN\020\001\032\010\202\207\335\204\n\002\010\001\022#\n\025RE"
  "WRITE_ANONYMIZATION\020\002\032\010\202\207\335\204\n\002\010\000\022#\n\025REWRI"
  "TE_PROTO_MAP_FNS\020\003\032\010\202\207\335\204\n\002\010\001\022,\n\036REWRITE_"
  "ARRAY_FILTER_TRANSFORM\020\004\032\010\202\207\335\204\n\002\010\001\022\035\n\017RE"
  "WRITE_UNPIVOT\020\005\032\010\202\207\335\204\n\002\010\001\022\033\n\rREWRITE_PIV"
  "OT\020\006\032\010\202\207\335\204\n\002\010\001\022$\n\026REWRITE_ARRAY_INCLUDES"
  "\020\007\032\010\202\207\335\204\n\002\010\001\022%\n\027REWRITE_TYPEOF_FUNCTION\020"
  "\010\032\010\202\207\335\204\n\002\010\001*M\n\022NameResolutionMode\022\033\n\027NAM"
  "E_RESOLUTION_DEFAULT\020\000\022\032\n\026NAME_RESOLUTIO"
  "N_STRICT\020\001*9\n\013ProductMode\022\024\n\020PRODUCT_INT"
  "ERNAL\020\000\022\024\n\020PRODUCT_EXTERNAL\020\001*;\n\020Stateme"
  "ntContext\022\023\n\017CONTEXT_DEFAULT\020\000\022\022\n\016CONTEX"
  "T_MODULE\020\001*w\n\020ErrorMessageMode\022\036\n\032ERROR_"
  "MESSAGE_WITH_PAYLOAD\020\000\022\032\n\026ERROR_MESSAGE_"
  "ONE_LINE\020\001\022\'\n#ERROR_MESSAGE_MULTI_LINE_W"
  "ITH_CARET\020\002*R\n\rParameterMode\022\023\n\017PARAMETE"
  "R_NAMED\020\000\022\030\n\024PARAMETER_POSITIONAL\020\001\022\022\n\016P"
  "ARAMETER_NONE\020\002*\213\001\n\027ParseLocationRecordT"
  "ype\022\036\n\032PARSE_LOCATION_RECORD_NONE\020\000\022)\n%P"
  "ARSE_LOCATION_RECORD_FULL_NODE_SCOPE\020\001\022%"
  "\n!PARSE_LOCATION_RECORD_CODE_SEARCH\020\002:g\n"
  "\030language_feature_options\022!.google.proto"
  "buf.EnumValueOptions\030\233\256\225Q \001(\0132\037.zetasql."
  "LanguageFeatureOptions:b\n\017rewrite_option"
  "s\022!.google.protobuf.EnumValueOptions\030\360\320\313"
  "\240\001 \001(\0132\".zetasql.ResolvedASTRewriteOptio"
  "nsB$\n\022com.google.zetasqlB\016ZetaSQLOptions"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zetasql_2fpublic_2foptions_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zetasql_2fpublic_2foptions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2foptions_2eproto = {
  false, false, 6920, descriptor_table_protodef_zetasql_2fpublic_2foptions_2eproto, "zetasql/public/options.proto", 
  &descriptor_table_zetasql_2fpublic_2foptions_2eproto_once, descriptor_table_zetasql_2fpublic_2foptions_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_zetasql_2fpublic_2foptions_2eproto::offsets,
  file_level_metadata_zetasql_2fpublic_2foptions_2eproto, file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto, file_level_service_descriptors_zetasql_2fpublic_2foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_zetasql_2fpublic_2foptions_2eproto_getter() {
  return &descriptor_table_zetasql_2fpublic_2foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fpublic_2foptions_2eproto(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
namespace zetasql {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanguageVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[0];
}
bool LanguageVersion_IsValid(int value) {
  switch (value) {
    case -1:
    case 1:
    case 10000:
    case 11000:
    case 12000:
    case 13000:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanguageFeature_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[1];
}
bool LanguageFeature_IsValid(int value) {
  switch (value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 46:
    case 47:
    case 49:
    case 52:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 11001:
    case 11002:
    case 11003:
    case 11004:
    case 11005:
    case 11006:
    case 11007:
    case 11008:
    case 11009:
    case 11010:
    case 11011:
    case 12001:
    case 12002:
    case 12003:
    case 12004:
    case 12005:
    case 12006:
    case 12007:
    case 12008:
    case 12009:
    case 12010:
    case 12011:
    case 13001:
    case 13002:
    case 13003:
    case 13004:
    case 13005:
    case 13006:
    case 13007:
    case 13008:
    case 13009:
    case 13010:
    case 13011:
    case 13012:
    case 13013:
    case 13014:
    case 13015:
    case 13016:
    case 13017:
    case 13018:
    case 13019:
    case 13020:
    case 13021:
    case 13022:
    case 13023:
    case 13024:
    case 13025:
    case 13026:
    case 13027:
    case 13028:
    case 13029:
    case 13030:
    case 13031:
    case 13032:
    case 13033:
    case 13034:
    case 13035:
    case 13036:
    case 13037:
    case 13038:
    case 13039:
    case 13040:
    case 13041:
    case 13042:
    case 13043:
    case 999002:
    case 999991:
    case 999992:
    case 999993:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResolvedASTRewrite_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[2];
}
bool ResolvedASTRewrite_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NameResolutionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[3];
}
bool NameResolutionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[4];
}
bool ProductMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatementContext_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[5];
}
bool StatementContext_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorMessageMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[6];
}
bool ErrorMessageMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParameterMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[7];
}
bool ParameterMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParseLocationRecordType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2foptions_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2foptions_2eproto[8];
}
bool ParseLocationRecordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LanguageFeatureOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<LanguageFeatureOptions>()._has_bits_);
  static void set_has_ideally_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_in_development(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LanguageFeatureOptions::LanguageFeatureOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.LanguageFeatureOptions)
}
LanguageFeatureOptions::LanguageFeatureOptions(const LanguageFeatureOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&in_development_, &from.in_development_,
    static_cast<size_t>(reinterpret_cast<char*>(&ideally_enabled_) -
    reinterpret_cast<char*>(&in_development_)) + sizeof(ideally_enabled_));
  // @@protoc_insertion_point(copy_constructor:zetasql.LanguageFeatureOptions)
}

inline void LanguageFeatureOptions::SharedCtor() {
in_development_ = false;
ideally_enabled_ = true;
}

LanguageFeatureOptions::~LanguageFeatureOptions() {
  // @@protoc_insertion_point(destructor:zetasql.LanguageFeatureOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LanguageFeatureOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LanguageFeatureOptions::ArenaDtor(void* object) {
  LanguageFeatureOptions* _this = reinterpret_cast< LanguageFeatureOptions* >(object);
  (void)_this;
}
void LanguageFeatureOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LanguageFeatureOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LanguageFeatureOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.LanguageFeatureOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    in_development_ = false;
    ideally_enabled_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LanguageFeatureOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool ideally_enabled = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ideally_enabled(&has_bits);
          ideally_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_development = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_in_development(&has_bits);
          in_development_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LanguageFeatureOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.LanguageFeatureOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ideally_enabled = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ideally_enabled(), target);
  }

  // optional bool in_development = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_in_development(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.LanguageFeatureOptions)
  return target;
}

size_t LanguageFeatureOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.LanguageFeatureOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool in_development = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool ideally_enabled = 1 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LanguageFeatureOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LanguageFeatureOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LanguageFeatureOptions::GetClassData() const { return &_class_data_; }

void LanguageFeatureOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LanguageFeatureOptions *>(to)->MergeFrom(
      static_cast<const LanguageFeatureOptions &>(from));
}


void LanguageFeatureOptions::MergeFrom(const LanguageFeatureOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.LanguageFeatureOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      in_development_ = from.in_development_;
    }
    if (cached_has_bits & 0x00000002u) {
      ideally_enabled_ = from.ideally_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LanguageFeatureOptions::CopyFrom(const LanguageFeatureOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.LanguageFeatureOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanguageFeatureOptions::IsInitialized() const {
  return true;
}

void LanguageFeatureOptions::InternalSwap(LanguageFeatureOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(in_development_, other->in_development_);
  swap(ideally_enabled_, other->ideally_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LanguageFeatureOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2foptions_2eproto_getter, &descriptor_table_zetasql_2fpublic_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2foptions_2eproto[0]);
}

// ===================================================================

class ResolvedASTRewriteOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ResolvedASTRewriteOptions>()._has_bits_);
  static void set_has_default_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResolvedASTRewriteOptions::ResolvedASTRewriteOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ResolvedASTRewriteOptions)
}
ResolvedASTRewriteOptions::ResolvedASTRewriteOptions(const ResolvedASTRewriteOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  default_enabled_ = from.default_enabled_;
  // @@protoc_insertion_point(copy_constructor:zetasql.ResolvedASTRewriteOptions)
}

inline void ResolvedASTRewriteOptions::SharedCtor() {
default_enabled_ = false;
}

ResolvedASTRewriteOptions::~ResolvedASTRewriteOptions() {
  // @@protoc_insertion_point(destructor:zetasql.ResolvedASTRewriteOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResolvedASTRewriteOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResolvedASTRewriteOptions::ArenaDtor(void* object) {
  ResolvedASTRewriteOptions* _this = reinterpret_cast< ResolvedASTRewriteOptions* >(object);
  (void)_this;
}
void ResolvedASTRewriteOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResolvedASTRewriteOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResolvedASTRewriteOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ResolvedASTRewriteOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  default_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResolvedASTRewriteOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool default_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_default_enabled(&has_bits);
          default_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResolvedASTRewriteOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ResolvedASTRewriteOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool default_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_default_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ResolvedASTRewriteOptions)
  return target;
}

size_t ResolvedASTRewriteOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ResolvedASTRewriteOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool default_enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResolvedASTRewriteOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResolvedASTRewriteOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResolvedASTRewriteOptions::GetClassData() const { return &_class_data_; }

void ResolvedASTRewriteOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResolvedASTRewriteOptions *>(to)->MergeFrom(
      static_cast<const ResolvedASTRewriteOptions &>(from));
}


void ResolvedASTRewriteOptions::MergeFrom(const ResolvedASTRewriteOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ResolvedASTRewriteOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_default_enabled()) {
    _internal_set_default_enabled(from._internal_default_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResolvedASTRewriteOptions::CopyFrom(const ResolvedASTRewriteOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ResolvedASTRewriteOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolvedASTRewriteOptions::IsInitialized() const {
  return true;
}

void ResolvedASTRewriteOptions::InternalSwap(ResolvedASTRewriteOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(default_enabled_, other->default_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolvedASTRewriteOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2foptions_2eproto_getter, &descriptor_table_zetasql_2fpublic_2foptions_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2foptions_2eproto[1]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::zetasql::LanguageFeatureOptions >, 11, false >
  language_feature_options(kLanguageFeatureOptionsFieldNumber, ::zetasql::LanguageFeatureOptions::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::zetasql::ResolvedASTRewriteOptions >, 11, false >
  rewrite_options(kRewriteOptionsFieldNumber, ::zetasql::ResolvedASTRewriteOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::LanguageFeatureOptions* Arena::CreateMaybeMessage< ::zetasql::LanguageFeatureOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::LanguageFeatureOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ResolvedASTRewriteOptions* Arena::CreateMaybeMessage< ::zetasql::ResolvedASTRewriteOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ResolvedASTRewriteOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
