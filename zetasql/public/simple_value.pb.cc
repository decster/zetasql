// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/simple_value.proto

#include "zetasql/public/simple_value.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zetasql {
constexpr SimpleValueProto::SimpleValueProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SimpleValueProtoDefaultTypeInternal {
  constexpr SimpleValueProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimpleValueProtoDefaultTypeInternal() {}
  union {
    SimpleValueProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimpleValueProtoDefaultTypeInternal _SimpleValueProto_default_instance_;
}  // namespace zetasql
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zetasql_2fpublic_2fsimple_5fvalue_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_zetasql_2fpublic_2fsimple_5fvalue_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fpublic_2fsimple_5fvalue_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fpublic_2fsimple_5fvalue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleValueProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleValueProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::SimpleValueProto, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::zetasql::SimpleValueProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_SimpleValueProto_default_instance_),
};

const char descriptor_table_protodef_zetasql_2fpublic_2fsimple_5fvalue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!zetasql/public/simple_value.proto\022\007zet"
  "asql\"\312\001\n\020SimpleValueProto\022\025\n\013int64_value"
  "\030\001 \001(\003H\000\022\026\n\014string_value\030\002 \001(\tH\000\022\024\n\nbool"
  "_value\030\003 \001(\010H\000\022\026\n\014double_value\030\004 \001(\001H\000\022\025"
  "\n\013bytes_value\030\005 \001(\014H\000\0229\n.__SimpleValuePr"
  "oto__switch_must_have_a_default\030\377\001 \001(\010H\000"
  "B\007\n\005valueB+\n\022com.google.zetasqlB\022ZetaSQL"
  "SimpleValue\370\001\001"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zetasql_2fpublic_2fsimple_5fvalue_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2fsimple_5fvalue_2eproto = {
  false, false, 294, descriptor_table_protodef_zetasql_2fpublic_2fsimple_5fvalue_2eproto, "zetasql/public/simple_value.proto", 
  &descriptor_table_zetasql_2fpublic_2fsimple_5fvalue_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_zetasql_2fpublic_2fsimple_5fvalue_2eproto::offsets,
  file_level_metadata_zetasql_2fpublic_2fsimple_5fvalue_2eproto, file_level_enum_descriptors_zetasql_2fpublic_2fsimple_5fvalue_2eproto, file_level_service_descriptors_zetasql_2fpublic_2fsimple_5fvalue_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_zetasql_2fpublic_2fsimple_5fvalue_2eproto_getter() {
  return &descriptor_table_zetasql_2fpublic_2fsimple_5fvalue_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fpublic_2fsimple_5fvalue_2eproto(&descriptor_table_zetasql_2fpublic_2fsimple_5fvalue_2eproto);
namespace zetasql {

// ===================================================================

class SimpleValueProto::_Internal {
 public:
};

SimpleValueProto::SimpleValueProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.SimpleValueProto)
}
SimpleValueProto::SimpleValueProto(const SimpleValueProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBytesValue: {
      _internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case kSimpleValueProtoSwitchMustHaveADefault: {
      _internal_set___simplevalueproto__switch_must_have_a_default(from._internal___simplevalueproto__switch_must_have_a_default());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.SimpleValueProto)
}

inline void SimpleValueProto::SharedCtor() {
clear_has_value();
}

SimpleValueProto::~SimpleValueProto() {
  // @@protoc_insertion_point(destructor:zetasql.SimpleValueProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimpleValueProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void SimpleValueProto::ArenaDtor(void* object) {
  SimpleValueProto* _this = reinterpret_cast< SimpleValueProto* >(object);
  (void)_this;
}
void SimpleValueProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleValueProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimpleValueProto::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.SimpleValueProto)
  switch (value_case()) {
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBytesValue: {
      value_.bytes_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kSimpleValueProtoSwitchMustHaveADefault: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void SimpleValueProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.SimpleValueProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleValueProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 int64_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string string_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.SimpleValueProto.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bytes bytes_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bytes_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool __SimpleValueProto__switch_must_have_a_default = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _internal_set___simplevalueproto__switch_must_have_a_default(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleValueProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.SimpleValueProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kInt64Value: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_int64_value(), target);
      break;
    }
    case kStringValue: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "zetasql.SimpleValueProto.string_value");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_string_value(), target);
      break;
    }
    case kBoolValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bool_value(), target);
      break;
    }
    case kDoubleValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_double_value(), target);
      break;
    }
    case kBytesValue: {
      target = stream->WriteBytesMaybeAliased(
          5, this->_internal_bytes_value(), target);
      break;
    }
    case kSimpleValueProtoSwitchMustHaveADefault: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(255, this->_internal___simplevalueproto__switch_must_have_a_default(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.SimpleValueProto)
  return target;
}

size_t SimpleValueProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.SimpleValueProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // int64 int64_value = 1;
    case kInt64Value: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_int64_value());
      break;
    }
    // string string_value = 2;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // bool bool_value = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // double double_value = 4;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bytes bytes_value = 5;
    case kBytesValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_value());
      break;
    }
    // bool __SimpleValueProto__switch_must_have_a_default = 255;
    case kSimpleValueProtoSwitchMustHaveADefault: {
      total_size += 2 + 1;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleValueProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimpleValueProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleValueProto::GetClassData() const { return &_class_data_; }

void SimpleValueProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimpleValueProto *>(to)->MergeFrom(
      static_cast<const SimpleValueProto &>(from));
}


void SimpleValueProto::MergeFrom(const SimpleValueProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.SimpleValueProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBytesValue: {
      _internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case kSimpleValueProtoSwitchMustHaveADefault: {
      _internal_set___simplevalueproto__switch_must_have_a_default(from._internal___simplevalueproto__switch_must_have_a_default());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleValueProto::CopyFrom(const SimpleValueProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.SimpleValueProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleValueProto::IsInitialized() const {
  return true;
}

void SimpleValueProto::InternalSwap(SimpleValueProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleValueProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2fsimple_5fvalue_2eproto_getter, &descriptor_table_zetasql_2fpublic_2fsimple_5fvalue_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2fsimple_5fvalue_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::SimpleValueProto* Arena::CreateMaybeMessage< ::zetasql::SimpleValueProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::SimpleValueProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
