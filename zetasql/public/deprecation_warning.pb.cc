// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/deprecation_warning.proto

#include "zetasql/public/deprecation_warning.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zetasql {
constexpr DeprecationWarning::DeprecationWarning(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kind_(-1)
{}
struct DeprecationWarningDefaultTypeInternal {
  constexpr DeprecationWarningDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeprecationWarningDefaultTypeInternal() {}
  union {
    DeprecationWarning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeprecationWarningDefaultTypeInternal _DeprecationWarning_default_instance_;
constexpr FreestandingDeprecationWarning::FreestandingDeprecationWarning(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , caret_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_location_(nullptr)
  , deprecation_warning_(nullptr){}
struct FreestandingDeprecationWarningDefaultTypeInternal {
  constexpr FreestandingDeprecationWarningDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FreestandingDeprecationWarningDefaultTypeInternal() {}
  union {
    FreestandingDeprecationWarning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FreestandingDeprecationWarningDefaultTypeInternal _FreestandingDeprecationWarning_default_instance_;
}  // namespace zetasql
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zetasql::DeprecationWarning, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::DeprecationWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::DeprecationWarning, kind_),
  0,
  PROTOBUF_FIELD_OFFSET(::zetasql::FreestandingDeprecationWarning, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FreestandingDeprecationWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::FreestandingDeprecationWarning, message_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FreestandingDeprecationWarning, caret_string_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FreestandingDeprecationWarning, error_location_),
  PROTOBUF_FIELD_OFFSET(::zetasql::FreestandingDeprecationWarning, deprecation_warning_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::zetasql::DeprecationWarning)},
  { 8, 18, -1, sizeof(::zetasql::FreestandingDeprecationWarning)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_DeprecationWarning_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_FreestandingDeprecationWarning_default_instance_),
};

const char descriptor_table_protodef_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(zetasql/public/deprecation_warning.pro"
  "to\022\007zetasql\032#zetasql/public/error_locati"
  "on.proto\"\344\001\n\022DeprecationWarning\022.\n\004kind\030"
  "\001 \001(\0162 .zetasql.DeprecationWarning.Kind\""
  "\235\001\n\004Kind\0221\n$__Kind__switch_must_have_a_d"
  "efault__\020\377\377\377\377\377\377\377\377\377\001\022\013\n\007UNKNOWN\020\000\022\027\n\023DEPR"
  "ECATED_FUNCTION\020\001\022!\n\035DEPRECATED_FUNCTION"
  "_SIGNATURE\020\002\022\031\n\025PROTO3_FIELD_PRESENCE\020\003\""
  "\261\001\n\036FreestandingDeprecationWarning\022\017\n\007me"
  "ssage\030\001 \001(\t\022\024\n\014caret_string\030\002 \001(\t\022.\n\016err"
  "or_location\030\003 \001(\0132\026.zetasql.ErrorLocatio"
  "n\0228\n\023deprecation_warning\030\004 \001(\0132\033.zetasql"
  ".DeprecationWarningB.\n\022com.google.zetasq"
  "lB\030DeprecationWarningProtos"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto_deps[1] = {
  &::descriptor_table_zetasql_2fpublic_2ferror_5flocation_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto = {
  false, false, 547, descriptor_table_protodef_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto, "zetasql/public/deprecation_warning.proto", 
  &descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto_once, descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto::offsets,
  file_level_metadata_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto, file_level_enum_descriptors_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto, file_level_service_descriptors_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto_getter() {
  return &descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto(&descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto);
namespace zetasql {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeprecationWarning_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto);
  return file_level_enum_descriptors_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto[0];
}
bool DeprecationWarning_Kind_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DeprecationWarning_Kind DeprecationWarning::__Kind__switch_must_have_a_default__;
constexpr DeprecationWarning_Kind DeprecationWarning::UNKNOWN;
constexpr DeprecationWarning_Kind DeprecationWarning::DEPRECATED_FUNCTION;
constexpr DeprecationWarning_Kind DeprecationWarning::DEPRECATED_FUNCTION_SIGNATURE;
constexpr DeprecationWarning_Kind DeprecationWarning::PROTO3_FIELD_PRESENCE;
constexpr DeprecationWarning_Kind DeprecationWarning::Kind_MIN;
constexpr DeprecationWarning_Kind DeprecationWarning::Kind_MAX;
constexpr int DeprecationWarning::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DeprecationWarning::_Internal {
 public:
  using HasBits = decltype(std::declval<DeprecationWarning>()._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeprecationWarning::DeprecationWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.DeprecationWarning)
}
DeprecationWarning::DeprecationWarning(const DeprecationWarning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kind_ = from.kind_;
  // @@protoc_insertion_point(copy_constructor:zetasql.DeprecationWarning)
}

inline void DeprecationWarning::SharedCtor() {
kind_ = -1;
}

DeprecationWarning::~DeprecationWarning() {
  // @@protoc_insertion_point(destructor:zetasql.DeprecationWarning)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeprecationWarning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeprecationWarning::ArenaDtor(void* object) {
  DeprecationWarning* _this = reinterpret_cast< DeprecationWarning* >(object);
  (void)_this;
}
void DeprecationWarning::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeprecationWarning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeprecationWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.DeprecationWarning)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kind_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeprecationWarning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .zetasql.DeprecationWarning.Kind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasql::DeprecationWarning_Kind_IsValid(val))) {
            _internal_set_kind(static_cast<::zetasql::DeprecationWarning_Kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeprecationWarning::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.DeprecationWarning)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasql.DeprecationWarning.Kind kind = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.DeprecationWarning)
  return target;
}

size_t DeprecationWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.DeprecationWarning)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .zetasql.DeprecationWarning.Kind kind = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeprecationWarning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeprecationWarning::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeprecationWarning::GetClassData() const { return &_class_data_; }

void DeprecationWarning::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeprecationWarning *>(to)->MergeFrom(
      static_cast<const DeprecationWarning &>(from));
}


void DeprecationWarning::MergeFrom(const DeprecationWarning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.DeprecationWarning)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kind()) {
    _internal_set_kind(from._internal_kind());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeprecationWarning::CopyFrom(const DeprecationWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.DeprecationWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeprecationWarning::IsInitialized() const {
  return true;
}

void DeprecationWarning::InternalSwap(DeprecationWarning* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeprecationWarning::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto_getter, &descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto[0]);
}

// ===================================================================

class FreestandingDeprecationWarning::_Internal {
 public:
  using HasBits = decltype(std::declval<FreestandingDeprecationWarning>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caret_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasql::ErrorLocation& error_location(const FreestandingDeprecationWarning* msg);
  static void set_has_error_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::zetasql::DeprecationWarning& deprecation_warning(const FreestandingDeprecationWarning* msg);
  static void set_has_deprecation_warning(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::zetasql::ErrorLocation&
FreestandingDeprecationWarning::_Internal::error_location(const FreestandingDeprecationWarning* msg) {
  return *msg->error_location_;
}
const ::zetasql::DeprecationWarning&
FreestandingDeprecationWarning::_Internal::deprecation_warning(const FreestandingDeprecationWarning* msg) {
  return *msg->deprecation_warning_;
}
void FreestandingDeprecationWarning::clear_error_location() {
  if (error_location_ != nullptr) error_location_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
FreestandingDeprecationWarning::FreestandingDeprecationWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.FreestandingDeprecationWarning)
}
FreestandingDeprecationWarning::FreestandingDeprecationWarning(const FreestandingDeprecationWarning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  caret_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    caret_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caret_string()) {
    caret_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caret_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_error_location()) {
    error_location_ = new ::zetasql::ErrorLocation(*from.error_location_);
  } else {
    error_location_ = nullptr;
  }
  if (from._internal_has_deprecation_warning()) {
    deprecation_warning_ = new ::zetasql::DeprecationWarning(*from.deprecation_warning_);
  } else {
    deprecation_warning_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.FreestandingDeprecationWarning)
}

inline void FreestandingDeprecationWarning::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
caret_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  caret_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deprecation_warning_) -
    reinterpret_cast<char*>(&error_location_)) + sizeof(deprecation_warning_));
}

FreestandingDeprecationWarning::~FreestandingDeprecationWarning() {
  // @@protoc_insertion_point(destructor:zetasql.FreestandingDeprecationWarning)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FreestandingDeprecationWarning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caret_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_location_;
  if (this != internal_default_instance()) delete deprecation_warning_;
}

void FreestandingDeprecationWarning::ArenaDtor(void* object) {
  FreestandingDeprecationWarning* _this = reinterpret_cast< FreestandingDeprecationWarning* >(object);
  (void)_this;
}
void FreestandingDeprecationWarning::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FreestandingDeprecationWarning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FreestandingDeprecationWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.FreestandingDeprecationWarning)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      caret_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(error_location_ != nullptr);
      error_location_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(deprecation_warning_ != nullptr);
      deprecation_warning_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FreestandingDeprecationWarning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.FreestandingDeprecationWarning.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string caret_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_caret_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zetasql.FreestandingDeprecationWarning.caret_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.ErrorLocation error_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .zetasql.DeprecationWarning deprecation_warning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecation_warning(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FreestandingDeprecationWarning::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.FreestandingDeprecationWarning)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.FreestandingDeprecationWarning.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // optional string caret_string = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caret_string().data(), static_cast<int>(this->_internal_caret_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "zetasql.FreestandingDeprecationWarning.caret_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caret_string(), target);
  }

  // optional .zetasql.ErrorLocation error_location = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::error_location(this), target, stream);
  }

  // optional .zetasql.DeprecationWarning deprecation_warning = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::deprecation_warning(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.FreestandingDeprecationWarning)
  return target;
}

size_t FreestandingDeprecationWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.FreestandingDeprecationWarning)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string caret_string = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caret_string());
    }

    // optional .zetasql.ErrorLocation error_location = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *error_location_);
    }

    // optional .zetasql.DeprecationWarning deprecation_warning = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deprecation_warning_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FreestandingDeprecationWarning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FreestandingDeprecationWarning::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FreestandingDeprecationWarning::GetClassData() const { return &_class_data_; }

void FreestandingDeprecationWarning::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FreestandingDeprecationWarning *>(to)->MergeFrom(
      static_cast<const FreestandingDeprecationWarning &>(from));
}


void FreestandingDeprecationWarning::MergeFrom(const FreestandingDeprecationWarning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.FreestandingDeprecationWarning)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_caret_string(from._internal_caret_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_error_location()->::zetasql::ErrorLocation::MergeFrom(from._internal_error_location());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_deprecation_warning()->::zetasql::DeprecationWarning::MergeFrom(from._internal_deprecation_warning());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FreestandingDeprecationWarning::CopyFrom(const FreestandingDeprecationWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.FreestandingDeprecationWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreestandingDeprecationWarning::IsInitialized() const {
  return true;
}

void FreestandingDeprecationWarning::InternalSwap(FreestandingDeprecationWarning* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &caret_string_, lhs_arena,
      &other->caret_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FreestandingDeprecationWarning, deprecation_warning_)
      + sizeof(FreestandingDeprecationWarning::deprecation_warning_)
      - PROTOBUF_FIELD_OFFSET(FreestandingDeprecationWarning, error_location_)>(
          reinterpret_cast<char*>(&error_location_),
          reinterpret_cast<char*>(&other->error_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FreestandingDeprecationWarning::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto_getter, &descriptor_table_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2fdeprecation_5fwarning_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::DeprecationWarning* Arena::CreateMaybeMessage< ::zetasql::DeprecationWarning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::DeprecationWarning >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::FreestandingDeprecationWarning* Arena::CreateMaybeMessage< ::zetasql::FreestandingDeprecationWarning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::FreestandingDeprecationWarning >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
