// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zetasql/public/type_parameters.proto

#include "zetasql/public/type_parameters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zetasql {
constexpr TypeParametersProto::TypeParametersProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : child_list_()
  , _oneof_case_{}{}
struct TypeParametersProtoDefaultTypeInternal {
  constexpr TypeParametersProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TypeParametersProtoDefaultTypeInternal() {}
  union {
    TypeParametersProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TypeParametersProtoDefaultTypeInternal _TypeParametersProto_default_instance_;
constexpr StringTypeParametersProto::StringTypeParametersProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct StringTypeParametersProtoDefaultTypeInternal {
  constexpr StringTypeParametersProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringTypeParametersProtoDefaultTypeInternal() {}
  union {
    StringTypeParametersProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringTypeParametersProtoDefaultTypeInternal _StringTypeParametersProto_default_instance_;
constexpr NumericTypeParametersProto::NumericTypeParametersProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scale_(int64_t{0})
  , _oneof_case_{}{}
struct NumericTypeParametersProtoDefaultTypeInternal {
  constexpr NumericTypeParametersProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NumericTypeParametersProtoDefaultTypeInternal() {}
  union {
    NumericTypeParametersProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NumericTypeParametersProtoDefaultTypeInternal _NumericTypeParametersProto_default_instance_;
constexpr ExtendedTypeParametersProto::ExtendedTypeParametersProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameters_(){}
struct ExtendedTypeParametersProtoDefaultTypeInternal {
  constexpr ExtendedTypeParametersProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExtendedTypeParametersProtoDefaultTypeInternal() {}
  union {
    ExtendedTypeParametersProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExtendedTypeParametersProtoDefaultTypeInternal _ExtendedTypeParametersProto_default_instance_;
}  // namespace zetasql
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zetasql_2fpublic_2ftype_5fparameters_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_zetasql_2fpublic_2ftype_5fparameters_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zetasql_2fpublic_2ftype_5fparameters_2eproto = nullptr;

const uint32_t TableStruct_zetasql_2fpublic_2ftype_5fparameters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeParametersProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeParametersProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeParametersProto, child_list_),
  PROTOBUF_FIELD_OFFSET(::zetasql::TypeParametersProto, type_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::StringTypeParametersProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::StringTypeParametersProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::StringTypeParametersProto, param_),
  PROTOBUF_FIELD_OFFSET(::zetasql::NumericTypeParametersProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zetasql::NumericTypeParametersProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::zetasql::NumericTypeParametersProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::zetasql::NumericTypeParametersProto, scale_),
  PROTOBUF_FIELD_OFFSET(::zetasql::NumericTypeParametersProto, precision_param_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zetasql::ExtendedTypeParametersProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::zetasql::ExtendedTypeParametersProto, parameters_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::zetasql::TypeParametersProto)},
  { 11, -1, -1, sizeof(::zetasql::StringTypeParametersProto)},
  { 20, 30, -1, sizeof(::zetasql::NumericTypeParametersProto)},
  { 33, -1, -1, sizeof(::zetasql::ExtendedTypeParametersProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_TypeParametersProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_StringTypeParametersProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_NumericTypeParametersProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zetasql::_ExtendedTypeParametersProto_default_instance_),
};

const char descriptor_table_protodef_zetasql_2fpublic_2ftype_5fparameters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$zetasql/public/type_parameters.proto\022\007"
  "zetasql\032!zetasql/public/simple_value.pro"
  "to\"\262\002\n\023TypeParametersProto\022D\n\026string_typ"
  "e_parameters\030\001 \001(\0132\".zetasql.StringTypeP"
  "arametersProtoH\000\022F\n\027numeric_type_paramet"
  "ers\030\002 \001(\0132#.zetasql.NumericTypeParameter"
  "sProtoH\000\022H\n\030extended_type_parameters\030\003 \001"
  "(\0132$.zetasql.ExtendedTypeParametersProto"
  "H\000\0220\n\nchild_list\030d \003(\0132\034.zetasql.TypePar"
  "ametersProtoB\021\n\017type_parameters\"S\n\031Strin"
  "gTypeParametersProto\022\024\n\nmax_length\030\001 \001(\003"
  "H\000\022\027\n\ris_max_length\030\002 \001(\010H\000B\007\n\005param\"o\n\032"
  "NumericTypeParametersProto\022\023\n\tprecision\030"
  "\001 \001(\003H\000\022\032\n\020is_max_precision\030\002 \001(\010H\000\022\r\n\005s"
  "cale\030\003 \001(\003B\021\n\017precision_param\"L\n\033Extende"
  "dTypeParametersProto\022-\n\nparameters\030\001 \003(\013"
  "2\031.zetasql.SimpleValueProtoB+\n\022com.googl"
  "e.zetasqlB\025ZetaSQLTypeParameters"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto_deps[1] = {
  &::descriptor_table_zetasql_2fpublic_2fsimple_5fvalue_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto = {
  false, false, 712, descriptor_table_protodef_zetasql_2fpublic_2ftype_5fparameters_2eproto, "zetasql/public/type_parameters.proto", 
  &descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto_once, descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_zetasql_2fpublic_2ftype_5fparameters_2eproto::offsets,
  file_level_metadata_zetasql_2fpublic_2ftype_5fparameters_2eproto, file_level_enum_descriptors_zetasql_2fpublic_2ftype_5fparameters_2eproto, file_level_service_descriptors_zetasql_2fpublic_2ftype_5fparameters_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto_getter() {
  return &descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_zetasql_2fpublic_2ftype_5fparameters_2eproto(&descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto);
namespace zetasql {

// ===================================================================

class TypeParametersProto::_Internal {
 public:
  static const ::zetasql::StringTypeParametersProto& string_type_parameters(const TypeParametersProto* msg);
  static const ::zetasql::NumericTypeParametersProto& numeric_type_parameters(const TypeParametersProto* msg);
  static const ::zetasql::ExtendedTypeParametersProto& extended_type_parameters(const TypeParametersProto* msg);
};

const ::zetasql::StringTypeParametersProto&
TypeParametersProto::_Internal::string_type_parameters(const TypeParametersProto* msg) {
  return *msg->type_parameters_.string_type_parameters_;
}
const ::zetasql::NumericTypeParametersProto&
TypeParametersProto::_Internal::numeric_type_parameters(const TypeParametersProto* msg) {
  return *msg->type_parameters_.numeric_type_parameters_;
}
const ::zetasql::ExtendedTypeParametersProto&
TypeParametersProto::_Internal::extended_type_parameters(const TypeParametersProto* msg) {
  return *msg->type_parameters_.extended_type_parameters_;
}
void TypeParametersProto::set_allocated_string_type_parameters(::zetasql::StringTypeParametersProto* string_type_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_parameters();
  if (string_type_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::StringTypeParametersProto>::GetOwningArena(string_type_parameters);
    if (message_arena != submessage_arena) {
      string_type_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_type_parameters, submessage_arena);
    }
    set_has_string_type_parameters();
    type_parameters_.string_type_parameters_ = string_type_parameters;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeParametersProto.string_type_parameters)
}
void TypeParametersProto::set_allocated_numeric_type_parameters(::zetasql::NumericTypeParametersProto* numeric_type_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_parameters();
  if (numeric_type_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::NumericTypeParametersProto>::GetOwningArena(numeric_type_parameters);
    if (message_arena != submessage_arena) {
      numeric_type_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numeric_type_parameters, submessage_arena);
    }
    set_has_numeric_type_parameters();
    type_parameters_.numeric_type_parameters_ = numeric_type_parameters;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeParametersProto.numeric_type_parameters)
}
void TypeParametersProto::set_allocated_extended_type_parameters(::zetasql::ExtendedTypeParametersProto* extended_type_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_parameters();
  if (extended_type_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::zetasql::ExtendedTypeParametersProto>::GetOwningArena(extended_type_parameters);
    if (message_arena != submessage_arena) {
      extended_type_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extended_type_parameters, submessage_arena);
    }
    set_has_extended_type_parameters();
    type_parameters_.extended_type_parameters_ = extended_type_parameters;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasql.TypeParametersProto.extended_type_parameters)
}
TypeParametersProto::TypeParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  child_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.TypeParametersProto)
}
TypeParametersProto::TypeParametersProto(const TypeParametersProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      child_list_(from.child_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type_parameters();
  switch (from.type_parameters_case()) {
    case kStringTypeParameters: {
      _internal_mutable_string_type_parameters()->::zetasql::StringTypeParametersProto::MergeFrom(from._internal_string_type_parameters());
      break;
    }
    case kNumericTypeParameters: {
      _internal_mutable_numeric_type_parameters()->::zetasql::NumericTypeParametersProto::MergeFrom(from._internal_numeric_type_parameters());
      break;
    }
    case kExtendedTypeParameters: {
      _internal_mutable_extended_type_parameters()->::zetasql::ExtendedTypeParametersProto::MergeFrom(from._internal_extended_type_parameters());
      break;
    }
    case TYPE_PARAMETERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.TypeParametersProto)
}

inline void TypeParametersProto::SharedCtor() {
clear_has_type_parameters();
}

TypeParametersProto::~TypeParametersProto() {
  // @@protoc_insertion_point(destructor:zetasql.TypeParametersProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TypeParametersProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type_parameters()) {
    clear_type_parameters();
  }
}

void TypeParametersProto::ArenaDtor(void* object) {
  TypeParametersProto* _this = reinterpret_cast< TypeParametersProto* >(object);
  (void)_this;
}
void TypeParametersProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TypeParametersProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TypeParametersProto::clear_type_parameters() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.TypeParametersProto)
  switch (type_parameters_case()) {
    case kStringTypeParameters: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_parameters_.string_type_parameters_;
      }
      break;
    }
    case kNumericTypeParameters: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_parameters_.numeric_type_parameters_;
      }
      break;
    }
    case kExtendedTypeParameters: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_parameters_.extended_type_parameters_;
      }
      break;
    }
    case TYPE_PARAMETERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_PARAMETERS_NOT_SET;
}


void TypeParametersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.TypeParametersProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_list_.Clear();
  clear_type_parameters();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeParametersProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .zetasql.StringTypeParametersProto string_type_parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_type_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .zetasql.NumericTypeParametersProto numeric_type_parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_numeric_type_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .zetasql.ExtendedTypeParametersProto extended_type_parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extended_type_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .zetasql.TypeParametersProto child_list = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_child_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeParametersProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.TypeParametersProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (type_parameters_case()) {
    case kStringTypeParameters: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::string_type_parameters(this), target, stream);
      break;
    }
    case kNumericTypeParameters: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::numeric_type_parameters(this), target, stream);
      break;
    }
    case kExtendedTypeParameters: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::extended_type_parameters(this), target, stream);
      break;
    }
    default: ;
  }
  // repeated .zetasql.TypeParametersProto child_list = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_child_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, this->_internal_child_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.TypeParametersProto)
  return target;
}

size_t TypeParametersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.TypeParametersProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.TypeParametersProto child_list = 100;
  total_size += 2UL * this->_internal_child_list_size();
  for (const auto& msg : this->child_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (type_parameters_case()) {
    // .zetasql.StringTypeParametersProto string_type_parameters = 1;
    case kStringTypeParameters: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_parameters_.string_type_parameters_);
      break;
    }
    // .zetasql.NumericTypeParametersProto numeric_type_parameters = 2;
    case kNumericTypeParameters: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_parameters_.numeric_type_parameters_);
      break;
    }
    // .zetasql.ExtendedTypeParametersProto extended_type_parameters = 3;
    case kExtendedTypeParameters: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_parameters_.extended_type_parameters_);
      break;
    }
    case TYPE_PARAMETERS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeParametersProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TypeParametersProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeParametersProto::GetClassData() const { return &_class_data_; }

void TypeParametersProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TypeParametersProto *>(to)->MergeFrom(
      static_cast<const TypeParametersProto &>(from));
}


void TypeParametersProto::MergeFrom(const TypeParametersProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.TypeParametersProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  child_list_.MergeFrom(from.child_list_);
  switch (from.type_parameters_case()) {
    case kStringTypeParameters: {
      _internal_mutable_string_type_parameters()->::zetasql::StringTypeParametersProto::MergeFrom(from._internal_string_type_parameters());
      break;
    }
    case kNumericTypeParameters: {
      _internal_mutable_numeric_type_parameters()->::zetasql::NumericTypeParametersProto::MergeFrom(from._internal_numeric_type_parameters());
      break;
    }
    case kExtendedTypeParameters: {
      _internal_mutable_extended_type_parameters()->::zetasql::ExtendedTypeParametersProto::MergeFrom(from._internal_extended_type_parameters());
      break;
    }
    case TYPE_PARAMETERS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeParametersProto::CopyFrom(const TypeParametersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.TypeParametersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeParametersProto::IsInitialized() const {
  return true;
}

void TypeParametersProto::InternalSwap(TypeParametersProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  child_list_.InternalSwap(&other->child_list_);
  swap(type_parameters_, other->type_parameters_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeParametersProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto_getter, &descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2ftype_5fparameters_2eproto[0]);
}

// ===================================================================

class StringTypeParametersProto::_Internal {
 public:
};

StringTypeParametersProto::StringTypeParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.StringTypeParametersProto)
}
StringTypeParametersProto::StringTypeParametersProto(const StringTypeParametersProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_param();
  switch (from.param_case()) {
    case kMaxLength: {
      _internal_set_max_length(from._internal_max_length());
      break;
    }
    case kIsMaxLength: {
      _internal_set_is_max_length(from._internal_is_max_length());
      break;
    }
    case PARAM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.StringTypeParametersProto)
}

inline void StringTypeParametersProto::SharedCtor() {
clear_has_param();
}

StringTypeParametersProto::~StringTypeParametersProto() {
  // @@protoc_insertion_point(destructor:zetasql.StringTypeParametersProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StringTypeParametersProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_param()) {
    clear_param();
  }
}

void StringTypeParametersProto::ArenaDtor(void* object) {
  StringTypeParametersProto* _this = reinterpret_cast< StringTypeParametersProto* >(object);
  (void)_this;
}
void StringTypeParametersProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringTypeParametersProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringTypeParametersProto::clear_param() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.StringTypeParametersProto)
  switch (param_case()) {
    case kMaxLength: {
      // No need to clear
      break;
    }
    case kIsMaxLength: {
      // No need to clear
      break;
    }
    case PARAM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAM_NOT_SET;
}


void StringTypeParametersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.StringTypeParametersProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_param();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringTypeParametersProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 max_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_max_length(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_max_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_is_max_length(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringTypeParametersProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.StringTypeParametersProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (param_case()) {
    case kMaxLength: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_length(), target);
      break;
    }
    case kIsMaxLength: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_max_length(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.StringTypeParametersProto)
  return target;
}

size_t StringTypeParametersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.StringTypeParametersProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (param_case()) {
    // int64 max_length = 1;
    case kMaxLength: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_max_length());
      break;
    }
    // bool is_max_length = 2;
    case kIsMaxLength: {
      total_size += 1 + 1;
      break;
    }
    case PARAM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringTypeParametersProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StringTypeParametersProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringTypeParametersProto::GetClassData() const { return &_class_data_; }

void StringTypeParametersProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StringTypeParametersProto *>(to)->MergeFrom(
      static_cast<const StringTypeParametersProto &>(from));
}


void StringTypeParametersProto::MergeFrom(const StringTypeParametersProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.StringTypeParametersProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.param_case()) {
    case kMaxLength: {
      _internal_set_max_length(from._internal_max_length());
      break;
    }
    case kIsMaxLength: {
      _internal_set_is_max_length(from._internal_is_max_length());
      break;
    }
    case PARAM_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringTypeParametersProto::CopyFrom(const StringTypeParametersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.StringTypeParametersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringTypeParametersProto::IsInitialized() const {
  return true;
}

void StringTypeParametersProto::InternalSwap(StringTypeParametersProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(param_, other->param_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringTypeParametersProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto_getter, &descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2ftype_5fparameters_2eproto[1]);
}

// ===================================================================

class NumericTypeParametersProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NumericTypeParametersProto>()._has_bits_);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NumericTypeParametersProto::NumericTypeParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.NumericTypeParametersProto)
}
NumericTypeParametersProto::NumericTypeParametersProto(const NumericTypeParametersProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scale_ = from.scale_;
  clear_has_precision_param();
  switch (from.precision_param_case()) {
    case kPrecision: {
      _internal_set_precision(from._internal_precision());
      break;
    }
    case kIsMaxPrecision: {
      _internal_set_is_max_precision(from._internal_is_max_precision());
      break;
    }
    case PRECISION_PARAM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasql.NumericTypeParametersProto)
}

inline void NumericTypeParametersProto::SharedCtor() {
scale_ = int64_t{0};
clear_has_precision_param();
}

NumericTypeParametersProto::~NumericTypeParametersProto() {
  // @@protoc_insertion_point(destructor:zetasql.NumericTypeParametersProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NumericTypeParametersProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_precision_param()) {
    clear_precision_param();
  }
}

void NumericTypeParametersProto::ArenaDtor(void* object) {
  NumericTypeParametersProto* _this = reinterpret_cast< NumericTypeParametersProto* >(object);
  (void)_this;
}
void NumericTypeParametersProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NumericTypeParametersProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NumericTypeParametersProto::clear_precision_param() {
// @@protoc_insertion_point(one_of_clear_start:zetasql.NumericTypeParametersProto)
  switch (precision_param_case()) {
    case kPrecision: {
      // No need to clear
      break;
    }
    case kIsMaxPrecision: {
      // No need to clear
      break;
    }
    case PRECISION_PARAM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PRECISION_PARAM_NOT_SET;
}


void NumericTypeParametersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.NumericTypeParametersProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scale_ = int64_t{0};
  clear_precision_param();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumericTypeParametersProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 precision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_precision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_max_precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_is_max_precision(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumericTypeParametersProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.NumericTypeParametersProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (precision_param_case()) {
    case kPrecision: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_precision(), target);
      break;
    }
    case kIsMaxPrecision: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_max_precision(), target);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional int64 scale = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.NumericTypeParametersProto)
  return target;
}

size_t NumericTypeParametersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.NumericTypeParametersProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 scale = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_scale());
  }

  switch (precision_param_case()) {
    // int64 precision = 1;
    case kPrecision: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_precision());
      break;
    }
    // bool is_max_precision = 2;
    case kIsMaxPrecision: {
      total_size += 1 + 1;
      break;
    }
    case PRECISION_PARAM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumericTypeParametersProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NumericTypeParametersProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumericTypeParametersProto::GetClassData() const { return &_class_data_; }

void NumericTypeParametersProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NumericTypeParametersProto *>(to)->MergeFrom(
      static_cast<const NumericTypeParametersProto &>(from));
}


void NumericTypeParametersProto::MergeFrom(const NumericTypeParametersProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.NumericTypeParametersProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_scale()) {
    _internal_set_scale(from._internal_scale());
  }
  switch (from.precision_param_case()) {
    case kPrecision: {
      _internal_set_precision(from._internal_precision());
      break;
    }
    case kIsMaxPrecision: {
      _internal_set_is_max_precision(from._internal_is_max_precision());
      break;
    }
    case PRECISION_PARAM_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumericTypeParametersProto::CopyFrom(const NumericTypeParametersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.NumericTypeParametersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumericTypeParametersProto::IsInitialized() const {
  return true;
}

void NumericTypeParametersProto::InternalSwap(NumericTypeParametersProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(scale_, other->scale_);
  swap(precision_param_, other->precision_param_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NumericTypeParametersProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto_getter, &descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2ftype_5fparameters_2eproto[2]);
}

// ===================================================================

class ExtendedTypeParametersProto::_Internal {
 public:
};

void ExtendedTypeParametersProto::clear_parameters() {
  parameters_.Clear();
}
ExtendedTypeParametersProto::ExtendedTypeParametersProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  parameters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:zetasql.ExtendedTypeParametersProto)
}
ExtendedTypeParametersProto::ExtendedTypeParametersProto(const ExtendedTypeParametersProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasql.ExtendedTypeParametersProto)
}

inline void ExtendedTypeParametersProto::SharedCtor() {
}

ExtendedTypeParametersProto::~ExtendedTypeParametersProto() {
  // @@protoc_insertion_point(destructor:zetasql.ExtendedTypeParametersProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExtendedTypeParametersProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExtendedTypeParametersProto::ArenaDtor(void* object) {
  ExtendedTypeParametersProto* _this = reinterpret_cast< ExtendedTypeParametersProto* >(object);
  (void)_this;
}
void ExtendedTypeParametersProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtendedTypeParametersProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtendedTypeParametersProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasql.ExtendedTypeParametersProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendedTypeParametersProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .zetasql.SimpleValueProto parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtendedTypeParametersProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zetasql.ExtendedTypeParametersProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zetasql.SimpleValueProto parameters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zetasql.ExtendedTypeParametersProto)
  return target;
}

size_t ExtendedTypeParametersProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasql.ExtendedTypeParametersProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasql.SimpleValueProto parameters = 1;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtendedTypeParametersProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExtendedTypeParametersProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtendedTypeParametersProto::GetClassData() const { return &_class_data_; }

void ExtendedTypeParametersProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExtendedTypeParametersProto *>(to)->MergeFrom(
      static_cast<const ExtendedTypeParametersProto &>(from));
}


void ExtendedTypeParametersProto::MergeFrom(const ExtendedTypeParametersProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasql.ExtendedTypeParametersProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendedTypeParametersProto::CopyFrom(const ExtendedTypeParametersProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasql.ExtendedTypeParametersProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedTypeParametersProto::IsInitialized() const {
  return true;
}

void ExtendedTypeParametersProto::InternalSwap(ExtendedTypeParametersProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parameters_.InternalSwap(&other->parameters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendedTypeParametersProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto_getter, &descriptor_table_zetasql_2fpublic_2ftype_5fparameters_2eproto_once,
      file_level_metadata_zetasql_2fpublic_2ftype_5fparameters_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace zetasql
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasql::TypeParametersProto* Arena::CreateMaybeMessage< ::zetasql::TypeParametersProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::TypeParametersProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::StringTypeParametersProto* Arena::CreateMaybeMessage< ::zetasql::StringTypeParametersProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::StringTypeParametersProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::NumericTypeParametersProto* Arena::CreateMaybeMessage< ::zetasql::NumericTypeParametersProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::NumericTypeParametersProto >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasql::ExtendedTypeParametersProto* Arena::CreateMaybeMessage< ::zetasql::ExtendedTypeParametersProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasql::ExtendedTypeParametersProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
